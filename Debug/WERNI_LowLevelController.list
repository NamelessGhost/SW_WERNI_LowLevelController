
WERNI_LowLevelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005688  08005688  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005688  08005688  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005688  08005688  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba0  20000060  080056f0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c00  080056f0  00021c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b9c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ec  00000000  00000000  00036c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003a260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001010  00000000  00000000  0003b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002075e  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad32  00000000  00000000  0005ce9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2551  00000000  00000000  00077bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005864  00000000  00000000  0014a124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080054ec 	.word	0x080054ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080054ec 	.word	0x080054ec

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <MX_FREERTOS_Init+0x18>)
 8000226:	2100      	movs	r1, #0
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <MX_FREERTOS_Init+0x1c>)
 800022a:	f002 fb45 	bl	80028b8 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <MX_FREERTOS_Init+0x20>)
 8000232:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	0800564c 	.word	0x0800564c
 800023c:	08000245 	.word	0x08000245
 8000240:	2000007c 	.word	0x2000007c

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800024c:	2120      	movs	r1, #32
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f000 fe49 	bl	8000ee8 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f002 fbbf 	bl	80029dc <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800025e:	e7f5      	b.n	800024c <StartDefaultTask+0x8>

08000260 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b08a      	sub	sp, #40	; 0x28
 8000264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b38      	ldr	r3, [pc, #224]	; (8000358 <MX_GPIO_Init+0xf8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027a:	4a37      	ldr	r2, [pc, #220]	; (8000358 <MX_GPIO_Init+0xf8>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000282:	4b35      	ldr	r3, [pc, #212]	; (8000358 <MX_GPIO_Init+0xf8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800028e:	4b32      	ldr	r3, [pc, #200]	; (8000358 <MX_GPIO_Init+0xf8>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	4a31      	ldr	r2, [pc, #196]	; (8000358 <MX_GPIO_Init+0xf8>)
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029a:	4b2f      	ldr	r3, [pc, #188]	; (8000358 <MX_GPIO_Init+0xf8>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <MX_GPIO_Init+0xf8>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	4a2b      	ldr	r2, [pc, #172]	; (8000358 <MX_GPIO_Init+0xf8>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b2:	4b29      	ldr	r3, [pc, #164]	; (8000358 <MX_GPIO_Init+0xf8>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002be:	4b26      	ldr	r3, [pc, #152]	; (8000358 <MX_GPIO_Init+0xf8>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	4a25      	ldr	r2, [pc, #148]	; (8000358 <MX_GPIO_Init+0xf8>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <MX_GPIO_Init+0xf8>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	f003 0302 	and.w	r3, r3, #2
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2120      	movs	r1, #32
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f000 fdd3 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80002ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	4818      	ldr	r0, [pc, #96]	; (800035c <MX_GPIO_Init+0xfc>)
 80002fa:	f000 fb6f 	bl	80009dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80002fe:	230c      	movs	r3, #12
 8000300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800030e:	230c      	movs	r3, #12
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f000 fb5e 	bl	80009dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000320:	2320      	movs	r3, #32
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2300      	movs	r3, #0
 800032e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	4619      	mov	r1, r3
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f000 fb4f 	bl	80009dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2105      	movs	r1, #5
 8000342:	2028      	movs	r0, #40	; 0x28
 8000344:	f000 fb08 	bl	8000958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000348:	2028      	movs	r0, #40	; 0x28
 800034a:	f000 fb2f 	bl	80009ac <HAL_NVIC_EnableIRQ>

}
 800034e:	bf00      	nop
 8000350:	3728      	adds	r7, #40	; 0x28
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	48000800 	.word	0x48000800

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 f9f3 	bl	800074e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f809 	bl	800037e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f7ff ff78 	bl	8000260 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000370:	f002 fa58 	bl	8002824 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000374:	f7ff ff54 	bl	8000220 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000378:	f002 fa78 	bl	800286c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800037c:	e7fe      	b.n	800037c <main+0x1c>

0800037e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b094      	sub	sp, #80	; 0x50
 8000382:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000384:	f107 0318 	add.w	r3, r7, #24
 8000388:	2238      	movs	r2, #56	; 0x38
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f004 ffd1 	bl	8005334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fded 	bl	8000f80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a6:	2302      	movs	r3, #2
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2340      	movs	r3, #64	; 0x40
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b8:	2302      	movs	r3, #2
 80003ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003bc:	2304      	movs	r3, #4
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003c0:	2355      	movs	r3, #85	; 0x55
 80003c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d0:	f107 0318 	add.w	r3, r7, #24
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fe97 	bl	8001108 <HAL_RCC_OscConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003e0:	f000 f82a 	bl	8000438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	230f      	movs	r3, #15
 80003e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	2303      	movs	r3, #3
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2104      	movs	r1, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 fa95 	bl	800192c <HAL_RCC_ClockConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000408:	f000 f816 	bl	8000438 <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3750      	adds	r7, #80	; 0x50
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d101      	bne.n	800042a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000426:	f000 f9ab 	bl	8000780 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40001000 	.word	0x40001000

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>

08000442 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_MspInit+0x50>)
 8000460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <HAL_MspInit+0x50>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6613      	str	r3, [r2, #96]	; 0x60
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x50>)
 800046c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x50>)
 8000478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047a:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <HAL_MspInit+0x50>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	6593      	str	r3, [r2, #88]	; 0x58
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_MspInit+0x50>)
 8000484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	210f      	movs	r1, #15
 8000492:	f06f 0001 	mvn.w	r0, #1
 8000496:	f000 fa5f 	bl	8000958 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800049a:	f000 fe25 	bl	80010e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08c      	sub	sp, #48	; 0x30
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <HAL_InitTick+0xc4>)
 80004be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <HAL_InitTick+0xc4>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6593      	str	r3, [r2, #88]	; 0x58
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <HAL_InitTick+0xc4>)
 80004ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d4:	f107 020c 	add.w	r2, r7, #12
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fca8 	bl	8001e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004e4:	f001 fc90 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 80004e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ec:	4a21      	ldr	r2, [pc, #132]	; (8000574 <HAL_InitTick+0xc8>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9b      	lsrs	r3, r3, #18
 80004f4:	3b01      	subs	r3, #1
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <HAL_InitTick+0xcc>)
 80004fa:	4a20      	ldr	r2, [pc, #128]	; (800057c <HAL_InitTick+0xd0>)
 80004fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <HAL_InitTick+0xcc>)
 8000500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000504:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000506:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <HAL_InitTick+0xcc>)
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <HAL_InitTick+0xcc>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <HAL_InitTick+0xcc>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <HAL_InitTick+0xcc>)
 800051a:	f001 fd13 	bl	8001f44 <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000528:	2b00      	cmp	r3, #0
 800052a:	d11b      	bne.n	8000564 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800052c:	4812      	ldr	r0, [pc, #72]	; (8000578 <HAL_InitTick+0xcc>)
 800052e:	f001 fdf5 	bl	800211c <HAL_TIM_Base_Start_IT>
 8000532:	4603      	mov	r3, r0
 8000534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000540:	2036      	movs	r0, #54	; 0x36
 8000542:	f000 fa33 	bl	80009ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d808      	bhi.n	800055e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800054c:	2200      	movs	r2, #0
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	2036      	movs	r0, #54	; 0x36
 8000552:	f000 fa01 	bl	8000958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_InitTick+0xd4>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e002      	b.n	8000564 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000568:	4618      	mov	r0, r3
 800056a:	3730      	adds	r7, #48	; 0x30
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	431bde83 	.word	0x431bde83
 8000578:	20000080 	.word	0x20000080
 800057c:	40001000 	.word	0x40001000
 8000580:	20000004 	.word	0x20000004

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005b8:	f000 fcbe 	bl	8000f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <TIM6_DAC_IRQHandler+0x10>)
 80005c6:	f001 fe5d 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000080 	.word	0x20000080

080005d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemInit+0x20>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <SystemInit+0x20>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490e      	ldr	r1, [pc, #56]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0b      	ldr	r4, [pc, #44]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000622:	f7ff ffd7 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000626:	f004 fee3 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062a:	f7ff fe99 	bl	8000360 <main>

0800062e <LoopForever>:

LoopForever:
    b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800063c:	08005690 	.word	0x08005690
  ldr r2, =_sbss
 8000640:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000644:	20001c00 	.word	0x20001c00

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>

0800064a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d104      	bne.n	8000662 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
 800065c:	f7ff feec 	bl	8000438 <Error_Handler>
 8000660:	e7fe      	b.n	8000660 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7a1b      	ldrb	r3, [r3, #8]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d904      	bls.n	8000674 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800066a:	b672      	cpsid	i
}
 800066c:	bf00      	nop
 800066e:	f7ff fee3 	bl	8000438 <Error_Handler>
 8000672:	e7fe      	b.n	8000672 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7a1b      	ldrb	r3, [r3, #8]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	b2d1      	uxtb	r1, r2
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7211      	strb	r1, [r2, #8]
 8000680:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000682:	f3ef 8211 	mrs	r2, BASEPRI
 8000686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	60fa      	str	r2, [r7, #12]
 8000698:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d104      	bne.n	80006c2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
 80006bc:	f7ff febc 	bl	8000438 <Error_Handler>
 80006c0:	e7fe      	b.n	80006c0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7a1b      	ldrb	r3, [r3, #8]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d904      	bls.n	80006e0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80006d6:	b672      	cpsid	i
}
 80006d8:	bf00      	nop
 80006da:	f7ff fead 	bl	8000438 <Error_Handler>
 80006de:	e7fe      	b.n	80006de <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80006f4:	bf00      	nop
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d104      	bne.n	8000716 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
 8000710:	f7ff fe92 	bl	8000438 <Error_Handler>
 8000714:	e7fe      	b.n	8000714 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff96 	bl	800064a <stm32_lock_acquire>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d104      	bne.n	800073e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
 8000738:	f7ff fe7e 	bl	8000438 <Error_Handler>
 800073c:	e7fe      	b.n	800073c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffb2 	bl	80006aa <stm32_lock_release>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f8dd 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800075e:	200f      	movs	r0, #15
 8000760:	f7ff fea4 	bl	80004ac <HAL_InitTick>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e001      	b.n	8000774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000770:	f7ff fe72 	bl	8000458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000774:	79fb      	ldrb	r3, [r7, #7]

}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4413      	add	r3, r2
 800078e:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x1c>)
 8000790:	6013      	str	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200000d8 	.word	0x200000d8
 80007a0:	20000008 	.word	0x20000008

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000d8 	.word	0x200000d8

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60d3      	str	r3, [r2, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db0b      	blt.n	800084a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 021f 	and.w	r2, r3, #31
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <__NVIC_EnableIRQ+0x38>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	2001      	movs	r0, #1
 8000842:	fa00 f202 	lsl.w	r2, r0, r2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	; 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d00f      	beq.n	8000946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b06      	cmp	r3, #6
 800092a:	d00c      	beq.n	8000946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b05      	cmp	r3, #5
 8000930:	d009      	beq.n	8000946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d006      	beq.n	8000946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d003      	beq.n	8000946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800093e:	21a6      	movs	r1, #166	; 0xa6
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000942:	f7ff fd7e 	bl	8000442 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff38 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08005510 	.word	0x08005510

08000958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d903      	bls.n	8000974 <HAL_NVIC_SetPriority+0x1c>
 800096c:	21be      	movs	r1, #190	; 0xbe
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <HAL_NVIC_SetPriority+0x50>)
 8000970:	f7ff fd67 	bl	8000442 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d903      	bls.n	8000982 <HAL_NVIC_SetPriority+0x2a>
 800097a:	21bf      	movs	r1, #191	; 0xbf
 800097c:	480a      	ldr	r0, [pc, #40]	; (80009a8 <HAL_NVIC_SetPriority+0x50>)
 800097e:	f7ff fd60 	bl	8000442 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000982:	f7ff ff3f 	bl	8000804 <__NVIC_GetPriorityGrouping>
 8000986:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f7ff ff8f 	bl	80008b0 <NVIC_EncodePriority>
 8000992:	4602      	mov	r2, r0
 8000994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff5e 	bl	800085c <__NVIC_SetPriority>
}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08005510 	.word	0x08005510

080009ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	da03      	bge.n	80009c6 <HAL_NVIC_EnableIRQ+0x1a>
 80009be:	21d2      	movs	r1, #210	; 0xd2
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_NVIC_EnableIRQ+0x2c>)
 80009c2:	f7ff fd3e 	bl	8000442 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff28 	bl	8000820 <__NVIC_EnableIRQ>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	08005510 	.word	0x08005510

080009dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f0:	d01b      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a38      	ldr	r2, [pc, #224]	; (8000ad8 <HAL_GPIO_Init+0xfc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d017      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a37      	ldr	r2, [pc, #220]	; (8000adc <HAL_GPIO_Init+0x100>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a36      	ldr	r2, [pc, #216]	; (8000ae0 <HAL_GPIO_Init+0x104>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00f      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a35      	ldr	r2, [pc, #212]	; (8000ae4 <HAL_GPIO_Init+0x108>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00b      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a34      	ldr	r2, [pc, #208]	; (8000ae8 <HAL_GPIO_Init+0x10c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a33      	ldr	r2, [pc, #204]	; (8000aec <HAL_GPIO_Init+0x110>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x4e>
 8000a22:	21a9      	movs	r1, #169	; 0xa9
 8000a24:	4832      	ldr	r0, [pc, #200]	; (8000af0 <HAL_GPIO_Init+0x114>)
 8000a26:	f7ff fd0c 	bl	8000442 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x64>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	0c1b      	lsrs	r3, r3, #16
 8000a3a:	041b      	lsls	r3, r3, #16
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x6c>
 8000a40:	21aa      	movs	r1, #170	; 0xaa
 8000a42:	482b      	ldr	r0, [pc, #172]	; (8000af0 <HAL_GPIO_Init+0x114>)
 8000a44:	f7ff fcfd 	bl	8000442 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 820a 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	f000 8205 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b11      	cmp	r3, #17
 8000a62:	f000 8200 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	f000 81fb 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b12      	cmp	r3, #18
 8000a76:	f000 81f6 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000a82:	f000 81f0 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000a8e:	f000 81ea 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000a9a:	f000 81e4 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000aa6:	f000 81de 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000ab2:	f000 81d8 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000abe:	f000 81d2 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	f000 81cd 	beq.w	8000e66 <HAL_GPIO_Init+0x48a>
 8000acc:	21ab      	movs	r1, #171	; 0xab
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_GPIO_Init+0x114>)
 8000ad0:	f7ff fcb7 	bl	8000442 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ad4:	e1c7      	b.n	8000e66 <HAL_GPIO_Init+0x48a>
 8000ad6:	bf00      	nop
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000c00 	.word	0x48000c00
 8000ae4:	48001000 	.word	0x48001000
 8000ae8:	48001400 	.word	0x48001400
 8000aec:	48001800 	.word	0x48001800
 8000af0:	0800554c 	.word	0x0800554c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 81aa 	beq.w	8000e60 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d005      	beq.n	8000b24 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d144      	bne.n	8000bae <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00f      	beq.n	8000b4c <HAL_GPIO_Init+0x170>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d00b      	beq.n	8000b4c <HAL_GPIO_Init+0x170>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d007      	beq.n	8000b4c <HAL_GPIO_Init+0x170>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x170>
 8000b44:	21bb      	movs	r1, #187	; 0xbb
 8000b46:	488b      	ldr	r0, [pc, #556]	; (8000d74 <HAL_GPIO_Init+0x398>)
 8000b48:	f7ff fc7b 	bl	8000442 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b82:	2201      	movs	r2, #1
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	f003 0201 	and.w	r2, r3, #1
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d027      	beq.n	8000c0a <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <HAL_GPIO_Init+0x1fe>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_Init+0x1fe>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x1fe>
 8000bd2:	21cc      	movs	r1, #204	; 0xcc
 8000bd4:	4867      	ldr	r0, [pc, #412]	; (8000d74 <HAL_GPIO_Init+0x398>)
 8000bd6:	f7ff fc34 	bl	8000442 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d14b      	bne.n	8000cae <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c1c:	d01b      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a55      	ldr	r2, [pc, #340]	; (8000d78 <HAL_GPIO_Init+0x39c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d017      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a54      	ldr	r2, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x3a0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d013      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a53      	ldr	r2, [pc, #332]	; (8000d80 <HAL_GPIO_Init+0x3a4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00f      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_GPIO_Init+0x3a8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d00b      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a51      	ldr	r2, [pc, #324]	; (8000d88 <HAL_GPIO_Init+0x3ac>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d007      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <HAL_GPIO_Init+0x3b0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x27a>
 8000c4e:	21d9      	movs	r1, #217	; 0xd9
 8000c50:	4848      	ldr	r0, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x398>)
 8000c52:	f7ff fbf6 	bl	8000442 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b0f      	cmp	r3, #15
 8000c5c:	d903      	bls.n	8000c66 <HAL_GPIO_Init+0x28a>
 8000c5e:	21da      	movs	r1, #218	; 0xda
 8000c60:	4844      	ldr	r0, [pc, #272]	; (8000d74 <HAL_GPIO_Init+0x398>)
 8000c62:	f7ff fbee 	bl	8000442 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80b8 	beq.w	8000e60 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <HAL_GPIO_Init+0x3b4>)
 8000cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_GPIO_Init+0x3b4>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_GPIO_Init+0x3b4>)
 8000cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d08:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <HAL_GPIO_Init+0x3b8>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d32:	d031      	beq.n	8000d98 <HAL_GPIO_Init+0x3bc>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_GPIO_Init+0x39c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d019      	beq.n	8000d70 <HAL_GPIO_Init+0x394>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_GPIO_Init+0x3a0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d013      	beq.n	8000d6c <HAL_GPIO_Init+0x390>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_GPIO_Init+0x3a4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d00d      	beq.n	8000d68 <HAL_GPIO_Init+0x38c>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_GPIO_Init+0x3a8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d007      	beq.n	8000d64 <HAL_GPIO_Init+0x388>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <HAL_GPIO_Init+0x3ac>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d101      	bne.n	8000d60 <HAL_GPIO_Init+0x384>
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	e01c      	b.n	8000d9a <HAL_GPIO_Init+0x3be>
 8000d60:	2306      	movs	r3, #6
 8000d62:	e01a      	b.n	8000d9a <HAL_GPIO_Init+0x3be>
 8000d64:	2304      	movs	r3, #4
 8000d66:	e018      	b.n	8000d9a <HAL_GPIO_Init+0x3be>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e016      	b.n	8000d9a <HAL_GPIO_Init+0x3be>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e014      	b.n	8000d9a <HAL_GPIO_Init+0x3be>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e012      	b.n	8000d9a <HAL_GPIO_Init+0x3be>
 8000d74:	0800554c 	.word	0x0800554c
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48000800 	.word	0x48000800
 8000d80:	48000c00 	.word	0x48000c00
 8000d84:	48001000 	.word	0x48001000
 8000d88:	48001400 	.word	0x48001400
 8000d8c:	48001800 	.word	0x48001800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	2300      	movs	r3, #0
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	f002 0203 	and.w	r2, r2, #3
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	4093      	lsls	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000daa:	4935      	ldr	r1, [pc, #212]	; (8000e80 <HAL_GPIO_Init+0x4a4>)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ddc:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_GPIO_Init+0x4a8>)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f47f ae3f 	bne.w	8000af4 <HAL_GPIO_Init+0x118>
  }
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010000 	.word	0x40010000
 8000e84:	40010400 	.word	0x40010400

08000e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <HAL_GPIO_WritePin+0x20>
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	0c1b      	lsrs	r3, r3, #16
 8000ea2:	041b      	lsls	r3, r3, #16
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <HAL_GPIO_WritePin+0x2a>
 8000ea8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <HAL_GPIO_WritePin+0x5c>)
 8000eae:	f7ff fac8 	bl	8000442 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000eb2:	787b      	ldrb	r3, [r7, #1]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_WritePin+0x40>
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d004      	beq.n	8000ec8 <HAL_GPIO_WritePin+0x40>
 8000ebe:	f240 119b 	movw	r1, #411	; 0x19b
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <HAL_GPIO_WritePin+0x5c>)
 8000ec4:	f7ff fabd 	bl	8000442 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0800554c 	.word	0x0800554c

08000ee8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <HAL_GPIO_TogglePin+0x1c>
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	0c1b      	lsrs	r3, r3, #16
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <HAL_GPIO_TogglePin+0x26>
 8000f04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <HAL_GPIO_TogglePin+0x4c>)
 8000f0a:	f7ff fa9a 	bl	8000442 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f14:	887a      	ldrh	r2, [r7, #2]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	041a      	lsls	r2, r3, #16
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	400b      	ands	r3, r1
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800554c 	.word	0x0800554c

08000f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f44:	695a      	ldr	r2, [r3, #20]
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f806 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f94:	d007      	beq.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9c:	d003      	beq.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000f9e:	219d      	movs	r1, #157	; 0x9d
 8000fa0:	484d      	ldr	r0, [pc, #308]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8000fa2:	f7ff fa4e 	bl	8000442 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d141      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fac:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb8:	d131      	bne.n	800101e <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fc0:	4a46      	ldr	r2, [pc, #280]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd2:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2232      	movs	r2, #50	; 0x32
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a3f      	ldr	r2, [pc, #252]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9b      	lsrs	r3, r3, #18
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff0:	e002      	b.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff8:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001004:	d102      	bne.n	800100c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f2      	bne.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001018:	d158      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e057      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001024:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800102e:	e04d      	b.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001036:	d141      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001044:	d131      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800104c:	4a23      	ldr	r2, [pc, #140]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001064:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2232      	movs	r2, #50	; 0x32
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800107c:	e002      	b.n	8001084 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3b01      	subs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001090:	d102      	bne.n	8001098 <HAL_PWREx_ControlVoltageScaling+0x118>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f2      	bne.n	800107e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a4:	d112      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e011      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010ba:	e007      	b.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ca:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	08005588 	.word	0x08005588
 80010dc:	40007000 	.word	0x40007000
 80010e0:	20000000 	.word	0x20000000
 80010e4:	431bde83 	.word	0x431bde83

080010e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6093      	str	r3, [r2, #8]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	f000 bc02 	b.w	8001920 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d022      	beq.n	800116a <HAL_RCC_OscConfig+0x62>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d11c      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d116      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d110      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10a      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
 8001160:	f240 1145 	movw	r1, #325	; 0x145
 8001164:	4892      	ldr	r0, [pc, #584]	; (80013b0 <HAL_RCC_OscConfig+0x2a8>)
 8001166:	f7ff f96c 	bl	8000442 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8089 	beq.w	800128a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <HAL_RCC_OscConfig+0x96>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d009      	beq.n	800119e <HAL_RCC_OscConfig+0x96>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001192:	d004      	beq.n	800119e <HAL_RCC_OscConfig+0x96>
 8001194:	f240 114b 	movw	r1, #331	; 0x14b
 8001198:	4885      	ldr	r0, [pc, #532]	; (80013b0 <HAL_RCC_OscConfig+0x2a8>)
 800119a:	f7ff f952 	bl	8000442 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119e:	4b85      	ldr	r3, [pc, #532]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a8:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b0c      	cmp	r3, #12
 80011b6:	d102      	bne.n	80011be <HAL_RCC_OscConfig+0xb6>
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d002      	beq.n	80011c4 <HAL_RCC_OscConfig+0xbc>
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d10b      	bne.n	80011dc <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <HAL_RCC_OscConfig+0x180>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d157      	bne.n	8001288 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e3a1      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d106      	bne.n	80011f4 <HAL_RCC_OscConfig+0xec>
 80011e6:	4b73      	ldr	r3, [pc, #460]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a72      	ldr	r2, [pc, #456]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0x128>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x110>
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6c      	ldr	r2, [pc, #432]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a69      	ldr	r2, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0x128>
 8001218:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a65      	ldr	r2, [pc, #404]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a62      	ldr	r2, [pc, #392]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fab4 	bl	80007a4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fab0 	bl	80007a4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e366      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x138>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff faa0 	bl	80007a4 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fa9c 	bl	80007a4 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e352      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x160>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8093 	beq.w	80013be <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d009      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1ac>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d004      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1ac>
 80012aa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80012ae:	4840      	ldr	r0, [pc, #256]	; (80013b0 <HAL_RCC_OscConfig+0x2a8>)
 80012b0:	f7ff f8c7 	bl	8000442 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d904      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1be>
 80012bc:	f240 1181 	movw	r1, #385	; 0x181
 80012c0:	483b      	ldr	r0, [pc, #236]	; (80013b0 <HAL_RCC_OscConfig+0x2a8>)
 80012c2:	f7ff f8be 	bl	8000442 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d102      	bne.n	80012e6 <HAL_RCC_OscConfig+0x1de>
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d002      	beq.n	80012ec <HAL_RCC_OscConfig+0x1e4>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d11f      	bne.n	800132c <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x1fc>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e30d      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	4928      	ldr	r1, [pc, #160]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_RCC_OscConfig+0x2b0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f8c5 	bl	80004ac <HAL_InitTick>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d049      	beq.n	80013bc <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e2f9      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fa30 	bl	80007a4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fa2c 	bl	80007a4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e2e2      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	490f      	ldr	r1, [pc, #60]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e020      	b.n	80013be <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fa0c 	bl	80007a4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fa08 	bl	80007a4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e2be      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x288>
 80013ae:	e006      	b.n	80013be <HAL_RCC_OscConfig+0x2b6>
 80013b0:	080055c4 	.word	0x080055c4
 80013b4:	40021000 	.word	0x40021000
 80013b8:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d049      	beq.n	800145e <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2dc>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d004      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2dc>
 80013da:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80013de:	48a3      	ldr	r0, [pc, #652]	; (800166c <HAL_RCC_OscConfig+0x564>)
 80013e0:	f7ff f82f 	bl	8000442 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01c      	beq.n	8001426 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ec:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80013ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f2:	4a9f      	ldr	r2, [pc, #636]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff f9d2 	bl	80007a4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff f9ce 	bl	80007a4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e284      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001416:	4b96      	ldr	r3, [pc, #600]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ef      	beq.n	8001404 <HAL_RCC_OscConfig+0x2fc>
 8001424:	e01b      	b.n	800145e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	4b92      	ldr	r3, [pc, #584]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142c:	4a90      	ldr	r2, [pc, #576]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff f9b5 	bl	80007a4 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff f9b1 	bl	80007a4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e267      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001450:	4b87      	ldr	r3, [pc, #540]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ef      	bne.n	800143e <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80b7 	beq.w	80015da <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_RCC_OscConfig+0x38a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d008      	beq.n	8001492 <HAL_RCC_OscConfig+0x38a>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d004      	beq.n	8001492 <HAL_RCC_OscConfig+0x38a>
 8001488:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800148c:	4877      	ldr	r0, [pc, #476]	; (800166c <HAL_RCC_OscConfig+0x564>)
 800148e:	f7fe ffd8 	bl	8000442 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x39a>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x39c>
 80014a2:	2300      	movs	r3, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00d      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	4b71      	ldr	r3, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	4a70      	ldr	r2, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6593      	str	r3, [r2, #88]	; 0x58
 80014b4:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c0:	2301      	movs	r3, #1
 80014c2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c4:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <HAL_RCC_OscConfig+0x56c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d118      	bne.n	8001502 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d0:	4b68      	ldr	r3, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x56c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a67      	ldr	r2, [pc, #412]	; (8001674 <HAL_RCC_OscConfig+0x56c>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014dc:	f7ff f962 	bl	80007a4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e4:	f7ff f95e 	bl	80007a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e214      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f6:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <HAL_RCC_OscConfig+0x56c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_RCC_OscConfig+0x414>
 800150a:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151a:	e024      	b.n	8001566 <HAL_RCC_OscConfig+0x45e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d110      	bne.n	8001546 <HAL_RCC_OscConfig+0x43e>
 8001524:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001534:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001544:	e00f      	b.n	8001566 <HAL_RCC_OscConfig+0x45e>
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154c:	4a48      	ldr	r2, [pc, #288]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155c:	4a44      	ldr	r2, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d016      	beq.n	800159c <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff f919 	bl	80007a4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff f915 	bl	80007a4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1c9      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158c:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ed      	beq.n	8001576 <HAL_RCC_OscConfig+0x46e>
 800159a:	e015      	b.n	80015c8 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff f902 	bl	80007a4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff f8fe 	bl	80007a4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1b2      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80015bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ed      	bne.n	80015a4 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015c8:	7ffb      	ldrb	r3, [r7, #31]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d105      	bne.n	80015da <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ce:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 80015d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04f      	beq.n	8001686 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d008      	beq.n	8001600 <HAL_RCC_OscConfig+0x4f8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d004      	beq.n	8001600 <HAL_RCC_OscConfig+0x4f8>
 80015f6:	f240 213b 	movw	r1, #571	; 0x23b
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <HAL_RCC_OscConfig+0x564>)
 80015fc:	f7fe ff21 	bl	8000442 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01c      	beq.n	8001642 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800160a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff f8c4 	bl	80007a4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001620:	f7ff f8c0 	bl	80007a4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e176      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ef      	beq.n	8001620 <HAL_RCC_OscConfig+0x518>
 8001640:	e021      	b.n	8001686 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 8001644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_OscConfig+0x568>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff f8a7 	bl	80007a4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001658:	e00e      	b.n	8001678 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800165a:	f7ff f8a3 	bl	80007a4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d907      	bls.n	8001678 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e159      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
 800166c:	080055c4 	.word	0x080055c4
 8001670:	40021000 	.word	0x40021000
 8001674:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001678:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 800167a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e9      	bne.n	800165a <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x5a0>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d008      	beq.n	80016a8 <HAL_RCC_OscConfig+0x5a0>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d004      	beq.n	80016a8 <HAL_RCC_OscConfig+0x5a0>
 800169e:	f44f 7119 	mov.w	r1, #612	; 0x264
 80016a2:	4880      	ldr	r0, [pc, #512]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 80016a4:	f7fe fecd 	bl	8000442 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 8136 	beq.w	800191e <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	f000 80ea 	beq.w	8001894 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	f040 80bd 	bne.w	8001844 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00c      	beq.n	80016ec <HAL_RCC_OscConfig+0x5e4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d008      	beq.n	80016ec <HAL_RCC_OscConfig+0x5e4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d004      	beq.n	80016ec <HAL_RCC_OscConfig+0x5e4>
 80016e2:	f240 216e 	movw	r1, #622	; 0x26e
 80016e6:	486f      	ldr	r0, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 80016e8:	f7fe feab 	bl	8000442 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_RCC_OscConfig+0x5f4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d904      	bls.n	8001706 <HAL_RCC_OscConfig+0x5fe>
 80016fc:	f240 216f 	movw	r1, #623	; 0x26f
 8001700:	4868      	ldr	r0, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 8001702:	f7fe fe9e 	bl	8000442 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	2b07      	cmp	r3, #7
 800170c:	d903      	bls.n	8001716 <HAL_RCC_OscConfig+0x60e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	2b7f      	cmp	r3, #127	; 0x7f
 8001714:	d904      	bls.n	8001720 <HAL_RCC_OscConfig+0x618>
 8001716:	f44f 711c 	mov.w	r1, #624	; 0x270
 800171a:	4862      	ldr	r0, [pc, #392]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 800171c:	f7fe fe91 	bl	8000442 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	2b01      	cmp	r3, #1
 8001726:	d903      	bls.n	8001730 <HAL_RCC_OscConfig+0x628>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b1f      	cmp	r3, #31
 800172e:	d904      	bls.n	800173a <HAL_RCC_OscConfig+0x632>
 8001730:	f240 2171 	movw	r1, #625	; 0x271
 8001734:	485b      	ldr	r0, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 8001736:	f7fe fe84 	bl	8000442 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	2b02      	cmp	r3, #2
 8001740:	d010      	beq.n	8001764 <HAL_RCC_OscConfig+0x65c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	2b04      	cmp	r3, #4
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x65c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	2b06      	cmp	r3, #6
 8001750:	d008      	beq.n	8001764 <HAL_RCC_OscConfig+0x65c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	2b08      	cmp	r3, #8
 8001758:	d004      	beq.n	8001764 <HAL_RCC_OscConfig+0x65c>
 800175a:	f240 2172 	movw	r1, #626	; 0x272
 800175e:	4851      	ldr	r0, [pc, #324]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 8001760:	f7fe fe6f 	bl	8000442 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	2b02      	cmp	r3, #2
 800176a:	d010      	beq.n	800178e <HAL_RCC_OscConfig+0x686>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	2b04      	cmp	r3, #4
 8001772:	d00c      	beq.n	800178e <HAL_RCC_OscConfig+0x686>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	2b06      	cmp	r3, #6
 800177a:	d008      	beq.n	800178e <HAL_RCC_OscConfig+0x686>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	2b08      	cmp	r3, #8
 8001782:	d004      	beq.n	800178e <HAL_RCC_OscConfig+0x686>
 8001784:	f240 2173 	movw	r1, #627	; 0x273
 8001788:	4846      	ldr	r0, [pc, #280]	; (80018a4 <HAL_RCC_OscConfig+0x79c>)
 800178a:	f7fe fe5a 	bl	8000442 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a43      	ldr	r2, [pc, #268]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff f803 	bl	80007a4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7fe ffff 	bl	80007a4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0b5      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c0:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0x7a0>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6a11      	ldr	r1, [r2, #32]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d0:	3a01      	subs	r2, #1
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017da:	0212      	lsls	r2, r2, #8
 80017dc:	4311      	orrs	r1, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017e2:	0852      	lsrs	r2, r2, #1
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0552      	lsls	r2, r2, #21
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ee:	0852      	lsrs	r2, r2, #1
 80017f0:	3a01      	subs	r2, #1
 80017f2:	0652      	lsls	r2, r2, #25
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017fa:	06d2      	lsls	r2, r2, #27
 80017fc:	430a      	orrs	r2, r1
 80017fe:	4928      	ldr	r1, [pc, #160]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001800:	4313      	orrs	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7fe ffc2 	bl	80007a4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7fe ffbe 	bl	80007a4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e074      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x71c>
 8001842:	e06c      	b.n	800191e <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 800184a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001862:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7fe ff9a 	bl	80007a4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7fe ff96 	bl	80007a4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04c      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x798>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x76c>
 8001892:	e044      	b.n	800191e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e03f      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	080055c4 	.word	0x080055c4
 80018a8:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCC_OscConfig+0x820>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d12c      	bne.n	800191a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	3b01      	subs	r3, #1
 80018cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d123      	bne.n	800191a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11b      	bne.n	800191a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d113      	bne.n	800191a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d109      	bne.n	800191a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e1e2      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x30>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 030f 	bic.w	r3, r3, #15
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_RCC_ClockConfig+0x3a>
 800195c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001960:	4869      	ldr	r0, [pc, #420]	; (8001b08 <HAL_RCC_ClockConfig+0x1dc>)
 8001962:	f7fe fd6e 	bl	8000442 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d031      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d02e      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d02b      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d028      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d025      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d022      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b06      	cmp	r3, #6
 800198e:	d01f      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b07      	cmp	r3, #7
 8001994:	d01c      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b08      	cmp	r3, #8
 800199a:	d019      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b09      	cmp	r3, #9
 80019a0:	d016      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b0b      	cmp	r3, #11
 80019ac:	d010      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d00d      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b0d      	cmp	r3, #13
 80019b8:	d00a      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b0e      	cmp	r3, #14
 80019be:	d007      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	d004      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa4>
 80019c6:	f240 310d 	movw	r1, #781	; 0x30d
 80019ca:	484f      	ldr	r0, [pc, #316]	; (8001b08 <HAL_RCC_ClockConfig+0x1dc>)
 80019cc:	f7fe fd39 	bl	8000442 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <HAL_RCC_ClockConfig+0x1e0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d910      	bls.n	8001a00 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_RCC_ClockConfig+0x1e0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	4949      	ldr	r1, [pc, #292]	; (8001b0c <HAL_RCC_ClockConfig+0x1e0>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1e0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e184      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 808e 	beq.w	8001b2a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00c      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x104>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d008      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x104>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d004      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x104>
 8001a26:	f44f 7149 	mov.w	r1, #804	; 0x324
 8001a2a:	4837      	ldr	r0, [pc, #220]	; (8001b08 <HAL_RCC_ClockConfig+0x1dc>)
 8001a2c:	f7fe fd09 	bl	8000442 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d129      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e160      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a48:	f000 fa36 	bl	8001eb8 <RCC_GetSysClockFreqFromPLLSource>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_RCC_ClockConfig+0x1e8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d93f      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d033      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d12f      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e024      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e132      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e12a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ab4:	f000 f93a 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <HAL_RCC_ClockConfig+0x1e8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d909      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	490b      	ldr	r1, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1e4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae8:	f7fe fe5c 	bl	80007a4 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e013      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7fe fe58 	bl	80007a4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d90a      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e101      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
 8001b06:	bf00      	nop
 8001b08:	080055c4 	.word	0x080055c4
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	4b7e      	ldr	r3, [pc, #504]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 020c 	and.w	r2, r3, #12
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d1e2      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04c      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b42:	4b74      	ldr	r3, [pc, #464]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4a73      	ldr	r2, [pc, #460]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001b48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4c:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b5a:	4b6e      	ldr	r3, [pc, #440]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b62:	4a6c      	ldr	r2, [pc, #432]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001b64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b68:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d024      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b80      	cmp	r3, #128	; 0x80
 8001b78:	d020      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b90      	cmp	r3, #144	; 0x90
 8001b80:	d01c      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2ba0      	cmp	r3, #160	; 0xa0
 8001b88:	d018      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2bb0      	cmp	r3, #176	; 0xb0
 8001b90:	d014      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2bc0      	cmp	r3, #192	; 0xc0
 8001b98:	d010      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2bd0      	cmp	r3, #208	; 0xd0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2be0      	cmp	r3, #224	; 0xe0
 8001ba8:	d008      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2bf0      	cmp	r3, #240	; 0xf0
 8001bb0:	d004      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x290>
 8001bb2:	f240 317b 	movw	r1, #891	; 0x37b
 8001bb6:	4858      	ldr	r0, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x3ec>)
 8001bb8:	f7fe fc43 	bl	8000442 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4952      	ldr	r1, [pc, #328]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001be0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be2:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <HAL_RCC_ClockConfig+0x3f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d21d      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_RCC_ClockConfig+0x3f0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 020f 	bic.w	r2, r3, #15
 8001bf8:	4948      	ldr	r1, [pc, #288]	; (8001d1c <HAL_RCC_ClockConfig+0x3f0>)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c00:	f7fe fdd0 	bl	80007a4 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7fe fdcc 	bl	80007a4 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e075      	b.n	8001d0a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_RCC_ClockConfig+0x3f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1ed      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d025      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d018      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x346>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c48:	d013      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x346>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c52:	d00e      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x346>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x346>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c66:	d004      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x346>
 8001c68:	f240 319d 	movw	r1, #925	; 0x39d
 8001c6c:	482a      	ldr	r0, [pc, #168]	; (8001d18 <HAL_RCC_ClockConfig+0x3ec>)
 8001c6e:	f7fe fbe8 	bl	8000442 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4925      	ldr	r1, [pc, #148]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d026      	beq.n	8001cde <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d018      	beq.n	8001cca <HAL_RCC_ClockConfig+0x39e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca0:	d013      	beq.n	8001cca <HAL_RCC_ClockConfig+0x39e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001caa:	d00e      	beq.n	8001cca <HAL_RCC_ClockConfig+0x39e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x39e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cbe:	d004      	beq.n	8001cca <HAL_RCC_ClockConfig+0x39e>
 8001cc0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001cc4:	4814      	ldr	r0, [pc, #80]	; (8001d18 <HAL_RCC_ClockConfig+0x3ec>)
 8001cc6:	f7fe fbbc 	bl	8000442 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cde:	f000 f825 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x3e8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490c      	ldr	r1, [pc, #48]	; (8001d20 <HAL_RCC_ClockConfig+0x3f4>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x3f8>)
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x3fc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fbd2 	bl	80004ac <HAL_InitTick>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080055c4 	.word	0x080055c4
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	08005670 	.word	0x08005670
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e047      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e03e      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d136      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3301      	adds	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8a:	68d2      	ldr	r2, [r2, #12]
 8001d8c:	0a12      	lsrs	r2, r2, #8
 8001d8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
      break;
 8001d98:	e00c      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	0a12      	lsrs	r2, r2, #8
 8001da8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
      break;
 8001db2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0e5b      	lsrs	r3, r3, #25
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e001      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dd4:	693b      	ldr	r3, [r7, #16]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	00f42400 	.word	0x00f42400
 8001dec:	016e3600 	.word	0x016e3600

08001df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08005680 	.word	0x08005680

08001e34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d104      	bne.n	8001e4e <HAL_RCC_GetClockConfig+0x1a>
 8001e44:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8001e48:	4818      	ldr	r0, [pc, #96]	; (8001eac <HAL_RCC_GetClockConfig+0x78>)
 8001e4a:	f7fe fafa 	bl	8000442 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <HAL_RCC_GetClockConfig+0x2a>
 8001e54:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8001e58:	4814      	ldr	r0, [pc, #80]	; (8001eac <HAL_RCC_GetClockConfig+0x78>)
 8001e5a:	f7fe faf2 	bl	8000442 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	220f      	movs	r2, #15
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCC_GetClockConfig+0x80>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	601a      	str	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	080055c4 	.word	0x080055c4
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d10c      	bne.n	8001ef6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee6:	68d2      	ldr	r2, [r2, #12]
 8001ee8:	0a12      	lsrs	r2, r2, #8
 8001eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
    break;
 8001ef4:	e00c      	b.n	8001f10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	0a12      	lsrs	r2, r2, #8
 8001f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    break;
 8001f0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0e5b      	lsrs	r3, r3, #25
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f2a:	687b      	ldr	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	016e3600 	.word	0x016e3600
 8001f40:	00f42400 	.word	0x00f42400

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0be      	b.n	80020d4 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a60      	ldr	r2, [pc, #384]	; (80020dc <HAL_TIM_Base_Init+0x198>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d036      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d031      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	; (80020e0 <HAL_TIM_Base_Init+0x19c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d02c      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_TIM_Base_Init+0x1a0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d027      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a59      	ldr	r2, [pc, #356]	; (80020e8 <HAL_TIM_Base_Init+0x1a4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d022      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_TIM_Base_Init+0x1a8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01d      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a56      	ldr	r2, [pc, #344]	; (80020f0 <HAL_TIM_Base_Init+0x1ac>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d018      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_TIM_Base_Init+0x1b0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_TIM_Base_Init+0x1b4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00e      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_TIM_Base_Init+0x1b8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a50      	ldr	r2, [pc, #320]	; (8002100 <HAL_TIM_Base_Init+0x1bc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d004      	beq.n	8001fce <HAL_TIM_Base_Init+0x8a>
 8001fc4:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001fc8:	484e      	ldr	r0, [pc, #312]	; (8002104 <HAL_TIM_Base_Init+0x1c0>)
 8001fca:	f7fe fa3a 	bl	8000442 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d014      	beq.n	8002000 <HAL_TIM_Base_Init+0xbc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d010      	beq.n	8002000 <HAL_TIM_Base_Init+0xbc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d00c      	beq.n	8002000 <HAL_TIM_Base_Init+0xbc>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d008      	beq.n	8002000 <HAL_TIM_Base_Init+0xbc>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b60      	cmp	r3, #96	; 0x60
 8001ff4:	d004      	beq.n	8002000 <HAL_TIM_Base_Init+0xbc>
 8001ff6:	f240 1123 	movw	r1, #291	; 0x123
 8001ffa:	4842      	ldr	r0, [pc, #264]	; (8002104 <HAL_TIM_Base_Init+0x1c0>)
 8001ffc:	f7fe fa21 	bl	8000442 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_TIM_Base_Init+0xe2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002010:	d009      	beq.n	8002026 <HAL_TIM_Base_Init+0xe2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201a:	d004      	beq.n	8002026 <HAL_TIM_Base_Init+0xe2>
 800201c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002020:	4838      	ldr	r0, [pc, #224]	; (8002104 <HAL_TIM_Base_Init+0x1c0>)
 8002022:	f7fe fa0e 	bl	8000442 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_TIM_Base_Init+0xfc>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b80      	cmp	r3, #128	; 0x80
 8002034:	d004      	beq.n	8002040 <HAL_TIM_Base_Init+0xfc>
 8002036:	f240 1125 	movw	r1, #293	; 0x125
 800203a:	4832      	ldr	r0, [pc, #200]	; (8002104 <HAL_TIM_Base_Init+0x1c0>)
 800203c:	f7fe fa01 	bl	8000442 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f857 	bl	8002108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f000 fab1 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40001000 	.word	0x40001000
 80020ec:	40001400 	.word	0x40001400
 80020f0:	40013400 	.word	0x40013400
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40014400 	.word	0x40014400
 80020fc:	40014800 	.word	0x40014800
 8002100:	40015000 	.word	0x40015000
 8002104:	080055fc 	.word	0x080055fc

08002108 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_TIM_Base_Start_IT+0x138>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d036      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002136:	d031      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a46      	ldr	r2, [pc, #280]	; (8002258 <HAL_TIM_Base_Start_IT+0x13c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02c      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a45      	ldr	r2, [pc, #276]	; (800225c <HAL_TIM_Base_Start_IT+0x140>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d027      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a43      	ldr	r2, [pc, #268]	; (8002260 <HAL_TIM_Base_Start_IT+0x144>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d022      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a42      	ldr	r2, [pc, #264]	; (8002264 <HAL_TIM_Base_Start_IT+0x148>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d01d      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a40      	ldr	r2, [pc, #256]	; (8002268 <HAL_TIM_Base_Start_IT+0x14c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d018      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a3f      	ldr	r2, [pc, #252]	; (800226c <HAL_TIM_Base_Start_IT+0x150>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <HAL_TIM_Base_Start_IT+0x154>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00e      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <HAL_TIM_Base_Start_IT+0x158>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <HAL_TIM_Base_Start_IT+0x15c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002192:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002196:	4839      	ldr	r0, [pc, #228]	; (800227c <HAL_TIM_Base_Start_IT+0x160>)
 8002198:	f7fe f953 	bl	8000442 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d001      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e04f      	b.n	800224c <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <HAL_TIM_Base_Start_IT+0x138>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xee>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d6:	d018      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xee>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_TIM_Base_Start_IT+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xee>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_TIM_Base_Start_IT+0x140>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xee>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_TIM_Base_Start_IT+0x14c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xee>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_TIM_Base_Start_IT+0x150>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xee>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_TIM_Base_Start_IT+0x15c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d115      	bne.n	8002236 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_TIM_Base_Start_IT+0x164>)
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d015      	beq.n	8002248 <HAL_TIM_Base_Start_IT+0x12c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d011      	beq.n	8002248 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	e008      	b.n	8002248 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e000      	b.n	800224a <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40001000 	.word	0x40001000
 8002264:	40001400 	.word	0x40001400
 8002268:	40013400 	.word	0x40013400
 800226c:	40014000 	.word	0x40014000
 8002270:	40014400 	.word	0x40014400
 8002274:	40014800 	.word	0x40014800
 8002278:	40015000 	.word	0x40015000
 800227c:	080055fc 	.word	0x080055fc
 8002280:	00010007 	.word	0x00010007

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f965 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f957 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f968 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0204 	mvn.w	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f93b 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f92d 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f93e 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f911 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f903 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f914 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b10      	cmp	r3, #16
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0210 	mvn.w	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8e7 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8d9 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8ea 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe f806 	bl	8000414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f978 	bl	8002724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002442:	d10e      	bne.n	8002462 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d107      	bne.n	8002462 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800245a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f96b 	bl	8002738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d10e      	bne.n	800248e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d107      	bne.n	800248e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f898 	bl	80025be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b20      	cmp	r3, #32
 800249a:	d10e      	bne.n	80024ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d107      	bne.n	80024ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0220 	mvn.w	r2, #32
 80024b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f92b 	bl	8002710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c8:	d10f      	bne.n	80024ea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d8:	d107      	bne.n	80024ea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80024e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f931 	bl	800274c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f8:	d10f      	bne.n	800251a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f923 	bl	8002760 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002528:	d10f      	bne.n	800254a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d107      	bne.n	800254a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f915 	bl	8002774 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002558:	d10f      	bne.n	800257a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002568:	d107      	bne.n	800257a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f907 	bl	8002788 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a42      	ldr	r2, [pc, #264]	; (80026f0 <TIM_Base_SetConfig+0x11c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d00f      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <TIM_Base_SetConfig+0x120>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00b      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3e      	ldr	r2, [pc, #248]	; (80026f8 <TIM_Base_SetConfig+0x124>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3d      	ldr	r2, [pc, #244]	; (80026fc <TIM_Base_SetConfig+0x128>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3c      	ldr	r2, [pc, #240]	; (8002700 <TIM_Base_SetConfig+0x12c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d108      	bne.n	8002626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <TIM_Base_SetConfig+0x11c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d01b      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2e      	ldr	r2, [pc, #184]	; (80026f4 <TIM_Base_SetConfig+0x120>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d017      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <TIM_Base_SetConfig+0x124>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <TIM_Base_SetConfig+0x128>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2c      	ldr	r2, [pc, #176]	; (8002704 <TIM_Base_SetConfig+0x130>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <TIM_Base_SetConfig+0x134>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a2a      	ldr	r2, [pc, #168]	; (800270c <TIM_Base_SetConfig+0x138>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0x9a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <TIM_Base_SetConfig+0x12c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <TIM_Base_SetConfig+0x11c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <TIM_Base_SetConfig+0x100>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <TIM_Base_SetConfig+0x128>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00f      	beq.n	80026d4 <TIM_Base_SetConfig+0x100>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <TIM_Base_SetConfig+0x130>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0x100>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <TIM_Base_SetConfig+0x134>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x100>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a11      	ldr	r2, [pc, #68]	; (800270c <TIM_Base_SetConfig+0x138>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x100>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <TIM_Base_SetConfig+0x12c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	615a      	str	r2, [r3, #20]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40013400 	.word	0x40013400
 8002700:	40015000 	.word	0x40015000
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800

08002710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <__NVIC_SetPriority>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <SysTick_Handler+0x1c>)
 80027f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027f8:	f001 fd28 	bl	800424c <xTaskGetSchedulerState>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002802:	f002 fb11 	bl	8004e28 <xPortSysTickHandler>
  }
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010

08002810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002814:	2100      	movs	r1, #0
 8002816:	f06f 0004 	mvn.w	r0, #4
 800281a:	f7ff ffbf 	bl	800279c <__NVIC_SetPriority>
#endif
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282a:	f3ef 8305 	mrs	r3, IPSR
 800282e:	603b      	str	r3, [r7, #0]
  return(result);
 8002830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002836:	f06f 0305 	mvn.w	r3, #5
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	e00c      	b.n	8002858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <osKernelInitialize+0x44>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <osKernelInitialize+0x44>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800284c:	2300      	movs	r3, #0
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	e002      	b.n	8002858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002858:	687b      	ldr	r3, [r7, #4]
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	200000dc 	.word	0x200000dc

0800286c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002872:	f3ef 8305 	mrs	r3, IPSR
 8002876:	603b      	str	r3, [r7, #0]
  return(result);
 8002878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800287e:	f06f 0305 	mvn.w	r3, #5
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e010      	b.n	80028a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <osKernelStart+0x48>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d109      	bne.n	80028a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800288e:	f7ff ffbf 	bl	8002810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <osKernelStart+0x48>)
 8002894:	2202      	movs	r2, #2
 8002896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002898:	f001 f87c 	bl	8003994 <vTaskStartScheduler>
      stat = osOK;
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	e002      	b.n	80028a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200000dc 	.word	0x200000dc

080028b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	; 0x38
 80028bc:	af04      	add	r7, sp, #16
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c8:	f3ef 8305 	mrs	r3, IPSR
 80028cc:	617b      	str	r3, [r7, #20]
  return(result);
 80028ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d17e      	bne.n	80029d2 <osThreadNew+0x11a>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d07b      	beq.n	80029d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028de:	2318      	movs	r3, #24
 80028e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d045      	beq.n	800297e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <osThreadNew+0x48>
        name = attr->name;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <osThreadNew+0x6e>
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b38      	cmp	r3, #56	; 0x38
 8002918:	d805      	bhi.n	8002926 <osThreadNew+0x6e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <osThreadNew+0x72>
        return (NULL);
 8002926:	2300      	movs	r3, #0
 8002928:	e054      	b.n	80029d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00e      	beq.n	8002960 <osThreadNew+0xa8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2ba7      	cmp	r3, #167	; 0xa7
 8002948:	d90a      	bls.n	8002960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <osThreadNew+0xa8>
        mem = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e010      	b.n	8002982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10c      	bne.n	8002982 <osThreadNew+0xca>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <osThreadNew+0xca>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <osThreadNew+0xca>
          mem = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	e001      	b.n	8002982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d110      	bne.n	80029aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002990:	9202      	str	r2, [sp, #8]
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fe0c 	bl	80035bc <xTaskCreateStatic>
 80029a4:	4603      	mov	r3, r0
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e013      	b.n	80029d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d110      	bne.n	80029d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fe57 	bl	8003676 <xTaskCreate>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <osThreadNew+0x11a>
            hTask = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029d2:	693b      	ldr	r3, [r7, #16]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e4:	f3ef 8305 	mrs	r3, IPSR
 80029e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <osDelay+0x1c>
    stat = osErrorISR;
 80029f0:	f06f 0305 	mvn.w	r3, #5
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e007      	b.n	8002a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ff92 	bl	800392c <vTaskDelay>
    }
  }

  return (stat);
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <vApplicationGetIdleTaskMemory+0x30>)
 8002a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200000e0 	.word	0x200000e0
 8002a44:	20000188 	.word	0x20000188

08002a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <vApplicationGetTimerTaskMemory+0x30>)
 8002a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a66:	601a      	str	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	20000388 	.word	0x20000388
 8002a78:	20000430 	.word	0x20000430

08002a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0208 	add.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0208 	add.w	r2, r3, #8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f103 0208 	add.w	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	601a      	str	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d103      	bne.n	8002b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e00c      	b.n	8002b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3308      	adds	r3, #8
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e002      	b.n	8002b4c <vListInsert+0x2e>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d2f6      	bcs.n	8002b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6892      	ldr	r2, [r2, #8]
 8002ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6852      	ldr	r2, [r2, #4]
 8002bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d103      	bne.n	8002bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericReset+0x2a>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	60bb      	str	r3, [r7, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c0e:	f002 f879 	bl	8004d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	68f9      	ldr	r1, [r7, #12]
 8002c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	441a      	add	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	; 0xff
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d114      	bne.n	8002c8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01a      	beq.n	8002ca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3310      	adds	r3, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 f929 	bl	8003ec8 <xTaskRemoveFromEventList>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <xQueueGenericReset+0xcc>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	e009      	b.n	8002ca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3310      	adds	r3, #16
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fef2 	bl	8002a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3324      	adds	r3, #36	; 0x24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff feed 	bl	8002a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ca2:	f002 f85f 	bl	8004d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <xQueueGenericCreateStatic+0x52>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <xQueueGenericCreateStatic+0x56>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueGenericCreateStatic+0x58>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	623b      	str	r3, [r7, #32]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <xQueueGenericCreateStatic+0x7e>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <xQueueGenericCreateStatic+0x82>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <xQueueGenericCreateStatic+0x84>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	61fb      	str	r3, [r7, #28]
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d52:	2350      	movs	r3, #80	; 0x50
 8002d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b50      	cmp	r3, #80	; 0x50
 8002d5a:	d00a      	beq.n	8002d72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	61bb      	str	r3, [r7, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	e7fe      	b.n	8002d70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f805 	bl	8002da4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3730      	adds	r7, #48	; 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e002      	b.n	8002dc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	f7ff ff05 	bl	8002be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08e      	sub	sp, #56	; 0x38
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueGenericSend+0x32>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <xQueueGenericSend+0x40>
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <xQueueGenericSend+0x44>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <xQueueGenericSend+0x46>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <xQueueGenericSend+0x60>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d103      	bne.n	8002e5a <xQueueGenericSend+0x6e>
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <xQueueGenericSend+0x72>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <xQueueGenericSend+0x74>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	623b      	str	r3, [r7, #32]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e7a:	f001 f9e7 	bl	800424c <xTaskGetSchedulerState>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <xQueueGenericSend+0x9e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <xQueueGenericSend+0xa2>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueGenericSend+0xa4>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xQueueGenericSend+0xbe>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61fb      	str	r3, [r7, #28]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eaa:	f001 ff2b 	bl	8004d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <xQueueGenericSend+0xd4>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d129      	bne.n	8002f14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec6:	f000 fa0b 	bl	80032e0 <prvCopyDataToQueue>
 8002eca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	3324      	adds	r3, #36	; 0x24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fff5 	bl	8003ec8 <xTaskRemoveFromEventList>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <xQueueGenericSend+0x1f8>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	e00a      	b.n	8002f0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <xQueueGenericSend+0x1f8>)
 8002efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f0c:	f001 ff2a 	bl	8004d64 <vPortExitCritical>
				return pdPASS;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e063      	b.n	8002fdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f1a:	f001 ff23 	bl	8004d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e05c      	b.n	8002fdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f82f 	bl	8003f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f36:	f001 ff15 	bl	8004d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f3a:	f000 fd9b 	bl	8003a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f3e:	f001 fee1 	bl	8004d04 <vPortEnterCritical>
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d103      	bne.n	8002f58 <xQueueGenericSend+0x16c>
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d103      	bne.n	8002f6e <xQueueGenericSend+0x182>
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f6e:	f001 fef9 	bl	8004d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f72:	1d3a      	adds	r2, r7, #4
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f81e 	bl	8003fbc <xTaskCheckForTimeOut>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d124      	bne.n	8002fd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f88:	f000 faa2 	bl	80034d0 <prvIsQueueFull>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	3310      	adds	r3, #16
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 ff44 	bl	8003e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa2:	f000 fa2d 	bl	8003400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fa6:	f000 fd73 	bl	8003a90 <xTaskResumeAll>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af7c 	bne.w	8002eaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <xQueueGenericSend+0x1f8>)
 8002fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	e772      	b.n	8002eaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc6:	f000 fa1b 	bl	8003400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fca:	f000 fd61 	bl	8003a90 <xTaskResumeAll>
 8002fce:	e76c      	b.n	8002eaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd2:	f000 fa15 	bl	8003400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fd6:	f000 fd5b 	bl	8003a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3738      	adds	r7, #56	; 0x38
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b090      	sub	sp, #64	; 0x40
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <xQueueGenericSendFromISR+0x3c>
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <xQueueGenericSendFromISR+0x40>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <xQueueGenericSendFromISR+0x42>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d103      	bne.n	8003052 <xQueueGenericSendFromISR+0x6a>
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <xQueueGenericSendFromISR+0x6e>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <xQueueGenericSendFromISR+0x70>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	623b      	str	r3, [r7, #32]
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003072:	f001 ff29 	bl	8004ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8003076:	f3ef 8211 	mrs	r2, BASEPRI
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	61fa      	str	r2, [r7, #28]
 800308c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800308e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <xQueueGenericSendFromISR+0xbc>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d12f      	bne.n	8003104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030ba:	f000 f911 	bl	80032e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d112      	bne.n	80030ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fef7 	bl	8003ec8 <xTaskRemoveFromEventList>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e007      	b.n	80030fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030f2:	3301      	adds	r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	b25a      	sxtb	r2, r3
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030fe:	2301      	movs	r3, #1
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003102:	e001      	b.n	8003108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003104:	2300      	movs	r3, #0
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f383 8811 	msr	BASEPRI, r3
}
 8003112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003116:	4618      	mov	r0, r3
 8003118:	3740      	adds	r7, #64	; 0x40
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <xQueueReceive+0x30>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	623b      	str	r3, [r7, #32]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueReceive+0x3e>
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueReceive+0x42>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueReceive+0x44>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <xQueueReceive+0x5e>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61fb      	str	r3, [r7, #28]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800317e:	f001 f865 	bl	800424c <xTaskGetSchedulerState>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <xQueueReceive+0x6e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <xQueueReceive+0x72>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueReceive+0x74>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xQueueReceive+0x8e>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	61bb      	str	r3, [r7, #24]
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ae:	f001 fda9 	bl	8004d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01f      	beq.n	80031fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c2:	f000 f8f7 	bl	80033b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00f      	beq.n	80031f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	3310      	adds	r3, #16
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fe74 	bl	8003ec8 <xTaskRemoveFromEventList>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <xQueueReceive+0x1bc>)
 80031e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031f6:	f001 fdb5 	bl	8004d64 <vPortExitCritical>
				return pdPASS;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e069      	b.n	80032d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003204:	f001 fdae 	bl	8004d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003208:	2300      	movs	r3, #0
 800320a:	e062      	b.n	80032d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003212:	f107 0310 	add.w	r3, r7, #16
 8003216:	4618      	mov	r0, r3
 8003218:	f000 feba 	bl	8003f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003220:	f001 fda0 	bl	8004d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003224:	f000 fc26 	bl	8003a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003228:	f001 fd6c 	bl	8004d04 <vPortEnterCritical>
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <xQueueReceive+0x122>
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d103      	bne.n	8003258 <xQueueReceive+0x138>
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003258:	f001 fd84 	bl	8004d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800325c:	1d3a      	adds	r2, r7, #4
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fea9 	bl	8003fbc <xTaskCheckForTimeOut>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d123      	bne.n	80032b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003272:	f000 f917 	bl	80034a4 <prvIsQueueEmpty>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fdcf 	bl	8003e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800328a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328c:	f000 f8b8 	bl	8003400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003290:	f000 fbfe 	bl	8003a90 <xTaskResumeAll>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d189      	bne.n	80031ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <xQueueReceive+0x1bc>)
 800329c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	e780      	b.n	80031ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ae:	f000 f8a7 	bl	8003400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032b2:	f000 fbed 	bl	8003a90 <xTaskResumeAll>
 80032b6:	e77a      	b.n	80031ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ba:	f000 f8a1 	bl	8003400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032be:	f000 fbe7 	bl	8003a90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c4:	f000 f8ee 	bl	80034a4 <prvIsQueueEmpty>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f43f af6f 	beq.w	80031ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3730      	adds	r7, #48	; 0x30
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d14d      	bne.n	80033a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 ffbc 	bl	8004288 <xTaskPriorityDisinherit>
 8003310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e043      	b.n	80033a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d119      	bne.n	8003354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6858      	ldr	r0, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	461a      	mov	r2, r3
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	f002 f884 	bl	8005438 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	441a      	add	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	d32b      	bcc.n	80033a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e026      	b.n	80033a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68d8      	ldr	r0, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	461a      	mov	r2, r3
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	f002 f86a 	bl	8005438 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	425b      	negs	r3, r3
 800336e:	441a      	add	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d207      	bcs.n	8003390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	425b      	negs	r3, r3
 800338a:	441a      	add	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d105      	bne.n	80033a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	3b01      	subs	r3, #1
 80033a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033aa:	697b      	ldr	r3, [r7, #20]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d303      	bcc.n	80033e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68d9      	ldr	r1, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	461a      	mov	r2, r3
 80033f2:	6838      	ldr	r0, [r7, #0]
 80033f4:	f002 f820 	bl	8005438 <memcpy>
	}
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003408:	f001 fc7c 	bl	8004d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003414:	e011      	b.n	800343a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3324      	adds	r3, #36	; 0x24
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fd50 	bl	8003ec8 <xTaskRemoveFromEventList>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800342e:	f000 fe27 	bl	8004080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	3b01      	subs	r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	dce9      	bgt.n	8003416 <prvUnlockQueue+0x16>
 8003442:	e000      	b.n	8003446 <prvUnlockQueue+0x46>
					break;
 8003444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800344e:	f001 fc89 	bl	8004d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003452:	f001 fc57 	bl	8004d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800345c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800345e:	e011      	b.n	8003484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3310      	adds	r3, #16
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fd2b 	bl	8003ec8 <xTaskRemoveFromEventList>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003478:	f000 fe02 	bl	8004080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800347c:	7bbb      	ldrb	r3, [r7, #14]
 800347e:	3b01      	subs	r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003488:	2b00      	cmp	r3, #0
 800348a:	dce9      	bgt.n	8003460 <prvUnlockQueue+0x60>
 800348c:	e000      	b.n	8003490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800348e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	22ff      	movs	r2, #255	; 0xff
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003498:	f001 fc64 	bl	8004d64 <vPortExitCritical>
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034ac:	f001 fc2a 	bl	8004d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e001      	b.n	80034c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034c2:	f001 fc4f 	bl	8004d64 <vPortExitCritical>

	return xReturn;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034d8:	f001 fc14 	bl	8004d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d102      	bne.n	80034ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e001      	b.n	80034f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034f2:	f001 fc37 	bl	8004d64 <vPortExitCritical>

	return xReturn;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e014      	b.n	800353a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003510:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <vQueueAddToRegistry+0x50>)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800351c:	490c      	ldr	r1, [pc, #48]	; (8003550 <vQueueAddToRegistry+0x50>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <vQueueAddToRegistry+0x50>)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003532:	e006      	b.n	8003542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b07      	cmp	r3, #7
 800353e:	d9e7      	bls.n	8003510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000830 	.word	0x20000830

08003554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003564:	f001 fbce 	bl	8004d04 <vPortEnterCritical>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800356e:	b25b      	sxtb	r3, r3
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d103      	bne.n	800357e <vQueueWaitForMessageRestricted+0x2a>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003584:	b25b      	sxtb	r3, r3
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d103      	bne.n	8003594 <vQueueWaitForMessageRestricted+0x40>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003594:	f001 fbe6 	bl	8004d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3324      	adds	r3, #36	; 0x24
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fc61 	bl	8003e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff26 	bl	8003400 <prvUnlockQueue>
	}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08e      	sub	sp, #56	; 0x38
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	623b      	str	r3, [r7, #32]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xTaskCreateStatic+0x46>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	61fb      	str	r3, [r7, #28]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003602:	23a8      	movs	r3, #168	; 0xa8
 8003604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2ba8      	cmp	r3, #168	; 0xa8
 800360a:	d00a      	beq.n	8003622 <xTaskCreateStatic+0x66>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	61bb      	str	r3, [r7, #24]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01e      	beq.n	8003668 <xTaskCreateStatic+0xac>
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	2202      	movs	r2, #2
 800363e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003642:	2300      	movs	r3, #0
 8003644:	9303      	str	r3, [sp, #12]
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f850 	bl	8003700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003662:	f000 f8f3 	bl	800384c <prvAddNewTaskToReadyList>
 8003666:	e001      	b.n	800366c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800366c:	697b      	ldr	r3, [r7, #20]
	}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08c      	sub	sp, #48	; 0x30
 800367a:	af04      	add	r7, sp, #16
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fc5c 	bl	8004f48 <pvPortMalloc>
 8003690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003698:	20a8      	movs	r0, #168	; 0xa8
 800369a:	f001 fc55 	bl	8004f48 <pvPortMalloc>
 800369e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
 80036ac:	e005      	b.n	80036ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f001 fd16 	bl	80050e0 <vPortFree>
 80036b4:	e001      	b.n	80036ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d017      	beq.n	80036f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	2300      	movs	r3, #0
 80036cc:	9303      	str	r3, [sp, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	9302      	str	r3, [sp, #8]
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f80e 	bl	8003700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e4:	69f8      	ldr	r0, [r7, #28]
 80036e6:	f000 f8b1 	bl	800384c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036ea:	2301      	movs	r3, #1
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e002      	b.n	80036f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036f6:	69bb      	ldr	r3, [r7, #24]
	}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	461a      	mov	r2, r3
 8003718:	21a5      	movs	r1, #165	; 0xa5
 800371a:	f001 fe0b 	bl	8005334 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003728:	3b01      	subs	r3, #1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	617b      	str	r3, [r7, #20]
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01f      	beq.n	800379e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e012      	b.n	800378a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	7819      	ldrb	r1, [r3, #0]
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	3334      	adds	r3, #52	; 0x34
 8003774:	460a      	mov	r2, r1
 8003776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d9e9      	bls.n	8003764 <prvInitialiseNewTask+0x64>
 8003790:	e000      	b.n	8003794 <prvInitialiseNewTask+0x94>
			{
				break;
 8003792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800379c:	e003      	b.n	80037a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	2b37      	cmp	r3, #55	; 0x37
 80037aa:	d901      	bls.n	80037b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037ac:	2337      	movs	r3, #55	; 0x37
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	2200      	movs	r2, #0
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	3304      	adds	r3, #4
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f978 	bl	8002abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	3318      	adds	r3, #24
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f973 	bl	8002abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	3354      	adds	r3, #84	; 0x54
 8003800:	224c      	movs	r2, #76	; 0x4c
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fd95 	bl	8005334 <memset>
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	4a0c      	ldr	r2, [pc, #48]	; (8003840 <prvInitialiseNewTask+0x140>)
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <prvInitialiseNewTask+0x144>)
 8003814:	65da      	str	r2, [r3, #92]	; 0x5c
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <prvInitialiseNewTask+0x148>)
 800381a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	69b8      	ldr	r0, [r7, #24]
 8003822:	f001 f941 	bl	8004aa8 <pxPortInitialiseStack>
 8003826:	4602      	mov	r2, r0
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20001ac8 	.word	0x20001ac8
 8003844:	20001b30 	.word	0x20001b30
 8003848:	20001b98 	.word	0x20001b98

0800384c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003854:	f001 fa56 	bl	8004d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 8003860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003862:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386a:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d110      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003878:	f000 fc26 	bl	80040c8 <prvInitialiseTaskLists>
 800387c:	e00d      	b.n	800389a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <prvAddNewTaskToReadyList+0xcc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d802      	bhi.n	800389a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 80038a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <prvAddNewTaskToReadyList+0xd4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d903      	bls.n	80038c0 <prvAddNewTaskToReadyList+0x74>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <prvAddNewTaskToReadyList+0xd4>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <prvAddNewTaskToReadyList+0xd8>)
 80038ce:	441a      	add	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f7ff f8fd 	bl	8002ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038dc:	f001 fa42 	bl	8004d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <prvAddNewTaskToReadyList+0xcc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00e      	beq.n	8003906 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d207      	bcs.n	8003906 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <prvAddNewTaskToReadyList+0xdc>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000d44 	.word	0x20000d44
 8003914:	20000870 	.word	0x20000870
 8003918:	20000d50 	.word	0x20000d50
 800391c:	20000d60 	.word	0x20000d60
 8003920:	20000d4c 	.word	0x20000d4c
 8003924:	20000874 	.word	0x20000874
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <vTaskDelay+0x60>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <vTaskDelay+0x30>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	60bb      	str	r3, [r7, #8]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800395c:	f000 f88a 	bl	8003a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fcfe 	bl	8004364 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003968:	f000 f892 	bl	8003a90 <xTaskResumeAll>
 800396c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <vTaskDelay+0x64>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000d6c 	.word	0x20000d6c
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039a2:	463a      	mov	r2, r7
 80039a4:	1d39      	adds	r1, r7, #4
 80039a6:	f107 0308 	add.w	r3, r7, #8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f832 	bl	8002a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	9202      	str	r2, [sp, #8]
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	460a      	mov	r2, r1
 80039c2:	4924      	ldr	r1, [pc, #144]	; (8003a54 <vTaskStartScheduler+0xc0>)
 80039c4:	4824      	ldr	r0, [pc, #144]	; (8003a58 <vTaskStartScheduler+0xc4>)
 80039c6:	f7ff fdf9 	bl	80035bc <xTaskCreateStatic>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <vTaskStartScheduler+0xc8>)
 80039ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <vTaskStartScheduler+0xc8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e001      	b.n	80039e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d102      	bne.n	80039ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039e8:	f000 fd10 	bl	800440c <xTimerCreateTimerTask>
 80039ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d11b      	bne.n	8003a2c <vTaskStartScheduler+0x98>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
}
 8003a06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <vTaskStartScheduler+0xcc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3354      	adds	r3, #84	; 0x54
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <vTaskStartScheduler+0xd0>)
 8003a10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <vTaskStartScheduler+0xd4>)
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <vTaskStartScheduler+0xd8>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <vTaskStartScheduler+0xdc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a26:	f001 f8cb 	bl	8004bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a2a:	e00e      	b.n	8003a4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d10a      	bne.n	8003a4a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	60fb      	str	r3, [r7, #12]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <vTaskStartScheduler+0xb4>
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	08005634 	.word	0x08005634
 8003a58:	08004099 	.word	0x08004099
 8003a5c:	20000d68 	.word	0x20000d68
 8003a60:	20000870 	.word	0x20000870
 8003a64:	2000005c 	.word	0x2000005c
 8003a68:	20000d64 	.word	0x20000d64
 8003a6c:	20000d50 	.word	0x20000d50
 8003a70:	20000d48 	.word	0x20000d48

08003a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <vTaskSuspendAll+0x18>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a03      	ldr	r2, [pc, #12]	; (8003a8c <vTaskSuspendAll+0x18>)
 8003a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000d6c 	.word	0x20000d6c

08003a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a9e:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <xTaskResumeAll+0x118>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskResumeAll+0x2c>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	603b      	str	r3, [r7, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003abc:	f001 f922 	bl	8004d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <xTaskResumeAll+0x118>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <xTaskResumeAll+0x118>)
 8003ac8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <xTaskResumeAll+0x118>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d162      	bne.n	8003b98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <xTaskResumeAll+0x11c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d05e      	beq.n	8003b98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ada:	e02f      	b.n	8003b3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <xTaskResumeAll+0x120>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f851 	bl	8002b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f84c 	bl	8002b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <xTaskResumeAll+0x124>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d903      	bls.n	8003b0c <xTaskResumeAll+0x7c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <xTaskResumeAll+0x124>)
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <xTaskResumeAll+0x128>)
 8003b1a:	441a      	add	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f7fe ffd7 	bl	8002ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <xTaskResumeAll+0x12c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <xTaskResumeAll+0x130>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <xTaskResumeAll+0x120>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1cb      	bne.n	8003adc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b4a:	f000 fb5f 	bl	800420c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <xTaskResumeAll+0x134>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b5a:	f000 f847 	bl	8003bec <xTaskIncrementTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <xTaskResumeAll+0x130>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f1      	bne.n	8003b5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <xTaskResumeAll+0x134>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b7c:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <xTaskResumeAll+0x130>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <xTaskResumeAll+0x138>)
 8003b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b98:	f001 f8e4 	bl	8004d64 <vPortExitCritical>

	return xAlreadyYielded;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000d6c 	.word	0x20000d6c
 8003bac:	20000d44 	.word	0x20000d44
 8003bb0:	20000d04 	.word	0x20000d04
 8003bb4:	20000d4c 	.word	0x20000d4c
 8003bb8:	20000874 	.word	0x20000874
 8003bbc:	20000870 	.word	0x20000870
 8003bc0:	20000d58 	.word	0x20000d58
 8003bc4:	20000d54 	.word	0x20000d54
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <xTaskGetTickCount+0x1c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bd8:	687b      	ldr	r3, [r7, #4]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000d48 	.word	0x20000d48

08003bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf6:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <xTaskIncrementTick+0x148>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 808f 	bne.w	8003d1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c00:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <xTaskIncrementTick+0x14c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <xTaskIncrementTick+0x14c>)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d120      	bne.n	8003c56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c14:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <xTaskIncrementTick+0x150>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	603b      	str	r3, [r7, #0]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xTaskIncrementTick+0x46>
 8003c34:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <xTaskIncrementTick+0x150>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <xTaskIncrementTick+0x154>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <xTaskIncrementTick+0x150>)
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4a3f      	ldr	r2, [pc, #252]	; (8003d40 <xTaskIncrementTick+0x154>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <xTaskIncrementTick+0x158>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <xTaskIncrementTick+0x158>)
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	f000 fadb 	bl	800420c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c56:	4b3c      	ldr	r3, [pc, #240]	; (8003d48 <xTaskIncrementTick+0x15c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d349      	bcc.n	8003cf4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c60:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <xTaskIncrementTick+0x150>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <xTaskIncrementTick+0x15c>)
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	601a      	str	r2, [r3, #0]
					break;
 8003c72:	e03f      	b.n	8003cf4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c74:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <xTaskIncrementTick+0x150>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d203      	bcs.n	8003c94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <xTaskIncrementTick+0x15c>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c92:	e02f      	b.n	8003cf4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe ff79 	bl	8002b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe ff70 	bl	8002b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <xTaskIncrementTick+0x160>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d903      	bls.n	8003cc4 <xTaskIncrementTick+0xd8>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <xTaskIncrementTick+0x160>)
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <xTaskIncrementTick+0x164>)
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f7fe fefb 	bl	8002ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <xTaskIncrementTick+0x168>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3b8      	bcc.n	8003c60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf2:	e7b5      	b.n	8003c60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <xTaskIncrementTick+0x168>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4915      	ldr	r1, [pc, #84]	; (8003d50 <xTaskIncrementTick+0x164>)
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d901      	bls.n	8003d10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <xTaskIncrementTick+0x16c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e004      	b.n	8003d28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <xTaskIncrementTick+0x170>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	4a0d      	ldr	r2, [pc, #52]	; (8003d5c <xTaskIncrementTick+0x170>)
 8003d26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d28:	697b      	ldr	r3, [r7, #20]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000d6c 	.word	0x20000d6c
 8003d38:	20000d48 	.word	0x20000d48
 8003d3c:	20000cfc 	.word	0x20000cfc
 8003d40:	20000d00 	.word	0x20000d00
 8003d44:	20000d5c 	.word	0x20000d5c
 8003d48:	20000d64 	.word	0x20000d64
 8003d4c:	20000d4c 	.word	0x20000d4c
 8003d50:	20000874 	.word	0x20000874
 8003d54:	20000870 	.word	0x20000870
 8003d58:	20000d58 	.word	0x20000d58
 8003d5c:	20000d54 	.word	0x20000d54

08003d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d66:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <vTaskSwitchContext+0xb0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <vTaskSwitchContext+0xb4>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d74:	e046      	b.n	8003e04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <vTaskSwitchContext+0xb4>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <vTaskSwitchContext+0xb8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e010      	b.n	8003da6 <vTaskSwitchContext+0x46>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <vTaskSwitchContext+0x3e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	491d      	ldr	r1, [pc, #116]	; (8003e1c <vTaskSwitchContext+0xbc>)
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0e4      	beq.n	8003d84 <vTaskSwitchContext+0x24>
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <vTaskSwitchContext+0xbc>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3308      	adds	r3, #8
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d104      	bne.n	8003dea <vTaskSwitchContext+0x8a>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <vTaskSwitchContext+0xc0>)
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <vTaskSwitchContext+0xb8>)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <vTaskSwitchContext+0xc0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3354      	adds	r3, #84	; 0x54
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <vTaskSwitchContext+0xc4>)
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20000d6c 	.word	0x20000d6c
 8003e14:	20000d58 	.word	0x20000d58
 8003e18:	20000d4c 	.word	0x20000d4c
 8003e1c:	20000874 	.word	0x20000874
 8003e20:	20000870 	.word	0x20000870
 8003e24:	2000005c 	.word	0x2000005c

08003e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60fb      	str	r3, [r7, #12]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <vTaskPlaceOnEventList+0x44>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3318      	adds	r3, #24
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe fe61 	bl	8002b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	f000 fa80 	bl	8004364 <prvAddCurrentTaskToDelayedList>
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000870 	.word	0x20000870

08003e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	617b      	str	r3, [r7, #20]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3318      	adds	r3, #24
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7fe fe18 	bl	8002ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f000 fa55 	bl	8004364 <prvAddCurrentTaskToDelayedList>
	}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000870 	.word	0x20000870

08003ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60fb      	str	r3, [r7, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3318      	adds	r3, #24
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fe49 	bl	8002b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <xTaskRemoveFromEventList+0xb0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d11d      	bne.n	8003f42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fe40 	bl	8002b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <xTaskRemoveFromEventList+0xb4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d903      	bls.n	8003f24 <xTaskRemoveFromEventList+0x5c>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <xTaskRemoveFromEventList+0xb4>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <xTaskRemoveFromEventList+0xb8>)
 8003f32:	441a      	add	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fdcb 	bl	8002ad6 <vListInsertEnd>
 8003f40:	e005      	b.n	8003f4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3318      	adds	r3, #24
 8003f46:	4619      	mov	r1, r3
 8003f48:	480e      	ldr	r0, [pc, #56]	; (8003f84 <xTaskRemoveFromEventList+0xbc>)
 8003f4a:	f7fe fdc4 	bl	8002ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <xTaskRemoveFromEventList+0xc0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d905      	bls.n	8003f68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <xTaskRemoveFromEventList+0xc4>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e001      	b.n	8003f6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f6c:	697b      	ldr	r3, [r7, #20]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000d6c 	.word	0x20000d6c
 8003f7c:	20000d4c 	.word	0x20000d4c
 8003f80:	20000874 	.word	0x20000874
 8003f84:	20000d04 	.word	0x20000d04
 8003f88:	20000870 	.word	0x20000870
 8003f8c:	20000d58 	.word	0x20000d58

08003f90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <vTaskInternalSetTimeOutState+0x24>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <vTaskInternalSetTimeOutState+0x28>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20000d5c 	.word	0x20000d5c
 8003fb8:	20000d48 	.word	0x20000d48

08003fbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	613b      	str	r3, [r7, #16]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	60fb      	str	r3, [r7, #12]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ffe:	f000 fe81 	bl	8004d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <xTaskCheckForTimeOut+0xbc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d102      	bne.n	8004022 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e023      	b.n	800406a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <xTaskCheckForTimeOut+0xc0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d007      	beq.n	800403e <xTaskCheckForTimeOut+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	429a      	cmp	r2, r3
 8004036:	d302      	bcc.n	800403e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004038:	2301      	movs	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	e015      	b.n	800406a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	d20b      	bcs.n	8004060 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff9b 	bl	8003f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e004      	b.n	800406a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800406a:	f000 fe7b 	bl	8004d64 <vPortExitCritical>

	return xReturn;
 800406e:	69fb      	ldr	r3, [r7, #28]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000d48 	.word	0x20000d48
 800407c:	20000d5c 	.word	0x20000d5c

08004080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <vTaskMissedYield+0x14>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	20000d58 	.word	0x20000d58

08004098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040a0:	f000 f852 	bl	8004148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <prvIdleTask+0x28>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d9f9      	bls.n	80040a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <prvIdleTask+0x2c>)
 80040ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040bc:	e7f0      	b.n	80040a0 <prvIdleTask+0x8>
 80040be:	bf00      	nop
 80040c0:	20000874 	.word	0x20000874
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	e00c      	b.n	80040ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <prvInitialiseTaskLists+0x60>)
 80040e0:	4413      	add	r3, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fcca 	bl	8002a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3301      	adds	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b37      	cmp	r3, #55	; 0x37
 80040f2:	d9ef      	bls.n	80040d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040f4:	480d      	ldr	r0, [pc, #52]	; (800412c <prvInitialiseTaskLists+0x64>)
 80040f6:	f7fe fcc1 	bl	8002a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040fa:	480d      	ldr	r0, [pc, #52]	; (8004130 <prvInitialiseTaskLists+0x68>)
 80040fc:	f7fe fcbe 	bl	8002a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004100:	480c      	ldr	r0, [pc, #48]	; (8004134 <prvInitialiseTaskLists+0x6c>)
 8004102:	f7fe fcbb 	bl	8002a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004106:	480c      	ldr	r0, [pc, #48]	; (8004138 <prvInitialiseTaskLists+0x70>)
 8004108:	f7fe fcb8 	bl	8002a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800410c:	480b      	ldr	r0, [pc, #44]	; (800413c <prvInitialiseTaskLists+0x74>)
 800410e:	f7fe fcb5 	bl	8002a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <prvInitialiseTaskLists+0x78>)
 8004114:	4a05      	ldr	r2, [pc, #20]	; (800412c <prvInitialiseTaskLists+0x64>)
 8004116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <prvInitialiseTaskLists+0x7c>)
 800411a:	4a05      	ldr	r2, [pc, #20]	; (8004130 <prvInitialiseTaskLists+0x68>)
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000874 	.word	0x20000874
 800412c:	20000cd4 	.word	0x20000cd4
 8004130:	20000ce8 	.word	0x20000ce8
 8004134:	20000d04 	.word	0x20000d04
 8004138:	20000d18 	.word	0x20000d18
 800413c:	20000d30 	.word	0x20000d30
 8004140:	20000cfc 	.word	0x20000cfc
 8004144:	20000d00 	.word	0x20000d00

08004148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800414e:	e019      	b.n	8004184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004150:	f000 fdd8 	bl	8004d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <prvCheckTasksWaitingTermination+0x50>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fd15 	bl	8002b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <prvCheckTasksWaitingTermination+0x54>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3b01      	subs	r3, #1
 800416c:	4a0b      	ldr	r2, [pc, #44]	; (800419c <prvCheckTasksWaitingTermination+0x54>)
 800416e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <prvCheckTasksWaitingTermination+0x58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3b01      	subs	r3, #1
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <prvCheckTasksWaitingTermination+0x58>)
 8004178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800417a:	f000 fdf3 	bl	8004d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f810 	bl	80041a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <prvCheckTasksWaitingTermination+0x58>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e1      	bne.n	8004150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000d18 	.word	0x20000d18
 800419c:	20000d44 	.word	0x20000d44
 80041a0:	20000d2c 	.word	0x20000d2c

080041a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3354      	adds	r3, #84	; 0x54
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f8c7 	bl	8005344 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 ff8b 	bl	80050e0 <vPortFree>
				vPortFree( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 ff88 	bl	80050e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041d0:	e018      	b.n	8004204 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d103      	bne.n	80041e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 ff7f 	bl	80050e0 <vPortFree>
	}
 80041e2:	e00f      	b.n	8004204 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d00a      	beq.n	8004204 <prvDeleteTCB+0x60>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	60fb      	str	r3, [r7, #12]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <prvDeleteTCB+0x5e>
	}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <prvResetNextTaskUnblockTime+0x38>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d104      	bne.n	8004226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <prvResetNextTaskUnblockTime+0x3c>)
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004224:	e008      	b.n	8004238 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <prvResetNextTaskUnblockTime+0x38>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <prvResetNextTaskUnblockTime+0x3c>)
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000cfc 	.word	0x20000cfc
 8004248:	20000d64 	.word	0x20000d64

0800424c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <xTaskGetSchedulerState+0x34>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800425a:	2301      	movs	r3, #1
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e008      	b.n	8004272 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <xTaskGetSchedulerState+0x38>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004268:	2302      	movs	r3, #2
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	e001      	b.n	8004272 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004272:	687b      	ldr	r3, [r7, #4]
	}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	20000d50 	.word	0x20000d50
 8004284:	20000d6c 	.word	0x20000d6c

08004288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d056      	beq.n	800434c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800429e:	4b2e      	ldr	r3, [pc, #184]	; (8004358 <xTaskPriorityDisinherit+0xd0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d00a      	beq.n	80042be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60bb      	str	r3, [r7, #8]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d02c      	beq.n	800434c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d128      	bne.n	800434c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fc46 	bl	8002b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <xTaskPriorityDisinherit+0xd4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d903      	bls.n	800432c <xTaskPriorityDisinherit+0xa4>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a0c      	ldr	r2, [pc, #48]	; (800435c <xTaskPriorityDisinherit+0xd4>)
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a09      	ldr	r2, [pc, #36]	; (8004360 <xTaskPriorityDisinherit+0xd8>)
 800433a:	441a      	add	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7fe fbc7 	bl	8002ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800434c:	697b      	ldr	r3, [r7, #20]
	}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000870 	.word	0x20000870
 800435c:	20000d4c 	.word	0x20000d4c
 8004360:	20000874 	.word	0x20000874

08004364 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800436e:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fc08 	bl	8002b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d10a      	bne.n	800439e <prvAddCurrentTaskToDelayedList+0x3a>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4819      	ldr	r0, [pc, #100]	; (80043fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004398:	f7fe fb9d 	bl	8002ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800439c:	e026      	b.n	80043ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043a6:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d209      	bcs.n	80043ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7fe fbab 	bl	8002b1e <vListInsert>
}
 80043c8:	e010      	b.n	80043ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7fe fba1 	bl	8002b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d202      	bcs.n	80043ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000d48 	.word	0x20000d48
 80043f8:	20000870 	.word	0x20000870
 80043fc:	20000d30 	.word	0x20000d30
 8004400:	20000d00 	.word	0x20000d00
 8004404:	20000cfc 	.word	0x20000cfc
 8004408:	20000d64 	.word	0x20000d64

0800440c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004416:	f000 fb07 	bl	8004a28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <xTimerCreateTimerTask+0x80>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d021      	beq.n	8004466 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800442a:	1d3a      	adds	r2, r7, #4
 800442c:	f107 0108 	add.w	r1, r7, #8
 8004430:	f107 030c 	add.w	r3, r7, #12
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fb07 	bl	8002a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	9202      	str	r2, [sp, #8]
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	2302      	movs	r3, #2
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	460a      	mov	r2, r1
 800444c:	4910      	ldr	r1, [pc, #64]	; (8004490 <xTimerCreateTimerTask+0x84>)
 800444e:	4811      	ldr	r0, [pc, #68]	; (8004494 <xTimerCreateTimerTask+0x88>)
 8004450:	f7ff f8b4 	bl	80035bc <xTaskCreateStatic>
 8004454:	4603      	mov	r3, r0
 8004456:	4a10      	ldr	r2, [pc, #64]	; (8004498 <xTimerCreateTimerTask+0x8c>)
 8004458:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <xTimerCreateTimerTask+0x8c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004462:	2301      	movs	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	613b      	str	r3, [r7, #16]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004482:	697b      	ldr	r3, [r7, #20]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000da0 	.word	0x20000da0
 8004490:	0800563c 	.word	0x0800563c
 8004494:	080045d1 	.word	0x080045d1
 8004498:	20000da4 	.word	0x20000da4

0800449c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	623b      	str	r3, [r7, #32]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <xTimerGenericCommand+0x98>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02a      	beq.n	8004528 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	dc18      	bgt.n	8004516 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044e4:	f7ff feb2 	bl	800424c <xTaskGetSchedulerState>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d109      	bne.n	8004502 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <xTimerGenericCommand+0x98>)
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f107 0110 	add.w	r1, r7, #16
 80044f6:	2300      	movs	r3, #0
 80044f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fa:	f7fe fc77 	bl	8002dec <xQueueGenericSend>
 80044fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004500:	e012      	b.n	8004528 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <xTimerGenericCommand+0x98>)
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f107 0110 	add.w	r1, r7, #16
 800450a:	2300      	movs	r3, #0
 800450c:	2200      	movs	r2, #0
 800450e:	f7fe fc6d 	bl	8002dec <xQueueGenericSend>
 8004512:	6278      	str	r0, [r7, #36]	; 0x24
 8004514:	e008      	b.n	8004528 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <xTimerGenericCommand+0x98>)
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	f107 0110 	add.w	r1, r7, #16
 800451e:	2300      	movs	r3, #0
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	f7fe fd61 	bl	8002fe8 <xQueueGenericSendFromISR>
 8004526:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800452a:	4618      	mov	r0, r3
 800452c:	3728      	adds	r7, #40	; 0x28
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000da0 	.word	0x20000da0

08004538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <prvProcessExpiredTimer+0x94>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3304      	adds	r3, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe fb1d 	bl	8002b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d022      	beq.n	80045aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	18d1      	adds	r1, r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f000 f8d1 	bl	8004718 <prvInsertTimerInActiveList>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01f      	beq.n	80045bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800457c:	2300      	movs	r3, #0
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	2100      	movs	r1, #0
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff88 	bl	800449c <xTimerGenericCommand>
 800458c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d113      	bne.n	80045bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	4798      	blx	r3
}
 80045c4:	bf00      	nop
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000d98 	.word	0x20000d98

080045d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f857 	bl	8004690 <prvGetNextExpireTime>
 80045e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4619      	mov	r1, r3
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f803 	bl	80045f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045ee:	f000 f8d5 	bl	800479c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045f2:	e7f1      	b.n	80045d8 <prvTimerTask+0x8>

080045f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045fe:	f7ff fa39 	bl	8003a74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f866 	bl	80046d8 <prvSampleTimeNow>
 800460c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d130      	bne.n	8004676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	d806      	bhi.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004622:	f7ff fa35 	bl	8003a90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff85 	bl	8004538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800462e:	e024      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <prvProcessTimerOrBlockTask+0x90>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x50>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <prvProcessTimerOrBlockTask+0x52>
 8004644:	2300      	movs	r3, #0
 8004646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004648:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <prvProcessTimerOrBlockTask+0x94>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	f7fe ff7d 	bl	8003554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800465a:	f7ff fa19 	bl	8003a90 <xTaskResumeAll>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <prvProcessTimerOrBlockTask+0x98>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
}
 8004674:	e001      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004676:	f7ff fa0b 	bl	8003a90 <xTaskResumeAll>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000d9c 	.word	0x20000d9c
 8004688:	20000da0 	.word	0x20000da0
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004698:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <prvGetNextExpireTime+0x44>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <prvGetNextExpireTime+0x16>
 80046a2:	2201      	movs	r2, #1
 80046a4:	e000      	b.n	80046a8 <prvGetNextExpireTime+0x18>
 80046a6:	2200      	movs	r2, #0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <prvGetNextExpireTime+0x44>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e001      	b.n	80046c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000d98 	.word	0x20000d98

080046d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046e0:	f7ff fa74 	bl	8003bcc <xTaskGetTickCount>
 80046e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <prvSampleTimeNow+0x3c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d205      	bcs.n	80046fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046f0:	f000 f936 	bl	8004960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004702:	4a04      	ldr	r2, [pc, #16]	; (8004714 <prvSampleTimeNow+0x3c>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000da8 	.word	0x20000da8

08004718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d812      	bhi.n	8004764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e01b      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <prvInsertTimerInActiveList+0x7c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f9de 	bl	8002b1e <vListInsert>
 8004762:	e012      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d206      	bcs.n	800477a <prvInsertTimerInActiveList+0x62>
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e007      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <prvInsertTimerInActiveList+0x80>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f9ca 	bl	8002b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000d9c 	.word	0x20000d9c
 8004798:	20000d98 	.word	0x20000d98

0800479c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	; 0x38
 80047a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047a2:	e0ca      	b.n	800493a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da18      	bge.n	80047dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	3304      	adds	r3, #4
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d2:	6850      	ldr	r0, [r2, #4]
 80047d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	4611      	mov	r1, r2
 80047da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f2c0 80ab 	blt.w	800493a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	3304      	adds	r3, #4
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe f9cb 	bl	8002b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fa:	463b      	mov	r3, r7
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff6b 	bl	80046d8 <prvSampleTimeNow>
 8004802:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b09      	cmp	r3, #9
 8004808:	f200 8096 	bhi.w	8004938 <prvProcessReceivedCommands+0x19c>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <prvProcessReceivedCommands+0x78>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	0800483d 	.word	0x0800483d
 8004818:	0800483d 	.word	0x0800483d
 800481c:	0800483d 	.word	0x0800483d
 8004820:	080048b1 	.word	0x080048b1
 8004824:	080048c5 	.word	0x080048c5
 8004828:	0800490f 	.word	0x0800490f
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800483d 	.word	0x0800483d
 8004834:	080048b1 	.word	0x080048b1
 8004838:	080048c5 	.word	0x080048c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	18d1      	adds	r1, r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485c:	f7ff ff5c 	bl	8004718 <prvInsertTimerInActiveList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d069      	beq.n	800493a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05e      	beq.n	800493a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	441a      	add	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	2100      	movs	r1, #0
 800488c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488e:	f7ff fe05 	bl	800449c <xTimerGenericCommand>
 8004892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d14f      	bne.n	800493a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61bb      	str	r3, [r7, #24]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048c2:	e03a      	b.n	800493a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	617b      	str	r3, [r7, #20]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	18d1      	adds	r1, r2, r3
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004908:	f7ff ff06 	bl	8004718 <prvInsertTimerInActiveList>
					break;
 800490c:	e015      	b.n	800493a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491e:	f000 fbdf 	bl	80050e0 <vPortFree>
 8004922:	e00a      	b.n	800493a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004936:	e000      	b.n	800493a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <prvProcessReceivedCommands+0x1c0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1d39      	adds	r1, r7, #4
 8004940:	2200      	movs	r2, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe fbec 	bl	8003120 <xQueueReceive>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	f47f af2a 	bne.w	80047a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	3730      	adds	r7, #48	; 0x30
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000da0 	.word	0x20000da0

08004960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004966:	e048      	b.n	80049fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004968:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <prvSwitchTimerLists+0xc0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <prvSwitchTimerLists+0xc0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3304      	adds	r3, #4
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe f905 	bl	8002b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02e      	beq.n	80049fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90e      	bls.n	80049cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ba:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <prvSwitchTimerLists+0xc0>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe f8aa 	bl	8002b1e <vListInsert>
 80049ca:	e016      	b.n	80049fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2300      	movs	r3, #0
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	2100      	movs	r1, #0
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fd60 	bl	800449c <xTimerGenericCommand>
 80049dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	603b      	str	r3, [r7, #0]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <prvSwitchTimerLists+0xc0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1b1      	bne.n	8004968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <prvSwitchTimerLists+0xc0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <prvSwitchTimerLists+0xc4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <prvSwitchTimerLists+0xc0>)
 8004a10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a12:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <prvSwitchTimerLists+0xc4>)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6013      	str	r3, [r2, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000d98 	.word	0x20000d98
 8004a24:	20000d9c 	.word	0x20000d9c

08004a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a2e:	f000 f969 	bl	8004d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <prvCheckForValidListAndQueue+0x60>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d120      	bne.n	8004a7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a3a:	4814      	ldr	r0, [pc, #80]	; (8004a8c <prvCheckForValidListAndQueue+0x64>)
 8004a3c:	f7fe f81e 	bl	8002a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a40:	4813      	ldr	r0, [pc, #76]	; (8004a90 <prvCheckForValidListAndQueue+0x68>)
 8004a42:	f7fe f81b 	bl	8002a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <prvCheckForValidListAndQueue+0x6c>)
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <prvCheckForValidListAndQueue+0x64>)
 8004a4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a4c:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <prvCheckForValidListAndQueue+0x70>)
 8004a4e:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <prvCheckForValidListAndQueue+0x68>)
 8004a50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a52:	2300      	movs	r3, #0
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <prvCheckForValidListAndQueue+0x74>)
 8004a58:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <prvCheckForValidListAndQueue+0x78>)
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	200a      	movs	r0, #10
 8004a5e:	f7fe f929 	bl	8002cb4 <xQueueGenericCreateStatic>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <prvCheckForValidListAndQueue+0x60>)
 8004a66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <prvCheckForValidListAndQueue+0x60>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <prvCheckForValidListAndQueue+0x60>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	490b      	ldr	r1, [pc, #44]	; (8004aa4 <prvCheckForValidListAndQueue+0x7c>)
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fd42 	bl	8003500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a7c:	f000 f972 	bl	8004d64 <vPortExitCritical>
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000da0 	.word	0x20000da0
 8004a8c:	20000d70 	.word	0x20000d70
 8004a90:	20000d84 	.word	0x20000d84
 8004a94:	20000d98 	.word	0x20000d98
 8004a98:	20000d9c 	.word	0x20000d9c
 8004a9c:	20000e4c 	.word	0x20000e4c
 8004aa0:	20000dac 	.word	0x20000dac
 8004aa4:	08005644 	.word	0x08005644

08004aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3b04      	subs	r3, #4
 8004ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f023 0201 	bic.w	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b04      	subs	r3, #4
 8004ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ad8:	4a0c      	ldr	r2, [pc, #48]	; (8004b0c <pxPortInitialiseStack+0x64>)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b14      	subs	r3, #20
 8004ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b04      	subs	r3, #4
 8004aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f06f 0202 	mvn.w	r2, #2
 8004af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3b20      	subs	r3, #32
 8004afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	08004b11 	.word	0x08004b11

08004b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <prvTaskExitError+0x54>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d00a      	beq.n	8004b3a <prvTaskExitError+0x2a>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	60fb      	str	r3, [r7, #12]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <prvTaskExitError+0x28>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60bb      	str	r3, [r7, #8]
}
 8004b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b4e:	bf00      	nop
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0fc      	beq.n	8004b50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	2000000c 	.word	0x2000000c
	...

08004b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <pxCurrentTCBConst2>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7a:	f380 8809 	msr	PSP, r0
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	4770      	bx	lr
 8004b8c:	f3af 8000 	nop.w

08004b90 <pxCurrentTCBConst2>:
 8004b90:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop

08004b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b98:	4808      	ldr	r0, [pc, #32]	; (8004bbc <prvPortStartFirstTask+0x24>)
 8004b9a:	6800      	ldr	r0, [r0, #0]
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f380 8808 	msr	MSP, r0
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f380 8814 	msr	CONTROL, r0
 8004baa:	b662      	cpsie	i
 8004bac:	b661      	cpsie	f
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	df00      	svc	0
 8004bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bba:	bf00      	nop
 8004bbc:	e000ed08 	.word	0xe000ed08

08004bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bc6:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <xPortStartScheduler+0x120>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a46      	ldr	r2, [pc, #280]	; (8004ce4 <xPortStartScheduler+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10a      	bne.n	8004be6 <xPortStartScheduler+0x26>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	613b      	str	r3, [r7, #16]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <xPortStartScheduler+0x120>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <xPortStartScheduler+0x128>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10a      	bne.n	8004c06 <xPortStartScheduler+0x46>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c06:	4b39      	ldr	r3, [pc, #228]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <xPortStartScheduler+0x130>)
 8004c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c2e:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c30:	2207      	movs	r2, #7
 8004c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c34:	e009      	b.n	8004c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c36:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d0ef      	beq.n	8004c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1c3 0307 	rsb	r3, r3, #7
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d00a      	beq.n	8004c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60bb      	str	r3, [r7, #8]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c78:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cae:	f000 f8dd 	bl	8004e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <xPortStartScheduler+0x13c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cb8:	f000 f8fc 	bl	8004eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <xPortStartScheduler+0x140>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <xPortStartScheduler+0x140>)
 8004cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cc8:	f7ff ff66 	bl	8004b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ccc:	f7ff f848 	bl	8003d60 <vTaskSwitchContext>
	prvTaskExitError();
 8004cd0:	f7ff ff1e 	bl	8004b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000ed00 	.word	0xe000ed00
 8004ce4:	410fc271 	.word	0x410fc271
 8004ce8:	410fc270 	.word	0x410fc270
 8004cec:	e000e400 	.word	0xe000e400
 8004cf0:	20000e9c 	.word	0x20000e9c
 8004cf4:	20000ea0 	.word	0x20000ea0
 8004cf8:	e000ed20 	.word	0xe000ed20
 8004cfc:	2000000c 	.word	0x2000000c
 8004d00:	e000ef34 	.word	0xe000ef34

08004d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	607b      	str	r3, [r7, #4]
}
 8004d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10f      	bne.n	8004d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <vPortEnterCritical+0x5c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	603b      	str	r3, [r7, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <vPortEnterCritical+0x4a>
	}
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <vPortExitCritical+0x50>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <vPortExitCritical+0x24>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <vPortExitCritical+0x50>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <vPortExitCritical+0x50>)
 8004d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <vPortExitCritical+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <vPortExitCritical+0x42>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f383 8811 	msr	BASEPRI, r3
}
 8004da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
	...

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f01e 0f10 	tst.w	lr, #16
 8004dd0:	bf08      	it	eq
 8004dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	6010      	str	r0, [r2, #0]
 8004ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004de4:	f380 8811 	msr	BASEPRI, r0
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f7fe ffb6 	bl	8003d60 <vTaskSwitchContext>
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f380 8811 	msr	BASEPRI, r0
 8004dfc:	bc09      	pop	{r0, r3}
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	6808      	ldr	r0, [r1, #0]
 8004e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e06:	f01e 0f10 	tst.w	lr, #16
 8004e0a:	bf08      	it	eq
 8004e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e10:	f380 8809 	msr	PSP, r0
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst>:
 8004e20:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
}
 8004e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e42:	f7fe fed3 	bl	8003bec <xTaskIncrementTick>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <xPortSysTickHandler+0x40>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	2300      	movs	r3, #0
 8004e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f383 8811 	msr	BASEPRI, r3
}
 8004e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <vPortSetupTimerInterrupt+0x34>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <vPortSetupTimerInterrupt+0x38>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <vPortSetupTimerInterrupt+0x3c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <vPortSetupTimerInterrupt+0x40>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <vPortSetupTimerInterrupt+0x44>)
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <vPortSetupTimerInterrupt+0x34>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000e010 	.word	0xe000e010
 8004ea4:	e000e018 	.word	0xe000e018
 8004ea8:	20000000 	.word	0x20000000
 8004eac:	10624dd3 	.word	0x10624dd3
 8004eb0:	e000e014 	.word	0xe000e014

08004eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ec4 <vPortEnableVFP+0x10>
 8004eb8:	6801      	ldr	r1, [r0, #0]
 8004eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ebe:	6001      	str	r1, [r0, #0]
 8004ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ec2:	bf00      	nop
 8004ec4:	e000ed88 	.word	0xe000ed88

08004ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ece:	f3ef 8305 	mrs	r3, IPSR
 8004ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d914      	bls.n	8004f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <vPortValidateInterruptPriority+0x70>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ee4:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <vPortValidateInterruptPriority+0x74>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	7afa      	ldrb	r2, [r7, #11]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d20a      	bcs.n	8004f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f04:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <vPortValidateInterruptPriority+0x78>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <vPortValidateInterruptPriority+0x7c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d90a      	bls.n	8004f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	603b      	str	r3, [r7, #0]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <vPortValidateInterruptPriority+0x60>
	}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	e000e3f0 	.word	0xe000e3f0
 8004f3c:	20000e9c 	.word	0x20000e9c
 8004f40:	e000ed0c 	.word	0xe000ed0c
 8004f44:	20000ea0 	.word	0x20000ea0

08004f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f54:	f7fe fd8e 	bl	8003a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f58:	4b5b      	ldr	r3, [pc, #364]	; (80050c8 <pvPortMalloc+0x180>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f60:	f000 f920 	bl	80051a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f64:	4b59      	ldr	r3, [pc, #356]	; (80050cc <pvPortMalloc+0x184>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 8093 	bne.w	8005098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01d      	beq.n	8004fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f78:	2208      	movs	r2, #8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d014      	beq.n	8004fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f023 0307 	bic.w	r3, r3, #7
 8004f90:	3308      	adds	r3, #8
 8004f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	617b      	str	r3, [r7, #20]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d06e      	beq.n	8005098 <pvPortMalloc+0x150>
 8004fba:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <pvPortMalloc+0x188>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d869      	bhi.n	8005098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <pvPortMalloc+0x18c>)
 8004fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fc8:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <pvPortMalloc+0x18c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fce:	e004      	b.n	8004fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d903      	bls.n	8004fec <pvPortMalloc+0xa4>
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f1      	bne.n	8004fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <pvPortMalloc+0x180>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d050      	beq.n	8005098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	2308      	movs	r3, #8
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	429a      	cmp	r2, r3
 8005016:	d91f      	bls.n	8005058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <pvPortMalloc+0xf8>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	613b      	str	r3, [r7, #16]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1ad2      	subs	r2, r2, r3
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005052:	69b8      	ldr	r0, [r7, #24]
 8005054:	f000 f908 	bl	8005268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <pvPortMalloc+0x188>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <pvPortMalloc+0x188>)
 8005064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <pvPortMalloc+0x188>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <pvPortMalloc+0x190>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d203      	bcs.n	800507a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <pvPortMalloc+0x188>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <pvPortMalloc+0x190>)
 8005078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <pvPortMalloc+0x184>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	431a      	orrs	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <pvPortMalloc+0x194>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	4a11      	ldr	r2, [pc, #68]	; (80050dc <pvPortMalloc+0x194>)
 8005096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005098:	f7fe fcfa 	bl	8003a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <pvPortMalloc+0x174>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <pvPortMalloc+0x172>
	return pvReturn;
 80050bc:	69fb      	ldr	r3, [r7, #28]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20001aac 	.word	0x20001aac
 80050cc:	20001ac0 	.word	0x20001ac0
 80050d0:	20001ab0 	.word	0x20001ab0
 80050d4:	20001aa4 	.word	0x20001aa4
 80050d8:	20001ab4 	.word	0x20001ab4
 80050dc:	20001ab8 	.word	0x20001ab8

080050e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04d      	beq.n	800518e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050f2:	2308      	movs	r3, #8
 80050f4:	425b      	negs	r3, r3
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4b24      	ldr	r3, [pc, #144]	; (8005198 <vPortFree+0xb8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <vPortFree+0x44>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60fb      	str	r3, [r7, #12]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <vPortFree+0x62>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60bb      	str	r3, [r7, #8]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <vPortFree+0xb8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01e      	beq.n	800518e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11a      	bne.n	800518e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <vPortFree+0xb8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	43db      	mvns	r3, r3
 8005162:	401a      	ands	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005168:	f7fe fc84 	bl	8003a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <vPortFree+0xbc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4413      	add	r3, r2
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <vPortFree+0xbc>)
 8005178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800517a:	6938      	ldr	r0, [r7, #16]
 800517c:	f000 f874 	bl	8005268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <vPortFree+0xc0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	4a06      	ldr	r2, [pc, #24]	; (80051a0 <vPortFree+0xc0>)
 8005188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800518a:	f7fe fc81 	bl	8003a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20001ac0 	.word	0x20001ac0
 800519c:	20001ab0 	.word	0x20001ab0
 80051a0:	20001abc 	.word	0x20001abc

080051a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <prvHeapInit+0xac>)
 80051b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3307      	adds	r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <prvHeapInit+0xac>)
 80051d4:	4413      	add	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <prvHeapInit+0xb0>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <prvHeapInit+0xb0>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4413      	add	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051f0:	2208      	movs	r2, #8
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a15      	ldr	r2, [pc, #84]	; (8005258 <prvHeapInit+0xb4>)
 8005204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <prvHeapInit+0xb4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <prvHeapInit+0xb4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <prvHeapInit+0xb4>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <prvHeapInit+0xb8>)
 8005232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a09      	ldr	r2, [pc, #36]	; (8005260 <prvHeapInit+0xbc>)
 800523a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <prvHeapInit+0xc0>)
 800523e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	20000ea4 	.word	0x20000ea4
 8005254:	20001aa4 	.word	0x20001aa4
 8005258:	20001aac 	.word	0x20001aac
 800525c:	20001ab4 	.word	0x20001ab4
 8005260:	20001ab0 	.word	0x20001ab0
 8005264:	20001ac0 	.word	0x20001ac0

08005268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <prvInsertBlockIntoFreeList+0xac>)
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e002      	b.n	800527c <prvInsertBlockIntoFreeList+0x14>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d8f7      	bhi.n	8005276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4413      	add	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d108      	bne.n	80052aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d118      	bne.n	80052f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <prvInsertBlockIntoFreeList+0xb0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d00d      	beq.n	80052e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	441a      	add	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e008      	b.n	80052f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <prvInsertBlockIntoFreeList+0xb0>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e003      	b.n	80052f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d002      	beq.n	8005306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20001aa4 	.word	0x20001aa4
 8005318:	20001aac 	.word	0x20001aac

0800531c <__malloc_lock>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__malloc_lock+0x8>)
 800531e:	f7fb b9ee 	b.w	80006fe <__retarget_lock_acquire_recursive>
 8005322:	bf00      	nop
 8005324:	200000cc 	.word	0x200000cc

08005328 <__malloc_unlock>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__malloc_unlock+0x8>)
 800532a:	f7fb b9fc 	b.w	8000726 <__retarget_lock_release_recursive>
 800532e:	bf00      	nop
 8005330:	200000cc 	.word	0x200000cc

08005334 <memset>:
 8005334:	4402      	add	r2, r0
 8005336:	4603      	mov	r3, r0
 8005338:	4293      	cmp	r3, r2
 800533a:	d100      	bne.n	800533e <memset+0xa>
 800533c:	4770      	bx	lr
 800533e:	f803 1b01 	strb.w	r1, [r3], #1
 8005342:	e7f9      	b.n	8005338 <memset+0x4>

08005344 <_reclaim_reent>:
 8005344:	4b29      	ldr	r3, [pc, #164]	; (80053ec <_reclaim_reent+0xa8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4283      	cmp	r3, r0
 800534a:	b570      	push	{r4, r5, r6, lr}
 800534c:	4604      	mov	r4, r0
 800534e:	d04b      	beq.n	80053e8 <_reclaim_reent+0xa4>
 8005350:	69c3      	ldr	r3, [r0, #28]
 8005352:	b143      	cbz	r3, 8005366 <_reclaim_reent+0x22>
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d144      	bne.n	80053e4 <_reclaim_reent+0xa0>
 800535a:	69e3      	ldr	r3, [r4, #28]
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	b111      	cbz	r1, 8005366 <_reclaim_reent+0x22>
 8005360:	4620      	mov	r0, r4
 8005362:	f000 f877 	bl	8005454 <_free_r>
 8005366:	6961      	ldr	r1, [r4, #20]
 8005368:	b111      	cbz	r1, 8005370 <_reclaim_reent+0x2c>
 800536a:	4620      	mov	r0, r4
 800536c:	f000 f872 	bl	8005454 <_free_r>
 8005370:	69e1      	ldr	r1, [r4, #28]
 8005372:	b111      	cbz	r1, 800537a <_reclaim_reent+0x36>
 8005374:	4620      	mov	r0, r4
 8005376:	f000 f86d 	bl	8005454 <_free_r>
 800537a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800537c:	b111      	cbz	r1, 8005384 <_reclaim_reent+0x40>
 800537e:	4620      	mov	r0, r4
 8005380:	f000 f868 	bl	8005454 <_free_r>
 8005384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005386:	b111      	cbz	r1, 800538e <_reclaim_reent+0x4a>
 8005388:	4620      	mov	r0, r4
 800538a:	f000 f863 	bl	8005454 <_free_r>
 800538e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005390:	b111      	cbz	r1, 8005398 <_reclaim_reent+0x54>
 8005392:	4620      	mov	r0, r4
 8005394:	f000 f85e 	bl	8005454 <_free_r>
 8005398:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800539a:	b111      	cbz	r1, 80053a2 <_reclaim_reent+0x5e>
 800539c:	4620      	mov	r0, r4
 800539e:	f000 f859 	bl	8005454 <_free_r>
 80053a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80053a4:	b111      	cbz	r1, 80053ac <_reclaim_reent+0x68>
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 f854 	bl	8005454 <_free_r>
 80053ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053ae:	b111      	cbz	r1, 80053b6 <_reclaim_reent+0x72>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 f84f 	bl	8005454 <_free_r>
 80053b6:	6a23      	ldr	r3, [r4, #32]
 80053b8:	b1b3      	cbz	r3, 80053e8 <_reclaim_reent+0xa4>
 80053ba:	4620      	mov	r0, r4
 80053bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053c0:	4718      	bx	r3
 80053c2:	5949      	ldr	r1, [r1, r5]
 80053c4:	b941      	cbnz	r1, 80053d8 <_reclaim_reent+0x94>
 80053c6:	3504      	adds	r5, #4
 80053c8:	69e3      	ldr	r3, [r4, #28]
 80053ca:	2d80      	cmp	r5, #128	; 0x80
 80053cc:	68d9      	ldr	r1, [r3, #12]
 80053ce:	d1f8      	bne.n	80053c2 <_reclaim_reent+0x7e>
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 f83f 	bl	8005454 <_free_r>
 80053d6:	e7c0      	b.n	800535a <_reclaim_reent+0x16>
 80053d8:	680e      	ldr	r6, [r1, #0]
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 f83a 	bl	8005454 <_free_r>
 80053e0:	4631      	mov	r1, r6
 80053e2:	e7ef      	b.n	80053c4 <_reclaim_reent+0x80>
 80053e4:	2500      	movs	r5, #0
 80053e6:	e7ef      	b.n	80053c8 <_reclaim_reent+0x84>
 80053e8:	bd70      	pop	{r4, r5, r6, pc}
 80053ea:	bf00      	nop
 80053ec:	2000005c 	.word	0x2000005c

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4d0d      	ldr	r5, [pc, #52]	; (8005428 <__libc_init_array+0x38>)
 80053f4:	4c0d      	ldr	r4, [pc, #52]	; (800542c <__libc_init_array+0x3c>)
 80053f6:	1b64      	subs	r4, r4, r5
 80053f8:	10a4      	asrs	r4, r4, #2
 80053fa:	2600      	movs	r6, #0
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	4d0b      	ldr	r5, [pc, #44]	; (8005430 <__libc_init_array+0x40>)
 8005402:	4c0c      	ldr	r4, [pc, #48]	; (8005434 <__libc_init_array+0x44>)
 8005404:	f000 f872 	bl	80054ec <_init>
 8005408:	1b64      	subs	r4, r4, r5
 800540a:	10a4      	asrs	r4, r4, #2
 800540c:	2600      	movs	r6, #0
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08005688 	.word	0x08005688
 800542c:	08005688 	.word	0x08005688
 8005430:	08005688 	.word	0x08005688
 8005434:	0800568c 	.word	0x0800568c

08005438 <memcpy>:
 8005438:	440a      	add	r2, r1
 800543a:	4291      	cmp	r1, r2
 800543c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005440:	d100      	bne.n	8005444 <memcpy+0xc>
 8005442:	4770      	bx	lr
 8005444:	b510      	push	{r4, lr}
 8005446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800544a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800544e:	4291      	cmp	r1, r2
 8005450:	d1f9      	bne.n	8005446 <memcpy+0xe>
 8005452:	bd10      	pop	{r4, pc}

08005454 <_free_r>:
 8005454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005456:	2900      	cmp	r1, #0
 8005458:	d044      	beq.n	80054e4 <_free_r+0x90>
 800545a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800545e:	9001      	str	r0, [sp, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f1a1 0404 	sub.w	r4, r1, #4
 8005466:	bfb8      	it	lt
 8005468:	18e4      	addlt	r4, r4, r3
 800546a:	f7ff ff57 	bl	800531c <__malloc_lock>
 800546e:	4a1e      	ldr	r2, [pc, #120]	; (80054e8 <_free_r+0x94>)
 8005470:	9801      	ldr	r0, [sp, #4]
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	b933      	cbnz	r3, 8005484 <_free_r+0x30>
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	6014      	str	r4, [r2, #0]
 800547a:	b003      	add	sp, #12
 800547c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005480:	f7ff bf52 	b.w	8005328 <__malloc_unlock>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d908      	bls.n	800549a <_free_r+0x46>
 8005488:	6825      	ldr	r5, [r4, #0]
 800548a:	1961      	adds	r1, r4, r5
 800548c:	428b      	cmp	r3, r1
 800548e:	bf01      	itttt	eq
 8005490:	6819      	ldreq	r1, [r3, #0]
 8005492:	685b      	ldreq	r3, [r3, #4]
 8005494:	1949      	addeq	r1, r1, r5
 8005496:	6021      	streq	r1, [r4, #0]
 8005498:	e7ed      	b.n	8005476 <_free_r+0x22>
 800549a:	461a      	mov	r2, r3
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	b10b      	cbz	r3, 80054a4 <_free_r+0x50>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d9fa      	bls.n	800549a <_free_r+0x46>
 80054a4:	6811      	ldr	r1, [r2, #0]
 80054a6:	1855      	adds	r5, r2, r1
 80054a8:	42a5      	cmp	r5, r4
 80054aa:	d10b      	bne.n	80054c4 <_free_r+0x70>
 80054ac:	6824      	ldr	r4, [r4, #0]
 80054ae:	4421      	add	r1, r4
 80054b0:	1854      	adds	r4, r2, r1
 80054b2:	42a3      	cmp	r3, r4
 80054b4:	6011      	str	r1, [r2, #0]
 80054b6:	d1e0      	bne.n	800547a <_free_r+0x26>
 80054b8:	681c      	ldr	r4, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	6053      	str	r3, [r2, #4]
 80054be:	440c      	add	r4, r1
 80054c0:	6014      	str	r4, [r2, #0]
 80054c2:	e7da      	b.n	800547a <_free_r+0x26>
 80054c4:	d902      	bls.n	80054cc <_free_r+0x78>
 80054c6:	230c      	movs	r3, #12
 80054c8:	6003      	str	r3, [r0, #0]
 80054ca:	e7d6      	b.n	800547a <_free_r+0x26>
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1961      	adds	r1, r4, r5
 80054d0:	428b      	cmp	r3, r1
 80054d2:	bf04      	itt	eq
 80054d4:	6819      	ldreq	r1, [r3, #0]
 80054d6:	685b      	ldreq	r3, [r3, #4]
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	bf04      	itt	eq
 80054dc:	1949      	addeq	r1, r1, r5
 80054de:	6021      	streq	r1, [r4, #0]
 80054e0:	6054      	str	r4, [r2, #4]
 80054e2:	e7ca      	b.n	800547a <_free_r+0x26>
 80054e4:	b003      	add	sp, #12
 80054e6:	bd30      	pop	{r4, r5, pc}
 80054e8:	20001ac4 	.word	0x20001ac4

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
