
WERNI_LowLevelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b770  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb4  0800bcb4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800bcb4  0800bcb4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bcb4  0800bcb4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bcb4  0800bcb4  0001bcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bcbc  0800bcbc  0001bcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bcc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092c0  20000078  0800bd3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009338  0800bd3c  00029338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002290a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000658b  00000000  00000000  000429b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00048f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  0004aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027677  00000000  00000000  0004c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023597  00000000  00000000  0007390f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd321  00000000  00000000  00096ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001741c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007878  00000000  00000000  00174218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b938 	.word	0x0800b938

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800b938 	.word	0x0800b938

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 f8b1 	bl	8000448 <_ZNSaIP14IinterruptableED1Ev>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f894 	bl	8000428 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implC1Ev>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4618      	mov	r0, r3
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <_ZNSt6vectorIP14IinterruptableSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800030a:	b580      	push	{r7, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffeb 	bl	80002f0 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EEC1Ev>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZN14IinterruptableC1Ev>:
#include "InterruptRouting.h"
#include "main.h"

std::vector<Iinterruptable*> Iinterruptable::outputCompareIntReceivers;

Iinterruptable::Iinterruptable()
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	4a07      	ldr	r2, [pc, #28]	; (800034c <_ZN14IinterruptableC1Ev+0x28>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601a      	str	r2, [r3, #0]
{
  outputCompareIntReceivers.push_back(this);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <_ZN14IinterruptableC1Ev+0x2c>)
 800033e:	f000 f8a8 	bl	8000492 <_ZNSt6vectorIP14IinterruptableSaIS1_EE9push_backEOS1_>
}
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	0800bb8c 	.word	0x0800bb8c
 8000350:	20000094 	.word	0x20000094

08000354 <_ZN14IinterruptableD1Ev>:

Iinterruptable::~Iinterruptable(){}
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <_ZN14IinterruptableD1Ev+0x1c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	0800bb8c 	.word	0x0800bb8c

08000374 <_ZN14IinterruptableD0Ev>:
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f7ff ffe9 	bl	8000354 <_ZN14IinterruptableD1Ev>
 8000382:	2104      	movs	r1, #4
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f00a f96e 	bl	800a666 <_ZdlPvj>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <_ZN14Iinterruptable18OutputCompareIntCbEP17TIM_HandleTypeDef>:

void Iinterruptable::OutputCompareIntCb(TIM_HandleTypeDef* htim)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  //Implement in derived class to use.
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <HAL_TIM_OC_DelayElapsedCallback>:


//************ C-Functions below ***************

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d12b      	bne.n	8000416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
  {
    for(Iinterruptable* receiver : Iinterruptable::outputCompareIntReceivers)
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	6978      	ldr	r0, [r7, #20]
 80003c4:	f000 f876 	bl	80004b4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE5beginEv>
 80003c8:	4603      	mov	r3, r0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	6978      	ldr	r0, [r7, #20]
 80003ce:	f000 f881 	bl	80004d4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE3endEv>
 80003d2:	4603      	mov	r3, r0
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	f107 0208 	add.w	r2, r7, #8
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f888 	bl	80004f6 <_ZN9__gnu_cxxneIPP14IinterruptableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d014      	beq.n	8000416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f8a8 	bl	8000546 <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEdeEv>
 80003f6:	4603      	mov	r3, r0
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	613b      	str	r3, [r7, #16]
    {
      receiver->OutputCompareIntCb(htim);
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3308      	adds	r3, #8
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	6938      	ldr	r0, [r7, #16]
 8000408:	4798      	blx	r3
    for(Iinterruptable* receiver : Iinterruptable::outputCompareIntReceivers)
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f889 	bl	8000526 <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEppEv>
 8000414:	e7df      	b.n	80003d6 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
    }
  }
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40012c00 	.word	0x40012c00
 8000424:	20000094 	.word	0x20000094

08000428 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 f894 	bl	800055e <_ZNSaIP14IinterruptableEC1Ev>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f89c 	bl	8000576 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_ZNSaIP14IinterruptableED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f000 f8a4 	bl	800059e <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableED1Ev>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	689a      	ldr	r2, [r3, #8]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000478:	461a      	mov	r2, r3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f000 f89a 	bl	80005b4 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j>
      }
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff28 	bl	80002d8 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implD1Ev>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <_ZNSt6vectorIP14IinterruptableSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800049c:	6838      	ldr	r0, [r7, #0]
 800049e:	f000 f89c 	bl	80005da <_ZSt4moveIRP14IinterruptableEONSt16remove_referenceIT_E4typeEOS4_>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4619      	mov	r1, r3
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f000 f8a2 	bl	80005f0 <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f8c1 	bl	800064c <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	1d1a      	adds	r2, r3, #4
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f8b0 	bl	800064c <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4618      	mov	r0, r3
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_ZN9__gnu_cxxneIPP14IinterruptableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80004f6:	b590      	push	{r4, r7, lr}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f8b3 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000506:	4603      	mov	r3, r0
 8000508:	681c      	ldr	r4, [r3, #0]
 800050a:	6838      	ldr	r0, [r7, #0]
 800050c:	f000 f8ae 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000510:	4603      	mov	r3, r0
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	429c      	cmp	r4, r3
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}

08000526 <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1d1a      	adds	r2, r3, #4
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
	return *this;
 8000538:	687b      	ldr	r3, [r7, #4]
      }
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_ZNSaIP14IinterruptableEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f88b 	bl	8000682 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableEC1Ev>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	{ }
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	if (__p)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f863 	bl	8000698 <_ZNSt16allocator_traitsISaIP14IinterruptableEE10deallocateERS2_PS1_j>
      }
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZSt4moveIRP14IinterruptableEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	429a      	cmp	r2, r3
 8000604:	d011      	beq.n	800062a <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000606:	687c      	ldr	r4, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685d      	ldr	r5, [r3, #4]
 800060c:	6838      	ldr	r0, [r7, #0]
 800060e:	f000 f852 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4629      	mov	r1, r5
 8000618:	4620      	mov	r0, r4
 800061a:	f000 f857 	bl	80006cc <_ZNSt16allocator_traitsISaIP14IinterruptableEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	1d1a      	adds	r2, r3, #4
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000628:	e00c      	b.n	8000644 <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ff52 	bl	80004d4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE3endEv>
 8000630:	4604      	mov	r4, r0
 8000632:	6838      	ldr	r0, [r7, #0]
 8000634:	f000 f83f 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4621      	mov	r1, r4
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f86e 	bl	8000720 <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bdb0      	pop	{r4, r5, r7, pc}

0800064c <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_ZNSt16allocator_traitsISaIP14IinterruptableEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f000 f8f5 	bl	8000898 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE10deallocateEPS2_j>
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <_ZNSt16allocator_traitsISaIP14IinterruptableEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffec 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 f8e7 	bl	80008b8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE9constructIS2_JS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_ZNSt6vectorIP14IinterruptableSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f805 	bl	8000708 <_ZNSt6vectorIP14IinterruptableSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80006fe:	4603      	mov	r3, r0
      }
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_ZNSt6vectorIP14IinterruptableSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000710:	2301      	movs	r3, #1
      }
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800072c:	4a59      	ldr	r2, [pc, #356]	; (8000894 <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800072e:	2101      	movs	r1, #1
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f8d7 	bl	80008e4 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc>
 8000736:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff feb5 	bl	80004b4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE5beginEv>
 800074a:	4603      	mov	r3, r0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	f107 0214 	add.w	r2, r7, #20
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f90a 	bl	8000972 <_ZN9__gnu_cxxmiIPP14IinterruptableSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800075e:	4603      	mov	r3, r0
 8000760:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f918 	bl	800099c <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj>
 800076c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000772:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	18d5      	adds	r5, r2, r3
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff9a 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4629      	mov	r1, r5
 8000788:	4620      	mov	r0, r4
 800078a:	f7ff ff9f 	bl	80006cc <_ZNSt16allocator_traitsISaIP14IinterruptableEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000792:	f7ff ffae 	bl	80006f2 <_ZNSt6vectorIP14IinterruptableSaIS1_EE15_S_use_relocateEv>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d027      	beq.n	80007ec <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff63 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 80007a6:	4603      	mov	r3, r0
 80007a8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f91d 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 80007b2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80007b4:	69ba      	ldr	r2, [r7, #24]
 80007b6:	4621      	mov	r1, r4
 80007b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007ba:	f000 f903 	bl	80009c4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80007be:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	3304      	adds	r3, #4
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff4e 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 80007d0:	4603      	mov	r3, r0
 80007d2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f908 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 80007dc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80007de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e0:	6a39      	ldr	r1, [r7, #32]
 80007e2:	4620      	mov	r0, r4
 80007e4:	f000 f8ee 	bl	80009c4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80007e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80007ea:	e026      	b.n	800083a <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff3b 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 80007f6:	4603      	mov	r3, r0
 80007f8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f8f5 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000802:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	4621      	mov	r1, r4
 8000808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800080a:	f000 f8fa 	bl	8000a02 <_ZSt34__uninitialized_move_if_noexcept_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>
 800080e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	3304      	adds	r3, #4
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff26 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000820:	4603      	mov	r3, r0
 8000822:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f8e0 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 800082c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800082e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000830:	6a39      	ldr	r1, [r7, #32]
 8000832:	4620      	mov	r0, r4
 8000834:	f000 f8e5 	bl	8000a02 <_ZSt34__uninitialized_move_if_noexcept_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000838:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800083a:	f7ff ff5a 	bl	80006f2 <_ZNSt6vectorIP14IinterruptableSaIS1_EE15_S_use_relocateEv>
 800083e:	4603      	mov	r3, r0
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d009      	beq.n	800085e <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f8cd 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	6a39      	ldr	r1, [r7, #32]
 8000858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800085a:	f000 f8eb 	bl	8000a34 <_ZSt8_DestroyIPP14IinterruptableS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800085e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800086a:	461a      	mov	r2, r3
 800086c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800086e:	f7ff fea1 	bl	80005b4 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800087c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	441a      	add	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	609a      	str	r2, [r3, #8]
    }
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bdb0      	pop	{r4, r5, r7, pc}
 8000892:	bf00      	nop
 8000894:	0800b950 	.word	0x0800b950

08000898 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4619      	mov	r1, r3
 80008aa:	68b8      	ldr	r0, [r7, #8]
 80008ac:	f009 fedb 	bl	800a666 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fef6 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681c      	ldr	r4, [r3, #0]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4619      	mov	r1, r3
 80008d2:	2004      	movs	r0, #4
 80008d4:	f7ff fcf4 	bl	80002c0 <_ZnwjPv>
 80008d8:	4603      	mov	r3, r0
 80008da:	601c      	str	r4, [r3, #0]
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f000 f8ad 	bl	8000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>
 80008f6:	4604      	mov	r4, r0
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f000 f8ba 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 80008fe:	4603      	mov	r3, r0
 8000900:	1ae2      	subs	r2, r4, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	429a      	cmp	r2, r3
 8000906:	bf34      	ite	cc
 8000908:	2301      	movcc	r3, #1
 800090a:	2300      	movcs	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f009 feaf 	bl	800a676 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f000 f8aa 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 800091e:	4604      	mov	r4, r0
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f000 f8a6 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 8000926:	4603      	mov	r3, r0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	f107 0208 	add.w	r2, r7, #8
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f8ac 	bl	8000a92 <_ZSt3maxIjERKT_S2_S2_>
 800093a:	4603      	mov	r3, r0
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4423      	add	r3, r4
 8000940:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f895 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 8000948:	4602      	mov	r2, r0
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4293      	cmp	r3, r2
 800094e:	d306      	bcc.n	800095e <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f000 f87d 	bl	8000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>
 8000956:	4602      	mov	r2, r0
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	4293      	cmp	r3, r2
 800095c:	d904      	bls.n	8000968 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x84>
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 f876 	bl	8000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>
 8000964:	4603      	mov	r3, r0
 8000966:	e000      	b.n	800096a <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x86>
 8000968:	697b      	ldr	r3, [r7, #20]
      }
 800096a:	4618      	mov	r0, r3
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <_ZN9__gnu_cxxmiIPP14IinterruptableSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fe75 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000982:	4603      	mov	r3, r0
 8000984:	681c      	ldr	r4, [r3, #0]
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f7ff fe70 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 800098c:	4603      	mov	r3, r0
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1ae3      	subs	r3, r4, r3
 8000992:	109b      	asrs	r3, r3, #2
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}

0800099c <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj+0x1e>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f882 	bl	8000aba <_ZNSt16allocator_traitsISaIP14IinterruptableEE8allocateERS2_j>
 80009b6:	4603      	mov	r3, r0
 80009b8:	e000      	b.n	80009bc <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj+0x20>
 80009ba:	2300      	movs	r3, #0
      }
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80009d2:	f88d 4000 	strb.w	r4, [sp]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f87b 	bl	8000ad8 <_ZNSt6vectorIP14IinterruptableSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80009e2:	4603      	mov	r3, r0
      }
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_ZSt34__uninitialized_move_if_noexcept_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000a02:	b590      	push	{r4, r7, lr}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f873 	bl	8000afc <_ZSt32__make_move_if_noexcept_iteratorIP14IinterruptableSt13move_iteratorIPS1_EET0_PT_>
 8000a16:	4604      	mov	r4, r0
 8000a18:	68b8      	ldr	r0, [r7, #8]
 8000a1a:	f000 f86f 	bl	8000afc <_ZSt32__make_move_if_noexcept_iteratorIP14IinterruptableSt13move_iteratorIPS1_EET0_PT_>
 8000a1e:	4601      	mov	r1, r0
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4620      	mov	r0, r4
 8000a26:	f000 f878 	bl	8000b1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14IinterruptableES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8000a2a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <_ZSt8_DestroyIPP14IinterruptableS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f87a 	bl	8000b3c <_ZSt8_DestroyIPP14IinterruptableEvT_S3_>
    }
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f895 	bl	8000b8a <_ZNKSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f877 	bl	8000b56 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_max_sizeERKS2_>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	109b      	asrs	r3, r3, #2
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d201      	bcs.n	8000aac <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	e000      	b.n	8000aae <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000aac:	687b      	ldr	r3, [r7, #4]
    }
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_ZNSt16allocator_traitsISaIP14IinterruptableEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6839      	ldr	r1, [r7, #0]
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f869 	bl	8000ba0 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_ZNSt6vectorIP14IinterruptableSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f875 	bl	8000bdc <_ZSt12__relocate_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000af2:	4603      	mov	r3, r0
      }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZSt32__make_move_if_noexcept_iteratorIP14IinterruptableSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f883 	bl	8000c16 <_ZNSt13move_iteratorIPP14IinterruptableEC1ES2_>
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14IinterruptableES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f884 	bl	8000c3a <_ZSt18uninitialized_copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZSt8_DestroyIPP14IinterruptableEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f888 	bl	8000c5e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14IinterruptableEEvT_S5_>
    }
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000b5e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000b62:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f885 	bl	8000c74 <_ZNSt16allocator_traitsISaIP14IinterruptableEE8max_sizeERKS2_>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000b6e:	f107 0208 	add.w	r2, r7, #8
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f887 	bl	8000c8c <_ZSt3minIjERKT_S2_S2_>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	681b      	ldr	r3, [r3, #0]
      }
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZNKSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f000 f881 	bl	8000cb4 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE11_M_max_sizeEv>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	bf8c      	ite	hi
 8000bba:	2301      	movhi	r3, #1
 8000bbc:	2300      	movls	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000bc4:	f009 fd54 	bl	800a670 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f009 fd33 	bl	800a638 <_Znwj>
 8000bd2:	4603      	mov	r3, r0
      }
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZSt12__relocate_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f000 f86e 	bl	8000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	68b8      	ldr	r0, [r7, #8]
 8000bf4:	f000 f86a 	bl	8000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f866 	bl	8000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000c00:	4602      	mov	r2, r0
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	4629      	mov	r1, r5
 8000c06:	4620      	mov	r0, r4
 8000c08:	f000 f86b 	bl	8000ce2 <_ZSt14__relocate_a_1IP14IinterruptableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8000c0c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdb0      	pop	{r4, r5, r7, pc}

08000c16 <_ZNSt13move_iteratorIPP14IinterruptableEC1ES2_>:
      move_iterator(iterator_type __i)
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f87b 	bl	8000d1e <_ZSt4moveIRPP14IinterruptableEONSt16remove_referenceIT_E4typeEOS5_>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_ZSt18uninitialized_copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000c46:	2301      	movs	r3, #1
 8000c48:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f000 f870 	bl	8000d34 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14IinterruptableES5_EET0_T_S8_S7_>
 8000c54:	4603      	mov	r3, r0
    }
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14IinterruptableEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_ZNSt16allocator_traitsISaIP14IinterruptableEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f869 	bl	8000d54 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE8max_sizeEv>
 8000c82:	4603      	mov	r3, r0
      }
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d201      	bcs.n	8000ca6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	e000      	b.n	8000ca8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000ca6:	687b      	ldr	r3, [r7, #4]
    }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000cbc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_ZSt14__relocate_a_1IP14IinterruptableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	109b      	asrs	r3, r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd06      	ble.n	8000d0e <_ZSt14__relocate_a_1IP14IinterruptableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	461a      	mov	r2, r3
 8000d06:	68f9      	ldr	r1, [r7, #12]
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f009 fe27 	bl	800a95c <memmove>
      return __result + __count;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
    }
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_ZSt4moveIRPP14IinterruptableEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14IinterruptableES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f000 f811 	bl	8000d6c <_ZSt4copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffa9 	bl	8000cb4 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE11_M_max_sizeEv>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZSt4copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f80f 	bl	8000d9c <_ZSt12__miter_baseIPP14IinterruptableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	68b8      	ldr	r0, [r7, #8]
 8000d82:	f000 f80b 	bl	8000d9c <_ZSt12__miter_baseIPP14IinterruptableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f000 f816 	bl	8000dbe <_ZSt13__copy_move_aILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>
 8000d92:	4603      	mov	r3, r0
    }
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}

08000d9c <_ZSt12__miter_baseIPP14IinterruptableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f82c 	bl	8000e04 <_ZNKSt13move_iteratorIPP14IinterruptableE4baseEv>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f834 	bl	8000e1c <_ZSt12__miter_baseIPP14IinterruptableET_S3_>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_ZSt13__copy_move_aILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000dbe:	b5b0      	push	{r4, r5, r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff ff7e 	bl	8000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	68b8      	ldr	r0, [r7, #8]
 8000dd4:	f7ff ff7a 	bl	8000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000dd8:	4605      	mov	r5, r0
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff75 	bl	8000ccc <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4629      	mov	r1, r5
 8000de8:	4620      	mov	r0, r4
 8000dea:	f000 f822 	bl	8000e32 <_ZSt14__copy_move_a1ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>
 8000dee:	4602      	mov	r2, r0
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f82c 	bl	8000e52 <_ZSt12__niter_wrapIPP14IinterruptableET_RKS3_S3_>
 8000dfa:	4603      	mov	r3, r0
    }
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bdb0      	pop	{r4, r5, r7, pc}

08000e04 <_ZNKSt13move_iteratorIPP14IinterruptableE4baseEv>:
      base() const
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_ZSt12__miter_baseIPP14IinterruptableET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_ZSt14__copy_move_a1ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f811 	bl	8000e6a <_ZSt14__copy_move_a2ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZSt12__niter_wrapIPP14IinterruptableET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_ZSt14__copy_move_a2ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f000 f805 	bl	8000e8a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14IinterruptableEEPT_PKS5_S8_S6_>
 8000e80:	4603      	mov	r3, r0
    }
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14IinterruptableEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	109b      	asrs	r3, r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14IinterruptableEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f009 fd54 	bl	800a95c <memmove>
	  return __result + _Num;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
	}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_Z41__static_initialization_and_destruction_0ii>:
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d107      	bne.n	8000ee4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<Iinterruptable*> Iinterruptable::outputCompareIntReceivers;
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000ee0:	f7ff fa13 	bl	800030a <_ZNSt6vectorIP14IinterruptableSaIS1_EEC1Ev>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d107      	bne.n	8000efa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d102      	bne.n	8000efa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000ef6:	f000 f807 	bl	8000f08 <_ZNSt6vectorIP14IinterruptableSaIS1_EED1Ev>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000094 	.word	0x20000094

08000f08 <_ZNSt6vectorIP14IinterruptableSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fd66 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000f20:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f22:	461a      	mov	r2, r3
 8000f24:	4629      	mov	r1, r5
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff fd84 	bl	8000a34 <_ZSt8_DestroyIPP14IinterruptableS1_EvT_S3_RSaIT0_E>
      }
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa96 	bl	8000460 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EED1Ev>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}

08000f3e <_GLOBAL__sub_I__ZN14Iinterruptable25outputCompareIntReceiversE>:
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ffbc 	bl	8000ec4 <_Z41__static_initialization_and_destruction_0ii>
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_GLOBAL__sub_D__ZN14Iinterruptable25outputCompareIntReceiversE>:
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ffb4 	bl	8000ec4 <_Z41__static_initialization_and_destruction_0ii>
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8000faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200000a4 	.word	0x200000a4
 8000fc4:	20000164 	.word	0x20000164

08000fc8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8000fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000364 	.word	0x20000364
 8000ff8:	20000424 	.word	0x20000424

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of idleTask */
  osThreadDef(idleTask, StartIdleTask, osPriorityIdle, 0, 128);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_FREERTOS_Init+0x30>)
 8001004:	1d3c      	adds	r4, r7, #4
 8001006:	461d      	mov	r5, r3
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f8be 	bl	800619a <osThreadCreate>
 800101e:	4603      	mov	r3, r0
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <MX_FREERTOS_Init+0x34>)
 8001022:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bdb0      	pop	{r4, r5, r7, pc}
 800102c:	0800b978 	.word	0x0800b978
 8001030:	200000a0 	.word	0x200000a0

08001034 <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
    MsgPool_init();
 800103c:	f008 ff39 	bl	8009eb2 <MsgPool_init>
    TaskList_init();
 8001040:	f009 f918 	bl	800a274 <TaskList_init>
    app_init();
 8001044:	f008 fdf4 	bl	8009c30 <app_init>
    vTaskDelete(NULL);
 8001048:	2000      	movs	r0, #0
 800104a:	f006 fa2b 	bl	80074a4 <vTaskDelete>
    MsgPool_init();
 800104e:	e7f5      	b.n	800103c <StartIdleTask+0x8>

08001050 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <MX_GPIO_Init+0x11c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <MX_GPIO_Init+0x11c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b3e      	ldr	r3, [pc, #248]	; (800116c <MX_GPIO_Init+0x11c>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <MX_GPIO_Init+0x11c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a3a      	ldr	r2, [pc, #232]	; (800116c <MX_GPIO_Init+0x11c>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_GPIO_Init+0x11c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_GPIO_Init+0x11c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a34      	ldr	r2, [pc, #208]	; (800116c <MX_GPIO_Init+0x11c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_GPIO_Init+0x11c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_GPIO_Init+0x11c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a2e      	ldr	r2, [pc, #184]	; (800116c <MX_GPIO_Init+0x11c>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_GPIO_Init+0x11c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER1_STEP_GPIO_Port, STEPPER1_STEP_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	4829      	ldr	r0, [pc, #164]	; (8001170 <MX_GPIO_Init+0x120>)
 80010cc:	f000 ffea 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2120      	movs	r1, #32
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f000 ffe4 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	481f      	ldr	r0, [pc, #124]	; (8001170 <MX_GPIO_Init+0x120>)
 80010f4:	f000 fd80 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER1_STEP_Pin;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER1_STEP_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4818      	ldr	r0, [pc, #96]	; (8001170 <MX_GPIO_Init+0x120>)
 8001110:	f000 fd72 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001114:	230c      	movs	r3, #12
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001124:	230c      	movs	r3, #12
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f000 fd61 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001136:	2320      	movs	r3, #32
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f000 fd52 	bl	8001bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2105      	movs	r1, #5
 8001158:	2028      	movs	r0, #40	; 0x28
 800115a:	f000 fd0b 	bl	8001b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f000 fd32 	bl	8001bc8 <HAL_NVIC_EnableIRQ>

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	48000800 	.word	0x48000800

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f000 fbf8 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f809 	bl	8001192 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f7ff ff66 	bl	8001050 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001184:	f000 fa18 	bl	80015b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001188:	f7ff ff38 	bl	8000ffc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800118c:	f004 fffe 	bl	800618c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001190:	e7fe      	b.n	8001190 <main+0x1c>

08001192 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b094      	sub	sp, #80	; 0x50
 8001196:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	2238      	movs	r2, #56	; 0x38
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fbf5 	bl	800a990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 fff1 	bl	800219c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011d4:	2355      	movs	r3, #85	; 0x55
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f89b 	bl	8002324 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011f4:	f000 f82a 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2303      	movs	r3, #3
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2104      	movs	r1, #4
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fc99 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800121c:	f000 f816 	bl	800124c <Error_Handler>
  }
}
 8001220:	bf00      	nop
 8001222:	3750      	adds	r7, #80	; 0x50
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123a:	f000 fbaf 	bl	800199c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40001000 	.word	0x40001000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>

08001256 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  __BKPT();
 8001260:	be00      	bkpt	0x0000
  while(1);
 8001262:	e7fe      	b.n	8001262 <assert_failed+0xc>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_MspInit+0x50>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_MspInit+0x50>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x50>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_MspInit+0x50>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_MspInit+0x50>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6593      	str	r3, [r2, #88]	; 0x58
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x50>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 fc67 	bl	8001b74 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012a6:	f001 f82d 	bl	8002304 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <HAL_InitTick+0xc4>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	4a2b      	ldr	r2, [pc, #172]	; (800137c <HAL_InitTick+0xc4>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6593      	str	r3, [r2, #88]	; 0x58
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_InitTick+0xc4>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 feb0 	bl	8003050 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012f0:	f001 fe98 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80012f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_InitTick+0xc8>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	3b01      	subs	r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_InitTick+0xcc>)
 8001306:	4a20      	ldr	r2, [pc, #128]	; (8001388 <HAL_InitTick+0xd0>)
 8001308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_InitTick+0xcc>)
 800130c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001310:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_InitTick+0xcc>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_InitTick+0xcc>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_InitTick+0xcc>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001324:	4817      	ldr	r0, [pc, #92]	; (8001384 <HAL_InitTick+0xcc>)
 8001326:	f001 ff1b 	bl	8003160 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11b      	bne.n	8001370 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <HAL_InitTick+0xcc>)
 800133a:	f001 fff3 	bl	8003324 <HAL_TIM_Base_Start_IT>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001348:	2b00      	cmp	r3, #0
 800134a:	d111      	bne.n	8001370 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134c:	2036      	movs	r0, #54	; 0x36
 800134e:	f000 fc3b 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d808      	bhi.n	800136a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2036      	movs	r0, #54	; 0x36
 800135e:	f000 fc09 	bl	8001b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_InitTick+0xd4>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e002      	b.n	8001370 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001374:	4618      	mov	r0, r3
 8001376:	3730      	adds	r7, #48	; 0x30
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	431bde83 	.word	0x431bde83
 8001384:	20000824 	.word	0x20000824
 8001388:	40001000 	.word	0x40001000
 800138c:	20000004 	.word	0x20000004

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013c2:	f002 fce5 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000874 	.word	0x20000874

080013d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <TIM1_CC_IRQHandler+0x10>)
 80013d6:	f002 fcdb 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000874 	.word	0x20000874

080013e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013ec:	f000 feb2 	bl	8002154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM6_DAC_IRQHandler+0x10>)
 80013fa:	f002 fcc9 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000824 	.word	0x20000824

08001408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return 1;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_kill>:

int _kill(int pid, int sig)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001422:	f009 f965 	bl	800a6f0 <__errno>
 8001426:	4603      	mov	r3, r0
 8001428:	2216      	movs	r2, #22
 800142a:	601a      	str	r2, [r3, #0]
  return -1;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_exit>:

void _exit (int status)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffe7 	bl	8001418 <_kill>
  while (1) {}    /* Make sure we hang here */
 800144a:	e7fe      	b.n	800144a <_exit+0x12>

0800144c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145e:	f3af 8000 	nop.w
 8001462:	4601      	mov	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
  }

  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
  }
  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f009 f8ca 	bl	800a6f0 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2001c000 	.word	0x2001c000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000870 	.word	0x20000870
 8001590:	20009338 	.word	0x20009338

08001594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b09c      	sub	sp, #112	; 0x70
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f009 f9cc 	bl	800a990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <MX_TIM1_Init+0x16c>)
 80015fa:	4a4b      	ldr	r2, [pc, #300]	; (8001728 <MX_TIM1_Init+0x170>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 849;
 80015fe:	4b49      	ldr	r3, [pc, #292]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001600:	f240 3251 	movw	r2, #849	; 0x351
 8001604:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800160c:	4b45      	ldr	r3, [pc, #276]	; (8001724 <MX_TIM1_Init+0x16c>)
 800160e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001612:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800161a:	4b42      	ldr	r3, [pc, #264]	; (8001724 <MX_TIM1_Init+0x16c>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001626:	483f      	ldr	r0, [pc, #252]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001628:	f001 fd9a 	bl	8003160 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001632:	f7ff fe0b 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001640:	4619      	mov	r1, r3
 8001642:	4838      	ldr	r0, [pc, #224]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001644:	f002 fef2 	bl	800442c <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800164e:	f7ff fdfd 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001652:	4834      	ldr	r0, [pc, #208]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001654:	f001 ff1a 	bl	800348c <HAL_TIM_OC_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800165e:	f7ff fdf5 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001672:	4619      	mov	r1, r3
 8001674:	482b      	ldr	r0, [pc, #172]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001676:	f004 fa33 	bl	8005ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001680:	f7ff fde4 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001684:	2330      	movs	r3, #48	; 0x30
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001690:	2300      	movs	r3, #0
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	481e      	ldr	r0, [pc, #120]	; (8001724 <MX_TIM1_Init+0x16c>)
 80016aa:	f002 fcf1 	bl	8004090 <HAL_TIM_OC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016b4:	f7ff fdca 	bl	800124c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <MX_TIM1_Init+0x16c>)
 80016f6:	f004 fb57 	bl	8005da8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001700:	f7ff fda4 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001706:	f001 fe0d 	bl	8003324 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65535-1000);
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_TIM1_Init+0x16c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f64f 4217 	movw	r2, #64535	; 0xfc17
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001714:	2100      	movs	r1, #0
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM1_Init+0x16c>)
 8001718:	f001 ffa4 	bl	8003664 <HAL_TIM_OC_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	3770      	adds	r7, #112	; 0x70
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000874 	.word	0x20000874
 8001728:	40012c00 	.word	0x40012c00

0800172c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_TIM_Base_MspInit+0x54>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d11b      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_TIM_Base_MspInit+0x58>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_TIM_Base_MspInit+0x58>)
 8001744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_TIM_Base_MspInit+0x58>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	2019      	movs	r0, #25
 800175c:	f000 fa0a 	bl	8001b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001760:	2019      	movs	r0, #25
 8001762:	f000 fa31 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	201b      	movs	r0, #27
 800176c:	f000 fa02 	bl	8001b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001770:	201b      	movs	r0, #27
 8001772:	f000 fa29 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40012c00 	.word	0x40012c00
 8001784:	40021000 	.word	0x40021000

08001788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b2:	f7ff feef 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f009 f897 	bl	800a8e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ba:	f7ff fcdb 	bl	8001174 <main>

080017be <LoopForever>:

LoopForever:
    b LoopForever
 80017be:	e7fe      	b.n	80017be <LoopForever>
  ldr   r0, =_estack
 80017c0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017cc:	0800bcc4 	.word	0x0800bcc4
  ldr r2, =_sbss
 80017d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017d4:	20009338 	.word	0x20009338

080017d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_2_IRQHandler>

080017da <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
 80017ec:	f7ff fd2e 	bl	800124c <Error_Handler>
 80017f0:	e7fe      	b.n	80017f0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e007      	b.n	8001808 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	2100      	movs	r1, #0
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d9f4      	bls.n	80017f8 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	721a      	strb	r2, [r3, #8]
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d104      	bne.n	8001834 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800182a:	b672      	cpsid	i
}
 800182c:	bf00      	nop
 800182e:	f7ff fd0d 	bl	800124c <Error_Handler>
 8001832:	e7fe      	b.n	8001832 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7a1b      	ldrb	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d904      	bls.n	8001846 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
 8001840:	f7ff fd04 	bl	800124c <Error_Handler>
 8001844:	e7fe      	b.n	8001844 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7a1b      	ldrb	r3, [r3, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	b2d1      	uxtb	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	7211      	strb	r1, [r2, #8]
 8001852:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001854:	f3ef 8211 	mrs	r2, BASEPRI
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	60fa      	str	r2, [r7, #12]
 800186a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d104      	bne.n	8001894 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
}
 800188c:	bf00      	nop
 800188e:	f7ff fcdd 	bl	800124c <Error_Handler>
 8001892:	e7fe      	b.n	8001892 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7a1b      	ldrb	r3, [r3, #8]
 8001898:	3b01      	subs	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7a1b      	ldrb	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d904      	bls.n	80018b2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
 80018ac:	f7ff fcce 	bl	800124c <Error_Handler>
 80018b0:	e7fe      	b.n	80018b0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7a1b      	ldrb	r3, [r3, #8]
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018be:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80018c6:	bf00      	nop
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80018de:	f008 ff07 	bl	800a6f0 <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2216      	movs	r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
    return;
 80018e8:	e015      	b.n	8001916 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80018ea:	200c      	movs	r0, #12
 80018ec:	f009 f820 	bl	800a930 <malloc>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff68 	bl	80017da <stm32_lock_init>
    return;
 800190a:	e004      	b.n	8001916 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001910:	f7ff fc9c 	bl	800124c <Error_Handler>
 8001914:	e7fe      	b.n	8001914 <__retarget_lock_init_recursive+0x44>
}
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d104      	bne.n	8001934 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800192a:	b672      	cpsid	i
}
 800192c:	bf00      	nop
 800192e:	f7ff fc8d 	bl	800124c <Error_Handler>
 8001932:	e7fe      	b.n	8001932 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff70 	bl	800181c <stm32_lock_acquire>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d104      	bne.n	800195c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001952:	b672      	cpsid	i
}
 8001954:	bf00      	nop
 8001956:	f7ff fc79 	bl	800124c <Error_Handler>
 800195a:	e7fe      	b.n	800195a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff8c 	bl	800187c <stm32_lock_release>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001976:	2003      	movs	r0, #3
 8001978:	f000 f8dc 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197c:	200f      	movs	r0, #15
 800197e:	f7ff fc9b 	bl	80012b8 <HAL_InitTick>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	e001      	b.n	8001992 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198e:	f7ff fc69 	bl	8001264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001992:	79fb      	ldrb	r3, [r7, #7]

}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_IncTick+0x1c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x20>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <HAL_IncTick+0x1c>)
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	200008e4 	.word	0x200008e4
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200008e4 	.word	0x200008e4

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d00f      	beq.n	8001b62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b06      	cmp	r3, #6
 8001b46:	d00c      	beq.n	8001b62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d009      	beq.n	8001b62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d006      	beq.n	8001b62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d003      	beq.n	8001b62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b5a:	21a6      	movs	r1, #166	; 0xa6
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001b5e:	f7ff fb7a 	bl	8001256 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff38 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0800b994 	.word	0x0800b994

08001b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d903      	bls.n	8001b90 <HAL_NVIC_SetPriority+0x1c>
 8001b88:	21be      	movs	r1, #190	; 0xbe
 8001b8a:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <HAL_NVIC_SetPriority+0x50>)
 8001b8c:	f7ff fb63 	bl	8001256 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d903      	bls.n	8001b9e <HAL_NVIC_SetPriority+0x2a>
 8001b96:	21bf      	movs	r1, #191	; 0xbf
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <HAL_NVIC_SetPriority+0x50>)
 8001b9a:	f7ff fb5c 	bl	8001256 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9e:	f7ff ff3f 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001ba2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	6978      	ldr	r0, [r7, #20]
 8001baa:	f7ff ff8f 	bl	8001acc <NVIC_EncodePriority>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff5e 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800b994 	.word	0x0800b994

08001bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da03      	bge.n	8001be2 <HAL_NVIC_EnableIRQ+0x1a>
 8001bda:	21d2      	movs	r1, #210	; 0xd2
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001bde:	f7ff fb3a 	bl	8001256 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff28 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800b994 	.word	0x0800b994

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c0c:	d01b      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a38      	ldr	r2, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0xfc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a37      	ldr	r2, [pc, #220]	; (8001cf8 <HAL_GPIO_Init+0x100>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a36      	ldr	r2, [pc, #216]	; (8001cfc <HAL_GPIO_Init+0x104>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00f      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a35      	ldr	r2, [pc, #212]	; (8001d00 <HAL_GPIO_Init+0x108>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00b      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a34      	ldr	r2, [pc, #208]	; (8001d04 <HAL_GPIO_Init+0x10c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a33      	ldr	r2, [pc, #204]	; (8001d08 <HAL_GPIO_Init+0x110>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x4e>
 8001c3e:	21a9      	movs	r1, #169	; 0xa9
 8001c40:	4832      	ldr	r0, [pc, #200]	; (8001d0c <HAL_GPIO_Init+0x114>)
 8001c42:	f7ff fb08 	bl	8001256 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_GPIO_Init+0x64>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x6c>
 8001c5c:	21aa      	movs	r1, #170	; 0xaa
 8001c5e:	482b      	ldr	r0, [pc, #172]	; (8001d0c <HAL_GPIO_Init+0x114>)
 8001c60:	f7ff faf9 	bl	8001256 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 820a 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	f000 8205 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	f000 8200 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	f000 81fb 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	f000 81f6 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001c9e:	f000 81f0 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001caa:	f000 81ea 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001cb6:	f000 81e4 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001cc2:	f000 81de 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001cce:	f000 81d8 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001cda:	f000 81d2 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	f000 81cd 	beq.w	8002082 <HAL_GPIO_Init+0x48a>
 8001ce8:	21ab      	movs	r1, #171	; 0xab
 8001cea:	4808      	ldr	r0, [pc, #32]	; (8001d0c <HAL_GPIO_Init+0x114>)
 8001cec:	f7ff fab3 	bl	8001256 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf0:	e1c7      	b.n	8002082 <HAL_GPIO_Init+0x48a>
 8001cf2:	bf00      	nop
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	48000c00 	.word	0x48000c00
 8001d00:	48001000 	.word	0x48001000
 8001d04:	48001400 	.word	0x48001400
 8001d08:	48001800 	.word	0x48001800
 8001d0c:	0800b9d0 	.word	0x0800b9d0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 81aa 	beq.w	800207c <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d005      	beq.n	8001d40 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d144      	bne.n	8001dca <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00f      	beq.n	8001d68 <HAL_GPIO_Init+0x170>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00b      	beq.n	8001d68 <HAL_GPIO_Init+0x170>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x170>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x170>
 8001d60:	21bb      	movs	r1, #187	; 0xbb
 8001d62:	488b      	ldr	r0, [pc, #556]	; (8001f90 <HAL_GPIO_Init+0x398>)
 8001d64:	f7ff fa77 	bl	8001256 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d027      	beq.n	8001e26 <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_GPIO_Init+0x1fe>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x1fe>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x1fe>
 8001dee:	21cc      	movs	r1, #204	; 0xcc
 8001df0:	4867      	ldr	r0, [pc, #412]	; (8001f90 <HAL_GPIO_Init+0x398>)
 8001df2:	f7ff fa30 	bl	8001256 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d14b      	bne.n	8001eca <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e38:	d01b      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <HAL_GPIO_Init+0x39c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d017      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a54      	ldr	r2, [pc, #336]	; (8001f98 <HAL_GPIO_Init+0x3a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a53      	ldr	r2, [pc, #332]	; (8001f9c <HAL_GPIO_Init+0x3a4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_GPIO_Init+0x3a8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_GPIO_Init+0x3ac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_GPIO_Init+0x3b0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x27a>
 8001e6a:	21d9      	movs	r1, #217	; 0xd9
 8001e6c:	4848      	ldr	r0, [pc, #288]	; (8001f90 <HAL_GPIO_Init+0x398>)
 8001e6e:	f7ff f9f2 	bl	8001256 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	d903      	bls.n	8001e82 <HAL_GPIO_Init+0x28a>
 8001e7a:	21da      	movs	r1, #218	; 0xda
 8001e7c:	4844      	ldr	r0, [pc, #272]	; (8001f90 <HAL_GPIO_Init+0x398>)
 8001e7e:	f7ff f9ea 	bl	8001256 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80b8 	beq.w	800207c <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_GPIO_Init+0x3b4>)
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_GPIO_Init+0x3b4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6613      	str	r3, [r2, #96]	; 0x60
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_GPIO_Init+0x3b4>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f24:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_GPIO_Init+0x3b8>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f4e:	d031      	beq.n	8001fb4 <HAL_GPIO_Init+0x3bc>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_GPIO_Init+0x39c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x394>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_GPIO_Init+0x3a0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x390>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_GPIO_Init+0x3a4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x38c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_GPIO_Init+0x3a8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x388>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <HAL_GPIO_Init+0x3ac>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x384>
 8001f78:	2305      	movs	r3, #5
 8001f7a:	e01c      	b.n	8001fb6 <HAL_GPIO_Init+0x3be>
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	e01a      	b.n	8001fb6 <HAL_GPIO_Init+0x3be>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e018      	b.n	8001fb6 <HAL_GPIO_Init+0x3be>
 8001f84:	2303      	movs	r3, #3
 8001f86:	e016      	b.n	8001fb6 <HAL_GPIO_Init+0x3be>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e014      	b.n	8001fb6 <HAL_GPIO_Init+0x3be>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e012      	b.n	8001fb6 <HAL_GPIO_Init+0x3be>
 8001f90:	0800b9d0 	.word	0x0800b9d0
 8001f94:	48000400 	.word	0x48000400
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	48000c00 	.word	0x48000c00
 8001fa0:	48001000 	.word	0x48001000
 8001fa4:	48001400 	.word	0x48001400
 8001fa8:	48001800 	.word	0x48001800
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc6:	4935      	ldr	r1, [pc, #212]	; (800209c <HAL_GPIO_Init+0x4a4>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_GPIO_Init+0x4a8>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f ae3f 	bne.w	8001d10 <HAL_GPIO_Init+0x118>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_GPIO_WritePin+0x20>
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <HAL_GPIO_WritePin+0x2a>
 80020c4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <HAL_GPIO_WritePin+0x5c>)
 80020ca:	f7ff f8c4 	bl	8001256 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80020ce:	787b      	ldrb	r3, [r7, #1]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_WritePin+0x40>
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d004      	beq.n	80020e4 <HAL_GPIO_WritePin+0x40>
 80020da:	f240 119b 	movw	r1, #411	; 0x19b
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_GPIO_WritePin+0x5c>)
 80020e0:	f7ff f8b9 	bl	8001256 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	0800b9d0 	.word	0x0800b9d0

08002104 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_GPIO_TogglePin+0x1c>
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_GPIO_TogglePin+0x26>
 8002120:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002124:	480a      	ldr	r0, [pc, #40]	; (8002150 <HAL_GPIO_TogglePin+0x4c>)
 8002126:	f7ff f896 	bl	8001256 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	041a      	lsls	r2, r3, #16
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43d9      	mvns	r1, r3
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	400b      	ands	r3, r1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	0800b9d0 	.word	0x0800b9d0

08002154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f806 	bl	8002184 <HAL_GPIO_EXTI_Callback>
  }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d007      	beq.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d003      	beq.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80021ba:	219d      	movs	r1, #157	; 0x9d
 80021bc:	484d      	ldr	r0, [pc, #308]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80021be:	f7ff f84a 	bl	8001256 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d141      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d131      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d6:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80021d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021dc:	4a46      	ldr	r2, [pc, #280]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80021de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ee:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80021f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0x160>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2232      	movs	r2, #50	; 0x32
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	e002      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002220:	d102      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	d158      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e057      	b.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800223c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002240:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002246:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800224a:	e04d      	b.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002252:	d141      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002260:	d131      	bne.n	80022c6 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002262:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002268:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800227a:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800227c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0x160>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2232      	movs	r2, #50	; 0x32
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9b      	lsrs	r3, r3, #18
 8002294:	3301      	adds	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002298:	e002      	b.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3b01      	subs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ac:	d102      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x118>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f2      	bne.n	800229a <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c0:	d112      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e011      	b.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022d6:	e007      	b.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e0:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	0800ba0c 	.word	0x0800ba0c
 80022f8:	40007000 	.word	0x40007000
 80022fc:	20000000 	.word	0x20000000
 8002300:	431bde83 	.word	0x431bde83

08002304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800230e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002312:	6093      	str	r3, [r2, #8]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40007000 	.word	0x40007000

08002324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f000 bc02 	b.w	8002b3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d022      	beq.n	8002386 <HAL_RCC_OscConfig+0x62>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11c      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d110      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
 800237c:	f240 1145 	movw	r1, #325	; 0x145
 8002380:	4892      	ldr	r0, [pc, #584]	; (80025cc <HAL_RCC_OscConfig+0x2a8>)
 8002382:	f7fe ff68 	bl	8001256 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8089 	beq.w	80024a6 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <HAL_RCC_OscConfig+0x96>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_OscConfig+0x96>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ae:	d004      	beq.n	80023ba <HAL_RCC_OscConfig+0x96>
 80023b0:	f240 114b 	movw	r1, #331	; 0x14b
 80023b4:	4885      	ldr	r0, [pc, #532]	; (80025cc <HAL_RCC_OscConfig+0x2a8>)
 80023b6:	f7fe ff4e 	bl	8001256 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b85      	ldr	r3, [pc, #532]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0xb6>
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_OscConfig+0xbc>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d10b      	bne.n	80023f8 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x180>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e3a1      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0xec>
 8002402:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a72      	ldr	r2, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0x128>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x110>
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6c      	ldr	r2, [pc, #432]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a69      	ldr	r2, [pc, #420]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x128>
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a65      	ldr	r2, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a62      	ldr	r2, [pc, #392]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff fab4 	bl	80019c0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fab0 	bl	80019c0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e366      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x138>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff faa0 	bl	80019c0 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fa9c 	bl	80019c0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e352      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x160>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8093 	beq.w	80025da <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_RCC_OscConfig+0x1ac>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c4:	d004      	beq.n	80024d0 <HAL_RCC_OscConfig+0x1ac>
 80024c6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80024ca:	4840      	ldr	r0, [pc, #256]	; (80025cc <HAL_RCC_OscConfig+0x2a8>)
 80024cc:	f7fe fec3 	bl	8001256 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b7f      	cmp	r3, #127	; 0x7f
 80024d6:	d904      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1be>
 80024d8:	f240 1181 	movw	r1, #385	; 0x181
 80024dc:	483b      	ldr	r0, [pc, #236]	; (80025cc <HAL_RCC_OscConfig+0x2a8>)
 80024de:	f7fe feba 	bl	8001256 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d102      	bne.n	8002502 <HAL_RCC_OscConfig+0x1de>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d002      	beq.n	8002508 <HAL_RCC_OscConfig+0x1e4>
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d11f      	bne.n	8002548 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x1fc>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e30d      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4928      	ldr	r1, [pc, #160]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002534:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <HAL_RCC_OscConfig+0x2b0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe febd 	bl	80012b8 <HAL_InitTick>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d049      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e2f9      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d023      	beq.n	8002598 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fa30 	bl	80019c0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7ff fa2c 	bl	80019c0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e2e2      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	490f      	ldr	r1, [pc, #60]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
 8002596:	e020      	b.n	80025da <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fa0c 	bl	80019c0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff fa08 	bl	80019c0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e2be      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x288>
 80025ca:	e006      	b.n	80025da <HAL_RCC_OscConfig+0x2b6>
 80025cc:	0800ba48 	.word	0x0800ba48
 80025d0:	40021000 	.word	0x40021000
 80025d4:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d049      	beq.n	800267a <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCC_OscConfig+0x2dc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d004      	beq.n	8002600 <HAL_RCC_OscConfig+0x2dc>
 80025f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80025fa:	48a3      	ldr	r0, [pc, #652]	; (8002888 <HAL_RCC_OscConfig+0x564>)
 80025fc:	f7fe fe2b 	bl	8001256 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002608:	4ba0      	ldr	r3, [pc, #640]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260e:	4a9f      	ldr	r2, [pc, #636]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff f9d2 	bl	80019c0 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff f9ce 	bl	80019c0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e284      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002632:	4b96      	ldr	r3, [pc, #600]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCC_OscConfig+0x2fc>
 8002640:	e01b      	b.n	800267a <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002642:	4b92      	ldr	r3, [pc, #584]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002648:	4a90      	ldr	r2, [pc, #576]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7ff f9b5 	bl	80019c0 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265a:	f7ff f9b1 	bl	80019c0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e267      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266c:	4b87      	ldr	r3, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ef      	bne.n	800265a <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80b7 	beq.w	80027f6 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <HAL_RCC_OscConfig+0x38a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d008      	beq.n	80026ae <HAL_RCC_OscConfig+0x38a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d004      	beq.n	80026ae <HAL_RCC_OscConfig+0x38a>
 80026a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026a8:	4877      	ldr	r0, [pc, #476]	; (8002888 <HAL_RCC_OscConfig+0x564>)
 80026aa:	f7fe fdd4 	bl	8001256 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ae:	4b77      	ldr	r3, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x39a>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x39c>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6593      	str	r3, [r2, #88]	; 0x58
 80026d0:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026dc:	2301      	movs	r3, #1
 80026de:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e0:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <HAL_RCC_OscConfig+0x56c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d118      	bne.n	800271e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x56c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x56c>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f8:	f7ff f962 	bl	80019c0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7ff f95e 	bl	80019c0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e214      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_RCC_OscConfig+0x56c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x414>
 8002726:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002736:	e024      	b.n	8002782 <HAL_RCC_OscConfig+0x45e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d110      	bne.n	8002762 <HAL_RCC_OscConfig+0x43e>
 8002740:	4b52      	ldr	r3, [pc, #328]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002750:	4b4e      	ldr	r3, [pc, #312]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	4a4d      	ldr	r2, [pc, #308]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002760:	e00f      	b.n	8002782 <HAL_RCC_OscConfig+0x45e>
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	4a48      	ldr	r2, [pc, #288]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	4a44      	ldr	r2, [pc, #272]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff f919 	bl	80019c0 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff f915 	bl	80019c0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1c9      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a8:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ed      	beq.n	8002792 <HAL_RCC_OscConfig+0x46e>
 80027b6:	e015      	b.n	80027e4 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7ff f902 	bl	80019c0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7ff f8fe 	bl	80019c0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1b2      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ed      	bne.n	80027c0 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e4:	7ffb      	ldrb	r3, [r7, #31]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x568>)
 80027f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04f      	beq.n	80028a2 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_RCC_OscConfig+0x4f8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d004      	beq.n	800281c <HAL_RCC_OscConfig+0x4f8>
 8002812:	f240 213b 	movw	r1, #571	; 0x23b
 8002816:	481c      	ldr	r0, [pc, #112]	; (8002888 <HAL_RCC_OscConfig+0x564>)
 8002818:	f7fe fd1d 	bl	8001256 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01c      	beq.n	800285e <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_RCC_OscConfig+0x568>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff f8c4 	bl	80019c0 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283c:	f7ff f8c0 	bl	80019c0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e176      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <HAL_RCC_OscConfig+0x518>
 800285c:	e021      	b.n	80028a2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_OscConfig+0x568>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f8a7 	bl	80019c0 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002876:	f7ff f8a3 	bl	80019c0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e159      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
 8002888:	0800ba48 	.word	0x0800ba48
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002894:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e9      	bne.n	8002876 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a0>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d008      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a0>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d004      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a0>
 80028ba:	f44f 7119 	mov.w	r1, #612	; 0x264
 80028be:	4880      	ldr	r0, [pc, #512]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 80028c0:	f7fe fcc9 	bl	8001256 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8136 	beq.w	8002b3a <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ce:	4b7b      	ldr	r3, [pc, #492]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	f000 80ea 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	f040 80bd 	bne.w	8002a60 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_OscConfig+0x5e4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_OscConfig+0x5e4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d004      	beq.n	8002908 <HAL_RCC_OscConfig+0x5e4>
 80028fe:	f240 216e 	movw	r1, #622	; 0x26e
 8002902:	486f      	ldr	r0, [pc, #444]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 8002904:	f7fe fca7 	bl	8001256 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_RCC_OscConfig+0x5f4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b10      	cmp	r3, #16
 8002916:	d904      	bls.n	8002922 <HAL_RCC_OscConfig+0x5fe>
 8002918:	f240 216f 	movw	r1, #623	; 0x26f
 800291c:	4868      	ldr	r0, [pc, #416]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 800291e:	f7fe fc9a 	bl	8001256 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	2b07      	cmp	r3, #7
 8002928:	d903      	bls.n	8002932 <HAL_RCC_OscConfig+0x60e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2b7f      	cmp	r3, #127	; 0x7f
 8002930:	d904      	bls.n	800293c <HAL_RCC_OscConfig+0x618>
 8002932:	f44f 711c 	mov.w	r1, #624	; 0x270
 8002936:	4862      	ldr	r0, [pc, #392]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 8002938:	f7fe fc8d 	bl	8001256 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d903      	bls.n	800294c <HAL_RCC_OscConfig+0x628>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2b1f      	cmp	r3, #31
 800294a:	d904      	bls.n	8002956 <HAL_RCC_OscConfig+0x632>
 800294c:	f240 2171 	movw	r1, #625	; 0x271
 8002950:	485b      	ldr	r0, [pc, #364]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 8002952:	f7fe fc80 	bl	8001256 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	2b02      	cmp	r3, #2
 800295c:	d010      	beq.n	8002980 <HAL_RCC_OscConfig+0x65c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	2b04      	cmp	r3, #4
 8002964:	d00c      	beq.n	8002980 <HAL_RCC_OscConfig+0x65c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	2b06      	cmp	r3, #6
 800296c:	d008      	beq.n	8002980 <HAL_RCC_OscConfig+0x65c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	2b08      	cmp	r3, #8
 8002974:	d004      	beq.n	8002980 <HAL_RCC_OscConfig+0x65c>
 8002976:	f240 2172 	movw	r1, #626	; 0x272
 800297a:	4851      	ldr	r0, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 800297c:	f7fe fc6b 	bl	8001256 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2b02      	cmp	r3, #2
 8002986:	d010      	beq.n	80029aa <HAL_RCC_OscConfig+0x686>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2b04      	cmp	r3, #4
 800298e:	d00c      	beq.n	80029aa <HAL_RCC_OscConfig+0x686>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	2b06      	cmp	r3, #6
 8002996:	d008      	beq.n	80029aa <HAL_RCC_OscConfig+0x686>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b08      	cmp	r3, #8
 800299e:	d004      	beq.n	80029aa <HAL_RCC_OscConfig+0x686>
 80029a0:	f240 2173 	movw	r1, #627	; 0x273
 80029a4:	4846      	ldr	r0, [pc, #280]	; (8002ac0 <HAL_RCC_OscConfig+0x79c>)
 80029a6:	f7fe fc56 	bl	8001256 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a43      	ldr	r2, [pc, #268]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7ff f803 	bl	80019c0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe ffff 	bl	80019c0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0b5      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <HAL_RCC_OscConfig+0x7a0>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6a11      	ldr	r1, [r2, #32]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029f6:	0212      	lsls	r2, r2, #8
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0552      	lsls	r2, r2, #21
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0652      	lsls	r2, r2, #25
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a16:	06d2      	lsls	r2, r2, #27
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	4928      	ldr	r1, [pc, #160]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe ffc2 	bl	80019c0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe ffbe 	bl	80019c0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e074      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x71c>
 8002a5e:	e06c      	b.n	8002b3a <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002a7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe ff9a 	bl	80019c0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe ff96 	bl	80019c0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04c      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_OscConfig+0x798>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x76c>
 8002aae:	e044      	b.n	8002b3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e03f      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	0800ba48 	.word	0x0800ba48
 8002ac4:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_OscConfig+0x820>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d12c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d123      	bne.n	8002b36 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d11b      	bne.n	8002b36 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d113      	bne.n	8002b36 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e1e2      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x30>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 030f 	bic.w	r3, r3, #15
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x3a>
 8002b78:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8002b7c:	4869      	ldr	r0, [pc, #420]	; (8002d24 <HAL_RCC_ClockConfig+0x1dc>)
 8002b7e:	f7fe fb6a 	bl	8001256 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d031      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d02e      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d02b      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d028      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d025      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d022      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	d01f      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b07      	cmp	r3, #7
 8002bb0:	d01c      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d019      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b09      	cmp	r3, #9
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b0a      	cmp	r3, #10
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b0b      	cmp	r3, #11
 8002bc8:	d010      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	d00d      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b0d      	cmp	r3, #13
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b0e      	cmp	r3, #14
 8002bda:	d007      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	d004      	beq.n	8002bec <HAL_RCC_ClockConfig+0xa4>
 8002be2:	f240 310d 	movw	r1, #781	; 0x30d
 8002be6:	484f      	ldr	r0, [pc, #316]	; (8002d24 <HAL_RCC_ClockConfig+0x1dc>)
 8002be8:	f7fe fb35 	bl	8001256 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <HAL_RCC_ClockConfig+0x1e0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_ClockConfig+0x1e0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 020f 	bic.w	r2, r3, #15
 8002c02:	4949      	ldr	r1, [pc, #292]	; (8002d28 <HAL_RCC_ClockConfig+0x1e0>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_ClockConfig+0x1e0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e184      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 808e 	beq.w	8002d46 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x104>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d008      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x104>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d004      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x104>
 8002c42:	f44f 7149 	mov.w	r1, #804	; 0x324
 8002c46:	4837      	ldr	r0, [pc, #220]	; (8002d24 <HAL_RCC_ClockConfig+0x1dc>)
 8002c48:	f7fe fb05 	bl	8001256 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d129      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c54:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e160      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c64:	f000 fa36 	bl	80030d4 <RCC_GetSysClockFreqFromPLLSource>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <HAL_RCC_ClockConfig+0x1e8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d93f      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d033      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12f      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e024      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e132      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e12a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cd0:	f000 f93a 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <HAL_RCC_ClockConfig+0x1e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d909      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	490b      	ldr	r1, [pc, #44]	; (8002d2c <HAL_RCC_ClockConfig+0x1e4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fe5c 	bl	80019c0 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e013      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fe58 	bl	80019c0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d90a      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e101      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
 8002d22:	bf00      	nop
 8002d24:	0800ba48 	.word	0x0800ba48
 8002d28:	40022000 	.word	0x40022000
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 020c 	and.w	r2, r3, #12
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d1e2      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04c      	beq.n	8002dec <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5e:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4a73      	ldr	r2, [pc, #460]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002d64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d68:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d76:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002d80:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d84:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d024      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d020      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b90      	cmp	r3, #144	; 0x90
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2ba0      	cmp	r3, #160	; 0xa0
 8002da4:	d018      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2bb0      	cmp	r3, #176	; 0xb0
 8002dac:	d014      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2bc0      	cmp	r3, #192	; 0xc0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2bd0      	cmp	r3, #208	; 0xd0
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2be0      	cmp	r3, #224	; 0xe0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2bf0      	cmp	r3, #240	; 0xf0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x290>
 8002dce:	f240 317b 	movw	r1, #891	; 0x37b
 8002dd2:	4858      	ldr	r0, [pc, #352]	; (8002f34 <HAL_RCC_ClockConfig+0x3ec>)
 8002dd4:	f7fe fa3f 	bl	8001256 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4952      	ldr	r1, [pc, #328]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b80      	cmp	r3, #128	; 0x80
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002df2:	4b4f      	ldr	r3, [pc, #316]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4a4e      	ldr	r2, [pc, #312]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <HAL_RCC_ClockConfig+0x3f0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d21d      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_RCC_ClockConfig+0x3f0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 020f 	bic.w	r2, r3, #15
 8002e14:	4948      	ldr	r1, [pc, #288]	; (8002f38 <HAL_RCC_ClockConfig+0x3f0>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fdd0 	bl	80019c0 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fdcc 	bl	80019c0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e075      	b.n	8002f26 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x3f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1ed      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d025      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d018      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x346>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d013      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x346>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e6e:	d00e      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x346>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x346>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e82:	d004      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x346>
 8002e84:	f240 319d 	movw	r1, #925	; 0x39d
 8002e88:	482a      	ldr	r0, [pc, #168]	; (8002f34 <HAL_RCC_ClockConfig+0x3ec>)
 8002e8a:	f7fe f9e4 	bl	8001256 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d026      	beq.n	8002efa <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d018      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x39e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d013      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x39e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x39e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x39e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eda:	d004      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x39e>
 8002edc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002ee0:	4814      	ldr	r0, [pc, #80]	; (8002f34 <HAL_RCC_ClockConfig+0x3ec>)
 8002ee2:	f7fe f9b8 	bl	8001256 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002efa:	f000 f825 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_ClockConfig+0x3e8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	490c      	ldr	r1, [pc, #48]	; (8002f3c <HAL_RCC_ClockConfig+0x3f4>)
 8002f0c:	5ccb      	ldrb	r3, [r1, r3]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x3f8>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x3fc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f9ca 	bl	80012b8 <HAL_InitTick>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	0800ba48 	.word	0x0800ba48
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	0800bb98 	.word	0x0800bb98
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e047      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f6c:	4b26      	ldr	r3, [pc, #152]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e03e      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d136      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	0a12      	lsrs	r2, r2, #8
 8002faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
      break;
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	0a12      	lsrs	r2, r2, #8
 8002fc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
      break;
 8002fce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0e5b      	lsrs	r3, r3, #25
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e001      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ff0:	693b      	ldr	r3, [r7, #16]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	00f42400 	.word	0x00f42400
 8003008:	016e3600 	.word	0x016e3600

0800300c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCC_GetHCLKFreq+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000000 	.word	0x20000000

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003028:	f7ff fff0 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_RCC_GetPCLK1Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	0800bba8 	.word	0x0800bba8

08003050 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_RCC_GetClockConfig+0x1a>
 8003060:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8003064:	4818      	ldr	r0, [pc, #96]	; (80030c8 <HAL_RCC_GetClockConfig+0x78>)
 8003066:	f7fe f8f6 	bl	8001256 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_RCC_GetClockConfig+0x2a>
 8003070:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8003074:	4814      	ldr	r0, [pc, #80]	; (80030c8 <HAL_RCC_GetClockConfig+0x78>)
 8003076:	f7fe f8ee 	bl	8001256 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220f      	movs	r2, #15
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_GetClockConfig+0x7c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_RCC_GetClockConfig+0x80>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	0800ba48 	.word	0x0800ba48
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40022000 	.word	0x40022000

080030d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d10c      	bne.n	8003112 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030f8:	4a17      	ldr	r2, [pc, #92]	; (8003158 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003102:	68d2      	ldr	r2, [r2, #12]
 8003104:	0a12      	lsrs	r2, r2, #8
 8003106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
    break;
 8003110:	e00c      	b.n	800312c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	0a12      	lsrs	r2, r2, #8
 8003120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
    break;
 800312a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0e5b      	lsrs	r3, r3, #25
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003146:	687b      	ldr	r3, [r7, #4]
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40021000 	.word	0x40021000
 8003158:	016e3600 	.word	0x016e3600
 800315c:	00f42400 	.word	0x00f42400

08003160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0be      	b.n	80032f0 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a60      	ldr	r2, [pc, #384]	; (80032f8 <HAL_TIM_Base_Init+0x198>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d031      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_TIM_Base_Init+0x19c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02c      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <HAL_TIM_Base_Init+0x1a0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d027      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a59      	ldr	r2, [pc, #356]	; (8003304 <HAL_TIM_Base_Init+0x1a4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_TIM_Base_Init+0x1a8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_TIM_Base_Init+0x1ac>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a54      	ldr	r2, [pc, #336]	; (8003310 <HAL_TIM_Base_Init+0x1b0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_TIM_Base_Init+0x1b4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_TIM_Base_Init+0x1b8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_TIM_Base_Init+0x1bc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIM_Base_Init+0x8a>
 80031e0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80031e4:	484e      	ldr	r0, [pc, #312]	; (8003320 <HAL_TIM_Base_Init+0x1c0>)
 80031e6:	f7fe f836 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d014      	beq.n	800321c <HAL_TIM_Base_Init+0xbc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d010      	beq.n	800321c <HAL_TIM_Base_Init+0xbc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d00c      	beq.n	800321c <HAL_TIM_Base_Init+0xbc>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d008      	beq.n	800321c <HAL_TIM_Base_Init+0xbc>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b60      	cmp	r3, #96	; 0x60
 8003210:	d004      	beq.n	800321c <HAL_TIM_Base_Init+0xbc>
 8003212:	f240 1123 	movw	r1, #291	; 0x123
 8003216:	4842      	ldr	r0, [pc, #264]	; (8003320 <HAL_TIM_Base_Init+0x1c0>)
 8003218:	f7fe f81d 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00e      	beq.n	8003242 <HAL_TIM_Base_Init+0xe2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322c:	d009      	beq.n	8003242 <HAL_TIM_Base_Init+0xe2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d004      	beq.n	8003242 <HAL_TIM_Base_Init+0xe2>
 8003238:	f44f 7192 	mov.w	r1, #292	; 0x124
 800323c:	4838      	ldr	r0, [pc, #224]	; (8003320 <HAL_TIM_Base_Init+0x1c0>)
 800323e:	f7fe f80a 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_TIM_Base_Init+0xfc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d004      	beq.n	800325c <HAL_TIM_Base_Init+0xfc>
 8003252:	f240 1125 	movw	r1, #293	; 0x125
 8003256:	4832      	ldr	r0, [pc, #200]	; (8003320 <HAL_TIM_Base_Init+0x1c0>)
 8003258:	f7fd fffd 	bl	8001256 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fe fa5b 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f001 fea9 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40001000 	.word	0x40001000
 8003308:	40001400 	.word	0x40001400
 800330c:	40013400 	.word	0x40013400
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	40014800 	.word	0x40014800
 800331c:	40015000 	.word	0x40015000
 8003320:	0800ba80 	.word	0x0800ba80

08003324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <HAL_TIM_Base_Start_IT+0x138>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d031      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a46      	ldr	r2, [pc, #280]	; (8003460 <HAL_TIM_Base_Start_IT+0x13c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a45      	ldr	r2, [pc, #276]	; (8003464 <HAL_TIM_Base_Start_IT+0x140>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a43      	ldr	r2, [pc, #268]	; (8003468 <HAL_TIM_Base_Start_IT+0x144>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_TIM_Base_Start_IT+0x148>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a40      	ldr	r2, [pc, #256]	; (8003470 <HAL_TIM_Base_Start_IT+0x14c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3f      	ldr	r2, [pc, #252]	; (8003474 <HAL_TIM_Base_Start_IT+0x150>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3d      	ldr	r2, [pc, #244]	; (8003478 <HAL_TIM_Base_Start_IT+0x154>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a3c      	ldr	r2, [pc, #240]	; (800347c <HAL_TIM_Base_Start_IT+0x158>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <HAL_TIM_Base_Start_IT+0x15c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800339a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800339e:	4839      	ldr	r0, [pc, #228]	; (8003484 <HAL_TIM_Base_Start_IT+0x160>)
 80033a0:	f7fd ff59 	bl	8001256 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e04f      	b.n	8003454 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_TIM_Base_Start_IT+0x138>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0xee>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d018      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0xee>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_TIM_Base_Start_IT+0x13c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0xee>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_TIM_Base_Start_IT+0x140>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0xee>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_TIM_Base_Start_IT+0x14c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0xee>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_TIM_Base_Start_IT+0x150>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0xee>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_TIM_Base_Start_IT+0x15c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d115      	bne.n	800343e <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_TIM_Base_Start_IT+0x164>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d015      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x12c>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d011      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e008      	b.n	8003450 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e000      	b.n	8003452 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40001000 	.word	0x40001000
 800346c:	40001400 	.word	0x40001400
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800
 8003480:	40015000 	.word	0x40015000
 8003484:	0800ba80 	.word	0x0800ba80
 8003488:	00010007 	.word	0x00010007

0800348c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0be      	b.n	800361c <HAL_TIM_OC_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a60      	ldr	r2, [pc, #384]	; (8003624 <HAL_TIM_OC_Init+0x198>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d031      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5c      	ldr	r2, [pc, #368]	; (8003628 <HAL_TIM_OC_Init+0x19c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5a      	ldr	r2, [pc, #360]	; (800362c <HAL_TIM_OC_Init+0x1a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a59      	ldr	r2, [pc, #356]	; (8003630 <HAL_TIM_OC_Init+0x1a4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_TIM_OC_Init+0x1a8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_TIM_OC_Init+0x1ac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a54      	ldr	r2, [pc, #336]	; (800363c <HAL_TIM_OC_Init+0x1b0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a53      	ldr	r2, [pc, #332]	; (8003640 <HAL_TIM_OC_Init+0x1b4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a51      	ldr	r2, [pc, #324]	; (8003644 <HAL_TIM_OC_Init+0x1b8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a50      	ldr	r2, [pc, #320]	; (8003648 <HAL_TIM_OC_Init+0x1bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIM_OC_Init+0x8a>
 800350c:	f240 21a1 	movw	r1, #673	; 0x2a1
 8003510:	484e      	ldr	r0, [pc, #312]	; (800364c <HAL_TIM_OC_Init+0x1c0>)
 8003512:	f7fd fea0 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d014      	beq.n	8003548 <HAL_TIM_OC_Init+0xbc>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b10      	cmp	r3, #16
 8003524:	d010      	beq.n	8003548 <HAL_TIM_OC_Init+0xbc>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b20      	cmp	r3, #32
 800352c:	d00c      	beq.n	8003548 <HAL_TIM_OC_Init+0xbc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d008      	beq.n	8003548 <HAL_TIM_OC_Init+0xbc>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b60      	cmp	r3, #96	; 0x60
 800353c:	d004      	beq.n	8003548 <HAL_TIM_OC_Init+0xbc>
 800353e:	f240 21a2 	movw	r1, #674	; 0x2a2
 8003542:	4842      	ldr	r0, [pc, #264]	; (800364c <HAL_TIM_OC_Init+0x1c0>)
 8003544:	f7fd fe87 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_TIM_OC_Init+0xe2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d009      	beq.n	800356e <HAL_TIM_OC_Init+0xe2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003562:	d004      	beq.n	800356e <HAL_TIM_OC_Init+0xe2>
 8003564:	f240 21a3 	movw	r1, #675	; 0x2a3
 8003568:	4838      	ldr	r0, [pc, #224]	; (800364c <HAL_TIM_OC_Init+0x1c0>)
 800356a:	f7fd fe74 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_TIM_OC_Init+0xfc>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b80      	cmp	r3, #128	; 0x80
 800357c:	d004      	beq.n	8003588 <HAL_TIM_OC_Init+0xfc>
 800357e:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8003582:	4832      	ldr	r0, [pc, #200]	; (800364c <HAL_TIM_OC_Init+0x1c0>)
 8003584:	f7fd fe67 	bl	8001256 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_TIM_OC_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f857 	bl	8003650 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f001 fd13 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40001000 	.word	0x40001000
 8003634:	40001400 	.word	0x40001400
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	40015000 	.word	0x40015000
 800364c:	0800ba80 	.word	0x0800ba80

08003650 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a89      	ldr	r2, [pc, #548]	; (800389c <HAL_TIM_OC_Start_IT+0x238>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d117      	bne.n	80036ac <HAL_TIM_OC_Start_IT+0x48>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8095 	beq.w	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b04      	cmp	r3, #4
 8003688:	f000 8091 	beq.w	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b08      	cmp	r3, #8
 8003690:	f000 808d 	beq.w	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	f000 8089 	beq.w	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b10      	cmp	r3, #16
 80036a0:	f000 8085 	beq.w	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b14      	cmp	r3, #20
 80036a8:	f000 8081 	beq.w	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d10b      	bne.n	80036ce <HAL_TIM_OC_Start_IT+0x6a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d078      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d075      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d072      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d06f      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	; (80038a0 <HAL_TIM_OC_Start_IT+0x23c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10b      	bne.n	80036f0 <HAL_TIM_OC_Start_IT+0x8c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d067      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d064      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d061      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d05e      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6b      	ldr	r2, [pc, #428]	; (80038a4 <HAL_TIM_OC_Start_IT+0x240>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10b      	bne.n	8003712 <HAL_TIM_OC_Start_IT+0xae>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d056      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d053      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d050      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d04d      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a64      	ldr	r2, [pc, #400]	; (80038a8 <HAL_TIM_OC_Start_IT+0x244>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_OC_Start_IT+0xdc>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d045      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b04      	cmp	r3, #4
 8003726:	d042      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d03f      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d03c      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d039      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b14      	cmp	r3, #20
 800373e:	d036      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a59      	ldr	r2, [pc, #356]	; (80038ac <HAL_TIM_OC_Start_IT+0x248>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d105      	bne.n	8003756 <HAL_TIM_OC_Start_IT+0xf2>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02e      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b04      	cmp	r3, #4
 8003754:	d02b      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a55      	ldr	r2, [pc, #340]	; (80038b0 <HAL_TIM_OC_Start_IT+0x24c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_TIM_OC_Start_IT+0x102>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d023      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <HAL_TIM_OC_Start_IT+0x250>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d102      	bne.n	8003776 <HAL_TIM_OC_Start_IT+0x112>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_TIM_OC_Start_IT+0x254>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <HAL_TIM_OC_Start_IT+0x140>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d010      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b08      	cmp	r3, #8
 8003790:	d00d      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	d00a      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b10      	cmp	r3, #16
 800379c:	d007      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b14      	cmp	r3, #20
 80037a2:	d004      	beq.n	80037ae <HAL_TIM_OC_Start_IT+0x14a>
 80037a4:	f240 3185 	movw	r1, #901	; 0x385
 80037a8:	4844      	ldr	r0, [pc, #272]	; (80038bc <HAL_TIM_OC_Start_IT+0x258>)
 80037aa:	f7fd fd54 	bl	8001256 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_TIM_OC_Start_IT+0x164>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e03c      	b.n	8003842 <HAL_TIM_OC_Start_IT+0x1de>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d109      	bne.n	80037e2 <HAL_TIM_OC_Start_IT+0x17e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e02f      	b.n	8003842 <HAL_TIM_OC_Start_IT+0x1de>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_OC_Start_IT+0x198>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e022      	b.n	8003842 <HAL_TIM_OC_Start_IT+0x1de>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d109      	bne.n	8003816 <HAL_TIM_OC_Start_IT+0x1b2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e015      	b.n	8003842 <HAL_TIM_OC_Start_IT+0x1de>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d109      	bne.n	8003830 <HAL_TIM_OC_Start_IT+0x1cc>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e008      	b.n	8003842 <HAL_TIM_OC_Start_IT+0x1de>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_TIM_OC_Start_IT+0x1e6>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0fe      	b.n	8003a48 <HAL_TIM_OC_Start_IT+0x3e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_OC_Start_IT+0x1f6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	e036      	b.n	80038c8 <HAL_TIM_OC_Start_IT+0x264>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_OC_Start_IT+0x206>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	e02e      	b.n	80038c8 <HAL_TIM_OC_Start_IT+0x264>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_OC_Start_IT+0x216>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	e026      	b.n	80038c8 <HAL_TIM_OC_Start_IT+0x264>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d104      	bne.n	800388a <HAL_TIM_OC_Start_IT+0x226>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003888:	e01e      	b.n	80038c8 <HAL_TIM_OC_Start_IT+0x264>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d117      	bne.n	80038c0 <HAL_TIM_OC_Start_IT+0x25c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003898:	e016      	b.n	80038c8 <HAL_TIM_OC_Start_IT+0x264>
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800
 80038a8:	40013400 	.word	0x40013400
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40014400 	.word	0x40014400
 80038b4:	40014800 	.word	0x40014800
 80038b8:	40015000 	.word	0x40015000
 80038bc:	0800ba80 	.word	0x0800ba80
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d840      	bhi.n	8003950 <HAL_TIM_OC_Start_IT+0x2ec>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <HAL_TIM_OC_Start_IT+0x270>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	08003909 	.word	0x08003909
 80038d8:	08003951 	.word	0x08003951
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003951 	.word	0x08003951
 80038e4:	0800391b 	.word	0x0800391b
 80038e8:	08003951 	.word	0x08003951
 80038ec:	08003951 	.word	0x08003951
 80038f0:	08003951 	.word	0x08003951
 80038f4:	0800392d 	.word	0x0800392d
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003951 	.word	0x08003951
 8003900:	08003951 	.word	0x08003951
 8003904:	0800393f 	.word	0x0800393f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0202 	orr.w	r2, r2, #2
 8003916:	60da      	str	r2, [r3, #12]
      break;
 8003918:	e01d      	b.n	8003956 <HAL_TIM_OC_Start_IT+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0204 	orr.w	r2, r2, #4
 8003928:	60da      	str	r2, [r3, #12]
      break;
 800392a:	e014      	b.n	8003956 <HAL_TIM_OC_Start_IT+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0208 	orr.w	r2, r2, #8
 800393a:	60da      	str	r2, [r3, #12]
      break;
 800393c:	e00b      	b.n	8003956 <HAL_TIM_OC_Start_IT+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0210 	orr.w	r2, r2, #16
 800394c:	60da      	str	r2, [r3, #12]
      break;
 800394e:	e002      	b.n	8003956 <HAL_TIM_OC_Start_IT+0x2f2>
    }

    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	bf00      	nop
  }

  if (status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d174      	bne.n	8003a46 <HAL_TIM_OC_Start_IT+0x3e2>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f002 f843 	bl	80059f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <HAL_TIM_OC_Start_IT+0x3ec>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_TIM_OC_Start_IT+0x342>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a36      	ldr	r2, [pc, #216]	; (8003a54 <HAL_TIM_OC_Start_IT+0x3f0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_TIM_OC_Start_IT+0x342>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <HAL_TIM_OC_Start_IT+0x3f4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_TIM_OC_Start_IT+0x342>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_TIM_OC_Start_IT+0x3f8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_TIM_OC_Start_IT+0x342>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_TIM_OC_Start_IT+0x3fc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIM_OC_Start_IT+0x342>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <HAL_TIM_OC_Start_IT+0x400>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_OC_Start_IT+0x346>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_TIM_OC_Start_IT+0x348>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <HAL_TIM_OC_Start_IT+0x35c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_TIM_OC_Start_IT+0x3ec>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01d      	beq.n	8003a06 <HAL_TIM_OC_Start_IT+0x3a2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d2:	d018      	beq.n	8003a06 <HAL_TIM_OC_Start_IT+0x3a2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <HAL_TIM_OC_Start_IT+0x404>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_TIM_OC_Start_IT+0x3a2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_TIM_OC_Start_IT+0x408>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_TIM_OC_Start_IT+0x3a2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_TIM_OC_Start_IT+0x3f0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_TIM_OC_Start_IT+0x3a2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_TIM_OC_Start_IT+0x3f4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIM_OC_Start_IT+0x3a2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_OC_Start_IT+0x400>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d115      	bne.n	8003a32 <HAL_TIM_OC_Start_IT+0x3ce>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_TIM_OC_Start_IT+0x40c>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d015      	beq.n	8003a44 <HAL_TIM_OC_Start_IT+0x3e0>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1e:	d011      	beq.n	8003a44 <HAL_TIM_OC_Start_IT+0x3e0>
      {
        __HAL_TIM_ENABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	e008      	b.n	8003a44 <HAL_TIM_OC_Start_IT+0x3e0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_OC_Start_IT+0x3e2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40013400 	.word	0x40013400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800
 8003a64:	40015000 	.word	0x40015000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	00010007 	.word	0x00010007

08003a74 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a87      	ldr	r2, [pc, #540]	; (8003ca4 <HAL_TIM_OC_Stop_IT+0x230>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d117      	bne.n	8003abc <HAL_TIM_OC_Stop_IT+0x48>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8095 	beq.w	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	f000 8091 	beq.w	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	f000 808d 	beq.w	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	f000 8089 	beq.w	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	f000 8085 	beq.w	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b14      	cmp	r3, #20
 8003ab8:	f000 8081 	beq.w	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d10b      	bne.n	8003ade <HAL_TIM_OC_Stop_IT+0x6a>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d078      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d075      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d072      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d06f      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a71      	ldr	r2, [pc, #452]	; (8003ca8 <HAL_TIM_OC_Stop_IT+0x234>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10b      	bne.n	8003b00 <HAL_TIM_OC_Stop_IT+0x8c>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d067      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d064      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d061      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d05e      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a69      	ldr	r2, [pc, #420]	; (8003cac <HAL_TIM_OC_Stop_IT+0x238>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10b      	bne.n	8003b22 <HAL_TIM_OC_Stop_IT+0xae>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d056      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d053      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d050      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d04d      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a62      	ldr	r2, [pc, #392]	; (8003cb0 <HAL_TIM_OC_Stop_IT+0x23c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d111      	bne.n	8003b50 <HAL_TIM_OC_Stop_IT+0xdc>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d045      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d042      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d03f      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d03c      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d039      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b14      	cmp	r3, #20
 8003b4e:	d036      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a57      	ldr	r2, [pc, #348]	; (8003cb4 <HAL_TIM_OC_Stop_IT+0x240>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d105      	bne.n	8003b66 <HAL_TIM_OC_Stop_IT+0xf2>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02e      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d02b      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a53      	ldr	r2, [pc, #332]	; (8003cb8 <HAL_TIM_OC_Stop_IT+0x244>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d102      	bne.n	8003b76 <HAL_TIM_OC_Stop_IT+0x102>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d023      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a50      	ldr	r2, [pc, #320]	; (8003cbc <HAL_TIM_OC_Stop_IT+0x248>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d102      	bne.n	8003b86 <HAL_TIM_OC_Stop_IT+0x112>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01b      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4d      	ldr	r2, [pc, #308]	; (8003cc0 <HAL_TIM_OC_Stop_IT+0x24c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d111      	bne.n	8003bb4 <HAL_TIM_OC_Stop_IT+0x140>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d010      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d00d      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d00a      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d007      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b14      	cmp	r3, #20
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_OC_Stop_IT+0x14a>
 8003bb4:	f240 31e1 	movw	r1, #993	; 0x3e1
 8003bb8:	4842      	ldr	r0, [pc, #264]	; (8003cc4 <HAL_TIM_OC_Stop_IT+0x250>)
 8003bba:	f7fd fb4c 	bl	8001256 <assert_failed>

  switch (Channel)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d841      	bhi.n	8003c48 <HAL_TIM_OC_Stop_IT+0x1d4>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_TIM_OC_Stop_IT+0x158>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c49 	.word	0x08003c49
 8003bd4:	08003c49 	.word	0x08003c49
 8003bd8:	08003c49 	.word	0x08003c49
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c49 	.word	0x08003c49
 8003be4:	08003c49 	.word	0x08003c49
 8003be8:	08003c49 	.word	0x08003c49
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003c49 	.word	0x08003c49
 8003bfc:	08003c37 	.word	0x08003c37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0202 	bic.w	r2, r2, #2
 8003c0e:	60da      	str	r2, [r3, #12]
      break;
 8003c10:	e01d      	b.n	8003c4e <HAL_TIM_OC_Stop_IT+0x1da>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0204 	bic.w	r2, r2, #4
 8003c20:	60da      	str	r2, [r3, #12]
      break;
 8003c22:	e014      	b.n	8003c4e <HAL_TIM_OC_Stop_IT+0x1da>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0208 	bic.w	r2, r2, #8
 8003c32:	60da      	str	r2, [r3, #12]
      break;
 8003c34:	e00b      	b.n	8003c4e <HAL_TIM_OC_Stop_IT+0x1da>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0210 	bic.w	r2, r2, #16
 8003c44:	60da      	str	r2, [r3, #12]
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_TIM_OC_Stop_IT+0x1da>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 8098 	bne.w	8003d86 <HAL_TIM_OC_Stop_IT+0x312>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fec6 	bl	80059f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_TIM_OC_Stop_IT+0x230>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d018      	beq.n	8003ca0 <HAL_TIM_OC_Stop_IT+0x22c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <HAL_TIM_OC_Stop_IT+0x23c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <HAL_TIM_OC_Stop_IT+0x22c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <HAL_TIM_OC_Stop_IT+0x240>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00e      	beq.n	8003ca0 <HAL_TIM_OC_Stop_IT+0x22c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <HAL_TIM_OC_Stop_IT+0x244>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <HAL_TIM_OC_Stop_IT+0x22c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <HAL_TIM_OC_Stop_IT+0x248>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_TIM_OC_Stop_IT+0x22c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <HAL_TIM_OC_Stop_IT+0x24c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d113      	bne.n	8003cc8 <HAL_TIM_OC_Stop_IT+0x254>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e012      	b.n	8003cca <HAL_TIM_OC_Stop_IT+0x256>
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	40013400 	.word	0x40013400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800
 8003cc0:	40015000 	.word	0x40015000
 8003cc4:	0800ba80 	.word	0x0800ba80
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d017      	beq.n	8003cfe <HAL_TIM_OC_Stop_IT+0x28a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_TIM_OC_Stop_IT+0x28a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	f244 4344 	movw	r3, #17476	; 0x4444
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d107      	bne.n	8003cfe <HAL_TIM_OC_Stop_IT+0x28a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_TIM_OC_Stop_IT+0x2ba>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a1a      	ldr	r2, [r3, #32]
 8003d14:	f244 4344 	movw	r3, #17476	; 0x4444
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_OC_Stop_IT+0x2ba>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_OC_Stop_IT+0x2ca>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	e023      	b.n	8003d86 <HAL_TIM_OC_Stop_IT+0x312>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_OC_Stop_IT+0x2da>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4c:	e01b      	b.n	8003d86 <HAL_TIM_OC_Stop_IT+0x312>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_OC_Stop_IT+0x2ea>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_OC_Stop_IT+0x312>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_OC_Stop_IT+0x2fa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_OC_Stop_IT+0x312>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_OC_Stop_IT+0x30a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_OC_Stop_IT+0x312>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 f8e6 	bl	8004fa4 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc fae6 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f001 f8e9 	bl	8004fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f001 f8bc 	bl	8004fa4 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fabc 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f001 f8bf 	bl	8004fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f001 f892 	bl	8004fa4 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fc fa92 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f001 f895 	bl	8004fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f001 f868 	bl	8004fa4 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fc fa68 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 f86b 	bl	8004fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd f98a 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f002 f8d2 	bl	80060e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f002 f8c5 	bl	80060f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f001 f819 	bl	8004fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d107      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f06f 0220 	mvn.w	r2, #32
 8003fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f002 f885 	bl	80060d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f002 f88b 	bl	800610c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004004:	d10f      	bne.n	8004026 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004014:	d107      	bne.n	8004026 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800401e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f002 f87d 	bl	8006120 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004034:	d10f      	bne.n	8004056 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004044:	d107      	bne.n	8004056 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f002 f86f 	bl	8006134 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004064:	d10f      	bne.n	8004086 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f002 f861 	bl	8006148 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d013      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d010      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d00d      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d00a      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b14      	cmp	r3, #20
 80040c2:	d007      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b3c      	cmp	r3, #60	; 0x3c
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_OC_ConfigChannel+0x44>
 80040ca:	f241 011f 	movw	r1, #4127	; 0x101f
 80040ce:	488f      	ldr	r0, [pc, #572]	; (800430c <HAL_TIM_OC_ConfigChannel+0x27c>)
 80040d0:	f7fd f8c1 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d027      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d023      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d01f      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d01b      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b50      	cmp	r3, #80	; 0x50
 80040fa:	d017      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d013      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410c:	d00e      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a7f      	ldr	r2, [pc, #508]	; (8004310 <HAL_TIM_OC_ConfigChannel+0x280>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a7d      	ldr	r2, [pc, #500]	; (8004314 <HAL_TIM_OC_ConfigChannel+0x284>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7c      	ldr	r2, [pc, #496]	; (8004318 <HAL_TIM_OC_ConfigChannel+0x288>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10f      	bne.n	800414c <HAL_TIM_OC_ConfigChannel+0xbc>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a78      	ldr	r2, [pc, #480]	; (8004314 <HAL_TIM_OC_ConfigChannel+0x284>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a77      	ldr	r2, [pc, #476]	; (8004318 <HAL_TIM_OC_ConfigChannel+0x288>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10a      	bne.n	8004156 <HAL_TIM_OC_ConfigChannel+0xc6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b08      	cmp	r3, #8
 8004144:	d007      	beq.n	8004156 <HAL_TIM_OC_ConfigChannel+0xc6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d004      	beq.n	8004156 <HAL_TIM_OC_ConfigChannel+0xc6>
 800414c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8004150:	486e      	ldr	r0, [pc, #440]	; (800430c <HAL_TIM_OC_ConfigChannel+0x27c>)
 8004152:	f7fd f880 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_TIM_OC_ConfigChannel+0xe0>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d004      	beq.n	8004170 <HAL_TIM_OC_ConfigChannel+0xe0>
 8004166:	f241 0121 	movw	r1, #4129	; 0x1021
 800416a:	4868      	ldr	r0, [pc, #416]	; (800430c <HAL_TIM_OC_ConfigChannel+0x27c>)
 800416c:	f7fd f873 	bl	8001256 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_TIM_OC_ConfigChannel+0xee>
 800417a:	2302      	movs	r3, #2
 800417c:	e146      	b.n	800440c <HAL_TIM_OC_ConfigChannel+0x37c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b14      	cmp	r3, #20
 800418a:	f200 8137 	bhi.w	80043fc <HAL_TIM_OC_ConfigChannel+0x36c>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_TIM_OC_ConfigChannel+0x104>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041e9 	.word	0x080041e9
 8004198:	080043fd 	.word	0x080043fd
 800419c:	080043fd 	.word	0x080043fd
 80041a0:	080043fd 	.word	0x080043fd
 80041a4:	0800425b 	.word	0x0800425b
 80041a8:	080043fd 	.word	0x080043fd
 80041ac:	080043fd 	.word	0x080043fd
 80041b0:	080043fd 	.word	0x080043fd
 80041b4:	080042b9 	.word	0x080042b9
 80041b8:	080043fd 	.word	0x080043fd
 80041bc:	080043fd 	.word	0x080043fd
 80041c0:	080043fd 	.word	0x080043fd
 80041c4:	0800433d 	.word	0x0800433d
 80041c8:	080043fd 	.word	0x080043fd
 80041cc:	080043fd 	.word	0x080043fd
 80041d0:	080043fd 	.word	0x080043fd
 80041d4:	08004391 	.word	0x08004391
 80041d8:	080043fd 	.word	0x080043fd
 80041dc:	080043fd 	.word	0x080043fd
 80041e0:	080043fd 	.word	0x080043fd
 80041e4:	080043c7 	.word	0x080043c7
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a4b      	ldr	r2, [pc, #300]	; (800431c <HAL_TIM_OC_ConfigChannel+0x28c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02c      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d027      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a47      	ldr	r2, [pc, #284]	; (8004320 <HAL_TIM_OC_ConfigChannel+0x290>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d022      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a46      	ldr	r2, [pc, #280]	; (8004324 <HAL_TIM_OC_ConfigChannel+0x294>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d01d      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a44      	ldr	r2, [pc, #272]	; (8004328 <HAL_TIM_OC_ConfigChannel+0x298>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a43      	ldr	r2, [pc, #268]	; (800432c <HAL_TIM_OC_ConfigChannel+0x29c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a41      	ldr	r2, [pc, #260]	; (8004330 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <HAL_TIM_OC_ConfigChannel+0x2a4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3e      	ldr	r2, [pc, #248]	; (8004338 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_OC_ConfigChannel+0x1bc>
 8004242:	f241 012b 	movw	r1, #4139	; 0x102b
 8004246:	4831      	ldr	r0, [pc, #196]	; (800430c <HAL_TIM_OC_ConfigChannel+0x27c>)
 8004248:	f7fd f805 	bl	8001256 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff62 	bl	800511c <TIM_OC1_SetConfig>
      break;
 8004258:	e0d3      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2f      	ldr	r2, [pc, #188]	; (800431c <HAL_TIM_OC_ConfigChannel+0x28c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d01d      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_TIM_OC_ConfigChannel+0x290>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_TIM_OC_ConfigChannel+0x294>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_TIM_OC_ConfigChannel+0x298>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_TIM_OC_ConfigChannel+0x29c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a27      	ldr	r2, [pc, #156]	; (8004338 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIM_OC_ConfigChannel+0x21a>
 80042a0:	f241 0135 	movw	r1, #4149	; 0x1035
 80042a4:	4819      	ldr	r0, [pc, #100]	; (800430c <HAL_TIM_OC_ConfigChannel+0x27c>)
 80042a6:	f7fc ffd6 	bl	8001256 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fff7 	bl	80052a4 <TIM_OC2_SetConfig>
      break;
 80042b6:	e0a4      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_TIM_OC_ConfigChannel+0x28c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01d      	beq.n	80042fe <HAL_TIM_OC_ConfigChannel+0x26e>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d018      	beq.n	80042fe <HAL_TIM_OC_ConfigChannel+0x26e>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <HAL_TIM_OC_ConfigChannel+0x290>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_TIM_OC_ConfigChannel+0x26e>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <HAL_TIM_OC_ConfigChannel+0x294>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_TIM_OC_ConfigChannel+0x26e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_TIM_OC_ConfigChannel+0x298>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_TIM_OC_ConfigChannel+0x26e>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIM_OC_ConfigChannel+0x26e>
 80042f4:	f241 013f 	movw	r1, #4159	; 0x103f
 80042f8:	4804      	ldr	r0, [pc, #16]	; (800430c <HAL_TIM_OC_ConfigChannel+0x27c>)
 80042fa:	f7fc ffac 	bl	8001256 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f001 f889 	bl	800541c <TIM_OC3_SetConfig>
      break;
 800430a:	e07a      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0x372>
 800430c:	0800ba80 	.word	0x0800ba80
 8004310:	00010010 	.word	0x00010010
 8004314:	00010030 	.word	0x00010030
 8004318:	00010020 	.word	0x00010020
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_TIM_OC_ConfigChannel+0x384>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01d      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x2f2>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d018      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x2f2>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <HAL_TIM_OC_ConfigChannel+0x388>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x2f2>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2f      	ldr	r2, [pc, #188]	; (800441c <HAL_TIM_OC_ConfigChannel+0x38c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x2f2>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <HAL_TIM_OC_ConfigChannel+0x390>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x2f2>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <HAL_TIM_OC_ConfigChannel+0x394>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_TIM_OC_ConfigChannel+0x2f2>
 8004378:	f241 0149 	movw	r1, #4169	; 0x1049
 800437c:	482a      	ldr	r0, [pc, #168]	; (8004428 <HAL_TIM_OC_ConfigChannel+0x398>)
 800437e:	f7fc ff6a 	bl	8001256 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f903 	bl	8005594 <TIM_OC4_SetConfig>
      break;
 800438e:	e038      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <HAL_TIM_OC_ConfigChannel+0x384>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_TIM_OC_ConfigChannel+0x328>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a20      	ldr	r2, [pc, #128]	; (8004420 <HAL_TIM_OC_ConfigChannel+0x390>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_TIM_OC_ConfigChannel+0x328>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_TIM_OC_ConfigChannel+0x394>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_TIM_OC_ConfigChannel+0x328>
 80043ae:	f241 0153 	movw	r1, #4179	; 0x1053
 80043b2:	481d      	ldr	r0, [pc, #116]	; (8004428 <HAL_TIM_OC_ConfigChannel+0x398>)
 80043b4:	f7fc ff4f 	bl	8001256 <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f9a4 	bl	800570c <TIM_OC5_SetConfig>
      break;
 80043c4:	e01d      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <HAL_TIM_OC_ConfigChannel+0x384>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIM_OC_ConfigChannel+0x35e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_TIM_OC_ConfigChannel+0x390>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_TIM_OC_ConfigChannel+0x35e>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a11      	ldr	r2, [pc, #68]	; (8004424 <HAL_TIM_OC_ConfigChannel+0x394>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIM_OC_ConfigChannel+0x35e>
 80043e4:	f241 015d 	movw	r1, #4189	; 0x105d
 80043e8:	480f      	ldr	r0, [pc, #60]	; (8004428 <HAL_TIM_OC_ConfigChannel+0x398>)
 80043ea:	f7fc ff34 	bl	8001256 <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f9f3 	bl	80057e0 <TIM_OC6_SetConfig>
      break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_OC_ConfigChannel+0x372>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800
 8004420:	40013400 	.word	0x40013400
 8004424:	40015000 	.word	0x40015000
 8004428:	0800ba80 	.word	0x0800ba80

0800442c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <HAL_TIM_ConfigClockSource+0x1e>
 8004444:	2302      	movs	r3, #2
 8004446:	f000 bd98 	b.w	8004f7a <HAL_TIM_ConfigClockSource+0xb4e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004462:	d047      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d042      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03e      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b10      	cmp	r3, #16
 800447c:	d03a      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b20      	cmp	r3, #32
 8004484:	d036      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b30      	cmp	r3, #48	; 0x30
 800448c:	d032      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d02e      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b50      	cmp	r3, #80	; 0x50
 800449c:	d02a      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b60      	cmp	r3, #96	; 0x60
 80044a4:	d026      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b70      	cmp	r3, #112	; 0x70
 80044ac:	d022      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80044b6:	d01d      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a71      	ldr	r2, [pc, #452]	; (8004684 <HAL_TIM_ConfigClockSource+0x258>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a70      	ldr	r2, [pc, #448]	; (8004688 <HAL_TIM_ConfigClockSource+0x25c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_TIM_ConfigClockSource+0x260>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6d      	ldr	r2, [pc, #436]	; (8004690 <HAL_TIM_ConfigClockSource+0x264>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6b      	ldr	r2, [pc, #428]	; (8004694 <HAL_TIM_ConfigClockSource+0x268>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0xc8>
 80044ea:	f241 51b8 	movw	r1, #5560	; 0x15b8
 80044ee:	486a      	ldr	r0, [pc, #424]	; (8004698 <HAL_TIM_ConfigClockSource+0x26c>)
 80044f0:	f7fc feb1 	bl	8001256 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <HAL_TIM_ConfigClockSource+0x268>)
 800451e:	4293      	cmp	r3, r2
 8004520:	f000 82e2 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 8004524:	4a5b      	ldr	r2, [pc, #364]	; (8004694 <HAL_TIM_ConfigClockSource+0x268>)
 8004526:	4293      	cmp	r3, r2
 8004528:	f200 851a 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800452c:	4a58      	ldr	r2, [pc, #352]	; (8004690 <HAL_TIM_ConfigClockSource+0x264>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f000 82da 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 8004534:	4a56      	ldr	r2, [pc, #344]	; (8004690 <HAL_TIM_ConfigClockSource+0x264>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f200 8512 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800453c:	4a53      	ldr	r2, [pc, #332]	; (800468c <HAL_TIM_ConfigClockSource+0x260>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f000 82d2 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 8004544:	4a51      	ldr	r2, [pc, #324]	; (800468c <HAL_TIM_ConfigClockSource+0x260>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f200 850a 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800454c:	4a4e      	ldr	r2, [pc, #312]	; (8004688 <HAL_TIM_ConfigClockSource+0x25c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	f000 82ca 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 8004554:	4a4c      	ldr	r2, [pc, #304]	; (8004688 <HAL_TIM_ConfigClockSource+0x25c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f200 8502 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800455c:	4a49      	ldr	r2, [pc, #292]	; (8004684 <HAL_TIM_ConfigClockSource+0x258>)
 800455e:	4293      	cmp	r3, r2
 8004560:	f000 82c2 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 8004564:	4a47      	ldr	r2, [pc, #284]	; (8004684 <HAL_TIM_ConfigClockSource+0x258>)
 8004566:	4293      	cmp	r3, r2
 8004568:	f200 84fa 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800456c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004570:	f000 82ba 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 8004574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004578:	f200 84f2 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	f000 8115 	beq.w	80047ae <HAL_TIM_ConfigClockSource+0x382>
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004588:	f200 84ea 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d02f      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x1c6>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	f200 84e3 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 800459a:	2b70      	cmp	r3, #112	; 0x70
 800459c:	f000 8092 	beq.w	80046c4 <HAL_TIM_ConfigClockSource+0x298>
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	f200 84dd 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 80045a6:	2b60      	cmp	r3, #96	; 0x60
 80045a8:	f000 81d9 	beq.w	800495e <HAL_TIM_ConfigClockSource+0x532>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	f200 84d7 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	f000 8178 	beq.w	80048a8 <HAL_TIM_ConfigClockSource+0x47c>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	f200 84d1 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	f000 8228 	beq.w	8004a14 <HAL_TIM_ConfigClockSource+0x5e8>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	f200 84cb 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 80045ca:	2b30      	cmp	r3, #48	; 0x30
 80045cc:	f000 828c 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	f200 84c5 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	f000 8286 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	f200 84bf 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8280 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	f000 827d 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x6bc>
 80045ee:	f000 bcb7 	b.w	8004f60 <HAL_TIM_ConfigClockSource+0xb34>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a29      	ldr	r2, [pc, #164]	; (800469c <HAL_TIM_ConfigClockSource+0x270>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	f000 84b4 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	f000 84ae 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <HAL_TIM_ConfigClockSource+0x274>)
 8004610:	4293      	cmp	r3, r2
 8004612:	f000 84a8 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <HAL_TIM_ConfigClockSource+0x278>)
 800461c:	4293      	cmp	r3, r2
 800461e:	f000 84a2 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <HAL_TIM_ConfigClockSource+0x27c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	f000 849c 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <HAL_TIM_ConfigClockSource+0x280>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f000 8496 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_TIM_ConfigClockSource+0x284>)
 8004640:	4293      	cmp	r3, r2
 8004642:	f000 8490 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_TIM_ConfigClockSource+0x288>)
 800464c:	4293      	cmp	r3, r2
 800464e:	f000 848a 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <HAL_TIM_ConfigClockSource+0x28c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	f000 8484 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIM_ConfigClockSource+0x290>)
 8004664:	4293      	cmp	r3, r2
 8004666:	f000 847e 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_TIM_ConfigClockSource+0x294>)
 8004670:	4293      	cmp	r3, r2
 8004672:	f000 8478 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 8004676:	f241 51c4 	movw	r1, #5572	; 0x15c4
 800467a:	4807      	ldr	r0, [pc, #28]	; (8004698 <HAL_TIM_ConfigClockSource+0x26c>)
 800467c:	f7fc fdeb 	bl	8001256 <assert_failed>
      break;
 8004680:	f000 bc71 	b.w	8004f66 <HAL_TIM_ConfigClockSource+0xb3a>
 8004684:	00100020 	.word	0x00100020
 8004688:	00100030 	.word	0x00100030
 800468c:	00100040 	.word	0x00100040
 8004690:	00100050 	.word	0x00100050
 8004694:	00100070 	.word	0x00100070
 8004698:	0800ba80 	.word	0x0800ba80
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40001000 	.word	0x40001000
 80046ac:	40001400 	.word	0x40001400
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800
 80046c0:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a71      	ldr	r2, [pc, #452]	; (8004890 <HAL_TIM_ConfigClockSource+0x464>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01d      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x2de>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d018      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x2de>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6d      	ldr	r2, [pc, #436]	; (8004894 <HAL_TIM_ConfigClockSource+0x468>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x2de>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6c      	ldr	r2, [pc, #432]	; (8004898 <HAL_TIM_ConfigClockSource+0x46c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x2de>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6a      	ldr	r2, [pc, #424]	; (800489c <HAL_TIM_ConfigClockSource+0x470>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x2de>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a69      	ldr	r2, [pc, #420]	; (80048a0 <HAL_TIM_ConfigClockSource+0x474>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x2de>
 8004700:	f241 51cb 	movw	r1, #5579	; 0x15cb
 8004704:	4867      	ldr	r0, [pc, #412]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 8004706:	f7fc fda6 	bl	8001256 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x30e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471a:	d00e      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x30e>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d009      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x30e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800472e:	d004      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x30e>
 8004730:	f241 51ce 	movw	r1, #5582	; 0x15ce
 8004734:	485b      	ldr	r0, [pc, #364]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 8004736:	f7fc fd8e 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004742:	d014      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x342>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x342>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x342>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d008      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x342>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b0a      	cmp	r3, #10
 8004762:	d004      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x342>
 8004764:	f241 51cf 	movw	r1, #5583	; 0x15cf
 8004768:	484e      	ldr	r0, [pc, #312]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 800476a:	f7fc fd74 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d904      	bls.n	8004780 <HAL_TIM_ConfigClockSource+0x354>
 8004776:	f241 51d0 	movw	r1, #5584	; 0x15d0
 800477a:	484a      	ldr	r0, [pc, #296]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 800477c:	f7fc fd6b 	bl	8001256 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f001 f90e 	bl	80059b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e3dc      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a37      	ldr	r2, [pc, #220]	; (8004890 <HAL_TIM_ConfigClockSource+0x464>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d01d      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x3c8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d018      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x3c8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a33      	ldr	r2, [pc, #204]	; (8004894 <HAL_TIM_ConfigClockSource+0x468>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x3c8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a31      	ldr	r2, [pc, #196]	; (8004898 <HAL_TIM_ConfigClockSource+0x46c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x3c8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a30      	ldr	r2, [pc, #192]	; (800489c <HAL_TIM_ConfigClockSource+0x470>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x3c8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <HAL_TIM_ConfigClockSource+0x474>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x3c8>
 80047ea:	f241 51e3 	movw	r1, #5603	; 0x15e3
 80047ee:	482d      	ldr	r0, [pc, #180]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 80047f0:	f7fc fd31 	bl	8001256 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0x3f8>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004804:	d00e      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0x3f8>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480e:	d009      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0x3f8>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004818:	d004      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0x3f8>
 800481a:	f241 51e6 	movw	r1, #5606	; 0x15e6
 800481e:	4821      	ldr	r0, [pc, #132]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 8004820:	f7fc fd19 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	d014      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x42c>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x42c>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x42c>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d008      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x42c>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b0a      	cmp	r3, #10
 800484c:	d004      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x42c>
 800484e:	f241 51e7 	movw	r1, #5607	; 0x15e7
 8004852:	4814      	ldr	r0, [pc, #80]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 8004854:	f7fc fcff 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d904      	bls.n	800486a <HAL_TIM_ConfigClockSource+0x43e>
 8004860:	f241 51e8 	movw	r1, #5608	; 0x15e8
 8004864:	480f      	ldr	r0, [pc, #60]	; (80048a4 <HAL_TIM_ConfigClockSource+0x478>)
 8004866:	f7fc fcf6 	bl	8001256 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6899      	ldr	r1, [r3, #8]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f001 f899 	bl	80059b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488c:	609a      	str	r2, [r3, #8]
      break;
 800488e:	e36b      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40013400 	.word	0x40013400
 80048a0:	40015000 	.word	0x40015000
 80048a4:	0800ba80 	.word	0x0800ba80
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a87      	ldr	r2, [pc, #540]	; (8004acc <HAL_TIM_ConfigClockSource+0x6a0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d01d      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a83      	ldr	r2, [pc, #524]	; (8004ad0 <HAL_TIM_ConfigClockSource+0x6a4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a82      	ldr	r2, [pc, #520]	; (8004ad4 <HAL_TIM_ConfigClockSource+0x6a8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a80      	ldr	r2, [pc, #512]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x6ac>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7f      	ldr	r2, [pc, #508]	; (8004adc <HAL_TIM_ConfigClockSource+0x6b0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7d      	ldr	r2, [pc, #500]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x6b4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x4cc>
 80048ee:	f241 51f7 	movw	r1, #5623	; 0x15f7
 80048f2:	487c      	ldr	r0, [pc, #496]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 80048f4:	f7fc fcaf 	bl	8001256 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004900:	d014      	beq.n	800492c <HAL_TIM_ConfigClockSource+0x500>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_TIM_ConfigClockSource+0x500>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00c      	beq.n	800492c <HAL_TIM_ConfigClockSource+0x500>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d008      	beq.n	800492c <HAL_TIM_ConfigClockSource+0x500>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b0a      	cmp	r3, #10
 8004920:	d004      	beq.n	800492c <HAL_TIM_ConfigClockSource+0x500>
 8004922:	f241 51fa 	movw	r1, #5626	; 0x15fa
 8004926:	486f      	ldr	r0, [pc, #444]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 8004928:	f7fc fc95 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b0f      	cmp	r3, #15
 8004932:	d904      	bls.n	800493e <HAL_TIM_ConfigClockSource+0x512>
 8004934:	f241 51fb 	movw	r1, #5627	; 0x15fb
 8004938:	486a      	ldr	r0, [pc, #424]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 800493a:	f7fc fc8c 	bl	8001256 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	f000 ffb4 	bl	80058b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2150      	movs	r1, #80	; 0x50
 8004956:	4618      	mov	r0, r3
 8004958:	f001 f80d 	bl	8005976 <TIM_ITRx_SetConfig>
      break;
 800495c:	e304      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a5a      	ldr	r2, [pc, #360]	; (8004acc <HAL_TIM_ConfigClockSource+0x6a0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d01d      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_TIM_ConfigClockSource+0x6a4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a54      	ldr	r2, [pc, #336]	; (8004ad4 <HAL_TIM_ConfigClockSource+0x6a8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a53      	ldr	r2, [pc, #332]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x6ac>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a51      	ldr	r2, [pc, #324]	; (8004adc <HAL_TIM_ConfigClockSource+0x6b0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a50      	ldr	r2, [pc, #320]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x6b4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x582>
 80049a4:	f241 6107 	movw	r1, #5639	; 0x1607
 80049a8:	484e      	ldr	r0, [pc, #312]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 80049aa:	f7fc fc54 	bl	8001256 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b6:	d014      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x5b6>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x5b6>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x5b6>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d008      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x5b6>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b0a      	cmp	r3, #10
 80049d6:	d004      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x5b6>
 80049d8:	f241 610a 	movw	r1, #5642	; 0x160a
 80049dc:	4841      	ldr	r0, [pc, #260]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 80049de:	f7fc fc3a 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d904      	bls.n	80049f4 <HAL_TIM_ConfigClockSource+0x5c8>
 80049ea:	f241 610b 	movw	r1, #5643	; 0x160b
 80049ee:	483d      	ldr	r0, [pc, #244]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 80049f0:	f7fc fc31 	bl	8001256 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	461a      	mov	r2, r3
 8004a02:	f000 ff88 	bl	8005916 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2160      	movs	r1, #96	; 0x60
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 ffb2 	bl	8005976 <TIM_ITRx_SetConfig>
      break;
 8004a12:	e2a9      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <HAL_TIM_ConfigClockSource+0x6a0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d022      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a26:	d01d      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <HAL_TIM_ConfigClockSource+0x6a4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_TIM_ConfigClockSource+0x6a8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x6ac>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a24      	ldr	r2, [pc, #144]	; (8004adc <HAL_TIM_ConfigClockSource+0x6b0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x6b4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x638>
 8004a5a:	f241 6117 	movw	r1, #5655	; 0x1617
 8004a5e:	4821      	ldr	r0, [pc, #132]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 8004a60:	f7fc fbf9 	bl	8001256 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6c:	d014      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x66c>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x66c>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x66c>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d008      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x66c>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b0a      	cmp	r3, #10
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x66c>
 8004a8e:	f241 611a 	movw	r1, #5658	; 0x161a
 8004a92:	4814      	ldr	r0, [pc, #80]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 8004a94:	f7fc fbdf 	bl	8001256 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b0f      	cmp	r3, #15
 8004a9e:	d904      	bls.n	8004aaa <HAL_TIM_ConfigClockSource+0x67e>
 8004aa0:	f241 611b 	movw	r1, #5659	; 0x161b
 8004aa4:	480f      	ldr	r0, [pc, #60]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6b8>)
 8004aa6:	f7fc fbd6 	bl	8001256 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fefe 	bl	80058b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2140      	movs	r1, #64	; 0x40
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 ff57 	bl	8005976 <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e24e      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40015000 	.word	0x40015000
 8004ae4:	0800ba80 	.word	0x0800ba80
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a9d      	ldr	r2, [pc, #628]	; (8004d64 <HAL_TIM_ConfigClockSource+0x938>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d14c      	bne.n	8004b8c <HAL_TIM_ConfigClockSource+0x760>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	f000 8228 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b06:	f000 8222 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	f000 821d 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	f000 8218 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b30      	cmp	r3, #48	; 0x30
 8004b24:	f000 8213 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	f000 820e 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b50      	cmp	r3, #80	; 0x50
 8004b38:	f000 8209 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	f000 8204 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b70      	cmp	r3, #112	; 0x70
 8004b4c:	f000 81ff 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b58:	f000 81f9 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a81      	ldr	r2, [pc, #516]	; (8004d68 <HAL_TIM_ConfigClockSource+0x93c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f000 81f3 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7f      	ldr	r2, [pc, #508]	; (8004d6c <HAL_TIM_ConfigClockSource+0x940>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 81ed 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a7d      	ldr	r2, [pc, #500]	; (8004d70 <HAL_TIM_ConfigClockSource+0x944>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f000 81e7 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a7b      	ldr	r2, [pc, #492]	; (8004d74 <HAL_TIM_ConfigClockSource+0x948>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f000 81e1 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d152      	bne.n	8004c3c <HAL_TIM_ConfigClockSource+0x810>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	f000 81d6 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004baa:	f000 81d0 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 81cb 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	f000 81c6 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b30      	cmp	r3, #48	; 0x30
 8004bc8:	f000 81c1 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	f000 81bc 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b50      	cmp	r3, #80	; 0x50
 8004bdc:	f000 81b7 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b60      	cmp	r3, #96	; 0x60
 8004be6:	f000 81b2 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b70      	cmp	r3, #112	; 0x70
 8004bf0:	f000 81ad 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004bfc:	f000 81a7 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a58      	ldr	r2, [pc, #352]	; (8004d68 <HAL_TIM_ConfigClockSource+0x93c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f000 81a1 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a56      	ldr	r2, [pc, #344]	; (8004d6c <HAL_TIM_ConfigClockSource+0x940>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f000 819b 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a54      	ldr	r2, [pc, #336]	; (8004d70 <HAL_TIM_ConfigClockSource+0x944>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f000 8195 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a52      	ldr	r2, [pc, #328]	; (8004d74 <HAL_TIM_ConfigClockSource+0x948>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f000 818f 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a50      	ldr	r2, [pc, #320]	; (8004d78 <HAL_TIM_ConfigClockSource+0x94c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 8189 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a4e      	ldr	r2, [pc, #312]	; (8004d7c <HAL_TIM_ConfigClockSource+0x950>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d14c      	bne.n	8004ce0 <HAL_TIM_ConfigClockSource+0x8b4>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4e:	f000 817e 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5a:	f000 8178 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8173 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	f000 816e 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	f000 8169 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	f000 8164 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b50      	cmp	r3, #80	; 0x50
 8004c8c:	f000 815f 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b60      	cmp	r3, #96	; 0x60
 8004c96:	f000 815a 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b70      	cmp	r3, #112	; 0x70
 8004ca0:	f000 8155 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004cac:	f000 814f 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <HAL_TIM_ConfigClockSource+0x93c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	f000 8149 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <HAL_TIM_ConfigClockSource+0x940>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 8143 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a28      	ldr	r2, [pc, #160]	; (8004d70 <HAL_TIM_ConfigClockSource+0x944>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f000 813d 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a26      	ldr	r2, [pc, #152]	; (8004d74 <HAL_TIM_ConfigClockSource+0x948>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f000 8137 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <HAL_TIM_ConfigClockSource+0x954>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d15e      	bne.n	8004da8 <HAL_TIM_ConfigClockSource+0x97c>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	f000 812c 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfe:	f000 8126 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8121 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	f000 811c 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	f000 8117 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	f000 8112 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b50      	cmp	r3, #80	; 0x50
 8004d30:	f000 810d 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b60      	cmp	r3, #96	; 0x60
 8004d3a:	f000 8108 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b70      	cmp	r3, #112	; 0x70
 8004d44:	f000 8103 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d50:	f000 80fd 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a03      	ldr	r2, [pc, #12]	; (8004d68 <HAL_TIM_ConfigClockSource+0x93c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f000 80f7 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d60:	e010      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x958>
 8004d62:	bf00      	nop
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	00100020 	.word	0x00100020
 8004d6c:	00100030 	.word	0x00100030
 8004d70:	00100040 	.word	0x00100040
 8004d74:	00100050 	.word	0x00100050
 8004d78:	00100070 	.word	0x00100070
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7e      	ldr	r2, [pc, #504]	; (8004f84 <HAL_TIM_ConfigClockSource+0xb58>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	f000 80df 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7c      	ldr	r2, [pc, #496]	; (8004f88 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	f000 80d9 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7a      	ldr	r2, [pc, #488]	; (8004f8c <HAL_TIM_ConfigClockSource+0xb60>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	f000 80d3 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a78      	ldr	r2, [pc, #480]	; (8004f90 <HAL_TIM_ConfigClockSource+0xb64>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d14b      	bne.n	8004e4a <HAL_TIM_ConfigClockSource+0xa1e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	f000 80c8 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc6:	f000 80c2 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80bd 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	f000 80b8 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	f000 80b3 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b30      	cmp	r3, #48	; 0x30
 8004dee:	f000 80ae 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	f000 80a9 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	f000 80a4 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b60      	cmp	r3, #96	; 0x60
 8004e0c:	f000 809f 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b70      	cmp	r3, #112	; 0x70
 8004e16:	f000 809a 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a5d      	ldr	r2, [pc, #372]	; (8004f94 <HAL_TIM_ConfigClockSource+0xb68>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	f000 8094 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a56      	ldr	r2, [pc, #344]	; (8004f84 <HAL_TIM_ConfigClockSource+0xb58>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	f000 808e 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a54      	ldr	r2, [pc, #336]	; (8004f88 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	f000 8088 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a52      	ldr	r2, [pc, #328]	; (8004f8c <HAL_TIM_ConfigClockSource+0xb60>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	f000 8082 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <HAL_TIM_ConfigClockSource+0xb6c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d134      	bne.n	8004ebe <HAL_TIM_ConfigClockSource+0xa92>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d077      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d073      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d06f      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d06b      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b30      	cmp	r3, #48	; 0x30
 8004e7c:	d067      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d063      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b50      	cmp	r3, #80	; 0x50
 8004e8c:	d05f      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b60      	cmp	r3, #96	; 0x60
 8004e94:	d05b      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e9e:	d056      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a37      	ldr	r2, [pc, #220]	; (8004f84 <HAL_TIM_ConfigClockSource+0xb58>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d051      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a36      	ldr	r2, [pc, #216]	; (8004f88 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d04c      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a34      	ldr	r2, [pc, #208]	; (8004f8c <HAL_TIM_ConfigClockSource+0xb60>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d047      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a36      	ldr	r2, [pc, #216]	; (8004f9c <HAL_TIM_ConfigClockSource+0xb70>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d13d      	bne.n	8004f44 <HAL_TIM_ConfigClockSource+0xb18>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d03d      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	d038      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d034      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d030      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d02c      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b30      	cmp	r3, #48	; 0x30
 8004efa:	d028      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d024      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b50      	cmp	r3, #80	; 0x50
 8004f0a:	d020      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b60      	cmp	r3, #96	; 0x60
 8004f12:	d01c      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b70      	cmp	r3, #112	; 0x70
 8004f1a:	d018      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f24:	d013      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1a      	ldr	r2, [pc, #104]	; (8004f94 <HAL_TIM_ConfigClockSource+0xb68>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <HAL_TIM_ConfigClockSource+0xb58>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xb22>
 8004f44:	f241 6138 	movw	r1, #5688	; 0x1638
 8004f48:	4815      	ldr	r0, [pc, #84]	; (8004fa0 <HAL_TIM_ConfigClockSource+0xb74>)
 8004f4a:	f7fc f984 	bl	8001256 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 fd0c 	bl	8005976 <TIM_ITRx_SetConfig>
      break;
 8004f5e:	e003      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    default:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0xb3c>
      break;
 8004f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	00100030 	.word	0x00100030
 8004f88:	00100040 	.word	0x00100040
 8004f8c:	00100050 	.word	0x00100050
 8004f90:	40013400 	.word	0x40013400
 8004f94:	00100020 	.word	0x00100020
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40015000 	.word	0x40015000
 8004fa0:	0800ba80 	.word	0x0800ba80

08004fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a42      	ldr	r2, [pc, #264]	; (80050fc <TIM_Base_SetConfig+0x11c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d00f      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3f      	ldr	r2, [pc, #252]	; (8005100 <TIM_Base_SetConfig+0x120>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3e      	ldr	r2, [pc, #248]	; (8005104 <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <TIM_Base_SetConfig+0x128>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a3c      	ldr	r2, [pc, #240]	; (800510c <TIM_Base_SetConfig+0x12c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a31      	ldr	r2, [pc, #196]	; (80050fc <TIM_Base_SetConfig+0x11c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01f      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d01b      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2e      	ldr	r2, [pc, #184]	; (8005100 <TIM_Base_SetConfig+0x120>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d017      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <TIM_Base_SetConfig+0x124>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2c      	ldr	r2, [pc, #176]	; (8005108 <TIM_Base_SetConfig+0x128>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00f      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <TIM_Base_SetConfig+0x130>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2b      	ldr	r2, [pc, #172]	; (8005114 <TIM_Base_SetConfig+0x134>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <TIM_Base_SetConfig+0x138>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_Base_SetConfig+0x9a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <TIM_Base_SetConfig+0x12c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <TIM_Base_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <TIM_Base_SetConfig+0x100>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a13      	ldr	r2, [pc, #76]	; (8005108 <TIM_Base_SetConfig+0x128>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_Base_SetConfig+0x100>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <TIM_Base_SetConfig+0x130>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_Base_SetConfig+0x100>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a12      	ldr	r2, [pc, #72]	; (8005114 <TIM_Base_SetConfig+0x134>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_Base_SetConfig+0x100>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <TIM_Base_SetConfig+0x138>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_Base_SetConfig+0x100>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <TIM_Base_SetConfig+0x12c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d103      	bne.n	80050e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	615a      	str	r2, [r3, #20]
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40013400 	.word	0x40013400
 800510c:	40015000 	.word	0x40015000
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0302 	bic.w	r3, r3, #2
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a44      	ldr	r2, [pc, #272]	; (8005288 <TIM_OC1_SetConfig+0x16c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <TIM_OC1_SetConfig+0x88>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a43      	ldr	r2, [pc, #268]	; (800528c <TIM_OC1_SetConfig+0x170>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <TIM_OC1_SetConfig+0x88>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a42      	ldr	r2, [pc, #264]	; (8005290 <TIM_OC1_SetConfig+0x174>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_OC1_SetConfig+0x88>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a41      	ldr	r2, [pc, #260]	; (8005294 <TIM_OC1_SetConfig+0x178>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_OC1_SetConfig+0x88>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a40      	ldr	r2, [pc, #256]	; (8005298 <TIM_OC1_SetConfig+0x17c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC1_SetConfig+0x88>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3f      	ldr	r2, [pc, #252]	; (800529c <TIM_OC1_SetConfig+0x180>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d119      	bne.n	80051d8 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <TIM_OC1_SetConfig+0xa2>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d004      	beq.n	80051be <TIM_OC1_SetConfig+0xa2>
 80051b4:	f641 4111 	movw	r1, #7185	; 0x1c11
 80051b8:	4839      	ldr	r0, [pc, #228]	; (80052a0 <TIM_OC1_SetConfig+0x184>)
 80051ba:	f7fc f84c 	bl	8001256 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 0308 	bic.w	r3, r3, #8
 80051c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0304 	bic.w	r3, r3, #4
 80051d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <TIM_OC1_SetConfig+0x16c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <TIM_OC1_SetConfig+0xec>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a2a      	ldr	r2, [pc, #168]	; (800528c <TIM_OC1_SetConfig+0x170>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00f      	beq.n	8005208 <TIM_OC1_SetConfig+0xec>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a29      	ldr	r2, [pc, #164]	; (8005290 <TIM_OC1_SetConfig+0x174>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_OC1_SetConfig+0xec>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_OC1_SetConfig+0x178>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_OC1_SetConfig+0xec>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_OC1_SetConfig+0x17c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_OC1_SetConfig+0xec>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a26      	ldr	r2, [pc, #152]	; (800529c <TIM_OC1_SetConfig+0x180>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d12d      	bne.n	8005264 <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d008      	beq.n	8005224 <TIM_OC1_SetConfig+0x108>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <TIM_OC1_SetConfig+0x108>
 800521a:	f641 411e 	movw	r1, #7198	; 0x1c1e
 800521e:	4820      	ldr	r0, [pc, #128]	; (80052a0 <TIM_OC1_SetConfig+0x184>)
 8005220:	f7fc f819 	bl	8001256 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522c:	d008      	beq.n	8005240 <TIM_OC1_SetConfig+0x124>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <TIM_OC1_SetConfig+0x124>
 8005236:	f641 411f 	movw	r1, #7199	; 0x1c1f
 800523a:	4819      	ldr	r0, [pc, #100]	; (80052a0 <TIM_OC1_SetConfig+0x184>)
 800523c:	f7fc f80b 	bl	8001256 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800
 800529c:	40015000 	.word	0x40015000
 80052a0:	0800ba80 	.word	0x0800ba80

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3f      	ldr	r2, [pc, #252]	; (8005400 <TIM_OC2_SetConfig+0x15c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_OC2_SetConfig+0x74>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3e      	ldr	r2, [pc, #248]	; (8005404 <TIM_OC2_SetConfig+0x160>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC2_SetConfig+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3d      	ldr	r2, [pc, #244]	; (8005408 <TIM_OC2_SetConfig+0x164>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d11a      	bne.n	800534e <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <TIM_OC2_SetConfig+0x8e>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d004      	beq.n	8005332 <TIM_OC2_SetConfig+0x8e>
 8005328:	f641 415c 	movw	r1, #7260	; 0x1c5c
 800532c:	4837      	ldr	r0, [pc, #220]	; (800540c <TIM_OC2_SetConfig+0x168>)
 800532e:	f7fb ff92 	bl	8001256 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <TIM_OC2_SetConfig+0x15c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_OC2_SetConfig+0xda>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <TIM_OC2_SetConfig+0x160>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_OC2_SetConfig+0xda>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <TIM_OC2_SetConfig+0x16c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_OC2_SetConfig+0xda>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <TIM_OC2_SetConfig+0x170>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC2_SetConfig+0xda>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a29      	ldr	r2, [pc, #164]	; (8005418 <TIM_OC2_SetConfig+0x174>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC2_SetConfig+0xda>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a23      	ldr	r2, [pc, #140]	; (8005408 <TIM_OC2_SetConfig+0x164>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d12f      	bne.n	80053de <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005386:	d008      	beq.n	800539a <TIM_OC2_SetConfig+0xf6>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <TIM_OC2_SetConfig+0xf6>
 8005390:	f641 416a 	movw	r1, #7274	; 0x1c6a
 8005394:	481d      	ldr	r0, [pc, #116]	; (800540c <TIM_OC2_SetConfig+0x168>)
 8005396:	f7fb ff5e 	bl	8001256 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d008      	beq.n	80053b6 <TIM_OC2_SetConfig+0x112>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <TIM_OC2_SetConfig+0x112>
 80053ac:	f641 416b 	movw	r1, #7275	; 0x1c6b
 80053b0:	4816      	ldr	r0, [pc, #88]	; (800540c <TIM_OC2_SetConfig+0x168>)
 80053b2:	f7fb ff50 	bl	8001256 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40015000 	.word	0x40015000
 800540c:	0800ba80 	.word	0x0800ba80
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <TIM_OC3_SetConfig+0x15c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_OC3_SetConfig+0x72>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a3e      	ldr	r2, [pc, #248]	; (800557c <TIM_OC3_SetConfig+0x160>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_OC3_SetConfig+0x72>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a3d      	ldr	r2, [pc, #244]	; (8005580 <TIM_OC3_SetConfig+0x164>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d11a      	bne.n	80054c4 <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <TIM_OC3_SetConfig+0x8c>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b08      	cmp	r3, #8
 800549c:	d004      	beq.n	80054a8 <TIM_OC3_SetConfig+0x8c>
 800549e:	f641 41a7 	movw	r1, #7335	; 0x1ca7
 80054a2:	4838      	ldr	r0, [pc, #224]	; (8005584 <TIM_OC3_SetConfig+0x168>)
 80054a4:	f7fb fed7 	bl	8001256 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <TIM_OC3_SetConfig+0x15c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <TIM_OC3_SetConfig+0xd8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a2b      	ldr	r2, [pc, #172]	; (800557c <TIM_OC3_SetConfig+0x160>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC3_SetConfig+0xd8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a2c      	ldr	r2, [pc, #176]	; (8005588 <TIM_OC3_SetConfig+0x16c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC3_SetConfig+0xd8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a2b      	ldr	r2, [pc, #172]	; (800558c <TIM_OC3_SetConfig+0x170>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC3_SetConfig+0xd8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <TIM_OC3_SetConfig+0x174>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC3_SetConfig+0xd8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a24      	ldr	r2, [pc, #144]	; (8005580 <TIM_OC3_SetConfig+0x164>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d12f      	bne.n	8005554 <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fc:	d008      	beq.n	8005510 <TIM_OC3_SetConfig+0xf4>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <TIM_OC3_SetConfig+0xf4>
 8005506:	f641 41b4 	movw	r1, #7348	; 0x1cb4
 800550a:	481e      	ldr	r0, [pc, #120]	; (8005584 <TIM_OC3_SetConfig+0x168>)
 800550c:	f7fb fea3 	bl	8001256 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005518:	d008      	beq.n	800552c <TIM_OC3_SetConfig+0x110>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <TIM_OC3_SetConfig+0x110>
 8005522:	f641 41b5 	movw	r1, #7349	; 0x1cb5
 8005526:	4817      	ldr	r0, [pc, #92]	; (8005584 <TIM_OC3_SetConfig+0x168>)
 8005528:	f7fb fe95 	bl	8001256 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40015000 	.word	0x40015000
 8005584:	0800ba80 	.word	0x0800ba80
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800

08005594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3f      	ldr	r2, [pc, #252]	; (80056f0 <TIM_OC4_SetConfig+0x15c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC4_SetConfig+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <TIM_OC4_SetConfig+0x160>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC4_SetConfig+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3d      	ldr	r2, [pc, #244]	; (80056f8 <TIM_OC4_SetConfig+0x164>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d11a      	bne.n	800563e <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <TIM_OC4_SetConfig+0x8e>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d004      	beq.n	8005622 <TIM_OC4_SetConfig+0x8e>
 8005618:	f641 41f2 	movw	r1, #7410	; 0x1cf2
 800561c:	4837      	ldr	r0, [pc, #220]	; (80056fc <TIM_OC4_SetConfig+0x168>)
 800561e:	f7fb fe1a 	bl	8001256 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	031b      	lsls	r3, r3, #12
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <TIM_OC4_SetConfig+0x15c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <TIM_OC4_SetConfig+0xda>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <TIM_OC4_SetConfig+0x160>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00f      	beq.n	800566e <TIM_OC4_SetConfig+0xda>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <TIM_OC4_SetConfig+0x16c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_OC4_SetConfig+0xda>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <TIM_OC4_SetConfig+0x170>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_OC4_SetConfig+0xda>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <TIM_OC4_SetConfig+0x174>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC4_SetConfig+0xda>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <TIM_OC4_SetConfig+0x164>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d12f      	bne.n	80056ce <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005676:	d008      	beq.n	800568a <TIM_OC4_SetConfig+0xf6>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <TIM_OC4_SetConfig+0xf6>
 8005680:	f641 41ff 	movw	r1, #7423	; 0x1cff
 8005684:	481d      	ldr	r0, [pc, #116]	; (80056fc <TIM_OC4_SetConfig+0x168>)
 8005686:	f7fb fde6 	bl	8001256 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d008      	beq.n	80056a6 <TIM_OC4_SetConfig+0x112>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <TIM_OC4_SetConfig+0x112>
 800569c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80056a0:	4816      	ldr	r0, [pc, #88]	; (80056fc <TIM_OC4_SetConfig+0x168>)
 80056a2:	f7fb fdd8 	bl	8001256 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ac:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b4:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	019b      	lsls	r3, r3, #6
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	019b      	lsls	r3, r3, #6
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40015000 	.word	0x40015000
 80056fc:	0800ba80 	.word	0x0800ba80
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800

0800570c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a19      	ldr	r2, [pc, #100]	; (80057c8 <TIM_OC5_SetConfig+0xbc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <TIM_OC5_SetConfig+0xc0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <TIM_OC5_SetConfig+0xc4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <TIM_OC5_SetConfig+0xc8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <TIM_OC5_SetConfig+0xcc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <TIM_OC5_SetConfig+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d109      	bne.n	80057a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	621a      	str	r2, [r3, #32]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	40015000 	.word	0x40015000

080057e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	051b      	lsls	r3, r3, #20
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <TIM_OC6_SetConfig+0xc0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <TIM_OC6_SetConfig+0xc4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00f      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <TIM_OC6_SetConfig+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00b      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <TIM_OC6_SetConfig+0xcc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <TIM_OC6_SetConfig+0xd0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <TIM_OC6_SetConfig+0xd4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d109      	bne.n	8005878 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	40015000 	.word	0x40015000

080058b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f023 030a 	bic.w	r3, r3, #10
 80058f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005916:	b480      	push	{r7}
 8005918:	b087      	sub	sp, #28
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0210 	bic.w	r2, r3, #16
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	031b      	lsls	r3, r3, #12
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 0307 	orr.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a2f      	ldr	r2, [pc, #188]	; (8005abc <TIM_CCxChannelCmd+0xcc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d024      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d020      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <TIM_CCxChannelCmd+0xd0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01c      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a2b      	ldr	r2, [pc, #172]	; (8005ac4 <TIM_CCxChannelCmd+0xd4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d018      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <TIM_CCxChannelCmd+0xd8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d014      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a29      	ldr	r2, [pc, #164]	; (8005acc <TIM_CCxChannelCmd+0xdc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d010      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a28      	ldr	r2, [pc, #160]	; (8005ad0 <TIM_CCxChannelCmd+0xe0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00c      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <TIM_CCxChannelCmd+0xe4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d008      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <TIM_CCxChannelCmd+0xe8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <TIM_CCxChannelCmd+0x5e>
 8005a44:	f641 7176 	movw	r1, #8054	; 0x1f76
 8005a48:	4824      	ldr	r0, [pc, #144]	; (8005adc <TIM_CCxChannelCmd+0xec>)
 8005a4a:	f7fb fc04 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d016      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d013      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d010      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d00d      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d00a      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b14      	cmp	r3, #20
 8005a70:	d007      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b3c      	cmp	r3, #60	; 0x3c
 8005a76:	d004      	beq.n	8005a82 <TIM_CCxChannelCmd+0x92>
 8005a78:	f641 7177 	movw	r1, #8055	; 0x1f77
 8005a7c:	4817      	ldr	r0, [pc, #92]	; (8005adc <TIM_CCxChannelCmd+0xec>)
 8005a7e:	f7fb fbea 	bl	8001256 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	2201      	movs	r2, #1
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	401a      	ands	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40015000 	.word	0x40015000
 8005adc:	0800ba80 	.word	0x0800ba80

08005ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a37      	ldr	r2, [pc, #220]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d02c      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d027      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d022      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01d      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d018      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2b      	ldr	r2, [pc, #172]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005b44:	f640 0193 	movw	r1, #2195	; 0x893
 8005b48:	4828      	ldr	r0, [pc, #160]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b4a:	f7fb fb84 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d025      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d021      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d01d      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b30      	cmp	r3, #48	; 0x30
 8005b6c:	d019      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d015      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b50      	cmp	r3, #80	; 0x50
 8005b7c:	d011      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b60      	cmp	r3, #96	; 0x60
 8005b84:	d00d      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b70      	cmp	r3, #112	; 0x70
 8005b8c:	d009      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b98:	f640 0194 	movw	r1, #2196	; 0x894
 8005b9c:	4813      	ldr	r0, [pc, #76]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b9e:	f7fb fb5a 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b80      	cmp	r3, #128	; 0x80
 8005ba8:	d008      	beq.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005bb2:	f640 0195 	movw	r1, #2197	; 0x895
 8005bb6:	480d      	ldr	r0, [pc, #52]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bb8:	f7fb fb4d 	bl	8001256 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d114      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e0db      	b.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40001000 	.word	0x40001000
 8005bdc:	40001400 	.word	0x40001400
 8005be0:	40013400 	.word	0x40013400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40015000 	.word	0x40015000
 8005bec:	0800bab8 	.word	0x0800bab8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0x14e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a5c      	ldr	r2, [pc, #368]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0x14e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a5a      	ldr	r2, [pc, #360]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d161      	bne.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0x212>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d054      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c3e:	d04f      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c48:	d04a      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c52:	d045      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d040      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005c66:	d03b      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c70:	d036      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c7a:	d031      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8005c84:	d02c      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c8e:	d027      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005cd6:	f640 01a7 	movw	r1, #2215	; 0x8a7
 8005cda:	482f      	ldr	r0, [pc, #188]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 8005cdc:	f7fb fabb 	bl	8001256 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ce6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01d      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d22:	d018      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00e      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d004      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a10      	ldr	r2, [pc, #64]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d10c      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40015000 	.word	0x40015000
 8005d98:	0800bab8 	.word	0x0800bab8
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40014000 	.word	0x40014000

08005da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4c      	ldr	r2, [pc, #304]	; (8005eec <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4a      	ldr	r2, [pc, #296]	; (8005ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a49      	ldr	r2, [pc, #292]	; (8005ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a47      	ldr	r2, [pc, #284]	; (8005ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x150>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a46      	ldr	r2, [pc, #280]	; (8005efc <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a44      	ldr	r2, [pc, #272]	; (8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005df2:	f640 01dc 	movw	r1, #2268	; 0x8dc
 8005df6:	4843      	ldr	r0, [pc, #268]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005df8:	f7fb fa2d 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e04:	d008      	beq.n	8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005e0e:	f640 01dd 	movw	r1, #2269	; 0x8dd
 8005e12:	483c      	ldr	r0, [pc, #240]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e14:	f7fb fa1f 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e20:	d008      	beq.n	8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8005e2a:	f640 01de 	movw	r1, #2270	; 0x8de
 8005e2e:	4835      	ldr	r0, [pc, #212]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e30:	f7fb fa11 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e44:	d00e      	beq.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	d009      	beq.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005e5a:	f640 01df 	movw	r1, #2271	; 0x8df
 8005e5e:	4829      	ldr	r0, [pc, #164]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e60:	f7fb f9f9 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2bff      	cmp	r3, #255	; 0xff
 8005e6a:	d904      	bls.n	8005e76 <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 8005e6c:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 8005e70:	4824      	ldr	r0, [pc, #144]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e72:	f7fb f9f0 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d008      	beq.n	8005e92 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8005e88:	f640 01e1 	movw	r1, #2273	; 0x8e1
 8005e8c:	481d      	ldr	r0, [pc, #116]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e8e:	f7fb f9e2 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8005ea4:	f640 01e2 	movw	r1, #2274	; 0x8e2
 8005ea8:	4816      	ldr	r0, [pc, #88]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005eaa:	f7fb f9d4 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	d904      	bls.n	8005ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8005eb6:	f640 01e3 	movw	r1, #2275	; 0x8e3
 8005eba:	4812      	ldr	r0, [pc, #72]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ebc:	f7fb f9cb 	bl	8001256 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec8:	d008      	beq.n	8005edc <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8005ed2:	f640 01e4 	movw	r1, #2276	; 0x8e4
 8005ed6:	480b      	ldr	r0, [pc, #44]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ed8:	f7fb f9bd 	bl	8001256 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d110      	bne.n	8005f08 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e0e6      	b.n	80060b8 <HAL_TIMEx_ConfigBreakDeadTime+0x310>
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40013400 	.word	0x40013400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800
 8005f00:	40015000 	.word	0x40015000
 8005f04:	0800bab8 	.word	0x0800bab8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4e      	ldr	r2, [pc, #312]	; (80060c0 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a4c      	ldr	r2, [pc, #304]	; (80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4b      	ldr	r2, [pc, #300]	; (80060c8 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d114      	bne.n	8005fca <HAL_TIMEx_ConfigBreakDeadTime+0x222>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb0:	d004      	beq.n	8005fbc <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8005fb2:	f640 01f9 	movw	r1, #2297	; 0x8f9
 8005fb6:	4845      	ldr	r0, [pc, #276]	; (80060cc <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8005fb8:	f7fb f94d 	bl	8001256 <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a3c      	ldr	r2, [pc, #240]	; (80060c0 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d15e      	bne.n	80060a6 <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff0:	d008      	beq.n	8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8005ffa:	f640 1102 	movw	r1, #2306	; 0x902
 8005ffe:	4833      	ldr	r0, [pc, #204]	; (80060cc <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8006000:	f7fb f929 	bl	8001256 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006014:	d004      	beq.n	8006020 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8006016:	f640 1103 	movw	r1, #2307	; 0x903
 800601a:	482c      	ldr	r0, [pc, #176]	; (80060cc <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800601c:	f7fb f91b 	bl	8001256 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d904      	bls.n	8006032 <HAL_TIMEx_ConfigBreakDeadTime+0x28a>
 8006028:	f640 1104 	movw	r1, #2308	; 0x904
 800602c:	4827      	ldr	r0, [pc, #156]	; (80060cc <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800602e:	f7fb f912 	bl	8001256 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	051b      	lsls	r3, r3, #20
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a17      	ldr	r2, [pc, #92]	; (80060c0 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d114      	bne.n	80060a6 <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608c:	d004      	beq.n	8006098 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 800608e:	f640 110e 	movw	r1, #2318	; 0x90e
 8006092:	480e      	ldr	r0, [pc, #56]	; (80060cc <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8006094:	f7fb f8df 	bl	8001256 <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40015000 	.word	0x40015000
 80060cc:	0800bab8 	.word	0x0800bab8

080060d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800616a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800616e:	2b84      	cmp	r3, #132	; 0x84
 8006170:	d005      	beq.n	800617e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006172:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	3303      	adds	r3, #3
 800617c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800617e:	68fb      	ldr	r3, [r7, #12]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006190:	f001 fa18 	bl	80075c4 <vTaskStartScheduler>
  
  return osOK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	bd80      	pop	{r7, pc}

0800619a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800619a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619c:	b089      	sub	sp, #36	; 0x24
 800619e:	af04      	add	r7, sp, #16
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d020      	beq.n	80061ee <osThreadCreate+0x54>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01c      	beq.n	80061ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685c      	ldr	r4, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681d      	ldr	r5, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691e      	ldr	r6, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff ffc8 	bl	800615c <makeFreeRtosPriority>
 80061cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061d6:	9202      	str	r2, [sp, #8]
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	9100      	str	r1, [sp, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	4632      	mov	r2, r6
 80061e0:	4629      	mov	r1, r5
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 ffa4 	bl	8007130 <xTaskCreateStatic>
 80061e8:	4603      	mov	r3, r0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e01c      	b.n	8006228 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685c      	ldr	r4, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061fa:	b29e      	uxth	r6, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff ffaa 	bl	800615c <makeFreeRtosPriority>
 8006208:	4602      	mov	r2, r0
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	9200      	str	r2, [sp, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	4632      	mov	r2, r6
 8006216:	4629      	mov	r1, r5
 8006218:	4620      	mov	r0, r4
 800621a:	f000 ffe6 	bl	80071ea <xTaskCreate>
 800621e:	4603      	mov	r3, r0
 8006220:	2b01      	cmp	r3, #1
 8006222:	d001      	beq.n	8006228 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006228:	68fb      	ldr	r3, [r7, #12]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006232 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f103 0208 	add.w	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f103 0208 	add.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 0208 	add.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d103      	bne.n	80062f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e00c      	b.n	800630e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3308      	adds	r3, #8
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e002      	b.n	8006302 <vListInsert+0x2e>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d2f6      	bcs.n	80062fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6892      	ldr	r2, [r2, #8]
 800635c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6852      	ldr	r2, [r2, #4]
 8006366:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d103      	bne.n	800637a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xQueueGenericReset+0x2a>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60bb      	str	r3, [r7, #8]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063c6:	f002 fcd5 	bl	8008d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	68f9      	ldr	r1, [r7, #12]
 80063d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	441a      	add	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	3b01      	subs	r3, #1
 80063f8:	68f9      	ldr	r1, [r7, #12]
 80063fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	22ff      	movs	r2, #255	; 0xff
 800640a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d114      	bne.n	8006446 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01a      	beq.n	800645a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3310      	adds	r3, #16
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fb9f 	bl	8007b6c <xTaskRemoveFromEventList>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d012      	beq.n	800645a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <xQueueGenericReset+0xcc>)
 8006436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	e009      	b.n	800645a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3310      	adds	r3, #16
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fef1 	bl	8006232 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3324      	adds	r3, #36	; 0x24
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff feec 	bl	8006232 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800645a:	f002 fcbb 	bl	8008dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800645e:	2301      	movs	r3, #1
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08e      	sub	sp, #56	; 0x38
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <xQueueGenericCreateStatic+0x52>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <xQueueGenericCreateStatic+0x56>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <xQueueGenericCreateStatic+0x58>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	623b      	str	r3, [r7, #32]
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <xQueueGenericCreateStatic+0x7e>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <xQueueGenericCreateStatic+0x82>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericCreateStatic+0x84>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	61fb      	str	r3, [r7, #28]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800650a:	2350      	movs	r3, #80	; 0x50
 800650c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b50      	cmp	r3, #80	; 0x50
 8006512:	d00a      	beq.n	800652a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61bb      	str	r3, [r7, #24]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800652a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00d      	beq.n	8006552 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800653e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	4613      	mov	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f83f 	bl	80065d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006554:	4618      	mov	r0, r3
 8006556:	3730      	adds	r7, #48	; 0x30
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	3350      	adds	r3, #80	; 0x50
 8006594:	4618      	mov	r0, r3
 8006596:	f002 fd0f 	bl	8008fb8 <pvPortMalloc>
 800659a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d011      	beq.n	80065c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	3350      	adds	r3, #80	; 0x50
 80065aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065b4:	79fa      	ldrb	r2, [r7, #7]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f805 	bl	80065d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065c6:	69bb      	ldr	r3, [r7, #24]
	}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e002      	b.n	80065f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065fe:	2101      	movs	r1, #1
 8006600:	69b8      	ldr	r0, [r7, #24]
 8006602:	f7ff fecb 	bl	800639c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00e      	beq.n	8006642 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006636:	2300      	movs	r3, #0
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f81d 	bl	800667c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	4603      	mov	r3, r0
 8006652:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006654:	2301      	movs	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	461a      	mov	r2, r3
 8006660:	6939      	ldr	r1, [r7, #16]
 8006662:	6978      	ldr	r0, [r7, #20]
 8006664:	f7ff ff7a 	bl	800655c <xQueueGenericCreate>
 8006668:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff ffd3 	bl	8006616 <prvInitialiseMutex>

		return xNewQueue;
 8006670:	68fb      	ldr	r3, [r7, #12]
	}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08e      	sub	sp, #56	; 0x38
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800668a:	2300      	movs	r3, #0
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <xQueueGenericSend+0x32>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <xQueueGenericSend+0x40>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <xQueueGenericSend+0x44>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <xQueueGenericSend+0x46>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <xQueueGenericSend+0x60>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d103      	bne.n	80066ea <xQueueGenericSend+0x6e>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <xQueueGenericSend+0x72>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <xQueueGenericSend+0x74>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueGenericSend+0x8e>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	623b      	str	r3, [r7, #32]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800670a:	f001 fbff 	bl	8007f0c <xTaskGetSchedulerState>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <xQueueGenericSend+0x9e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <xQueueGenericSend+0xa2>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <xQueueGenericSend+0xa4>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xQueueGenericSend+0xbe>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	61fb      	str	r3, [r7, #28]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800673a:	f002 fb1b 	bl	8008d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	429a      	cmp	r2, r3
 8006748:	d302      	bcc.n	8006750 <xQueueGenericSend+0xd4>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d129      	bne.n	80067a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006756:	f000 fb52 	bl	8006dfe <prvCopyDataToQueue>
 800675a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d010      	beq.n	8006786 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	3324      	adds	r3, #36	; 0x24
 8006768:	4618      	mov	r0, r3
 800676a:	f001 f9ff 	bl	8007b6c <xTaskRemoveFromEventList>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d013      	beq.n	800679c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006774:	4b3f      	ldr	r3, [pc, #252]	; (8006874 <xQueueGenericSend+0x1f8>)
 8006776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	e00a      	b.n	800679c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800678c:	4b39      	ldr	r3, [pc, #228]	; (8006874 <xQueueGenericSend+0x1f8>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800679c:	f002 fb1a 	bl	8008dd4 <vPortExitCritical>
				return pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e063      	b.n	800686c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067aa:	f002 fb13 	bl	8008dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e05c      	b.n	800686c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067b8:	f107 0314 	add.w	r3, r7, #20
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fa37 	bl	8007c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067c6:	f002 fb05 	bl	8008dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ca:	f000 ff6d 	bl	80076a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ce:	f002 fad1 	bl	8008d74 <vPortEnterCritical>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067de:	d103      	bne.n	80067e8 <xQueueGenericSend+0x16c>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d103      	bne.n	80067fe <xQueueGenericSend+0x182>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067fe:	f002 fae9 	bl	8008dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006802:	1d3a      	adds	r2, r7, #4
 8006804:	f107 0314 	add.w	r3, r7, #20
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fa26 	bl	8007c5c <xTaskCheckForTimeOut>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d124      	bne.n	8006860 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006818:	f000 fbe9 	bl	8006fee <prvIsQueueFull>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	3310      	adds	r3, #16
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f94e 	bl	8007acc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006832:	f000 fb74 	bl	8006f1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006836:	f000 ff45 	bl	80076c4 <xTaskResumeAll>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	f47f af7c 	bne.w	800673a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <xQueueGenericSend+0x1f8>)
 8006844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	e772      	b.n	800673a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006856:	f000 fb62 	bl	8006f1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800685a:	f000 ff33 	bl	80076c4 <xTaskResumeAll>
 800685e:	e76c      	b.n	800673a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006862:	f000 fb5c 	bl	8006f1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006866:	f000 ff2d 	bl	80076c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800686a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800686c:	4618      	mov	r0, r3
 800686e:	3738      	adds	r7, #56	; 0x38
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b090      	sub	sp, #64	; 0x40
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <xQueueGenericSendFromISR+0x3c>
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <xQueueGenericSendFromISR+0x40>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <xQueueGenericSendFromISR+0x42>
 80068b8:	2300      	movs	r3, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d103      	bne.n	80068e2 <xQueueGenericSendFromISR+0x6a>
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <xQueueGenericSendFromISR+0x6e>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <xQueueGenericSendFromISR+0x70>
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	623b      	str	r3, [r7, #32]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006902:	f002 fb19 	bl	8008f38 <vPortValidateInterruptPriority>
	__asm volatile
 8006906:	f3ef 8211 	mrs	r2, BASEPRI
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	61fa      	str	r2, [r7, #28]
 800691c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800691e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <xQueueGenericSendFromISR+0xbc>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d12f      	bne.n	8006994 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800693a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800694a:	f000 fa58 	bl	8006dfe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800694e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	d112      	bne.n	800697e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d016      	beq.n	800698e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	4618      	mov	r0, r3
 8006966:	f001 f901 	bl	8007b6c <xTaskRemoveFromEventList>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e007      	b.n	800698e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800697e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006982:	3301      	adds	r3, #1
 8006984:	b2db      	uxtb	r3, r3
 8006986:	b25a      	sxtb	r2, r3
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800698e:	2301      	movs	r3, #1
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006992:	e001      	b.n	8006998 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f383 8811 	msr	BASEPRI, r3
}
 80069a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3740      	adds	r7, #64	; 0x40
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069bc:	2300      	movs	r3, #0
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <xQueueReceive+0x30>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	623b      	str	r3, [r7, #32]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <xQueueReceive+0x3e>
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <xQueueReceive+0x42>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueReceive+0x44>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueReceive+0x5e>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61fb      	str	r3, [r7, #28]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a0e:	f001 fa7d 	bl	8007f0c <xTaskGetSchedulerState>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <xQueueReceive+0x6e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <xQueueReceive+0x72>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <xQueueReceive+0x74>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <xQueueReceive+0x8e>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	61bb      	str	r3, [r7, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a3e:	f002 f999 	bl	8008d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01f      	beq.n	8006a8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a52:	f000 fa3e 	bl	8006ed2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	1e5a      	subs	r2, r3, #1
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	3310      	adds	r3, #16
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 f87e 	bl	8007b6c <xTaskRemoveFromEventList>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a76:	4b3d      	ldr	r3, [pc, #244]	; (8006b6c <xQueueReceive+0x1bc>)
 8006a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a86:	f002 f9a5 	bl	8008dd4 <vPortExitCritical>
				return pdPASS;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e069      	b.n	8006b62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a94:	f002 f99e 	bl	8008dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e062      	b.n	8006b62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa2:	f107 0310 	add.w	r3, r7, #16
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f8c2 	bl	8007c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ab0:	f002 f990 	bl	8008dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab4:	f000 fdf8 	bl	80076a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab8:	f002 f95c 	bl	8008d74 <vPortEnterCritical>
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac2:	b25b      	sxtb	r3, r3
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d103      	bne.n	8006ad2 <xQueueReceive+0x122>
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ade:	d103      	bne.n	8006ae8 <xQueueReceive+0x138>
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae8:	f002 f974 	bl	8008dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aec:	1d3a      	adds	r2, r7, #4
 8006aee:	f107 0310 	add.w	r3, r7, #16
 8006af2:	4611      	mov	r1, r2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 f8b1 	bl	8007c5c <xTaskCheckForTimeOut>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d123      	bne.n	8006b48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b02:	f000 fa5e 	bl	8006fc2 <prvIsQueueEmpty>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d017      	beq.n	8006b3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	3324      	adds	r3, #36	; 0x24
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ffd9 	bl	8007acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1c:	f000 f9ff 	bl	8006f1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b20:	f000 fdd0 	bl	80076c4 <xTaskResumeAll>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d189      	bne.n	8006a3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b2a:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <xQueueReceive+0x1bc>)
 8006b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	e780      	b.n	8006a3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3e:	f000 f9ee 	bl	8006f1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b42:	f000 fdbf 	bl	80076c4 <xTaskResumeAll>
 8006b46:	e77a      	b.n	8006a3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4a:	f000 f9e8 	bl	8006f1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4e:	f000 fdb9 	bl	80076c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b54:	f000 fa35 	bl	8006fc2 <prvIsQueueEmpty>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f43f af6f 	beq.w	8006a3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3730      	adds	r7, #48	; 0x30
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08e      	sub	sp, #56	; 0x38
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	623b      	str	r3, [r7, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61fb      	str	r3, [r7, #28]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bc0:	f001 f9a4 	bl	8007f0c <xTaskGetSchedulerState>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <xQueueSemaphoreTake+0x60>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <xQueueSemaphoreTake+0x64>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <xQueueSemaphoreTake+0x66>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	61bb      	str	r3, [r7, #24]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bf0:	f002 f8c0 	bl	8008d74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d024      	beq.n	8006c4a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	1e5a      	subs	r2, r3, #1
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006c10:	f001 fb24 	bl	800825c <pvTaskIncrementMutexHeldCount>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	3310      	adds	r3, #16
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ffa0 	bl	8007b6c <xTaskRemoveFromEventList>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c32:	4b54      	ldr	r3, [pc, #336]	; (8006d84 <xQueueSemaphoreTake+0x214>)
 8006c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c42:	f002 f8c7 	bl	8008dd4 <vPortExitCritical>
				return pdPASS;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e097      	b.n	8006d7a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d111      	bne.n	8006c74 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c6c:	f002 f8b2 	bl	8008dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e082      	b.n	8006d7a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c7a:	f107 030c 	add.w	r3, r7, #12
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 ffd6 	bl	8007c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c88:	f002 f8a4 	bl	8008dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c8c:	f000 fd0c 	bl	80076a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c90:	f002 f870 	bl	8008d74 <vPortEnterCritical>
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d103      	bne.n	8006caa <xQueueSemaphoreTake+0x13a>
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d103      	bne.n	8006cc0 <xQueueSemaphoreTake+0x150>
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc0:	f002 f888 	bl	8008dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	f107 030c 	add.w	r3, r7, #12
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 ffc5 	bl	8007c5c <xTaskCheckForTimeOut>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d132      	bne.n	8006d3e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cda:	f000 f972 	bl	8006fc2 <prvIsQueueEmpty>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d026      	beq.n	8006d32 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006cec:	f002 f842 	bl	8008d74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f927 	bl	8007f48 <xTaskPriorityInherit>
 8006cfa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006cfc:	f002 f86a 	bl	8008dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fedf 	bl	8007acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d10:	f000 f905 	bl	8006f1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d14:	f000 fcd6 	bl	80076c4 <xTaskResumeAll>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f47f af68 	bne.w	8006bf0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d20:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <xQueueSemaphoreTake+0x214>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	e75e      	b.n	8006bf0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d34:	f000 f8f3 	bl	8006f1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d38:	f000 fcc4 	bl	80076c4 <xTaskResumeAll>
 8006d3c:	e758      	b.n	8006bf0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d40:	f000 f8ed 	bl	8006f1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d44:	f000 fcbe 	bl	80076c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d4a:	f000 f93a 	bl	8006fc2 <prvIsQueueEmpty>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f43f af4d 	beq.w	8006bf0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006d5c:	f002 f80a 	bl	8008d74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d62:	f000 f834 	bl	8006dce <prvGetDisinheritPriorityAfterTimeout>
 8006d66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 f9e6 	bl	8008140 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d74:	f002 f82e 	bl	8008dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3738      	adds	r7, #56	; 0x38
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <vQueueDelete+0x28>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	60bb      	str	r3, [r7, #8]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f95f 	bl	8007074 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f002 f9c5 	bl	8009150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f1c3 0312 	rsb	r3, r3, #18
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e001      	b.n	8006df0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006df0:	68fb      	ldr	r3, [r7, #12]
	}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10d      	bne.n	8006e38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d14d      	bne.n	8006ec0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f903 	bl	8008034 <xTaskPriorityDisinherit>
 8006e2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	609a      	str	r2, [r3, #8]
 8006e36:	e043      	b.n	8006ec0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d119      	bne.n	8006e72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6858      	ldr	r0, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	461a      	mov	r2, r3
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	f003 fd79 	bl	800a940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	441a      	add	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d32b      	bcc.n	8006ec0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	e026      	b.n	8006ec0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68d8      	ldr	r0, [r3, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	f003 fd5f 	bl	800a940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	425b      	negs	r3, r3
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d207      	bcs.n	8006eae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	425b      	negs	r3, r3
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d105      	bne.n	8006ec0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ec8:	697b      	ldr	r3, [r7, #20]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d018      	beq.n	8006f16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	441a      	add	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d303      	bcc.n	8006f06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68d9      	ldr	r1, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6838      	ldr	r0, [r7, #0]
 8006f12:	f003 fd15 	bl	800a940 <memcpy>
	}
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f26:	f001 ff25 	bl	8008d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f32:	e011      	b.n	8006f58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d012      	beq.n	8006f62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fe13 	bl	8007b6c <xTaskRemoveFromEventList>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f4c:	f000 fee8 	bl	8007d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dce9      	bgt.n	8006f34 <prvUnlockQueue+0x16>
 8006f60:	e000      	b.n	8006f64 <prvUnlockQueue+0x46>
					break;
 8006f62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	22ff      	movs	r2, #255	; 0xff
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f6c:	f001 ff32 	bl	8008dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f70:	f001 ff00 	bl	8008d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f7c:	e011      	b.n	8006fa2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3310      	adds	r3, #16
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fdee 	bl	8007b6c <xTaskRemoveFromEventList>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f96:	f000 fec3 	bl	8007d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dce9      	bgt.n	8006f7e <prvUnlockQueue+0x60>
 8006faa:	e000      	b.n	8006fae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	22ff      	movs	r2, #255	; 0xff
 8006fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fb6:	f001 ff0d 	bl	8008dd4 <vPortExitCritical>
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fca:	f001 fed3 	bl	8008d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	e001      	b.n	8006fe0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fe0:	f001 fef8 	bl	8008dd4 <vPortExitCritical>

	return xReturn;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ff6:	f001 febd 	bl	8008d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	429a      	cmp	r2, r3
 8007004:	d102      	bne.n	800700c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007006:	2301      	movs	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e001      	b.n	8007010 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007010:	f001 fee0 	bl	8008dd4 <vPortExitCritical>

	return xReturn;
 8007014:	68fb      	ldr	r3, [r7, #12]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e014      	b.n	800705a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007030:	4a0f      	ldr	r2, [pc, #60]	; (8007070 <vQueueAddToRegistry+0x50>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800703c:	490c      	ldr	r1, [pc, #48]	; (8007070 <vQueueAddToRegistry+0x50>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <vQueueAddToRegistry+0x50>)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007052:	e006      	b.n	8007062 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b07      	cmp	r3, #7
 800705e:	d9e7      	bls.n	8007030 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	200008e8 	.word	0x200008e8

08007074 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e016      	b.n	80070b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007082:	4a10      	ldr	r2, [pc, #64]	; (80070c4 <vQueueUnregisterQueue+0x50>)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d10b      	bne.n	80070aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007092:	4a0c      	ldr	r2, [pc, #48]	; (80070c4 <vQueueUnregisterQueue+0x50>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2100      	movs	r1, #0
 8007098:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800709c:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <vQueueUnregisterQueue+0x50>)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	4413      	add	r3, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]
				break;
 80070a8:	e006      	b.n	80070b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b07      	cmp	r3, #7
 80070b4:	d9e5      	bls.n	8007082 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	200008e8 	.word	0x200008e8

080070c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070d8:	f001 fe4c 	bl	8008d74 <vPortEnterCritical>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e2:	b25b      	sxtb	r3, r3
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d103      	bne.n	80070f2 <vQueueWaitForMessageRestricted+0x2a>
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d103      	bne.n	8007108 <vQueueWaitForMessageRestricted+0x40>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007108:	f001 fe64 	bl	8008dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3324      	adds	r3, #36	; 0x24
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fcf9 	bl	8007b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007122:	6978      	ldr	r0, [r7, #20]
 8007124:	f7ff fefb 	bl	8006f1e <prvUnlockQueue>
	}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	; 0x38
 8007134:	af04      	add	r7, sp, #16
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xTaskCreateStatic+0x46>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	61fb      	str	r3, [r7, #28]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007176:	23c0      	movs	r3, #192	; 0xc0
 8007178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2bc0      	cmp	r3, #192	; 0xc0
 800717e:	d00a      	beq.n	8007196 <xTaskCreateStatic+0x66>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61bb      	str	r3, [r7, #24]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007196:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01e      	beq.n	80071dc <xTaskCreateStatic+0xac>
 800719e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071b6:	2300      	movs	r3, #0
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	f107 0314 	add.w	r3, r7, #20
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f850 	bl	8007274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d6:	f000 f8f7 	bl	80073c8 <prvAddNewTaskToReadyList>
 80071da:	e001      	b.n	80071e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071e0:	697b      	ldr	r3, [r7, #20]
	}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08c      	sub	sp, #48	; 0x30
 80071ee:	af04      	add	r7, sp, #16
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 feda 	bl	8008fb8 <pvPortMalloc>
 8007204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800720c:	20c0      	movs	r0, #192	; 0xc0
 800720e:	f001 fed3 	bl	8008fb8 <pvPortMalloc>
 8007212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
 8007220:	e005      	b.n	800722e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007222:	6978      	ldr	r0, [r7, #20]
 8007224:	f001 ff94 	bl	8009150 <vPortFree>
 8007228:	e001      	b.n	800722e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d017      	beq.n	8007264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	2300      	movs	r3, #0
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f80e 	bl	8007274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007258:	69f8      	ldr	r0, [r7, #28]
 800725a:	f000 f8b5 	bl	80073c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725e:	2301      	movs	r3, #1
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e002      	b.n	800726a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
 8007268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800726a:	69bb      	ldr	r3, [r7, #24]
	}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	461a      	mov	r2, r3
 800728c:	21a5      	movs	r1, #165	; 0xa5
 800728e:	f003 fb7f 	bl	800a990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800729c:	3b01      	subs	r3, #1
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f023 0307 	bic.w	r3, r3, #7
 80072aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	617b      	str	r3, [r7, #20]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01f      	beq.n	8007312 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e012      	b.n	80072fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	7819      	ldrb	r1, [r3, #0]
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	3334      	adds	r3, #52	; 0x34
 80072e8:	460a      	mov	r2, r1
 80072ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b0f      	cmp	r3, #15
 8007302:	d9e9      	bls.n	80072d8 <prvInitialiseNewTask+0x64>
 8007304:	e000      	b.n	8007308 <prvInitialiseNewTask+0x94>
			{
				break;
 8007306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007310:	e003      	b.n	800731a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2b11      	cmp	r3, #17
 800731e:	d901      	bls.n	8007324 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007320:	2311      	movs	r3, #17
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	2200      	movs	r2, #0
 8007334:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe ff99 	bl	8006272 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	3318      	adds	r3, #24
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe ff94 	bl	8006272 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	f1c3 0212 	rsb	r2, r3, #18
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	2200      	movs	r2, #0
 8007364:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	2200      	movs	r2, #0
 8007372:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	3358      	adds	r3, #88	; 0x58
 800737a:	2260      	movs	r2, #96	; 0x60
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f003 fb06 	bl	800a990 <memset>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <prvInitialiseNewTask+0x148>)
 8007388:	65da      	str	r2, [r3, #92]	; 0x5c
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	4a0c      	ldr	r2, [pc, #48]	; (80073c0 <prvInitialiseNewTask+0x14c>)
 800738e:	661a      	str	r2, [r3, #96]	; 0x60
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <prvInitialiseNewTask+0x150>)
 8007394:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	69b8      	ldr	r0, [r7, #24]
 800739c:	f001 fbba 	bl	8008b14 <pxPortInitialiseStack>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b2:	bf00      	nop
 80073b4:	3720      	adds	r7, #32
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	0800bc3c 	.word	0x0800bc3c
 80073c0:	0800bc5c 	.word	0x0800bc5c
 80073c4:	0800bc1c 	.word	0x0800bc1c

080073c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073d0:	f001 fcd0 	bl	8008d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <prvAddNewTaskToReadyList+0xc0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	4a2b      	ldr	r2, [pc, #172]	; (8007488 <prvAddNewTaskToReadyList+0xc0>)
 80073dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073de:	4b2b      	ldr	r3, [pc, #172]	; (800748c <prvAddNewTaskToReadyList+0xc4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073e6:	4a29      	ldr	r2, [pc, #164]	; (800748c <prvAddNewTaskToReadyList+0xc4>)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073ec:	4b26      	ldr	r3, [pc, #152]	; (8007488 <prvAddNewTaskToReadyList+0xc0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d110      	bne.n	8007416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073f4:	f000 fcb8 	bl	8007d68 <prvInitialiseTaskLists>
 80073f8:	e00d      	b.n	8007416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073fa:	4b25      	ldr	r3, [pc, #148]	; (8007490 <prvAddNewTaskToReadyList+0xc8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007402:	4b22      	ldr	r3, [pc, #136]	; (800748c <prvAddNewTaskToReadyList+0xc4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	429a      	cmp	r2, r3
 800740e:	d802      	bhi.n	8007416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007410:	4a1e      	ldr	r2, [pc, #120]	; (800748c <prvAddNewTaskToReadyList+0xc4>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007416:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <prvAddNewTaskToReadyList+0xcc>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <prvAddNewTaskToReadyList+0xcc>)
 800741e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007420:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <prvAddNewTaskToReadyList+0xcc>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	2201      	movs	r2, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	4b19      	ldr	r3, [pc, #100]	; (8007498 <prvAddNewTaskToReadyList+0xd0>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4313      	orrs	r3, r2
 8007436:	4a18      	ldr	r2, [pc, #96]	; (8007498 <prvAddNewTaskToReadyList+0xd0>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a15      	ldr	r2, [pc, #84]	; (800749c <prvAddNewTaskToReadyList+0xd4>)
 8007448:	441a      	add	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe ff1b 	bl	800628c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007456:	f001 fcbd 	bl	8008dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <prvAddNewTaskToReadyList+0xc8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00e      	beq.n	8007480 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007462:	4b0a      	ldr	r3, [pc, #40]	; (800748c <prvAddNewTaskToReadyList+0xc4>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	429a      	cmp	r2, r3
 800746e:	d207      	bcs.n	8007480 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <prvAddNewTaskToReadyList+0xd8>)
 8007472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000b04 	.word	0x20000b04
 800748c:	20000928 	.word	0x20000928
 8007490:	20000b10 	.word	0x20000b10
 8007494:	20000b20 	.word	0x20000b20
 8007498:	20000b0c 	.word	0x20000b0c
 800749c:	2000092c 	.word	0x2000092c
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80074ac:	f001 fc62 	bl	8008d74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <vTaskDelete+0x18>
 80074b6:	4b39      	ldr	r3, [pc, #228]	; (800759c <vTaskDelete+0xf8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	e000      	b.n	80074be <vTaskDelete+0x1a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe ff3e 	bl	8006346 <uxListRemove>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d115      	bne.n	80074fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4932      	ldr	r1, [pc, #200]	; (80075a0 <vTaskDelete+0xfc>)
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <vTaskDelete+0x58>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	2201      	movs	r2, #1
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	43da      	mvns	r2, r3
 80074f2:	4b2c      	ldr	r3, [pc, #176]	; (80075a4 <vTaskDelete+0x100>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4013      	ands	r3, r2
 80074f8:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <vTaskDelete+0x100>)
 80074fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3318      	adds	r3, #24
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe ff1c 	bl	8006346 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800750e:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <vTaskDelete+0x104>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <vTaskDelete+0x104>)
 8007516:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007518:	4b20      	ldr	r3, [pc, #128]	; (800759c <vTaskDelete+0xf8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	429a      	cmp	r2, r3
 8007520:	d10b      	bne.n	800753a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3304      	adds	r3, #4
 8007526:	4619      	mov	r1, r3
 8007528:	4820      	ldr	r0, [pc, #128]	; (80075ac <vTaskDelete+0x108>)
 800752a:	f7fe feaf 	bl	800628c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800752e:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <vTaskDelete+0x10c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <vTaskDelete+0x10c>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e009      	b.n	800754e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800753a:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <vTaskDelete+0x110>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3b01      	subs	r3, #1
 8007540:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <vTaskDelete+0x110>)
 8007542:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fc7d 	bl	8007e44 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800754a:	f000 fcaf 	bl	8007eac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800754e:	f001 fc41 	bl	8008dd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007552:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <vTaskDelete+0x114>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01b      	beq.n	8007592 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <vTaskDelete+0xf8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	429a      	cmp	r2, r3
 8007562:	d116      	bne.n	8007592 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007564:	4b15      	ldr	r3, [pc, #84]	; (80075bc <vTaskDelete+0x118>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <vTaskDelete+0xde>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60bb      	str	r3, [r7, #8]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <vTaskDelete+0x11c>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000928 	.word	0x20000928
 80075a0:	2000092c 	.word	0x2000092c
 80075a4:	20000b0c 	.word	0x20000b0c
 80075a8:	20000b20 	.word	0x20000b20
 80075ac:	20000ad8 	.word	0x20000ad8
 80075b0:	20000aec 	.word	0x20000aec
 80075b4:	20000b04 	.word	0x20000b04
 80075b8:	20000b10 	.word	0x20000b10
 80075bc:	20000b2c 	.word	0x20000b2c
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075d2:	463a      	mov	r2, r7
 80075d4:	1d39      	adds	r1, r7, #4
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f9 fcda 	bl	8000f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	9202      	str	r2, [sp, #8]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	2300      	movs	r3, #0
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	460a      	mov	r2, r1
 80075f2:	4925      	ldr	r1, [pc, #148]	; (8007688 <vTaskStartScheduler+0xc4>)
 80075f4:	4825      	ldr	r0, [pc, #148]	; (800768c <vTaskStartScheduler+0xc8>)
 80075f6:	f7ff fd9b 	bl	8007130 <xTaskCreateStatic>
 80075fa:	4603      	mov	r3, r0
 80075fc:	4a24      	ldr	r2, [pc, #144]	; (8007690 <vTaskStartScheduler+0xcc>)
 80075fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007600:	4b23      	ldr	r3, [pc, #140]	; (8007690 <vTaskStartScheduler+0xcc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007608:	2301      	movs	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	e001      	b.n	8007612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d102      	bne.n	800761e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007618:	f000 fe9a 	bl	8008350 <xTimerCreateTimerTask>
 800761c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d11d      	bne.n	8007660 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	613b      	str	r3, [r7, #16]
}
 8007636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007638:	4b16      	ldr	r3, [pc, #88]	; (8007694 <vTaskStartScheduler+0xd0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3358      	adds	r3, #88	; 0x58
 800763e:	4a16      	ldr	r2, [pc, #88]	; (8007698 <vTaskStartScheduler+0xd4>)
 8007640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007642:	4b16      	ldr	r3, [pc, #88]	; (800769c <vTaskStartScheduler+0xd8>)
 8007644:	f04f 32ff 	mov.w	r2, #4294967295
 8007648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800764a:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <vTaskStartScheduler+0xdc>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <vTaskStartScheduler+0xe0>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007656:	f7f9 fc82 	bl	8000f5e <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800765a:	f001 fae9 	bl	8008c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800765e:	e00e      	b.n	800767e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d10a      	bne.n	800767e <vTaskStartScheduler+0xba>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	60fb      	str	r3, [r7, #12]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <vTaskStartScheduler+0xb8>
}
 800767e:	bf00      	nop
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	0800baf4 	.word	0x0800baf4
 800768c:	08007d39 	.word	0x08007d39
 8007690:	20000b28 	.word	0x20000b28
 8007694:	20000928 	.word	0x20000928
 8007698:	20000014 	.word	0x20000014
 800769c:	20000b24 	.word	0x20000b24
 80076a0:	20000b10 	.word	0x20000b10
 80076a4:	20000b08 	.word	0x20000b08

080076a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076ac:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <vTaskSuspendAll+0x18>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	4a03      	ldr	r2, [pc, #12]	; (80076c0 <vTaskSuspendAll+0x18>)
 80076b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076b6:	bf00      	nop
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	20000b2c 	.word	0x20000b2c

080076c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076d2:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <xTaskResumeAll+0x114>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	603b      	str	r3, [r7, #0]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076f0:	f001 fb40 	bl	8008d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076f4:	4b38      	ldr	r3, [pc, #224]	; (80077d8 <xTaskResumeAll+0x114>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <xTaskResumeAll+0x114>)
 80076fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076fe:	4b36      	ldr	r3, [pc, #216]	; (80077d8 <xTaskResumeAll+0x114>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d161      	bne.n	80077ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007706:	4b35      	ldr	r3, [pc, #212]	; (80077dc <xTaskResumeAll+0x118>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d05d      	beq.n	80077ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800770e:	e02e      	b.n	800776e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007710:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <xTaskResumeAll+0x11c>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3318      	adds	r3, #24
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fe12 	bl	8006346 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fe0d 	bl	8006346 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	2201      	movs	r2, #1
 8007732:	409a      	lsls	r2, r3
 8007734:	4b2b      	ldr	r3, [pc, #172]	; (80077e4 <xTaskResumeAll+0x120>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4313      	orrs	r3, r2
 800773a:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <xTaskResumeAll+0x120>)
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4a27      	ldr	r2, [pc, #156]	; (80077e8 <xTaskResumeAll+0x124>)
 800774c:	441a      	add	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3304      	adds	r3, #4
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f7fe fd99 	bl	800628c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	4b23      	ldr	r3, [pc, #140]	; (80077ec <xTaskResumeAll+0x128>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007768:	4b21      	ldr	r3, [pc, #132]	; (80077f0 <xTaskResumeAll+0x12c>)
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800776e:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <xTaskResumeAll+0x11c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1cc      	bne.n	8007710 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800777c:	f000 fb96 	bl	8007eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007780:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <xTaskResumeAll+0x130>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d010      	beq.n	80077ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800778c:	f000 f858 	bl	8007840 <xTaskIncrementTick>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007796:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <xTaskResumeAll+0x12c>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3b01      	subs	r3, #1
 80077a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1f1      	bne.n	800778c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80077a8:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <xTaskResumeAll+0x130>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077ae:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <xTaskResumeAll+0x12c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077b6:	2301      	movs	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077ba:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <xTaskResumeAll+0x134>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077ca:	f001 fb03 	bl	8008dd4 <vPortExitCritical>

	return xAlreadyYielded;
 80077ce:	68bb      	ldr	r3, [r7, #8]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000b2c 	.word	0x20000b2c
 80077dc:	20000b04 	.word	0x20000b04
 80077e0:	20000ac4 	.word	0x20000ac4
 80077e4:	20000b0c 	.word	0x20000b0c
 80077e8:	2000092c 	.word	0x2000092c
 80077ec:	20000928 	.word	0x20000928
 80077f0:	20000b18 	.word	0x20000b18
 80077f4:	20000b14 	.word	0x20000b14
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <xTaskGetTickCount+0x1c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007808:	687b      	ldr	r3, [r7, #4]
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20000b08 	.word	0x20000b08

0800781c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007822:	f001 fb89 	bl	8008f38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007826:	2300      	movs	r3, #0
 8007828:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800782a:	4b04      	ldr	r3, [pc, #16]	; (800783c <xTaskGetTickCountFromISR+0x20>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007830:	683b      	ldr	r3, [r7, #0]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000b08 	.word	0x20000b08

08007840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800784a:	4b4e      	ldr	r3, [pc, #312]	; (8007984 <xTaskIncrementTick+0x144>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f040 808e 	bne.w	8007970 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007854:	4b4c      	ldr	r3, [pc, #304]	; (8007988 <xTaskIncrementTick+0x148>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800785c:	4a4a      	ldr	r2, [pc, #296]	; (8007988 <xTaskIncrementTick+0x148>)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d120      	bne.n	80078aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007868:	4b48      	ldr	r3, [pc, #288]	; (800798c <xTaskIncrementTick+0x14c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <xTaskIncrementTick+0x48>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	603b      	str	r3, [r7, #0]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <xTaskIncrementTick+0x46>
 8007888:	4b40      	ldr	r3, [pc, #256]	; (800798c <xTaskIncrementTick+0x14c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	4b40      	ldr	r3, [pc, #256]	; (8007990 <xTaskIncrementTick+0x150>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a3e      	ldr	r2, [pc, #248]	; (800798c <xTaskIncrementTick+0x14c>)
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	4a3e      	ldr	r2, [pc, #248]	; (8007990 <xTaskIncrementTick+0x150>)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	4b3d      	ldr	r3, [pc, #244]	; (8007994 <xTaskIncrementTick+0x154>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	4a3c      	ldr	r2, [pc, #240]	; (8007994 <xTaskIncrementTick+0x154>)
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	f000 fb01 	bl	8007eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078aa:	4b3b      	ldr	r3, [pc, #236]	; (8007998 <xTaskIncrementTick+0x158>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d348      	bcc.n	8007946 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078b4:	4b35      	ldr	r3, [pc, #212]	; (800798c <xTaskIncrementTick+0x14c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078be:	4b36      	ldr	r3, [pc, #216]	; (8007998 <xTaskIncrementTick+0x158>)
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	601a      	str	r2, [r3, #0]
					break;
 80078c6:	e03e      	b.n	8007946 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c8:	4b30      	ldr	r3, [pc, #192]	; (800798c <xTaskIncrementTick+0x14c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d203      	bcs.n	80078e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078e0:	4a2d      	ldr	r2, [pc, #180]	; (8007998 <xTaskIncrementTick+0x158>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078e6:	e02e      	b.n	8007946 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fd2a 	bl	8006346 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3318      	adds	r3, #24
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fd21 	bl	8006346 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	2201      	movs	r2, #1
 800790a:	409a      	lsls	r2, r3
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <xTaskIncrementTick+0x15c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4313      	orrs	r3, r2
 8007912:	4a22      	ldr	r2, [pc, #136]	; (800799c <xTaskIncrementTick+0x15c>)
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <xTaskIncrementTick+0x160>)
 8007924:	441a      	add	r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	3304      	adds	r3, #4
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7fe fcad 	bl	800628c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007936:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <xTaskIncrementTick+0x164>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	429a      	cmp	r2, r3
 800793e:	d3b9      	bcc.n	80078b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007940:	2301      	movs	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007944:	e7b6      	b.n	80078b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007946:	4b17      	ldr	r3, [pc, #92]	; (80079a4 <xTaskIncrementTick+0x164>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4914      	ldr	r1, [pc, #80]	; (80079a0 <xTaskIncrementTick+0x160>)
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	440b      	add	r3, r1
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d901      	bls.n	8007962 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007962:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <xTaskIncrementTick+0x168>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e004      	b.n	800797a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007970:	4b0e      	ldr	r3, [pc, #56]	; (80079ac <xTaskIncrementTick+0x16c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a0d      	ldr	r2, [pc, #52]	; (80079ac <xTaskIncrementTick+0x16c>)
 8007978:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800797a:	697b      	ldr	r3, [r7, #20]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	20000b2c 	.word	0x20000b2c
 8007988:	20000b08 	.word	0x20000b08
 800798c:	20000abc 	.word	0x20000abc
 8007990:	20000ac0 	.word	0x20000ac0
 8007994:	20000b1c 	.word	0x20000b1c
 8007998:	20000b24 	.word	0x20000b24
 800799c:	20000b0c 	.word	0x20000b0c
 80079a0:	2000092c 	.word	0x2000092c
 80079a4:	20000928 	.word	0x20000928
 80079a8:	20000b18 	.word	0x20000b18
 80079ac:	20000b14 	.word	0x20000b14

080079b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079b6:	4b3d      	ldr	r3, [pc, #244]	; (8007aac <vTaskSwitchContext+0xfc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079be:	4b3c      	ldr	r3, [pc, #240]	; (8007ab0 <vTaskSwitchContext+0x100>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079c4:	e06e      	b.n	8007aa4 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 80079c6:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <vTaskSwitchContext+0x100>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80079cc:	f7f9 face 	bl	8000f6c <getRunTimeCounterValue>
 80079d0:	4603      	mov	r3, r0
 80079d2:	4a38      	ldr	r2, [pc, #224]	; (8007ab4 <vTaskSwitchContext+0x104>)
 80079d4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80079d6:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <vTaskSwitchContext+0x104>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b37      	ldr	r3, [pc, #220]	; (8007ab8 <vTaskSwitchContext+0x108>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d909      	bls.n	80079f6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80079e2:	4b36      	ldr	r3, [pc, #216]	; (8007abc <vTaskSwitchContext+0x10c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079e8:	4a32      	ldr	r2, [pc, #200]	; (8007ab4 <vTaskSwitchContext+0x104>)
 80079ea:	6810      	ldr	r0, [r2, #0]
 80079ec:	4a32      	ldr	r2, [pc, #200]	; (8007ab8 <vTaskSwitchContext+0x108>)
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	1a82      	subs	r2, r0, r2
 80079f2:	440a      	add	r2, r1
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80079f6:	4b2f      	ldr	r3, [pc, #188]	; (8007ab4 <vTaskSwitchContext+0x104>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a2f      	ldr	r2, [pc, #188]	; (8007ab8 <vTaskSwitchContext+0x108>)
 80079fc:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80079fe:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <vTaskSwitchContext+0x10c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <vTaskSwitchContext+0x10c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d808      	bhi.n	8007a20 <vTaskSwitchContext+0x70>
 8007a0e:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <vTaskSwitchContext+0x10c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <vTaskSwitchContext+0x10c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3334      	adds	r3, #52	; 0x34
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7f9 faae 	bl	8000f7c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a20:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <vTaskSwitchContext+0x110>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	fab3 f383 	clz	r3, r3
 8007a2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a2e:	7afb      	ldrb	r3, [r7, #11]
 8007a30:	f1c3 031f 	rsb	r3, r3, #31
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	4923      	ldr	r1, [pc, #140]	; (8007ac4 <vTaskSwitchContext+0x114>)
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <vTaskSwitchContext+0xb0>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	607b      	str	r3, [r7, #4]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <vTaskSwitchContext+0xae>
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <vTaskSwitchContext+0x114>)
 8007a6c:	4413      	add	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	3308      	adds	r3, #8
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d104      	bne.n	8007a90 <vTaskSwitchContext+0xe0>
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	4a09      	ldr	r2, [pc, #36]	; (8007abc <vTaskSwitchContext+0x10c>)
 8007a98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a9a:	4b08      	ldr	r3, [pc, #32]	; (8007abc <vTaskSwitchContext+0x10c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3358      	adds	r3, #88	; 0x58
 8007aa0:	4a09      	ldr	r2, [pc, #36]	; (8007ac8 <vTaskSwitchContext+0x118>)
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000b2c 	.word	0x20000b2c
 8007ab0:	20000b18 	.word	0x20000b18
 8007ab4:	20000b34 	.word	0x20000b34
 8007ab8:	20000b30 	.word	0x20000b30
 8007abc:	20000928 	.word	0x20000928
 8007ac0:	20000b0c 	.word	0x20000b0c
 8007ac4:	2000092c 	.word	0x2000092c
 8007ac8:	20000014 	.word	0x20000014

08007acc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60fb      	str	r3, [r7, #12]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007af2:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <vTaskPlaceOnEventList+0x44>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3318      	adds	r3, #24
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7fe fbea 	bl	80062d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b00:	2101      	movs	r1, #1
 8007b02:	6838      	ldr	r0, [r7, #0]
 8007b04:	f000 fbbe 	bl	8008284 <prvAddCurrentTaskToDelayedList>
}
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000928 	.word	0x20000928

08007b14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	617b      	str	r3, [r7, #20]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3318      	adds	r3, #24
 8007b42:	4619      	mov	r1, r3
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7fe fba1 	bl	800628c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b50:	f04f 33ff 	mov.w	r3, #4294967295
 8007b54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	68b8      	ldr	r0, [r7, #8]
 8007b5a:	f000 fb93 	bl	8008284 <prvAddCurrentTaskToDelayedList>
	}
 8007b5e:	bf00      	nop
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000928 	.word	0x20000928

08007b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	60fb      	str	r3, [r7, #12]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fbd2 	bl	8006346 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba2:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <xTaskRemoveFromEventList+0xac>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d11c      	bne.n	8007be4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fbc9 	bl	8006346 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	2201      	movs	r2, #1
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <xTaskRemoveFromEventList+0xb0>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <xTaskRemoveFromEventList+0xb0>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <xTaskRemoveFromEventList+0xb4>)
 8007bd4:	441a      	add	r2, r3
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7fe fb55 	bl	800628c <vListInsertEnd>
 8007be2:	e005      	b.n	8007bf0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4619      	mov	r1, r3
 8007bea:	480e      	ldr	r0, [pc, #56]	; (8007c24 <xTaskRemoveFromEventList+0xb8>)
 8007bec:	f7fe fb4e 	bl	800628c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <xTaskRemoveFromEventList+0xbc>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d905      	bls.n	8007c0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c02:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <xTaskRemoveFromEventList+0xc0>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	e001      	b.n	8007c0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c0e:	697b      	ldr	r3, [r7, #20]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000b2c 	.word	0x20000b2c
 8007c1c:	20000b0c 	.word	0x20000b0c
 8007c20:	2000092c 	.word	0x2000092c
 8007c24:	20000ac4 	.word	0x20000ac4
 8007c28:	20000928 	.word	0x20000928
 8007c2c:	20000b18 	.word	0x20000b18

08007c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <vTaskInternalSetTimeOutState+0x24>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <vTaskInternalSetTimeOutState+0x28>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	605a      	str	r2, [r3, #4]
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	20000b1c 	.word	0x20000b1c
 8007c58:	20000b08 	.word	0x20000b08

08007c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	613b      	str	r3, [r7, #16]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	60fb      	str	r3, [r7, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c9e:	f001 f869 	bl	8008d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <xTaskCheckForTimeOut+0xbc>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d102      	bne.n	8007cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e023      	b.n	8007d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <xTaskCheckForTimeOut+0xc0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d007      	beq.n	8007cde <xTaskCheckForTimeOut+0x82>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	e015      	b.n	8007d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d20b      	bcs.n	8007d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ff9b 	bl	8007c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e004      	b.n	8007d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d0a:	f001 f863 	bl	8008dd4 <vPortExitCritical>

	return xReturn;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000b08 	.word	0x20000b08
 8007d1c:	20000b1c 	.word	0x20000b1c

08007d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d24:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <vTaskMissedYield+0x14>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	20000b18 	.word	0x20000b18

08007d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d40:	f000 f852 	bl	8007de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <prvIdleTask+0x28>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d9f9      	bls.n	8007d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <prvIdleTask+0x2c>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d5c:	e7f0      	b.n	8007d40 <prvIdleTask+0x8>
 8007d5e:	bf00      	nop
 8007d60:	2000092c 	.word	0x2000092c
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d6e:	2300      	movs	r3, #0
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	e00c      	b.n	8007d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <prvInitialiseTaskLists+0x60>)
 8007d80:	4413      	add	r3, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fa55 	bl	8006232 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b11      	cmp	r3, #17
 8007d92:	d9ef      	bls.n	8007d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d94:	480d      	ldr	r0, [pc, #52]	; (8007dcc <prvInitialiseTaskLists+0x64>)
 8007d96:	f7fe fa4c 	bl	8006232 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d9a:	480d      	ldr	r0, [pc, #52]	; (8007dd0 <prvInitialiseTaskLists+0x68>)
 8007d9c:	f7fe fa49 	bl	8006232 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007da0:	480c      	ldr	r0, [pc, #48]	; (8007dd4 <prvInitialiseTaskLists+0x6c>)
 8007da2:	f7fe fa46 	bl	8006232 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007da6:	480c      	ldr	r0, [pc, #48]	; (8007dd8 <prvInitialiseTaskLists+0x70>)
 8007da8:	f7fe fa43 	bl	8006232 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dac:	480b      	ldr	r0, [pc, #44]	; (8007ddc <prvInitialiseTaskLists+0x74>)
 8007dae:	f7fe fa40 	bl	8006232 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007db2:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <prvInitialiseTaskLists+0x78>)
 8007db4:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <prvInitialiseTaskLists+0x64>)
 8007db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <prvInitialiseTaskLists+0x7c>)
 8007dba:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <prvInitialiseTaskLists+0x68>)
 8007dbc:	601a      	str	r2, [r3, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000092c 	.word	0x2000092c
 8007dcc:	20000a94 	.word	0x20000a94
 8007dd0:	20000aa8 	.word	0x20000aa8
 8007dd4:	20000ac4 	.word	0x20000ac4
 8007dd8:	20000ad8 	.word	0x20000ad8
 8007ddc:	20000af0 	.word	0x20000af0
 8007de0:	20000abc 	.word	0x20000abc
 8007de4:	20000ac0 	.word	0x20000ac0

08007de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dee:	e019      	b.n	8007e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007df0:	f000 ffc0 	bl	8008d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <prvCheckTasksWaitingTermination+0x50>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe faa0 	bl	8006346 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <prvCheckTasksWaitingTermination+0x54>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4a0b      	ldr	r2, [pc, #44]	; (8007e3c <prvCheckTasksWaitingTermination+0x54>)
 8007e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e1a:	f000 ffdb 	bl	8008dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f810 	bl	8007e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e1      	bne.n	8007df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000ad8 	.word	0x20000ad8
 8007e3c:	20000b04 	.word	0x20000b04
 8007e40:	20000aec 	.word	0x20000aec

08007e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3358      	adds	r3, #88	; 0x58
 8007e50:	4618      	mov	r0, r3
 8007e52:	f002 ff21 	bl	800ac98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f973 	bl	8009150 <vPortFree>
				vPortFree( pxTCB );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 f970 	bl	8009150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e70:	e018      	b.n	8007ea4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d103      	bne.n	8007e84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f967 	bl	8009150 <vPortFree>
	}
 8007e82:	e00f      	b.n	8007ea4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d00a      	beq.n	8007ea4 <prvDeleteTCB+0x60>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60fb      	str	r3, [r7, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <prvDeleteTCB+0x5e>
	}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec4:	e008      	b.n	8007ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec6:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	20000abc 	.word	0x20000abc
 8007ee8:	20000b24 	.word	0x20000b24

08007eec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <xTaskGetCurrentTaskHandle+0x1c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ef8:	687b      	ldr	r3, [r7, #4]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000928 	.word	0x20000928

08007f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <xTaskGetSchedulerState+0x34>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	e008      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f20:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <xTaskGetSchedulerState+0x38>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e001      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f32:	687b      	ldr	r3, [r7, #4]
	}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000b10 	.word	0x20000b10
 8007f44:	20000b2c 	.word	0x20000b2c

08007f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d05e      	beq.n	800801c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <xTaskPriorityInherit+0xe0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d24e      	bcs.n	800800a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db06      	blt.n	8007f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <xTaskPriorityInherit+0xe0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	f1c3 0212 	rsb	r2, r3, #18
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6959      	ldr	r1, [r3, #20]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4a26      	ldr	r2, [pc, #152]	; (800802c <xTaskPriorityInherit+0xe4>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d12f      	bne.n	8007ffa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe f9d1 	bl	8006346 <uxListRemove>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	2201      	movs	r2, #1
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	43da      	mvns	r2, r3
 8007fb6:	4b1e      	ldr	r3, [pc, #120]	; (8008030 <xTaskPriorityInherit+0xe8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <xTaskPriorityInherit+0xe8>)
 8007fbe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <xTaskPriorityInherit+0xe0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	2201      	movs	r2, #1
 8007fd0:	409a      	lsls	r2, r3
 8007fd2:	4b17      	ldr	r3, [pc, #92]	; (8008030 <xTaskPriorityInherit+0xe8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	4a15      	ldr	r2, [pc, #84]	; (8008030 <xTaskPriorityInherit+0xe8>)
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4a10      	ldr	r2, [pc, #64]	; (800802c <xTaskPriorityInherit+0xe4>)
 8007fea:	441a      	add	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	3304      	adds	r3, #4
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f7fe f94a 	bl	800628c <vListInsertEnd>
 8007ff8:	e004      	b.n	8008004 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <xTaskPriorityInherit+0xe0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e008      	b.n	800801c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <xTaskPriorityInherit+0xe0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	429a      	cmp	r2, r3
 8008016:	d201      	bcs.n	800801c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008018:	2301      	movs	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800801c:	68fb      	ldr	r3, [r7, #12]
	}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000928 	.word	0x20000928
 800802c:	2000092c 	.word	0x2000092c
 8008030:	20000b0c 	.word	0x20000b0c

08008034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d06e      	beq.n	8008128 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800804a:	4b3a      	ldr	r3, [pc, #232]	; (8008134 <xTaskPriorityDisinherit+0x100>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	429a      	cmp	r2, r3
 8008052:	d00a      	beq.n	800806a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	60bb      	str	r3, [r7, #8]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808c:	1e5a      	subs	r2, r3, #1
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800809a:	429a      	cmp	r2, r3
 800809c:	d044      	beq.n	8008128 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d140      	bne.n	8008128 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe f94b 	bl	8006346 <uxListRemove>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d115      	bne.n	80080e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	491f      	ldr	r1, [pc, #124]	; (8008138 <xTaskPriorityDisinherit+0x104>)
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xTaskPriorityDisinherit+0xae>
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	2201      	movs	r2, #1
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43da      	mvns	r2, r3
 80080d8:	4b18      	ldr	r3, [pc, #96]	; (800813c <xTaskPriorityDisinherit+0x108>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4013      	ands	r3, r2
 80080de:	4a17      	ldr	r2, [pc, #92]	; (800813c <xTaskPriorityDisinherit+0x108>)
 80080e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	f1c3 0212 	rsb	r2, r3, #18
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	2201      	movs	r2, #1
 80080fc:	409a      	lsls	r2, r3
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <xTaskPriorityDisinherit+0x108>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4313      	orrs	r3, r2
 8008104:	4a0d      	ldr	r2, [pc, #52]	; (800813c <xTaskPriorityDisinherit+0x108>)
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4a08      	ldr	r2, [pc, #32]	; (8008138 <xTaskPriorityDisinherit+0x104>)
 8008116:	441a      	add	r2, r3
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	3304      	adds	r3, #4
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7fe f8b4 	bl	800628c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008128:	697b      	ldr	r3, [r7, #20]
	}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000928 	.word	0x20000928
 8008138:	2000092c 	.word	0x2000092c
 800813c:	20000b0c 	.word	0x20000b0c

08008140 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800814e:	2301      	movs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d077      	beq.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d902      	bls.n	8008186 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e002      	b.n	800818c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	429a      	cmp	r2, r3
 8008194:	d058      	beq.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	429a      	cmp	r2, r3
 800819e:	d153      	bne.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081a0:	4b2b      	ldr	r3, [pc, #172]	; (8008250 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d10a      	bne.n	80081c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	60bb      	str	r3, [r7, #8]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	db04      	blt.n	80081de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f1c3 0212 	rsb	r2, r3, #18
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	6959      	ldr	r1, [r3, #20]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4a19      	ldr	r2, [pc, #100]	; (8008254 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80081ee:	4413      	add	r3, r2
 80081f0:	4299      	cmp	r1, r3
 80081f2:	d129      	bne.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe f8a4 	bl	8006346 <uxListRemove>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	2201      	movs	r2, #1
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	43da      	mvns	r2, r3
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4013      	ands	r3, r2
 8008216:	4a10      	ldr	r2, [pc, #64]	; (8008258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008218:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	2201      	movs	r2, #1
 8008220:	409a      	lsls	r2, r3
 8008222:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4313      	orrs	r3, r2
 8008228:	4a0b      	ldr	r2, [pc, #44]	; (8008258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4a06      	ldr	r2, [pc, #24]	; (8008254 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800823a:	441a      	add	r2, r3
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fe f822 	bl	800628c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008248:	bf00      	nop
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000928 	.word	0x20000928
 8008254:	2000092c 	.word	0x2000092c
 8008258:	20000b0c 	.word	0x20000b0c

0800825c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <pvTaskIncrementMutexHeldCount+0x24>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <pvTaskIncrementMutexHeldCount+0x24>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800826e:	3201      	adds	r2, #1
 8008270:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <pvTaskIncrementMutexHeldCount+0x24>)
 8008274:	681b      	ldr	r3, [r3, #0]
	}
 8008276:	4618      	mov	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000928 	.word	0x20000928

08008284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800828e:	4b29      	ldr	r3, [pc, #164]	; (8008334 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008294:	4b28      	ldr	r3, [pc, #160]	; (8008338 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe f853 	bl	8006346 <uxListRemove>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10b      	bne.n	80082be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80082a6:	4b24      	ldr	r3, [pc, #144]	; (8008338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	2201      	movs	r2, #1
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43da      	mvns	r2, r3
 80082b4:	4b21      	ldr	r3, [pc, #132]	; (800833c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4013      	ands	r3, r2
 80082ba:	4a20      	ldr	r2, [pc, #128]	; (800833c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d10a      	bne.n	80082dc <prvAddCurrentTaskToDelayedList+0x58>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082cc:	4b1a      	ldr	r3, [pc, #104]	; (8008338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	481a      	ldr	r0, [pc, #104]	; (8008340 <prvAddCurrentTaskToDelayedList+0xbc>)
 80082d6:	f7fd ffd9 	bl	800628c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082da:	e026      	b.n	800832a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082e4:	4b14      	ldr	r3, [pc, #80]	; (8008338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d209      	bcs.n	8008308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f4:	4b13      	ldr	r3, [pc, #76]	; (8008344 <prvAddCurrentTaskToDelayedList+0xc0>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7fd ffe7 	bl	80062d4 <vListInsert>
}
 8008306:	e010      	b.n	800832a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <prvAddCurrentTaskToDelayedList+0xc4>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3304      	adds	r3, #4
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f7fd ffdd 	bl	80062d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800831a:	4b0c      	ldr	r3, [pc, #48]	; (800834c <prvAddCurrentTaskToDelayedList+0xc8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	429a      	cmp	r2, r3
 8008322:	d202      	bcs.n	800832a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008324:	4a09      	ldr	r2, [pc, #36]	; (800834c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6013      	str	r3, [r2, #0]
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000b08 	.word	0x20000b08
 8008338:	20000928 	.word	0x20000928
 800833c:	20000b0c 	.word	0x20000b0c
 8008340:	20000af0 	.word	0x20000af0
 8008344:	20000ac0 	.word	0x20000ac0
 8008348:	20000abc 	.word	0x20000abc
 800834c:	20000b24 	.word	0x20000b24

08008350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800835a:	f000 fb7b 	bl	8008a54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800835e:	4b1c      	ldr	r3, [pc, #112]	; (80083d0 <xTimerCreateTimerTask+0x80>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d021      	beq.n	80083aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	4618      	mov	r0, r3
 800837a:	f7f8 fe25 	bl	8000fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	9202      	str	r2, [sp, #8]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	2302      	movs	r3, #2
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	2300      	movs	r3, #0
 800838e:	460a      	mov	r2, r1
 8008390:	4910      	ldr	r1, [pc, #64]	; (80083d4 <xTimerCreateTimerTask+0x84>)
 8008392:	4811      	ldr	r0, [pc, #68]	; (80083d8 <xTimerCreateTimerTask+0x88>)
 8008394:	f7fe fecc 	bl	8007130 <xTaskCreateStatic>
 8008398:	4603      	mov	r3, r0
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <xTimerCreateTimerTask+0x8c>)
 800839c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <xTimerCreateTimerTask+0x8c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083a6:	2301      	movs	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083c6:	697b      	ldr	r3, [r7, #20]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000b68 	.word	0x20000b68
 80083d4:	0800bb24 	.word	0x0800bb24
 80083d8:	08008635 	.word	0x08008635
 80083dc:	20000b6c 	.word	0x20000b6c

080083e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80083ee:	202c      	movs	r0, #44	; 0x2c
 80083f0:	f000 fde2 	bl	8008fb8 <pvPortMalloc>
 80083f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00d      	beq.n	8008418 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f805 	bl	8008422 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008418:	697b      	ldr	r3, [r7, #20]
	}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b086      	sub	sp, #24
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	617b      	str	r3, [r7, #20]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01e      	beq.n	8008490 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008452:	f000 faff 	bl	8008a54 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	6a3a      	ldr	r2, [r7, #32]
 800846c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	3304      	adds	r3, #4
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd fefd 	bl	8006272 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008484:	f043 0304 	orr.w	r3, r3, #4
 8008488:	b2da      	uxtb	r2, r3
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008490:	bf00      	nop
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	623b      	str	r3, [r7, #32]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <xTimerGenericCommand+0x98>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d02a      	beq.n	8008524 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b05      	cmp	r3, #5
 80084de:	dc18      	bgt.n	8008512 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084e0:	f7ff fd14 	bl	8007f0c <xTaskGetSchedulerState>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d109      	bne.n	80084fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084ea:	4b11      	ldr	r3, [pc, #68]	; (8008530 <xTimerGenericCommand+0x98>)
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	f107 0114 	add.w	r1, r7, #20
 80084f2:	2300      	movs	r3, #0
 80084f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f6:	f7fe f8c1 	bl	800667c <xQueueGenericSend>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24
 80084fc:	e012      	b.n	8008524 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <xTimerGenericCommand+0x98>)
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	f107 0114 	add.w	r1, r7, #20
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	f7fe f8b7 	bl	800667c <xQueueGenericSend>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24
 8008510:	e008      	b.n	8008524 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <xTimerGenericCommand+0x98>)
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f107 0114 	add.w	r1, r7, #20
 800851a:	2300      	movs	r3, #0
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	f7fe f9ab 	bl	8006878 <xQueueGenericSendFromISR>
 8008522:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008526:	4618      	mov	r0, r3
 8008528:	3728      	adds	r7, #40	; 0x28
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000b68 	.word	0x20000b68

08008534 <vTimerSetReloadMode>:
	return pxTimer->xTimerPeriodInTicks;
}
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
Timer_t * pxTimer =  xTimer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <vTimerSetReloadMode+0x2a>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	60bb      	str	r3, [r7, #8]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <vTimerSetReloadMode+0x28>
	taskENTER_CRITICAL();
 800855e:	f000 fc09 	bl	8008d74 <vPortEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <vTimerSetReloadMode+0x48>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800856e:	f043 0304 	orr.w	r3, r3, #4
 8008572:	b2da      	uxtb	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800857a:	e008      	b.n	800858e <vTimerSetReloadMode+0x5a>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008582:	f023 0304 	bic.w	r3, r3, #4
 8008586:	b2da      	uxtb	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	taskEXIT_CRITICAL();
 800858e:	f000 fc21 	bl	8008dd4 <vPortExitCritical>
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a6:	4b22      	ldr	r3, [pc, #136]	; (8008630 <prvProcessExpiredTimer+0x94>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fd fec6 	bl	8006346 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d022      	beq.n	800860e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	699a      	ldr	r2, [r3, #24]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	18d1      	adds	r1, r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	6978      	ldr	r0, [r7, #20]
 80085d6:	f000 f8d1 	bl	800877c <prvInsertTimerInActiveList>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01f      	beq.n	8008620 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085e0:	2300      	movs	r3, #0
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2300      	movs	r3, #0
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	2100      	movs	r1, #0
 80085ea:	6978      	ldr	r0, [r7, #20]
 80085ec:	f7ff ff54 	bl	8008498 <xTimerGenericCommand>
 80085f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d113      	bne.n	8008620 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008614:	f023 0301 	bic.w	r3, r3, #1
 8008618:	b2da      	uxtb	r2, r3
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	6978      	ldr	r0, [r7, #20]
 8008626:	4798      	blx	r3
}
 8008628:	bf00      	nop
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20000b60 	.word	0x20000b60

08008634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800863c:	f107 0308 	add.w	r3, r7, #8
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f857 	bl	80086f4 <prvGetNextExpireTime>
 8008646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f803 	bl	8008658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008652:	f000 f8d5 	bl	8008800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008656:	e7f1      	b.n	800863c <prvTimerTask+0x8>

08008658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008662:	f7ff f821 	bl	80076a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f866 	bl	800873c <prvSampleTimeNow>
 8008670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d130      	bne.n	80086da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <prvProcessTimerOrBlockTask+0x3c>
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	429a      	cmp	r2, r3
 8008684:	d806      	bhi.n	8008694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008686:	f7ff f81d 	bl	80076c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff ff85 	bl	800859c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008692:	e024      	b.n	80086de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800869a:	4b13      	ldr	r3, [pc, #76]	; (80086e8 <prvProcessTimerOrBlockTask+0x90>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <prvProcessTimerOrBlockTask+0x50>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <prvProcessTimerOrBlockTask+0x52>
 80086a8:	2300      	movs	r3, #0
 80086aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <prvProcessTimerOrBlockTask+0x94>)
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	f7fe fd05 	bl	80070c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086be:	f7ff f801 	bl	80076c4 <xTaskResumeAll>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086c8:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <prvProcessTimerOrBlockTask+0x98>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
}
 80086d8:	e001      	b.n	80086de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086da:	f7fe fff3 	bl	80076c4 <xTaskResumeAll>
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000b64 	.word	0x20000b64
 80086ec:	20000b68 	.word	0x20000b68
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086fc:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <prvGetNextExpireTime+0x44>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <prvGetNextExpireTime+0x16>
 8008706:	2201      	movs	r2, #1
 8008708:	e000      	b.n	800870c <prvGetNextExpireTime+0x18>
 800870a:	2200      	movs	r2, #0
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d105      	bne.n	8008724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008718:	4b07      	ldr	r3, [pc, #28]	; (8008738 <prvGetNextExpireTime+0x44>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e001      	b.n	8008728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000b60 	.word	0x20000b60

0800873c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008744:	f7ff f85a 	bl	80077fc <xTaskGetTickCount>
 8008748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <prvSampleTimeNow+0x3c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	429a      	cmp	r2, r3
 8008752:	d205      	bcs.n	8008760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008754:	f000 f91a 	bl	800898c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	e002      	b.n	8008766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008766:	4a04      	ldr	r2, [pc, #16]	; (8008778 <prvSampleTimeNow+0x3c>)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800876c:	68fb      	ldr	r3, [r7, #12]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000b70 	.word	0x20000b70

0800877c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d812      	bhi.n	80087c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d302      	bcc.n	80087b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	e01b      	b.n	80087ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <prvInsertTimerInActiveList+0x7c>)
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	4619      	mov	r1, r3
 80087c0:	4610      	mov	r0, r2
 80087c2:	f7fd fd87 	bl	80062d4 <vListInsert>
 80087c6:	e012      	b.n	80087ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d206      	bcs.n	80087de <prvInsertTimerInActiveList+0x62>
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d302      	bcc.n	80087de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e007      	b.n	80087ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087de:	4b07      	ldr	r3, [pc, #28]	; (80087fc <prvInsertTimerInActiveList+0x80>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fd fd73 	bl	80062d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087ee:	697b      	ldr	r3, [r7, #20]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000b64 	.word	0x20000b64
 80087fc:	20000b60 	.word	0x20000b60

08008800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008806:	e0ae      	b.n	8008966 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f2c0 80aa 	blt.w	8008964 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	3304      	adds	r3, #4
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd fd90 	bl	8006346 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008826:	1d3b      	adds	r3, r7, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff ff87 	bl	800873c <prvSampleTimeNow>
 800882e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b09      	cmp	r3, #9
 8008834:	f200 8097 	bhi.w	8008966 <prvProcessReceivedCommands+0x166>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <prvProcessReceivedCommands+0x40>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008869 	.word	0x08008869
 8008844:	08008869 	.word	0x08008869
 8008848:	08008869 	.word	0x08008869
 800884c:	080088dd 	.word	0x080088dd
 8008850:	080088f1 	.word	0x080088f1
 8008854:	0800893b 	.word	0x0800893b
 8008858:	08008869 	.word	0x08008869
 800885c:	08008869 	.word	0x08008869
 8008860:	080088dd 	.word	0x080088dd
 8008864:	080088f1 	.word	0x080088f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	b2da      	uxtb	r2, r3
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	18d1      	adds	r1, r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a3a      	ldr	r2, [r7, #32]
 8008886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008888:	f7ff ff78 	bl	800877c <prvInsertTimerInActiveList>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d069      	beq.n	8008966 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008898:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d05e      	beq.n	8008966 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	441a      	add	r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ba:	f7ff fded 	bl	8008498 <xTimerGenericCommand>
 80088be:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d14f      	bne.n	8008966 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	61bb      	str	r3, [r7, #24]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088e2:	f023 0301 	bic.w	r3, r3, #1
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088ee:	e03a      	b.n	8008966 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	617b      	str	r3, [r7, #20]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	18d1      	adds	r1, r2, r3
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008934:	f7ff ff22 	bl	800877c <prvInsertTimerInActiveList>
					break;
 8008938:	e015      	b.n	8008966 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800894a:	f000 fc01 	bl	8009150 <vPortFree>
 800894e:	e00a      	b.n	8008966 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008956:	f023 0301 	bic.w	r3, r3, #1
 800895a:	b2da      	uxtb	r2, r3
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008962:	e000      	b.n	8008966 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <prvProcessReceivedCommands+0x188>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f107 0108 	add.w	r1, r7, #8
 800896e:	2200      	movs	r2, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe f81d 	bl	80069b0 <xQueueReceive>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	f47f af45 	bne.w	8008808 <prvProcessReceivedCommands+0x8>
	}
}
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	3728      	adds	r7, #40	; 0x28
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000b68 	.word	0x20000b68

0800898c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008992:	e048      	b.n	8008a26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008994:	4b2d      	ldr	r3, [pc, #180]	; (8008a4c <prvSwitchTimerLists+0xc0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899e:	4b2b      	ldr	r3, [pc, #172]	; (8008a4c <prvSwitchTimerLists+0xc0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd fcca 	bl	8006346 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02e      	beq.n	8008a26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4413      	add	r3, r2
 80089d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d90e      	bls.n	80089f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <prvSwitchTimerLists+0xc0>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fd fc6f 	bl	80062d4 <vListInsert>
 80089f6:	e016      	b.n	8008a26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089f8:	2300      	movs	r3, #0
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	2300      	movs	r3, #0
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	2100      	movs	r1, #0
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7ff fd48 	bl	8008498 <xTimerGenericCommand>
 8008a08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	603b      	str	r3, [r7, #0]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <prvSwitchTimerLists+0xc0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1b1      	bne.n	8008994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <prvSwitchTimerLists+0xc0>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a36:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <prvSwitchTimerLists+0xc4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a04      	ldr	r2, [pc, #16]	; (8008a4c <prvSwitchTimerLists+0xc0>)
 8008a3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a3e:	4a04      	ldr	r2, [pc, #16]	; (8008a50 <prvSwitchTimerLists+0xc4>)
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	6013      	str	r3, [r2, #0]
}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000b60 	.word	0x20000b60
 8008a50:	20000b64 	.word	0x20000b64

08008a54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a5a:	f000 f98b 	bl	8008d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d120      	bne.n	8008aa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a66:	4814      	ldr	r0, [pc, #80]	; (8008ab8 <prvCheckForValidListAndQueue+0x64>)
 8008a68:	f7fd fbe3 	bl	8006232 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a6c:	4813      	ldr	r0, [pc, #76]	; (8008abc <prvCheckForValidListAndQueue+0x68>)
 8008a6e:	f7fd fbe0 	bl	8006232 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <prvCheckForValidListAndQueue+0x6c>)
 8008a74:	4a10      	ldr	r2, [pc, #64]	; (8008ab8 <prvCheckForValidListAndQueue+0x64>)
 8008a76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a78:	4b12      	ldr	r3, [pc, #72]	; (8008ac4 <prvCheckForValidListAndQueue+0x70>)
 8008a7a:	4a10      	ldr	r2, [pc, #64]	; (8008abc <prvCheckForValidListAndQueue+0x68>)
 8008a7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <prvCheckForValidListAndQueue+0x74>)
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <prvCheckForValidListAndQueue+0x78>)
 8008a86:	210c      	movs	r1, #12
 8008a88:	2064      	movs	r0, #100	; 0x64
 8008a8a:	f7fd fcef 	bl	800646c <xQueueGenericCreateStatic>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a94:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a9c:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	490b      	ldr	r1, [pc, #44]	; (8008ad0 <prvCheckForValidListAndQueue+0x7c>)
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fabc 	bl	8007020 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008aa8:	f000 f994 	bl	8008dd4 <vPortExitCritical>
}
 8008aac:	bf00      	nop
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000b68 	.word	0x20000b68
 8008ab8:	20000b38 	.word	0x20000b38
 8008abc:	20000b4c 	.word	0x20000b4c
 8008ac0:	20000b60 	.word	0x20000b60
 8008ac4:	20000b64 	.word	0x20000b64
 8008ac8:	20001024 	.word	0x20001024
 8008acc:	20000b74 	.word	0x20000b74
 8008ad0:	0800bb2c 	.word	0x0800bb2c

08008ad4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <pvTimerGetTimerID+0x28>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60fb      	str	r3, [r7, #12]
}
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008afc:	f000 f93a 	bl	8008d74 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008b06:	f000 f965 	bl	8008dd4 <vPortExitCritical>

	return pvReturn;
 8008b0a:	693b      	ldr	r3, [r7, #16]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3b04      	subs	r3, #4
 8008b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f023 0201 	bic.w	r2, r3, #1
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b44:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <pxPortInitialiseStack+0x64>)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b14      	subs	r3, #20
 8008b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f06f 0202 	mvn.w	r2, #2
 8008b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3b20      	subs	r3, #32
 8008b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	08008b7d 	.word	0x08008b7d

08008b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b86:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <prvTaskExitError+0x54>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d00a      	beq.n	8008ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <prvTaskExitError+0x28>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bba:	bf00      	nop
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0fc      	beq.n	8008bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	2000000c 	.word	0x2000000c
	...

08008be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <pxCurrentTCBConst2>)
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	f380 8809 	msr	PSP, r0
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	4770      	bx	lr
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst2>:
 8008c00:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c08:	4808      	ldr	r0, [pc, #32]	; (8008c2c <prvPortStartFirstTask+0x24>)
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	6800      	ldr	r0, [r0, #0]
 8008c0e:	f380 8808 	msr	MSP, r0
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f380 8814 	msr	CONTROL, r0
 8008c1a:	b662      	cpsie	i
 8008c1c:	b661      	cpsie	f
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	df00      	svc	0
 8008c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c2a:	bf00      	nop
 8008c2c:	e000ed08 	.word	0xe000ed08

08008c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c36:	4b46      	ldr	r3, [pc, #280]	; (8008d50 <xPortStartScheduler+0x120>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a46      	ldr	r2, [pc, #280]	; (8008d54 <xPortStartScheduler+0x124>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10a      	bne.n	8008c56 <xPortStartScheduler+0x26>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	613b      	str	r3, [r7, #16]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c56:	4b3e      	ldr	r3, [pc, #248]	; (8008d50 <xPortStartScheduler+0x120>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a3f      	ldr	r2, [pc, #252]	; (8008d58 <xPortStartScheduler+0x128>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d10a      	bne.n	8008c76 <xPortStartScheduler+0x46>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	60fb      	str	r3, [r7, #12]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c76:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <xPortStartScheduler+0x12c>)
 8008c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	4b31      	ldr	r3, [pc, #196]	; (8008d60 <xPortStartScheduler+0x130>)
 8008c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c9e:	4b31      	ldr	r3, [pc, #196]	; (8008d64 <xPortStartScheduler+0x134>)
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ca4:	e009      	b.n	8008cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ca6:	4b2f      	ldr	r3, [pc, #188]	; (8008d64 <xPortStartScheduler+0x134>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	4a2d      	ldr	r2, [pc, #180]	; (8008d64 <xPortStartScheduler+0x134>)
 8008cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc2:	2b80      	cmp	r3, #128	; 0x80
 8008cc4:	d0ef      	beq.n	8008ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cc6:	4b27      	ldr	r3, [pc, #156]	; (8008d64 <xPortStartScheduler+0x134>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1c3 0307 	rsb	r3, r3, #7
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d00a      	beq.n	8008ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	60bb      	str	r3, [r7, #8]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ce8:	4b1e      	ldr	r3, [pc, #120]	; (8008d64 <xPortStartScheduler+0x134>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	4a1d      	ldr	r2, [pc, #116]	; (8008d64 <xPortStartScheduler+0x134>)
 8008cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cf2:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <xPortStartScheduler+0x134>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cfa:	4a1a      	ldr	r2, [pc, #104]	; (8008d64 <xPortStartScheduler+0x134>)
 8008cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d06:	4b18      	ldr	r3, [pc, #96]	; (8008d68 <xPortStartScheduler+0x138>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <xPortStartScheduler+0x138>)
 8008d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <xPortStartScheduler+0x138>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a14      	ldr	r2, [pc, #80]	; (8008d68 <xPortStartScheduler+0x138>)
 8008d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d1e:	f000 f8dd 	bl	8008edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d22:	4b12      	ldr	r3, [pc, #72]	; (8008d6c <xPortStartScheduler+0x13c>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d28:	f000 f8fc 	bl	8008f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d2c:	4b10      	ldr	r3, [pc, #64]	; (8008d70 <xPortStartScheduler+0x140>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a0f      	ldr	r2, [pc, #60]	; (8008d70 <xPortStartScheduler+0x140>)
 8008d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d38:	f7ff ff66 	bl	8008c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d3c:	f7fe fe38 	bl	80079b0 <vTaskSwitchContext>
	prvTaskExitError();
 8008d40:	f7ff ff1c 	bl	8008b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	e000ed00 	.word	0xe000ed00
 8008d54:	410fc271 	.word	0x410fc271
 8008d58:	410fc270 	.word	0x410fc270
 8008d5c:	e000e400 	.word	0xe000e400
 8008d60:	20001074 	.word	0x20001074
 8008d64:	20001078 	.word	0x20001078
 8008d68:	e000ed20 	.word	0xe000ed20
 8008d6c:	2000000c 	.word	0x2000000c
 8008d70:	e000ef34 	.word	0xe000ef34

08008d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	607b      	str	r3, [r7, #4]
}
 8008d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <vPortEnterCritical+0x58>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3301      	adds	r3, #1
 8008d94:	4a0d      	ldr	r2, [pc, #52]	; (8008dcc <vPortEnterCritical+0x58>)
 8008d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d98:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <vPortEnterCritical+0x58>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d10f      	bne.n	8008dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <vPortEnterCritical+0x5c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	603b      	str	r3, [r7, #0]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <vPortEnterCritical+0x4a>
	}
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	2000000c 	.word	0x2000000c
 8008dd0:	e000ed04 	.word	0xe000ed04

08008dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dda:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <vPortExitCritical+0x50>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10a      	bne.n	8008df8 <vPortExitCritical+0x24>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	607b      	str	r3, [r7, #4]
}
 8008df4:	bf00      	nop
 8008df6:	e7fe      	b.n	8008df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008df8:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <vPortExitCritical+0x50>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	4a09      	ldr	r2, [pc, #36]	; (8008e24 <vPortExitCritical+0x50>)
 8008e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <vPortExitCritical+0x50>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d105      	bne.n	8008e16 <vPortExitCritical+0x42>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f383 8811 	msr	BASEPRI, r3
}
 8008e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2000000c 	.word	0x2000000c
	...

08008e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e30:	f3ef 8009 	mrs	r0, PSP
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <pxCurrentTCBConst>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	f01e 0f10 	tst.w	lr, #16
 8008e40:	bf08      	it	eq
 8008e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4a:	6010      	str	r0, [r2, #0]
 8008e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e54:	f380 8811 	msr	BASEPRI, r0
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f7fe fda6 	bl	80079b0 <vTaskSwitchContext>
 8008e64:	f04f 0000 	mov.w	r0, #0
 8008e68:	f380 8811 	msr	BASEPRI, r0
 8008e6c:	bc09      	pop	{r0, r3}
 8008e6e:	6819      	ldr	r1, [r3, #0]
 8008e70:	6808      	ldr	r0, [r1, #0]
 8008e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e76:	f01e 0f10 	tst.w	lr, #16
 8008e7a:	bf08      	it	eq
 8008e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e80:	f380 8809 	msr	PSP, r0
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	f3af 8000 	nop.w

08008e90 <pxCurrentTCBConst>:
 8008e90:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop

08008e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	607b      	str	r3, [r7, #4]
}
 8008eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008eb2:	f7fe fcc5 	bl	8007840 <xTaskIncrementTick>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <SysTick_Handler+0x40>)
 8008ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	f383 8811 	msr	BASEPRI, r3
}
 8008ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <vPortSetupTimerInterrupt+0x34>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <vPortSetupTimerInterrupt+0x38>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eec:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <vPortSetupTimerInterrupt+0x3c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <vPortSetupTimerInterrupt+0x40>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	099b      	lsrs	r3, r3, #6
 8008ef8:	4a09      	ldr	r2, [pc, #36]	; (8008f20 <vPortSetupTimerInterrupt+0x44>)
 8008efa:	3b01      	subs	r3, #1
 8008efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008efe:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <vPortSetupTimerInterrupt+0x34>)
 8008f00:	2207      	movs	r2, #7
 8008f02:	601a      	str	r2, [r3, #0]
}
 8008f04:	bf00      	nop
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	e000e010 	.word	0xe000e010
 8008f14:	e000e018 	.word	0xe000e018
 8008f18:	20000000 	.word	0x20000000
 8008f1c:	10624dd3 	.word	0x10624dd3
 8008f20:	e000e014 	.word	0xe000e014

08008f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f34 <vPortEnableVFP+0x10>
 8008f28:	6801      	ldr	r1, [r0, #0]
 8008f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f2e:	6001      	str	r1, [r0, #0]
 8008f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f32:	bf00      	nop
 8008f34:	e000ed88 	.word	0xe000ed88

08008f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f3e:	f3ef 8305 	mrs	r3, IPSR
 8008f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	d914      	bls.n	8008f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f4a:	4a17      	ldr	r2, [pc, #92]	; (8008fa8 <vPortValidateInterruptPriority+0x70>)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f54:	4b15      	ldr	r3, [pc, #84]	; (8008fac <vPortValidateInterruptPriority+0x74>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	7afa      	ldrb	r2, [r7, #11]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d20a      	bcs.n	8008f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	607b      	str	r3, [r7, #4]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f74:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <vPortValidateInterruptPriority+0x78>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f7c:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <vPortValidateInterruptPriority+0x7c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d90a      	bls.n	8008f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	603b      	str	r3, [r7, #0]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <vPortValidateInterruptPriority+0x60>
	}
 8008f9a:	bf00      	nop
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	e000e3f0 	.word	0xe000e3f0
 8008fac:	20001074 	.word	0x20001074
 8008fb0:	e000ed0c 	.word	0xe000ed0c
 8008fb4:	20001078 	.word	0x20001078

08008fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fc4:	f7fe fb70 	bl	80076a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fc8:	4b5b      	ldr	r3, [pc, #364]	; (8009138 <pvPortMalloc+0x180>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fd0:	f000 f920 	bl	8009214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fd4:	4b59      	ldr	r3, [pc, #356]	; (800913c <pvPortMalloc+0x184>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f040 8093 	bne.w	8009108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01d      	beq.n	8009024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fe8:	2208      	movs	r2, #8
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d014      	beq.n	8009024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f023 0307 	bic.w	r3, r3, #7
 8009000:	3308      	adds	r3, #8
 8009002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <pvPortMalloc+0x6c>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	617b      	str	r3, [r7, #20]
}
 8009020:	bf00      	nop
 8009022:	e7fe      	b.n	8009022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d06e      	beq.n	8009108 <pvPortMalloc+0x150>
 800902a:	4b45      	ldr	r3, [pc, #276]	; (8009140 <pvPortMalloc+0x188>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d869      	bhi.n	8009108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009034:	4b43      	ldr	r3, [pc, #268]	; (8009144 <pvPortMalloc+0x18c>)
 8009036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009038:	4b42      	ldr	r3, [pc, #264]	; (8009144 <pvPortMalloc+0x18c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800903e:	e004      	b.n	800904a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d903      	bls.n	800905c <pvPortMalloc+0xa4>
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1f1      	bne.n	8009040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800905c:	4b36      	ldr	r3, [pc, #216]	; (8009138 <pvPortMalloc+0x180>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009062:	429a      	cmp	r2, r3
 8009064:	d050      	beq.n	8009108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2208      	movs	r2, #8
 800906c:	4413      	add	r3, r2
 800906e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	2308      	movs	r3, #8
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	429a      	cmp	r2, r3
 8009086:	d91f      	bls.n	80090c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <pvPortMalloc+0xf8>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	613b      	str	r3, [r7, #16]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	1ad2      	subs	r2, r2, r3
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090c2:	69b8      	ldr	r0, [r7, #24]
 80090c4:	f000 f908 	bl	80092d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090c8:	4b1d      	ldr	r3, [pc, #116]	; (8009140 <pvPortMalloc+0x188>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	4a1b      	ldr	r2, [pc, #108]	; (8009140 <pvPortMalloc+0x188>)
 80090d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090d6:	4b1a      	ldr	r3, [pc, #104]	; (8009140 <pvPortMalloc+0x188>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <pvPortMalloc+0x190>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d203      	bcs.n	80090ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090e2:	4b17      	ldr	r3, [pc, #92]	; (8009140 <pvPortMalloc+0x188>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a18      	ldr	r2, [pc, #96]	; (8009148 <pvPortMalloc+0x190>)
 80090e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <pvPortMalloc+0x184>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <pvPortMalloc+0x194>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	4a11      	ldr	r2, [pc, #68]	; (800914c <pvPortMalloc+0x194>)
 8009106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009108:	f7fe fadc 	bl	80076c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <pvPortMalloc+0x174>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	60fb      	str	r3, [r7, #12]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <pvPortMalloc+0x172>
	return pvReturn;
 800912c:	69fb      	ldr	r3, [r7, #28]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3728      	adds	r7, #40	; 0x28
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20009084 	.word	0x20009084
 800913c:	20009098 	.word	0x20009098
 8009140:	20009088 	.word	0x20009088
 8009144:	2000907c 	.word	0x2000907c
 8009148:	2000908c 	.word	0x2000908c
 800914c:	20009090 	.word	0x20009090

08009150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d04d      	beq.n	80091fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009162:	2308      	movs	r3, #8
 8009164:	425b      	negs	r3, r3
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4413      	add	r3, r2
 800916a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	4b24      	ldr	r3, [pc, #144]	; (8009208 <vPortFree+0xb8>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4013      	ands	r3, r2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <vPortFree+0x44>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	60fb      	str	r3, [r7, #12]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <vPortFree+0x62>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	60bb      	str	r3, [r7, #8]
}
 80091ae:	bf00      	nop
 80091b0:	e7fe      	b.n	80091b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	4b14      	ldr	r3, [pc, #80]	; (8009208 <vPortFree+0xb8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01e      	beq.n	80091fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d11a      	bne.n	80091fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <vPortFree+0xb8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	43db      	mvns	r3, r3
 80091d2:	401a      	ands	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091d8:	f7fe fa66 	bl	80076a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4b0a      	ldr	r3, [pc, #40]	; (800920c <vPortFree+0xbc>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4413      	add	r3, r2
 80091e6:	4a09      	ldr	r2, [pc, #36]	; (800920c <vPortFree+0xbc>)
 80091e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f000 f874 	bl	80092d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <vPortFree+0xc0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a06      	ldr	r2, [pc, #24]	; (8009210 <vPortFree+0xc0>)
 80091f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091fa:	f7fe fa63 	bl	80076c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091fe:	bf00      	nop
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20009098 	.word	0x20009098
 800920c:	20009088 	.word	0x20009088
 8009210:	20009094 	.word	0x20009094

08009214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800921a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800921e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009220:	4b27      	ldr	r3, [pc, #156]	; (80092c0 <prvHeapInit+0xac>)
 8009222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00c      	beq.n	8009248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3307      	adds	r3, #7
 8009232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0307 	bic.w	r3, r3, #7
 800923a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <prvHeapInit+0xac>)
 8009244:	4413      	add	r3, r2
 8009246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800924c:	4a1d      	ldr	r2, [pc, #116]	; (80092c4 <prvHeapInit+0xb0>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009252:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <prvHeapInit+0xb0>)
 8009254:	2200      	movs	r2, #0
 8009256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	4413      	add	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009260:	2208      	movs	r2, #8
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1a9b      	subs	r3, r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 0307 	bic.w	r3, r3, #7
 800926e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4a15      	ldr	r2, [pc, #84]	; (80092c8 <prvHeapInit+0xb4>)
 8009274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <prvHeapInit+0xb4>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800927e:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <prvHeapInit+0xb4>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	1ad2      	subs	r2, r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <prvHeapInit+0xb4>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	4a0a      	ldr	r2, [pc, #40]	; (80092cc <prvHeapInit+0xb8>)
 80092a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4a09      	ldr	r2, [pc, #36]	; (80092d0 <prvHeapInit+0xbc>)
 80092aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092ac:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <prvHeapInit+0xc0>)
 80092ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092b2:	601a      	str	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	2000107c 	.word	0x2000107c
 80092c4:	2000907c 	.word	0x2000907c
 80092c8:	20009084 	.word	0x20009084
 80092cc:	2000908c 	.word	0x2000908c
 80092d0:	20009088 	.word	0x20009088
 80092d4:	20009098 	.word	0x20009098

080092d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092e0:	4b28      	ldr	r3, [pc, #160]	; (8009384 <prvInsertBlockIntoFreeList+0xac>)
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	e002      	b.n	80092ec <prvInsertBlockIntoFreeList+0x14>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d8f7      	bhi.n	80092e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	4413      	add	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d108      	bne.n	800931a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	441a      	add	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	441a      	add	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d118      	bne.n	8009360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <prvInsertBlockIntoFreeList+0xb0>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d00d      	beq.n	8009356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	441a      	add	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e008      	b.n	8009368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <prvInsertBlockIntoFreeList+0xb0>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e003      	b.n	8009368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	d002      	beq.n	8009376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	2000907c 	.word	0x2000907c
 8009388:	20009084 	.word	0x20009084

0800938c <_ZN14ComHandlerTaskC1E6TaskIdPKc>:
#include "main.h"
#include "paradef.h"

ComHandlerTask* ComHandlerTask::mspThis = 0;

ComHandlerTask::ComHandlerTask(TaskId id, const char* name): Task(id, name)
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	460b      	mov	r3, r1
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	72fb      	strb	r3, [r7, #11]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	7af9      	ldrb	r1, [r7, #11]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fee3 	bl	800a16c <_ZN4TaskC1E6TaskIdPKc>
 80093a6:	4a20      	ldr	r2, [pc, #128]	; (8009428 <_ZN14ComHandlerTaskC1E6TaskIdPKc+0x9c>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	601a      	str	r2, [r3, #0]
{
  mpIsrEventMsg = Message::reserveIsr(MSG_ID_TEMPLATETASK_EVENT, ComHandlerTaskId, 0);
 80093ac:	2200      	movs	r2, #0
 80093ae:	2102      	movs	r1, #2
 80093b0:	2003      	movs	r0, #3
 80093b2:	f000 fc95 	bl	8009ce0 <_ZN7Message10reserveIsrEhhm>
 80093b6:	4602      	mov	r2, r0
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	629a      	str	r2, [r3, #40]	; 0x28
  mpTimerLed = new Timer(ComHandlerTaskId, TimerComLed);
 80093bc:	200c      	movs	r0, #12
 80093be:	f001 f93b 	bl	800a638 <_Znwj>
 80093c2:	4603      	mov	r3, r0
 80093c4:	461c      	mov	r4, r3
 80093c6:	2201      	movs	r2, #1
 80093c8:	2102      	movs	r1, #2
 80093ca:	4620      	mov	r0, r4
 80093cc:	f001 f82c 	bl	800a428 <_ZN5TimerC1E6TaskId7TimerId>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	625c      	str	r4, [r3, #36]	; 0x24
  mpTimerLed->setInterval(500);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 f8a1 	bl	800a524 <_ZN5Timer11setIntervalEi>
  mpTimerLed->setSingleShot(false);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f8b9 	bl	800a560 <_ZN5Timer13setSingleShotEb>
  mpTimerLed->start();
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 f8c8 	bl	800a588 <_ZN5Timer5startEv>

  mpStepper = new Stepper(TIM_CHANNEL_1);
 80093f8:	2048      	movs	r0, #72	; 0x48
 80093fa:	f001 f91d 	bl	800a638 <_Znwj>
 80093fe:	4603      	mov	r3, r0
 8009400:	461c      	mov	r4, r3
 8009402:	2100      	movs	r1, #0
 8009404:	4620      	mov	r0, r4
 8009406:	f000 f893 	bl	8009530 <_ZN7StepperC1Em>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	62dc      	str	r4, [r3, #44]	; 0x2c
  mpStepper->StartRotation(2*_2PI);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800942c <_ZN14ComHandlerTaskC1E6TaskIdPKc+0xa0>
 8009416:	4618      	mov	r0, r3
 8009418:	f000 f948 	bl	80096ac <_ZN7Stepper13StartRotationEf>

}
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}
 8009426:	bf00      	nop
 8009428:	0800bbb8 	.word	0x0800bbb8
 800942c:	41490fd0 	.word	0x41490fd0

08009430 <_ZN14ComHandlerTask8instanceEv>:

ComHandlerTask* ComHandlerTask::instance()
{
 8009430:	b598      	push	{r3, r4, r7, lr}
 8009432:	af00      	add	r7, sp, #0
  if(ComHandlerTask::mspThis == 0)
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <_ZN14ComHandlerTask8instanceEv+0x2c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10b      	bne.n	8009454 <_ZN14ComHandlerTask8instanceEv+0x24>
  {
    mspThis = new ComHandlerTask(ComHandlerTaskId, "ComHandlerTask\0");
 800943c:	2030      	movs	r0, #48	; 0x30
 800943e:	f001 f8fb 	bl	800a638 <_Znwj>
 8009442:	4603      	mov	r3, r0
 8009444:	461c      	mov	r4, r3
 8009446:	4a06      	ldr	r2, [pc, #24]	; (8009460 <_ZN14ComHandlerTask8instanceEv+0x30>)
 8009448:	2102      	movs	r1, #2
 800944a:	4620      	mov	r0, r4
 800944c:	f7ff ff9e 	bl	800938c <_ZN14ComHandlerTaskC1E6TaskIdPKc>
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <_ZN14ComHandlerTask8instanceEv+0x2c>)
 8009452:	601c      	str	r4, [r3, #0]
  }
  return ComHandlerTask::mspThis;
 8009454:	4b01      	ldr	r3, [pc, #4]	; (800945c <_ZN14ComHandlerTask8instanceEv+0x2c>)
 8009456:	681b      	ldr	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	bd98      	pop	{r3, r4, r7, pc}
 800945c:	2000909c 	.word	0x2000909c
 8009460:	0800bb34 	.word	0x0800bb34

08009464 <_ZN14ComHandlerTask13handleMessageEP7Message>:
  mspThis->mpIsrEventMsg->setValue(123);
  mspThis->mpIsrEventMsg->sendMsg();
}

void ComHandlerTask::handleMessage(Message* message)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  switch(message->id())
 800946e:	6838      	ldr	r0, [r7, #0]
 8009470:	f000 fce1 	bl	8009e36 <_ZN7Message2idEv>
 8009474:	4603      	mov	r3, r0
 8009476:	2b01      	cmp	r3, #1
 8009478:	d012      	beq.n	80094a0 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3c>
 800947a:	2b02      	cmp	r3, #2
 800947c:	d000      	beq.n	8009480 <_ZN14ComHandlerTask13handleMessageEP7Message+0x1c>
          break;
      }
      break;
    }
    default:
      break;
 800947e:	e010      	b.n	80094a2 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3e>
      switch(message->data().longword)
 8009480:	6838      	ldr	r0, [r7, #0]
 8009482:	f000 fcf0 	bl	8009e66 <_ZN7Message4dataEv>
 8009486:	4603      	mov	r3, r0
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d105      	bne.n	800949c <_ZN14ComHandlerTask13handleMessageEP7Message+0x38>
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8009490:	2120      	movs	r1, #32
 8009492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009496:	f7f8 fe35 	bl	8002104 <HAL_GPIO_TogglePin>
          break;
 800949a:	e000      	b.n	800949e <_ZN14ComHandlerTask13handleMessageEP7Message+0x3a>
          break;
 800949c:	bf00      	nop
      break;
 800949e:	e000      	b.n	80094a2 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3e>
      break;
 80094a0:	bf00      	nop
  }

}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <_ZN14ComHandlerTaskD1Ev>:
#include "Timer.h"

#include "Stepper.h"


class ComHandlerTask: public Task
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	4a05      	ldr	r2, [pc, #20]	; (80094cc <_ZN14ComHandlerTaskD1Ev+0x20>)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fea1 	bl	800a204 <_ZN4TaskD1Ev>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	0800bbb8 	.word	0x0800bbb8

080094d0 <_ZN14ComHandlerTaskD0Ev>:
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ffe7 	bl	80094ac <_ZN14ComHandlerTaskD1Ev>
 80094de:	2130      	movs	r1, #48	; 0x30
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 f8c0 	bl	800a666 <_ZdlPvj>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80094fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80094fe:	eef0 7ae7 	vabs.f32	s15, s15
 8009502:	eeb0 0a67 	vmov.f32	s0, s15
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	ed87 0a01 	vstr	s0, [r7, #4]
 800951a:	ed97 0a01 	vldr	s0, [r7, #4]
 800951e:	f001 f8bf 	bl	800a6a0 <sqrtf>
 8009522:	eef0 7a40 	vmov.f32	s15, s0
 8009526:	eeb0 0a67 	vmov.f32	s0, s15
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <_ZN7StepperC1Em>:
#include "paradef.h"
#include "cmath"

uint32_t Stepper::sUsedTimerChannels = 0;

Stepper::Stepper(uint32_t timerChannel) : Iinterruptable()
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b090      	sub	sp, #64	; 0x40
 8009534:	af06      	add	r7, sp, #24
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4618      	mov	r0, r3
 800953e:	f7f6 fef1 	bl	8000324 <_ZN14IinterruptableC1Ev>
 8009542:	4a1d      	ldr	r2, [pc, #116]	; (80095b8 <_ZN7StepperC1Em+0x88>)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
{
  mpTimerHandle = STEPPER_STEP_TIMER_HANDLE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <_ZN7StepperC1Em+0x8c>)
 800954c:	605a      	str	r2, [r3, #4]
  mTimerChannel = timerChannel;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	609a      	str	r2, [r3, #8]

  mStepperState = OFF;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	749a      	strb	r2, [r3, #18]
  mRotationState = STANDSTILL;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	74da      	strb	r2, [r3, #19]
  mStepOutputState = OUTPUT_LOW;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  mCurrentAngularVeloctiy = 0;          //in rad/s
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	61da      	str	r2, [r3, #28]
  mCurrentRotationAngle = 0;			//in rad/s
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	621a      	str	r2, [r3, #32]
  mTargetRotationAngle = 0;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f04f 0200 	mov.w	r2, #0
 800957e:	625a      	str	r2, [r3, #36]	; 0x24
  mStepsRotated = 0;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	631a      	str	r2, [r3, #48]	; 0x30

  SetConfiguration(GetDefaultConfiguration());  //Apply the default configuration
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f82b 	bl	80095e8 <_ZN7Stepper23GetDefaultConfigurationEv>
 8009592:	466d      	mov	r5, sp
 8009594:	f107 0414 	add.w	r4, r7, #20
 8009598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800959a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	f107 0308 	add.w	r3, r7, #8
 80095a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f84c 	bl	8009644 <_ZN7Stepper16SetConfigurationE15StepperConfig_t>
}
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4618      	mov	r0, r3
 80095b0:	3728      	adds	r7, #40	; 0x28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bdb0      	pop	{r4, r5, r7, pc}
 80095b6:	bf00      	nop
 80095b8:	0800bbcc 	.word	0x0800bbcc
 80095bc:	20000874 	.word	0x20000874

080095c0 <_ZN15StepperConfig_tC1Ev>:
  uint16_t GpioPinStepOutput;

  //Stepper driver parameters
  float DriverStepFactor = 0.5;
  float MotorStepFactor = 1.0/200;
}StepperConfig_t;
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80095ce:	619a      	str	r2, [r3, #24]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a04      	ldr	r2, [pc, #16]	; (80095e4 <_ZN15StepperConfig_tC1Ev+0x24>)
 80095d4:	61da      	str	r2, [r3, #28]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	3ba3d70a 	.word	0x3ba3d70a

080095e8 <_ZN7Stepper23GetDefaultConfigurationEv>:

StepperConfig_t Stepper::GetDefaultConfiguration()
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  StepperConfig_t lDefaultConfig;
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff ffe4 	bl	80095c0 <_ZN15StepperConfig_tC1Ev>

  //Physical parameters
  lDefaultConfig.StartAngularVelocity = STEPPER_START_ANGULAR_VELOCITY;   //rad/s
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a0e      	ldr	r2, [pc, #56]	; (8009634 <_ZN7Stepper23GetDefaultConfigurationEv+0x4c>)
 80095fc:	601a      	str	r2, [r3, #0]
  lDefaultConfig.TargetAngularVelocity = STEPPER_TARGET_ANGULAR_VELOCITY; //rad/s
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a0d      	ldr	r2, [pc, #52]	; (8009638 <_ZN7Stepper23GetDefaultConfigurationEv+0x50>)
 8009602:	605a      	str	r2, [r3, #4]
  lDefaultConfig.AngularAcceleration = STEPPER_ANGULAR_ACCELERATION;      //rad/s^2
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a0d      	ldr	r2, [pc, #52]	; (800963c <_ZN7Stepper23GetDefaultConfigurationEv+0x54>)
 8009608:	609a      	str	r2, [r3, #8]
  lDefaultConfig.RolloutAngle = STEPPER_ROLLOUT_ANGLE;                    //rad
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a09      	ldr	r2, [pc, #36]	; (8009634 <_ZN7Stepper23GetDefaultConfigurationEv+0x4c>)
 800960e:	60da      	str	r2, [r3, #12]

  //GPIO parameters
  lDefaultConfig.pGpioStepOutput = NULL;    //Step output GPIO peripheral pointer
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	611a      	str	r2, [r3, #16]
  lDefaultConfig.GpioPinStepOutput = 0x00;  //Step output GPIO pin
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	829a      	strh	r2, [r3, #20]

  //Stepper driver parameters
  lDefaultConfig.DriverStepFactor = STEPPER_DRIVER_STEP_FACTOR; //Half-stepping
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8009622:	619a      	str	r2, [r3, #24]
  lDefaultConfig.MotorStepFactor = STEPPER_MOTOR_STEP_FACTOR;   //Motor Steps/rotation
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a06      	ldr	r2, [pc, #24]	; (8009640 <_ZN7Stepper23GetDefaultConfigurationEv+0x58>)
 8009628:	61da      	str	r2, [r3, #28]

  return lDefaultConfig;
 800962a:	bf00      	nop
}
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	3ea0d973 	.word	0x3ea0d973
 8009638:	40c90fd0 	.word	0x40c90fd0
 800963c:	41490fd0 	.word	0x41490fd0
 8009640:	3ba3d70a 	.word	0x3ba3d70a

08009644 <_ZN7Stepper16SetConfigurationE15StepperConfig_t>:

  return lConfig;
}

void Stepper::SetConfiguration(StepperConfig_t config)
{
 8009644:	b084      	sub	sp, #16
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	f107 0014 	add.w	r0, r7, #20
 8009652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  //Physical parameters
  mStartAngularVelocity = config.StartAngularVelocity;
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	619a      	str	r2, [r3, #24]
  mTargetAngularVelocity = config.TargetAngularVelocity;
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	615a      	str	r2, [r3, #20]
  mAngularAcceleration = config.AngularAcceleration;
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	629a      	str	r2, [r3, #40]	; 0x28
  mRolloutAngle = config.RolloutAngle;
 8009668:	6a3a      	ldr	r2, [r7, #32]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	62da      	str	r2, [r3, #44]	; 0x2c

  //GPIO parameters
  mpGpioStepOutput = config.pGpioStepOutput;
 800966e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60da      	str	r2, [r3, #12]
  mGpioPinStepOutput = config.GpioPinStepOutput;
 8009674:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	821a      	strh	r2, [r3, #16]

  //Stepper driver parameters
  mDriverStepFactor = config.DriverStepFactor;
 800967a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	; 0x38
  mMotorStepFactor = config.MotorStepFactor;
 8009680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	63da      	str	r2, [r3, #60]	; 0x3c

  mDriveTrainFactor = mDriverStepFactor * mMotorStepFactor;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	b004      	add	sp, #16
 80096a8:	4770      	bx	lr
	...

080096ac <_ZN7Stepper13StartRotationEf>:

void Stepper::StartRotation(float angle)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	ed87 0a00 	vstr	s0, [r7]
  if(mStepperState != ROTATING)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7c9b      	ldrb	r3, [r3, #18]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	f000 8084 	beq.w	80097ca <_ZN7Stepper13StartRotationEf+0x11e>
  {
    mStepperState = ROTATING;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2202      	movs	r2, #2
 80096c6:	749a      	strb	r2, [r3, #18]
    mRotationState = ACCELERATING;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	74da      	strb	r2, [r3, #19]
    mTargetRotationAngle = angle;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	625a      	str	r2, [r3, #36]	; 0x24

    //Zero parameters at start of rotation
    mStepsRotated = 0;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	631a      	str	r2, [r3, #48]	; 0x30
    mCurrentAngularVeloctiy = 0;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	61da      	str	r2, [r3, #28]
    mCurrentRotationAngle = 0;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	621a      	str	r2, [r3, #32]
    mCurrentRotationAngle = 0;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	621a      	str	r2, [r3, #32]

    volatile uint32_t* ptr = &velocitySWV;  //TODO:Remove DEBUG
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3344      	adds	r3, #68	; 0x44
 80096f6:	60fb      	str	r3, [r7, #12]

    uint32_t timerCount = __HAL_TIM_GET_COUNTER(mpTimerHandle);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, timerCount + CalculateTicksUntilNextStep()/2);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <_ZN7Stepper13StartRotationEf+0x76>
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f8b0 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 8009710:	4603      	mov	r3, r0
 8009712:	0859      	lsrs	r1, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	440a      	add	r2, r1
 800971e:	635a      	str	r2, [r3, #52]	; 0x34
 8009720:	e04a      	b.n	80097b8 <_ZN7Stepper13StartRotationEf+0x10c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	2b04      	cmp	r3, #4
 8009728:	d10b      	bne.n	8009742 <_ZN7Stepper13StartRotationEf+0x96>
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8a0 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 8009730:	4603      	mov	r3, r0
 8009732:	0859      	lsrs	r1, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	440a      	add	r2, r1
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
 8009740:	e03a      	b.n	80097b8 <_ZN7Stepper13StartRotationEf+0x10c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b08      	cmp	r3, #8
 8009748:	d10b      	bne.n	8009762 <_ZN7Stepper13StartRotationEf+0xb6>
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f890 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 8009750:	4603      	mov	r3, r0
 8009752:	0859      	lsrs	r1, r3, #1
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	440a      	add	r2, r1
 800975e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009760:	e02a      	b.n	80097b8 <_ZN7Stepper13StartRotationEf+0x10c>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b0c      	cmp	r3, #12
 8009768:	d10b      	bne.n	8009782 <_ZN7Stepper13StartRotationEf+0xd6>
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f880 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 8009770:	4603      	mov	r3, r0
 8009772:	0859      	lsrs	r1, r3, #1
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	440a      	add	r2, r1
 800977e:	641a      	str	r2, [r3, #64]	; 0x40
 8009780:	e01a      	b.n	80097b8 <_ZN7Stepper13StartRotationEf+0x10c>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	2b10      	cmp	r3, #16
 8009788:	d10b      	bne.n	80097a2 <_ZN7Stepper13StartRotationEf+0xf6>
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f870 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 8009790:	4603      	mov	r3, r0
 8009792:	0859      	lsrs	r1, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	440a      	add	r2, r1
 800979e:	649a      	str	r2, [r3, #72]	; 0x48
 80097a0:	e00a      	b.n	80097b8 <_ZN7Stepper13StartRotationEf+0x10c>
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f864 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 80097a8:	4603      	mov	r3, r0
 80097aa:	0859      	lsrs	r1, r3, #1
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	440a      	add	r2, r1
 80097b6:	64da      	str	r2, [r3, #76]	; 0x4c
    HAL_TIM_OC_Start_IT(mpTimerHandle, mTimerChannel);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7f9 ff4e 	bl	8003664 <HAL_TIM_OC_Start_IT>
  }
  else
  {
    assert_param(false);
  }
}
 80097c8:	e003      	b.n	80097d2 <_ZN7Stepper13StartRotationEf+0x126>
    assert_param(false);
 80097ca:	217e      	movs	r1, #126	; 0x7e
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <_ZN7Stepper13StartRotationEf+0x130>)
 80097ce:	f7f7 fd42 	bl	8001256 <assert_failed>
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	0800bb44 	.word	0x0800bb44

080097e0 <_ZN7Stepper12StopRotationEv>:

void Stepper::StopRotation()
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  mStepperState = HOLDING;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	749a      	strb	r2, [r3, #18]
  mRotationState = STANDSTILL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	74da      	strb	r2, [r3, #19]

  HAL_TIM_OC_Stop_IT(mpTimerHandle, mTimerChannel);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7fa f938 	bl	8003a74 <HAL_TIM_OC_Stop_IT>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <_ZN7Stepper25IsTimeToStartDeceleratingEv>:

bool Stepper::IsTimeToStartDecelerating()
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  float lStopAngle = (mCurrentAngularVeloctiy * mCurrentAngularVeloctiy) / (2 * mAngularAcceleration);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	ed93 7a07 	vldr	s14, [r3, #28]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	edd3 7a07 	vldr	s15, [r3, #28]
 8009820:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800982a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800982e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009832:	edc7 7a03 	vstr	s15, [r7, #12]
  return ( (lStopAngle + mRolloutAngle) >= (mTargetRotationAngle - mCurrentRotationAngle) );
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800983c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	edd3 7a08 	vldr	s15, [r3, #32]
 8009850:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985c:	bfac      	ite	ge
 800985e:	2301      	movge	r3, #1
 8009860:	2300      	movlt	r3, #0
 8009862:	b2db      	uxtb	r3, r3
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>:

uint32_t Stepper::CalculateTicksUntilNextStep()
{
 8009870:	b580      	push	{r7, lr}
 8009872:	ed2d 8b02 	vpush	{d8}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t lRet = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]
  mCurrentRotationAngle = mStepsRotated * mDriverStepFactor * mMotorStepFactor * _2PI;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	ee07 3a90 	vmov	s15, r3
 8009888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800989c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009a98 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x228>
 80098a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	edc3 7a08 	vstr	s15, [r3, #32]

  switch(mRotationState)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	7cdb      	ldrb	r3, [r3, #19]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	f200 80a8 	bhi.w	8009a0a <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x19a>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x50>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	0800993d 	.word	0x0800993d
 80098c8:	08009951 	.word	0x08009951
 80098cc:	080099dd 	.word	0x080099dd
    {
      case ACCELERATING:
        if(mCurrentAngularVeloctiy < mTargetAngularVelocity)   //We still need to accelerate
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	ed93 7a07 	vldr	s14, [r3, #28]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80098dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e4:	d51d      	bpl.n	8009922 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0xb2>
        {
          mCurrentAngularVeloctiy = mAngularAcceleration *
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
                                    std::sqrt( (2 * mCurrentRotationAngle) / mAngularAcceleration) +
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80098f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80098fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009900:	eeb0 0a66 	vmov.f32	s0, s13
 8009904:	f7ff fe04 	bl	8009510 <_ZSt4sqrtf>
 8009908:	eef0 7a40 	vmov.f32	s15, s0
          mCurrentAngularVeloctiy = mAngularAcceleration *
 800990c:	ee28 7a27 	vmul.f32	s14, s16, s15
                                    mStartAngularVelocity;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	edd3 7a06 	vldr	s15, [r3, #24]
                                    std::sqrt( (2 * mCurrentRotationAngle) / mAngularAcceleration) +
 8009916:	ee77 7a27 	vadd.f32	s15, s14, s15
          mCurrentAngularVeloctiy = mAngularAcceleration *
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	edc3 7a07 	vstr	s15, [r3, #28]
 8009920:	e002      	b.n	8009928 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0xb8>
        }
        else    //Target velocity reached
        {
          mRotationState = CONSTVELOCITY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2202      	movs	r2, #2
 8009926:	74da      	strb	r2, [r3, #19]
        }
        if(IsTimeToStartDecelerating()) mRotationState = DECCELERATING;
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff ff6f 	bl	800980c <_ZN7Stepper25IsTimeToStartDeceleratingEv>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d06c      	beq.n	8009a0e <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x19e>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2203      	movs	r2, #3
 8009938:	74da      	strb	r2, [r3, #19]
        break;
 800993a:	e068      	b.n	8009a0e <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x19e>

      case CONSTVELOCITY:
        if(IsTimeToStartDecelerating()) mRotationState = DECCELERATING;
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff ff65 	bl	800980c <_ZN7Stepper25IsTimeToStartDeceleratingEv>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d064      	beq.n	8009a12 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a2>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2203      	movs	r2, #3
 800994c:	74da      	strb	r2, [r3, #19]
        break;
 800994e:	e060      	b.n	8009a12 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a2>


      case DECCELERATING:
      {
        float lRemainingAngle = (mTargetRotationAngle - mCurrentRotationAngle - mRolloutAngle);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	edd3 7a08 	vldr	s15, [r3, #32]
 800995c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800996a:	edc7 7a04 	vstr	s15, [r7, #16]
        if(mCurrentAngularVeloctiy > mStartAngularVelocity)   //We still need to decelerate
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	ed93 7a07 	vldr	s14, [r3, #28]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	edd3 7a06 	vldr	s15, [r3, #24]
 800997a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009982:	dd27      	ble.n	80099d4 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x164>
        {
          mCurrentAngularVeloctiy = mAngularAcceleration *
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
                                    std::sqrt( (2 * lRemainingAngle) / mAngularAcceleration);
 800998a:	edd7 7a04 	vldr	s15, [r7, #16]
 800998e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009998:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800999c:	eeb0 0a66 	vmov.f32	s0, s13
 80099a0:	f7ff fdb6 	bl	8009510 <_ZSt4sqrtf>
 80099a4:	eef0 7a40 	vmov.f32	s15, s0
          mCurrentAngularVeloctiy = mAngularAcceleration *
 80099a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	edc3 7a07 	vstr	s15, [r3, #28]

          if(mCurrentAngularVeloctiy < mStartAngularVelocity) //Limit minimum velocity to prevent large period times
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80099be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c6:	d400      	bmi.n	80099ca <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x15a>
        else
        {
          mRotationState = ROLLOUT;
        }
      }
        break;
 80099c8:	e024      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>
            mCurrentAngularVeloctiy = mStartAngularVelocity;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	61da      	str	r2, [r3, #28]
        break;
 80099d2:	e01f      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>
          mRotationState = ROLLOUT;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2204      	movs	r2, #4
 80099d8:	74da      	strb	r2, [r3, #19]
        break;
 80099da:	e01b      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>

      case ROLLOUT:
        if(mCurrentRotationAngle >= mTargetRotationAngle)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	ed93 7a08 	vldr	s14, [r3, #32]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80099e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f0:	da00      	bge.n	80099f4 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x184>
        {
          mRotationState = STANDSTILL;
          mCurrentAngularVeloctiy = 0;
          StopRotation();
        }
        break;
 80099f2:	e00f      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>
          mRotationState = STANDSTILL;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	74da      	strb	r2, [r3, #19]
          mCurrentAngularVeloctiy = 0;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	61da      	str	r2, [r3, #28]
          StopRotation();
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff feec 	bl	80097e0 <_ZN7Stepper12StopRotationEv>
        break;
 8009a08:	e004      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>

      default:
        break;
 8009a0a:	bf00      	nop
 8009a0c:	e002      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>
        break;
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x1a4>
        break;
 8009a12:	bf00      	nop
    }

  velocitySWV = (uint32_t)(mCurrentAngularVeloctiy*10000);  //TODO:Remove DEBUG
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a1a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009a9c <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x22c>
 8009a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a26:	ee17 2a90 	vmov	r2, s15
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	645a      	str	r2, [r3, #68]	; 0x44

  if(mCurrentAngularVeloctiy > 0)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	dd24      	ble.n	8009a88 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x218>
  {
    float lAbsRotationFrequency = std::abs(mCurrentAngularVeloctiy/_2PI);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a44:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009a98 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x228>
 8009a48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8009a50:	f7ff fd4e 	bl	80094f0 <_ZSt3absf>
 8009a54:	ed87 0a03 	vstr	s0, [r7, #12]
    lRet = (uint32_t)(STEPPER_TIMER_CNT_FREQUENCY / (lAbsRotationFrequency / mDriveTrainFactor ));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009a5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8009a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a66:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8009aa0 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x230>
 8009a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a72:	ee17 3a90 	vmov	r3, s15
 8009a76:	617b      	str	r3, [r7, #20]
    if(lRet > 0x0001FFFF)assert_param(false);   //TODO:Remove DEBUG, prevent ticks greater than timer cnt register size
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a7e:	d303      	bcc.n	8009a88 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x218>
 8009a80:	21d1      	movs	r1, #209	; 0xd1
 8009a82:	4808      	ldr	r0, [pc, #32]	; (8009aa4 <_ZN7Stepper27CalculateTicksUntilNextStepEv+0x234>)
 8009a84:	f7f7 fbe7 	bl	8001256 <assert_failed>
  }

  return lRet;
 8009a88:	697b      	ldr	r3, [r7, #20]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	ecbd 8b02 	vpop	{d8}
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	40c90fd0 	.word	0x40c90fd0
 8009a9c:	461c4000 	.word	0x461c4000
 8009aa0:	48435000 	.word	0x48435000
 8009aa4:	0800bb44 	.word	0x0800bb44

08009aa8 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef>:

void Stepper::OutputCompareIntCb(TIM_HandleTypeDef* htim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t lPreviousCompareValue = __HAL_TIM_GET_COMPARE(mpTimerHandle, mTimerChannel);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d104      	bne.n	8009ac4 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x1c>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac2:	e027      	b.n	8009b14 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x6c>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b04      	cmp	r3, #4
 8009aca:	d104      	bne.n	8009ad6 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x2e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	e01e      	b.n	8009b14 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x6c>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d104      	bne.n	8009ae8 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x40>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae6:	e015      	b.n	8009b14 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x6c>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b0c      	cmp	r3, #12
 8009aee:	d104      	bne.n	8009afa <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x52>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	e00c      	b.n	8009b14 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x6c>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b10      	cmp	r3, #16
 8009b00:	d104      	bne.n	8009b0c <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x64>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b0a:	e003      	b.n	8009b14 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x6c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b14:	60fb      	str	r3, [r7, #12]

  if(mStepOutputState == OUTPUT_LOW){
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d109      	bne.n	8009b34 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x8c>
    mStepOutputState = OUTPUT_HIGH;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    mStepsRotated += 1;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	631a      	str	r2, [r3, #48]	; 0x30
 8009b32:	e003      	b.n	8009b3c <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x94>
  }
  else mStepOutputState = OUTPUT_LOW;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  HAL_GPIO_WritePin(mpGpioStepOutput, mGpioPinStepOutput, (GPIO_PinState)mStepOutputState);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68d8      	ldr	r0, [r3, #12]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8a19      	ldrh	r1, [r3, #16]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f7f8 faaa 	bl	80020a4 <HAL_GPIO_WritePin>

  uint32_t ticks = CalculateTicksUntilNextStep()/2;
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fe8d 	bl	8009870 <_ZN7Stepper27CalculateTicksUntilNextStepEv>
 8009b56:	4603      	mov	r3, r0
 8009b58:	085b      	lsrs	r3, r3, #1
 8009b5a:	60bb      	str	r3, [r7, #8]

  __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, lPreviousCompareValue + ticks);   // Divide by to to get half period step output low and half period step output high
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d107      	bne.n	8009b74 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0xcc>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	440a      	add	r2, r1
 8009b70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009b72:	e036      	b.n	8009be2 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x13a>
  __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, lPreviousCompareValue + ticks);   // Divide by to to get half period step output low and half period step output high
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d107      	bne.n	8009b8c <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0xe4>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68f9      	ldr	r1, [r7, #12]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	440a      	add	r2, r1
 8009b88:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009b8a:	e02a      	b.n	8009be2 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x13a>
  __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, lPreviousCompareValue + ticks);   // Divide by to to get half period step output low and half period step output high
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b08      	cmp	r3, #8
 8009b92:	d107      	bne.n	8009ba4 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0xfc>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68f9      	ldr	r1, [r7, #12]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009ba2:	e01e      	b.n	8009be2 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x13a>
  __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, lPreviousCompareValue + ticks);   // Divide by to to get half period step output low and half period step output high
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	2b0c      	cmp	r3, #12
 8009baa:	d107      	bne.n	8009bbc <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x114>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	440a      	add	r2, r1
 8009bb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009bba:	e012      	b.n	8009be2 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x13a>
  __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, lPreviousCompareValue + ticks);   // Divide by to to get half period step output low and half period step output high
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d107      	bne.n	8009bd4 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x12c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	440a      	add	r2, r1
 8009bd0:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009bd2:	e006      	b.n	8009be2 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x13a>
  __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, lPreviousCompareValue + ticks);   // Divide by to to get half period step output low and half period step output high
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	440a      	add	r2, r1
 8009be0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009be2:	bf00      	nop
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <_ZN7StepperD1Ev>:


class Stepper : public Iinterruptable
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	4a05      	ldr	r2, [pc, #20]	; (8009c0c <_ZN7StepperD1Ev+0x20>)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7f6 fba9 	bl	8000354 <_ZN14IinterruptableD1Ev>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4618      	mov	r0, r3
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	0800bbcc 	.word	0x0800bbcc

08009c10 <_ZN7StepperD0Ev>:
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff ffe7 	bl	8009bec <_ZN7StepperD1Ev>
 8009c1e:	2148      	movs	r1, #72	; 0x48
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fd20 	bl	800a666 <_ZdlPvj>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <app_init>:
#include "ComHandlerTask.h"

int app_init_done = 0;

void app_init()
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /////////////////    create tasks

  ComHandlerTask::instance();
 8009c34:	f7ff fbfc 	bl	8009430 <_ZN14ComHandlerTask8instanceEv>
//  lpMsg = Message::reserve(MSG_ID_START, LopTaskId);
//  lpMsg->sendMsg();
//
//  SET_BLUE_STATE_LED(LED_OFF);
//  app_init_done = 1;
}
 8009c38:	bf00      	nop
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <_ZN7MessageC1Ev>:
#include <stdio.h>


MsgPool* Message::mspPool = 0;

Message::Message()
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
{

}
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <_ZN7Message4initEP7MsgPool>:

void Message::init(MsgPool* pPool)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  Message::mspPool = pPool;
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <_ZN7Message4initEP7MsgPool+0x1c>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6013      	str	r3, [r2, #0]
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	200090a0 	.word	0x200090a0

08009c74 <_ZN7Message7reserveEhh9DataUnion>:
  configASSERT(pMsg && lpSharedMem);
  return pMsg;
}

Message* Message::reserve(uint8_t id, uint8_t destination, DataUnion data)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	603a      	str	r2, [r7, #0]
 8009c7e:	71fb      	strb	r3, [r7, #7]
 8009c80:	460b      	mov	r3, r1
 8009c82:	71bb      	strb	r3, [r7, #6]
  Message* pMsg = Message::mspPool->resMsg();
 8009c84:	f000 f99e 	bl	8009fc4 <_ZN7MsgPool6resMsgEv>
 8009c88:	60f8      	str	r0, [r7, #12]
  pMsg->mMsg.DataMsg.Id = id;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	79fa      	ldrb	r2, [r7, #7]
 8009c8e:	701a      	strb	r2, [r3, #0]
  pMsg->mMsg.DataMsg.Type = MsgData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	705a      	strb	r2, [r3, #1]
  pMsg->mMsg.DataMsg.DestAddr = destination;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	79ba      	ldrb	r2, [r7, #6]
 8009c9a:	709a      	strb	r2, [r3, #2]
  pMsg->mMsg.DataMsg.SrcAddr = TaskList::getTaskId(xTaskGetCurrentTaskHandle());
 8009c9c:	f7fe f926 	bl	8007eec <xTaskGetCurrentTaskHandle>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fb6e 	bl	800a384 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	70da      	strb	r2, [r3, #3]
  pMsg->mMsg.DataMsg.Data = data;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	463a      	mov	r2, r7
 8009cb6:	6810      	ldr	r0, [r2, #0]
 8009cb8:	6018      	str	r0, [r3, #0]
  configASSERT(pMsg);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <_ZN7Message7reserveEhh9DataUnion+0x62>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60bb      	str	r3, [r7, #8]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <_ZN7Message7reserveEhh9DataUnion+0x60>
  return pMsg;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <_ZN7Message10reserveIsrEhhm>:

Message* Message::reserveIsr(uint8_t id, uint8_t destination, uint32_t isr_value)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	603a      	str	r2, [r7, #0]
 8009cea:	71fb      	strb	r3, [r7, #7]
 8009cec:	460b      	mov	r3, r1
 8009cee:	71bb      	strb	r3, [r7, #6]
  Message* pMsg = Message::mspPool->resMsg();
 8009cf0:	f000 f968 	bl	8009fc4 <_ZN7MsgPool6resMsgEv>
 8009cf4:	60f8      	str	r0, [r7, #12]
  pMsg->mMsg.IsrMsg.Id = id;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	79fa      	ldrb	r2, [r7, #7]
 8009cfa:	701a      	strb	r2, [r3, #0]
  pMsg->mMsg.IsrMsg.Type = MsgIsr;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2203      	movs	r2, #3
 8009d00:	705a      	strb	r2, [r3, #1]
  pMsg->mMsg.IsrMsg.DestAddr = destination;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	79ba      	ldrb	r2, [r7, #6]
 8009d06:	709a      	strb	r2, [r3, #2]
  pMsg->mMsg.IsrMsg.Value = isr_value;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	f8c3 2003 	str.w	r2, [r3, #3]
  configASSERT(pMsg);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10a      	bne.n	8009d2c <_ZN7Message10reserveIsrEhhm+0x4c>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	60bb      	str	r3, [r7, #8]
}
 8009d28:	bf00      	nop
 8009d2a:	e7fe      	b.n	8009d2a <_ZN7Message10reserveIsrEhhm+0x4a>
  return pMsg;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <_ZN7Message7sendMsgEv>:

void Message::sendMsg()
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b088      	sub	sp, #32
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  QueueHandle_t lDestQueue = TaskList::getQueue((TaskId)mMsg.NoneMsg.DestAddr);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	789b      	ldrb	r3, [r3, #2]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fb46 	bl	800a3d4 <_ZN8TaskList8getQueueE6TaskId>
 8009d48:	61b8      	str	r0, [r7, #24]
  Message* lpMessage = this;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	613b      	str	r3, [r7, #16]
  if(lDestQueue)
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d02d      	beq.n	8009db0 <_ZN7Message7sendMsgEv+0x7a>
  {
    BaseType_t lRes;
    if(lpMessage->type() == MsgIsr)
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f879 	bl	8009e4e <_ZN7Message4typeEv>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	bf0c      	ite	eq
 8009d62:	2301      	moveq	r3, #1
 8009d64:	2300      	movne	r3, #0
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <_ZN7Message7sendMsgEv+0x4e>
    {
      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
      lRes = xQueueSendFromISR(lDestQueue, &lpMessage, &xHigherPriorityTaskWoken);
 8009d70:	f107 020c 	add.w	r2, r7, #12
 8009d74:	f107 0110 	add.w	r1, r7, #16
 8009d78:	2300      	movs	r3, #0
 8009d7a:	69b8      	ldr	r0, [r7, #24]
 8009d7c:	f7fc fd7c 	bl	8006878 <xQueueGenericSendFromISR>
 8009d80:	61f8      	str	r0, [r7, #28]
 8009d82:	e007      	b.n	8009d94 <_ZN7Message7sendMsgEv+0x5e>
    }
    else
    {
      lRes = xQueueSend(lDestQueue, &lpMessage, (TickType_t) 0);
 8009d84:	f107 0110 	add.w	r1, r7, #16
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	69b8      	ldr	r0, [r7, #24]
 8009d8e:	f7fc fc75 	bl	800667c <xQueueGenericSend>
 8009d92:	61f8      	str	r0, [r7, #28]
    }
    configASSERT(lRes == 1);
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d00d      	beq.n	8009db6 <_ZN7Message7sendMsgEv+0x80>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	617b      	str	r3, [r7, #20]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <_ZN7Message7sendMsgEv+0x78>
  }
  else
  {
    freeMsg();
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f804 	bl	8009dbe <_ZN7Message7freeMsgEv>
  }
}
 8009db6:	bf00      	nop
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <_ZN7Message7freeMsgEv>:


void Message::freeMsg()
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  switch(type())
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f841 	bl	8009e4e <_ZN7Message4typeEv>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d01d      	beq.n	8009e0e <_ZN7Message7freeMsgEv+0x50>
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d125      	bne.n	8009e22 <_ZN7Message7freeMsgEv+0x64>
  {
    case MsgMem:
    {
      if(mMsg.MemMsg.Memory)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d023      	beq.n	8009e26 <_ZN7Message7freeMsgEv+0x68>
      {
        vPortFree(mMsg.MemMsg.Memory->memory);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff f9b3 	bl	8009150 <vPortFree>
        delete mMsg.MemMsg.Memory;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <_ZN7Message7freeMsgEv+0x3c>
 8009df2:	2108      	movs	r1, #8
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fc36 	bl	800a666 <_ZdlPvj>
        mMsg.MemMsg.Memory = 0;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	711a      	strb	r2, [r3, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	715a      	strb	r2, [r3, #5]
 8009e04:	2200      	movs	r2, #0
 8009e06:	719a      	strb	r2, [r3, #6]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	71da      	strb	r2, [r3, #7]
      }
      break;
 8009e0c:	e00b      	b.n	8009e26 <_ZN7Message7freeMsgEv+0x68>
    }
    case MsgData:
    {
      mMsg.DataMsg.Data.longword = 0;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	711a      	strb	r2, [r3, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	715a      	strb	r2, [r3, #5]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	719a      	strb	r2, [r3, #6]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	71da      	strb	r2, [r3, #7]
      break;
 8009e20:	e002      	b.n	8009e28 <_ZN7Message7freeMsgEv+0x6a>
    }
    default:
      break;
 8009e22:	bf00      	nop
 8009e24:	e000      	b.n	8009e28 <_ZN7Message7freeMsgEv+0x6a>
      break;
 8009e26:	bf00      	nop
  }

  Message::mspPool->freeMsg(this);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f905 	bl	800a038 <_ZN7MsgPool7freeMsgEP7Message>
}
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <_ZN7Message2idEv>:

uint8_t Message::id()
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Id;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	781b      	ldrb	r3, [r3, #0]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <_ZN7Message4typeEv>:
{
  return mMsg.NoneMsg.DestAddr;
}

uint8_t Message::type()
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Type;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	785b      	ldrb	r3, [r3, #1]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <_ZN7Message4dataEv>:

DataUnion Message::data()
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  DataUnion lRetval;
  lRetval.longword = (uint32_t)(-1);
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	60bb      	str	r3, [r7, #8]
  if(mMsg.DataMsg.Type == MsgData)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d105      	bne.n	8009e88 <_ZN7Message4dataEv+0x22>
  {
    lRetval = mMsg.DataMsg.Data;
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	3204      	adds	r2, #4
 8009e84:	6810      	ldr	r0, [r2, #0]
 8009e86:	6018      	str	r0, [r3, #0]
  }
  return lRetval;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	7b3a      	ldrb	r2, [r7, #12]
 8009e90:	f362 0307 	bfi	r3, r2, #0, #8
 8009e94:	7b7a      	ldrb	r2, [r7, #13]
 8009e96:	f362 230f 	bfi	r3, r2, #8, #8
 8009e9a:	7bba      	ldrb	r2, [r7, #14]
 8009e9c:	f362 4317 	bfi	r3, r2, #16, #8
 8009ea0:	7bfa      	ldrb	r2, [r7, #15]
 8009ea2:	f362 631f 	bfi	r3, r2, #24, #8
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <MsgPool_init>:
#include "os_init.h"
#include "MsgPool.h"


void MsgPool_init()
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	af00      	add	r7, sp, #0
  Message::init(MsgPool::instance());
 8009eb6:	f000 f86f 	bl	8009f98 <_ZN7MsgPool8instanceEv>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff fec9 	bl	8009c54 <_ZN7Message4initEP7MsgPool>
}
 8009ec2:	bf00      	nop
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <_ZN7MsgPoolC1Ev>:

MsgPool* MsgPool::mspThis = 0;

MsgPool::MsgPool()
 8009ec8:	b590      	push	{r4, r7, lr}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	4a14      	ldr	r2, [pc, #80]	; (8009f24 <_ZN7MsgPoolC1Ev+0x5c>)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	33cc      	adds	r3, #204	; 0xcc
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 f8e8 	bl	800a0b0 <_ZN5MutexC1Ev>
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b18      	cmp	r3, #24
 8009ee8:	dc16      	bgt.n	8009f18 <_ZN7MsgPoolC1Ev+0x50>
  {
    mPool[i].mMsg = new Message;
 8009eea:	2008      	movs	r0, #8
 8009eec:	f000 fba4 	bl	800a638 <_Znwj>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461c      	mov	r4, r3
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f7ff fea1 	bl	8009c3c <_ZN7MessageC1Ev>
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	4413      	add	r3, r2
 8009f02:	605c      	str	r4, [r3, #4]
    mPool[i].mUsed = false;
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	00db      	lsls	r3, r3, #3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	721a      	strb	r2, [r3, #8]
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	e7e5      	b.n	8009ee4 <_ZN7MsgPoolC1Ev+0x1c>
  }

}
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}
 8009f22:	bf00      	nop
 8009f24:	0800bbe0 	.word	0x0800bbe0

08009f28 <_ZN7MsgPoolD1Ev>:

MsgPool::~MsgPool()
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	4a10      	ldr	r2, [pc, #64]	; (8009f74 <_ZN7MsgPoolD1Ev+0x4c>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b18      	cmp	r3, #24
 8009f3e:	dc0e      	bgt.n	8009f5e <_ZN7MsgPoolD1Ev+0x36>
  {
    delete mPool[i].mMsg;
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	4413      	add	r3, r2
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <_ZN7MsgPoolD1Ev+0x2e>
 8009f4e:	2108      	movs	r1, #8
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fb88 	bl	800a666 <_ZdlPvj>
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	e7ed      	b.n	8009f3a <_ZN7MsgPoolD1Ev+0x12>
MsgPool::~MsgPool()
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	33cc      	adds	r3, #204	; 0xcc
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f8b8 	bl	800a0d8 <_ZN5MutexD1Ev>
  }
}
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	0800bbe0 	.word	0x0800bbe0

08009f78 <_ZN7MsgPoolD0Ev>:
MsgPool::~MsgPool()
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
}
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff ffd1 	bl	8009f28 <_ZN7MsgPoolD1Ev>
 8009f86:	21d8      	movs	r1, #216	; 0xd8
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fb6c 	bl	800a666 <_ZdlPvj>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <_ZN7MsgPool8instanceEv>:

MsgPool* MsgPool::instance()
{
 8009f98:	b598      	push	{r3, r4, r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
  if(mspThis == 0)
 8009f9c:	4b08      	ldr	r3, [pc, #32]	; (8009fc0 <_ZN7MsgPool8instanceEv+0x28>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d109      	bne.n	8009fb8 <_ZN7MsgPool8instanceEv+0x20>
  {
    mspThis = new MsgPool;
 8009fa4:	20d8      	movs	r0, #216	; 0xd8
 8009fa6:	f000 fb47 	bl	800a638 <_Znwj>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461c      	mov	r4, r3
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7ff ff8a 	bl	8009ec8 <_ZN7MsgPoolC1Ev>
 8009fb4:	4b02      	ldr	r3, [pc, #8]	; (8009fc0 <_ZN7MsgPool8instanceEv+0x28>)
 8009fb6:	601c      	str	r4, [r3, #0]
  }
  return mspThis;
 8009fb8:	4b01      	ldr	r3, [pc, #4]	; (8009fc0 <_ZN7MsgPool8instanceEv+0x28>)
 8009fba:	681b      	ldr	r3, [r3, #0]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	bd98      	pop	{r3, r4, r7, pc}
 8009fc0:	200090a4 	.word	0x200090a4

08009fc4 <_ZN7MsgPool6resMsgEv>:

Message* MsgPool::resMsg()
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
  Message* lpRetVal = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	607b      	str	r3, [r7, #4]
  mspThis->mMutex.lock();
 8009fce:	4b19      	ldr	r3, [pc, #100]	; (800a034 <_ZN7MsgPool6resMsgEv+0x70>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	33cc      	adds	r3, #204	; 0xcc
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f8a2 	bl	800a120 <_ZN5Mutex4lockEh>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b18      	cmp	r3, #24
 8009fe4:	dc1a      	bgt.n	800a01c <_ZN7MsgPool6resMsgEv+0x58>
  {
    if(mspThis->mPool[i].mUsed == false)
 8009fe6:	4b13      	ldr	r3, [pc, #76]	; (800a034 <_ZN7MsgPool6resMsgEv+0x70>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	4413      	add	r3, r2
 8009ff0:	7a1b      	ldrb	r3, [r3, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10e      	bne.n	800a014 <_ZN7MsgPool6resMsgEv+0x50>
    {
      mspThis->mPool[i].mUsed = true;
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <_ZN7MsgPool6resMsgEv+0x70>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	2201      	movs	r2, #1
 800a002:	721a      	strb	r2, [r3, #8]
      lpRetVal = mspThis->mPool[i].mMsg;
 800a004:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <_ZN7MsgPool6resMsgEv+0x70>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	4413      	add	r3, r2
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	607b      	str	r3, [r7, #4]
      break;
 800a012:	e003      	b.n	800a01c <_ZN7MsgPool6resMsgEv+0x58>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	3301      	adds	r3, #1
 800a018:	603b      	str	r3, [r7, #0]
 800a01a:	e7e1      	b.n	8009fe0 <_ZN7MsgPool6resMsgEv+0x1c>
    }
  }
  mspThis->mMutex.unlock();
 800a01c:	4b05      	ldr	r3, [pc, #20]	; (800a034 <_ZN7MsgPool6resMsgEv+0x70>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	33cc      	adds	r3, #204	; 0xcc
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f890 	bl	800a148 <_ZN5Mutex6unlockEv>
  return lpRetVal;
 800a028:	687b      	ldr	r3, [r7, #4]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	200090a4 	.word	0x200090a4

0800a038 <_ZN7MsgPool7freeMsgEP7Message>:

void MsgPool::freeMsg(Message* p_msg)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  if(p_msg->type() != MsgIsr)
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff ff04 	bl	8009e4e <_ZN7Message4typeEv>
 800a046:	4603      	mov	r3, r0
 800a048:	2b03      	cmp	r3, #3
 800a04a:	bf14      	ite	ne
 800a04c:	2301      	movne	r3, #1
 800a04e:	2300      	moveq	r3, #0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d026      	beq.n	800a0a4 <_ZN7MsgPool7freeMsgEP7Message+0x6c>
  {
    mspThis->mMutex.lock();
 800a056:	4b15      	ldr	r3, [pc, #84]	; (800a0ac <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	33cc      	adds	r3, #204	; 0xcc
 800a05c:	2101      	movs	r1, #1
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f85e 	bl	800a120 <_ZN5Mutex4lockEh>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b18      	cmp	r3, #24
 800a06c:	dc14      	bgt.n	800a098 <_ZN7MsgPool7freeMsgEP7Message+0x60>
    {
      if(mspThis->mPool[i].mMsg == p_msg)
 800a06e:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	4413      	add	r3, r2
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d107      	bne.n	800a090 <_ZN7MsgPool7freeMsgEP7Message+0x58>
      {
        mspThis->mPool[i].mUsed = false;
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	4413      	add	r3, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	721a      	strb	r2, [r3, #8]
        break;
 800a08e:	e003      	b.n	800a098 <_ZN7MsgPool7freeMsgEP7Message+0x60>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3301      	adds	r3, #1
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	e7e7      	b.n	800a068 <_ZN7MsgPool7freeMsgEP7Message+0x30>
      }
    }
    mspThis->mMutex.unlock();
 800a098:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	33cc      	adds	r3, #204	; 0xcc
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f852 	bl	800a148 <_ZN5Mutex6unlockEv>
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	200090a4 	.word	0x200090a4

0800a0b0 <_ZN5MutexC1Ev>:
 *      Author: axel
 */

#include <Mutex.h>

Mutex::Mutex()
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	4a06      	ldr	r2, [pc, #24]	; (800a0d4 <_ZN5MutexC1Ev+0x24>)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	601a      	str	r2, [r3, #0]
{
  mMutex = xSemaphoreCreateMutex();
 800a0be:	2001      	movs	r0, #1
 800a0c0:	f7fc fac3 	bl	800664a <xQueueCreateMutex>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
}
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	0800bbf0 	.word	0x0800bbf0

0800a0d8 <_ZN5MutexD1Ev>:

Mutex::~Mutex()
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	4a06      	ldr	r2, [pc, #24]	; (800a0fc <_ZN5MutexD1Ev+0x24>)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	601a      	str	r2, [r3, #0]
{
  vSemaphoreDelete(mMutex);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fc fe4c 	bl	8006d88 <vQueueDelete>
}
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	0800bbf0 	.word	0x0800bbf0

0800a100 <_ZN5MutexD0Ev>:
Mutex::~Mutex()
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
}
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff ffe5 	bl	800a0d8 <_ZN5MutexD1Ev>
 800a10e:	210c      	movs	r1, #12
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 faa8 	bl	800a666 <_ZdlPvj>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZN5Mutex4lockEh>:

void Mutex::lock(uint8_t causedLockId)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
  xSemaphoreTake(mMutex, portMAX_DELAY);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f04f 31ff 	mov.w	r1, #4294967295
 800a134:	4618      	mov	r0, r3
 800a136:	f7fc fd1b 	bl	8006b70 <xQueueSemaphoreTake>
  mCausedLockId = causedLockId;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	721a      	strb	r2, [r3, #8]
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZN5Mutex6unlockEv>:

void Mutex::unlock()
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  xSemaphoreGive(mMutex);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6858      	ldr	r0, [r3, #4]
 800a154:	2300      	movs	r3, #0
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	f7fc fa8f 	bl	800667c <xQueueGenericSend>
  mCausedLockId = 0;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	721a      	strb	r2, [r3, #8]
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <_ZN4TaskC1E6TaskIdPKc>:
#include <string.h>
#include "TaskClass.h"



Task::Task(TaskId id, const char* name)
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	460b      	mov	r3, r1
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	72fb      	strb	r3, [r7, #11]
 800a17a:	4a20      	ldr	r2, [pc, #128]	; (800a1fc <_ZN4TaskC1E6TaskIdPKc+0x90>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]
{
  mId = id;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	7afa      	ldrb	r2, [r7, #11]
 800a184:	711a      	strb	r2, [r3, #4]
  strncpy(mName,name, TASK_NAME_LEN);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3305      	adds	r3, #5
 800a18a:	2214      	movs	r2, #20
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fe75 	bl	800ae7e <strncpy>
  mQueue = xQueueCreate(MSG_QUEUE_SIZE, sizeof(Message*));
 800a194:	2200      	movs	r2, #0
 800a196:	2104      	movs	r1, #4
 800a198:	200a      	movs	r0, #10
 800a19a:	f7fc f9df 	bl	800655c <xQueueGenericCreate>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	621a      	str	r2, [r3, #32]
  xTaskCreate(Task::mainLoop, mName,  TASK_STACK_SIZE , this, tskIDLE_PRIORITY, &mHandle);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	1d59      	adds	r1, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	331c      	adds	r3, #28
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1b8:	4811      	ldr	r0, [pc, #68]	; (800a200 <_ZN4TaskC1E6TaskIdPKc+0x94>)
 800a1ba:	f7fd f816 	bl	80071ea <xTaskCreate>
  configASSERT(mHandle != 0);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10a      	bne.n	800a1dc <_ZN4TaskC1E6TaskIdPKc+0x70>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	617b      	str	r3, [r7, #20]
}
 800a1d8:	bf00      	nop
 800a1da:	e7fe      	b.n	800a1da <_ZN4TaskC1E6TaskIdPKc+0x6e>
  TaskList::createEntry(mId, mName, mHandle, mQueue);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	7918      	ldrb	r0, [r3, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	1d59      	adds	r1, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	69da      	ldr	r2, [r3, #28]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	f000 f874 	bl	800a2d8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>
}
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0800bc00 	.word	0x0800bc00
 800a200:	0800a225 	.word	0x0800a225

0800a204 <_ZN4TaskD1Ev>:

Task::~Task()
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	4a04      	ldr	r2, [pc, #16]	; (800a220 <_ZN4TaskD1Ev+0x1c>)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	0800bc00 	.word	0x0800bc00

0800a224 <_ZN4Task8mainLoopEPv>:

void Task::mainLoop(void* args)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  Task* lpThis = (Task*)args;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	617b      	str	r3, [r7, #20]
  Message* lpReceiveMsg = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    BaseType_t lResult = xQueueReceive(lpThis->mQueue, &lpReceiveMsg, portMAX_DELAY);
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	f107 010c 	add.w	r1, r7, #12
 800a23c:	f04f 32ff 	mov.w	r2, #4294967295
 800a240:	4618      	mov	r0, r3
 800a242:	f7fc fbb5 	bl	80069b0 <xQueueReceive>
 800a246:	6138      	str	r0, [r7, #16]
    if(lResult == true)
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d10c      	bne.n	800a268 <_ZN4Task8mainLoopEPv+0x44>
    {
      //printf("queue message received %d\n",lpThis->mId);
      lpThis->handleMessage(lpReceiveMsg);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3308      	adds	r3, #8
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4611      	mov	r1, r2
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	4798      	blx	r3
      lpReceiveMsg->freeMsg();
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fdac 	bl	8009dbe <_ZN7Message7freeMsgEv>
 800a266:	e7e5      	b.n	800a234 <_ZN4Task8mainLoopEPv+0x10>
    }
    else
    {
    	printf("deqeuing failed");
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <_ZN4Task8mainLoopEPv+0x4c>)
 800a26a:	f000 fc79 	bl	800ab60 <iprintf>
    }
  }
 800a26e:	e7e1      	b.n	800a234 <_ZN4Task8mainLoopEPv+0x10>
 800a270:	0800bb58 	.word	0x0800bb58

0800a274 <TaskList_init>:
#include "os_init.h"
#include "TaskList.h"
#include <string.h>

void TaskList_init()
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  TaskList::instance();
 800a278:	f000 f802 	bl	800a280 <_ZN8TaskList8instanceEv>
}
 800a27c:	bf00      	nop
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <_ZN8TaskList8instanceEv>:
TaskList::table_struct TaskList::mTaskTable[TASK_MAX_COUNT];

TaskList* TaskList::mspThis=0;

TaskList* TaskList::instance()
{
 800a280:	b598      	push	{r3, r4, r7, lr}
 800a282:	af00      	add	r7, sp, #0
  if(TaskList::mspThis == 0)
 800a284:	4b08      	ldr	r3, [pc, #32]	; (800a2a8 <_ZN8TaskList8instanceEv+0x28>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d109      	bne.n	800a2a0 <_ZN8TaskList8instanceEv+0x20>
  {
    TaskList::mspThis = new TaskList;
 800a28c:	200c      	movs	r0, #12
 800a28e:	f000 f9d3 	bl	800a638 <_Znwj>
 800a292:	4603      	mov	r3, r0
 800a294:	461c      	mov	r4, r3
 800a296:	4620      	mov	r0, r4
 800a298:	f000 f808 	bl	800a2ac <_ZN8TaskListC1Ev>
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <_ZN8TaskList8instanceEv+0x28>)
 800a29e:	601c      	str	r4, [r3, #0]
  }
  return TaskList::mspThis;
 800a2a0:	4b01      	ldr	r3, [pc, #4]	; (800a2a8 <_ZN8TaskList8instanceEv+0x28>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	bd98      	pop	{r3, r4, r7, pc}
 800a2a8:	20009328 	.word	0x20009328

0800a2ac <_ZN8TaskListC1Ev>:

TaskList::TaskList()
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff fefa 	bl	800a0b0 <_ZN5MutexC1Ev>
{
  memset(&mTaskTable, 0, sizeof(mTaskTable));
 800a2bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4804      	ldr	r0, [pc, #16]	; (800a2d4 <_ZN8TaskListC1Ev+0x28>)
 800a2c4:	f000 fb64 	bl	800a990 <memset>
}
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200090a8 	.word	0x200090a8

0800a2d8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>:

void TaskList::createEntry(TaskId id, char* name, TaskHandle_t task, QueueHandle_t address)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]
  TaskList::getMutex()->lock();
 800a2e8:	f000 f840 	bl	800a36c <_ZN8TaskList8getMutexEv>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff ff15 	bl	800a120 <_ZN5Mutex4lockEh>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b13      	cmp	r3, #19
 800a2fe:	dc29      	bgt.n	800a354 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x7c>
  {
    if(TaskList::mTaskTable[i].id == NoTask)
 800a300:	4a19      	ldr	r2, [pc, #100]	; (800a368 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	015b      	lsls	r3, r3, #5
 800a306:	4413      	add	r3, r2
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d11e      	bne.n	800a34c <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x74>
    {
      TaskList::mTaskTable[i].id = id;
 800a30e:	4a16      	ldr	r2, [pc, #88]	; (800a368 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	015b      	lsls	r3, r3, #5
 800a314:	4413      	add	r3, r2
 800a316:	7bfa      	ldrb	r2, [r7, #15]
 800a318:	701a      	strb	r2, [r3, #0]
      strncpy(TaskList::mTaskTable[i].name, name, TASK_NAME_LEN);
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	015b      	lsls	r3, r3, #5
 800a31e:	4a12      	ldr	r2, [pc, #72]	; (800a368 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800a320:	4413      	add	r3, r2
 800a322:	3301      	adds	r3, #1
 800a324:	2214      	movs	r2, #20
 800a326:	68b9      	ldr	r1, [r7, #8]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fda8 	bl	800ae7e <strncpy>
      TaskList::mTaskTable[i].hTask = task;
 800a32e:	4a0e      	ldr	r2, [pc, #56]	; (800a368 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	015b      	lsls	r3, r3, #5
 800a334:	4413      	add	r3, r2
 800a336:	3318      	adds	r3, #24
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
      TaskList::mTaskTable[i].hQueue = address;
 800a33c:	4a0a      	ldr	r2, [pc, #40]	; (800a368 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	015b      	lsls	r3, r3, #5
 800a342:	4413      	add	r3, r2
 800a344:	331c      	adds	r3, #28
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	601a      	str	r2, [r3, #0]
      break;
 800a34a:	e003      	b.n	800a354 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x7c>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	3301      	adds	r3, #1
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	e7d2      	b.n	800a2fa <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x22>
    }
  }
  TaskList::getMutex()->unlock();
 800a354:	f000 f80a 	bl	800a36c <_ZN8TaskList8getMutexEv>
 800a358:	4603      	mov	r3, r0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff fef4 	bl	800a148 <_ZN5Mutex6unlockEv>
}
 800a360:	bf00      	nop
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200090a8 	.word	0x200090a8

0800a36c <_ZN8TaskList8getMutexEv>:

Mutex* TaskList::getMutex()
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
  return &TaskList::mspThis->mMutex;
 800a370:	4b03      	ldr	r3, [pc, #12]	; (800a380 <_ZN8TaskList8getMutexEv+0x14>)
 800a372:	681b      	ldr	r3, [r3, #0]
}
 800a374:	4618      	mov	r0, r3
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20009328 	.word	0x20009328

0800a384 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock>:
  }
  return lRetVal;
}

TaskId TaskList::getTaskId(TaskHandle_t handle)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  TaskId lRetVal = NoTask;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 800a390:	2300      	movs	r3, #0
 800a392:	60bb      	str	r3, [r7, #8]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b13      	cmp	r3, #19
 800a398:	dc13      	bgt.n	800a3c2 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x3e>
  {
    if(handle == TaskList::mTaskTable[i].hTask)
 800a39a:	4a0d      	ldr	r2, [pc, #52]	; (800a3d0 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x4c>)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	015b      	lsls	r3, r3, #5
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3318      	adds	r3, #24
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d106      	bne.n	800a3ba <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x36>
    {
      lRetVal = TaskList::mTaskTable[i].id; //atomic
 800a3ac:	4a08      	ldr	r2, [pc, #32]	; (800a3d0 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x4c>)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	015b      	lsls	r3, r3, #5
 800a3b2:	4413      	add	r3, r2
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b8:	e003      	b.n	800a3c2 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x3e>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	60bb      	str	r3, [r7, #8]
 800a3c0:	e7e8      	b.n	800a394 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x10>
    }
  }
  return lRetVal;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	200090a8 	.word	0x200090a8

0800a3d4 <_ZN8TaskList8getQueueE6TaskId>:

QueueHandle_t TaskList::getQueue(TaskId id)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t lRetVal = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b13      	cmp	r3, #19
 800a3ea:	dc13      	bgt.n	800a414 <_ZN8TaskList8getQueueE6TaskId+0x40>
  {
    if(id == TaskList::mTaskTable[i].id)
 800a3ec:	4a0d      	ldr	r2, [pc, #52]	; (800a424 <_ZN8TaskList8getQueueE6TaskId+0x50>)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	015b      	lsls	r3, r3, #5
 800a3f2:	4413      	add	r3, r2
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	79fa      	ldrb	r2, [r7, #7]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d107      	bne.n	800a40c <_ZN8TaskList8getQueueE6TaskId+0x38>
    {
      lRetVal = TaskList::mTaskTable[i].hQueue; //atomic
 800a3fc:	4a09      	ldr	r2, [pc, #36]	; (800a424 <_ZN8TaskList8getQueueE6TaskId+0x50>)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	015b      	lsls	r3, r3, #5
 800a402:	4413      	add	r3, r2
 800a404:	331c      	adds	r3, #28
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	60fb      	str	r3, [r7, #12]
      break;
 800a40a:	e003      	b.n	800a414 <_ZN8TaskList8getQueueE6TaskId+0x40>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	3301      	adds	r3, #1
 800a410:	60bb      	str	r3, [r7, #8]
 800a412:	e7e8      	b.n	800a3e6 <_ZN8TaskList8getQueueE6TaskId+0x12>
    }
  }
  return lRetVal;
 800a414:	68fb      	ldr	r3, [r7, #12]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	200090a8 	.word	0x200090a8

0800a428 <_ZN5TimerC1E6TaskId7TimerId>:
#include <stdio.h>
#include <stm32g491xx.h>

#define BLOCK_TIME   1000

Timer::Timer(TaskId addressee, TimerId timer)
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
 800a434:	4613      	mov	r3, r2
 800a436:	70bb      	strb	r3, [r7, #2]
 800a438:	4a16      	ldr	r2, [pc, #88]	; (800a494 <_ZN5TimerC1E6TaskId7TimerId+0x6c>)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	601a      	str	r2, [r3, #0]
{
  mTimerData.addressee = addressee;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	711a      	strb	r2, [r3, #4]
  mTimerData.timer = timer;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	78ba      	ldrb	r2, [r7, #2]
 800a448:	715a      	strb	r2, [r3, #5]
  const int cDefaultPeriod = 1000;
 800a44a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a44e:	60fb      	str	r3, [r7, #12]
  mHTimer = xTimerCreate("Timer\0", pdMS_TO_TICKS(cDefaultPeriod), pdFALSE, &mTimerData, CallbackFunction);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3304      	adds	r3, #4
 800a454:	4a10      	ldr	r2, [pc, #64]	; (800a498 <_ZN5TimerC1E6TaskId7TimerId+0x70>)
 800a456:	9200      	str	r2, [sp, #0]
 800a458:	2200      	movs	r2, #0
 800a45a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a45e:	480f      	ldr	r0, [pc, #60]	; (800a49c <_ZN5TimerC1E6TaskId7TimerId+0x74>)
 800a460:	f7fd ffbe 	bl	80083e0 <xTimerCreate>
 800a464:	4602      	mov	r2, r0
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	609a      	str	r2, [r3, #8]
  configASSERT(mHTimer != 0);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10a      	bne.n	800a488 <_ZN5TimerC1E6TaskId7TimerId+0x60>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	60bb      	str	r3, [r7, #8]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <_ZN5TimerC1E6TaskId7TimerId+0x5e>
}
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	0800bc14 	.word	0x0800bc14
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800bb68 	.word	0x0800bb68

0800a4a0 <_ZN5TimerD1Ev>:

Timer::~Timer()
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	4a08      	ldr	r2, [pc, #32]	; (800a4cc <_ZN5TimerD1Ev+0x2c>)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
{
  xTimerDelete(mHTimer, BLOCK_TIME);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6898      	ldr	r0, [r3, #8]
 800a4b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2105      	movs	r1, #5
 800a4be:	f7fd ffeb 	bl	8008498 <xTimerGenericCommand>
}
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	0800bc14 	.word	0x0800bc14

0800a4d0 <_ZN5TimerD0Ev>:
Timer::~Timer()
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
}
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff ffe1 	bl	800a4a0 <_ZN5TimerD1Ev>
 800a4de:	210c      	movs	r1, #12
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f8c0 	bl	800a666 <_ZdlPvj>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <_ZN5Timer16CallbackFunctionEP15tmrTimerControl>:

void Timer::CallbackFunction( TimerHandle_t xTimer )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  timerDataStruct* lpTimerData = (timerDataStruct*)pvTimerGetTimerID(xTimer);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7fe faeb 	bl	8008ad4 <pvTimerGetTimerID>
 800a4fe:	6178      	str	r0, [r7, #20]
  DataUnion lTimerId;
  lTimerId.longword = lpTimerData->timer;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	60fb      	str	r3, [r7, #12]
  Message* lpMsg = Message::reserve(MSG_ID_TIMEOUT, lpTimerData->addressee, lTimerId);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4619      	mov	r1, r3
 800a50e:	2002      	movs	r0, #2
 800a510:	f7ff fbb0 	bl	8009c74 <_ZN7Message7reserveEhh9DataUnion>
 800a514:	6138      	str	r0, [r7, #16]
  lpMsg->sendMsg();
 800a516:	6938      	ldr	r0, [r7, #16]
 800a518:	f7ff fc0d 	bl	8009d36 <_ZN7Message7sendMsgEv>
}
 800a51c:	bf00      	nop
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZN5Timer11setIntervalEi>:

void Timer::setInterval(int period)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af02      	add	r7, sp, #8
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  xTimerChangePeriod( mHTimer, pdMS_TO_TICKS(period), BLOCK_TIME);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6898      	ldr	r0, [r3, #8]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a538:	fb02 f303 	mul.w	r3, r2, r3
 800a53c:	4a07      	ldr	r2, [pc, #28]	; (800a55c <_ZN5Timer11setIntervalEi+0x38>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	099a      	lsrs	r2, r3, #6
 800a544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	2300      	movs	r3, #0
 800a54c:	2104      	movs	r1, #4
 800a54e:	f7fd ffa3 	bl	8008498 <xTimerGenericCommand>
}
 800a552:	bf00      	nop
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	10624dd3 	.word	0x10624dd3

0800a560 <_ZN5Timer13setSingleShotEb>:

void Timer::setSingleShot(bool once)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  vTimerSetReloadMode(mHTimer, !once);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	f083 0301 	eor.w	r3, r3, #1
 800a576:	b2db      	uxtb	r3, r3
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f7fd ffda 	bl	8008534 <vTimerSetReloadMode>
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <_ZN5Timer5startEv>:

void Timer::start()
{
 800a588:	b590      	push	{r4, r7, lr}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af02      	add	r7, sp, #8
 800a58e:	6078      	str	r0, [r7, #4]
  bool lResult = pdFAIL;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a594:	2300      	movs	r3, #0
 800a596:	60bb      	str	r3, [r7, #8]
  if(isInterrupt())
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f837 	bl	800a60c <_ZN5Timer11isInterruptEv>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d013      	beq.n	800a5cc <_ZN5Timer5startEv+0x44>
  {
    lResult = xTimerStartFromISR(mHTimer, &xHigherPriorityTaskWoken);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689c      	ldr	r4, [r3, #8]
 800a5a8:	f7fd f938 	bl	800781c <xTaskGetTickCountFromISR>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	f107 0308 	add.w	r3, r7, #8
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	9100      	str	r1, [sp, #0]
 800a5b6:	2106      	movs	r1, #6
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7fd ff6d 	bl	8008498 <xTimerGenericCommand>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bf14      	ite	ne
 800a5c4:	2301      	movne	r3, #1
 800a5c6:	2300      	moveq	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
 800a5ca:	e012      	b.n	800a5f2 <_ZN5Timer5startEv+0x6a>
  }
  else
  {
    lResult = xTimerStart(mHTimer, BLOCK_TIME);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689c      	ldr	r4, [r3, #8]
 800a5d0:	f7fd f914 	bl	80077fc <xTaskGetTickCount>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2101      	movs	r1, #1
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7fd ff59 	bl	8008498 <xTimerGenericCommand>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bf14      	ite	ne
 800a5ec:	2301      	movne	r3, #1
 800a5ee:	2300      	moveq	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
  }
  if(lResult == pdFAIL)
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <_ZN5Timer5startEv+0x76>
  {
    printf("start timer failed\n");
 800a5f8:	4803      	ldr	r0, [pc, #12]	; (800a608 <_ZN5Timer5startEv+0x80>)
 800a5fa:	f000 fb37 	bl	800ac6c <puts>
  }
}
 800a5fe:	bf00      	nop
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	bd90      	pop	{r4, r7, pc}
 800a606:	bf00      	nop
 800a608:	0800bb70 	.word	0x0800bb70

0800a60c <_ZN5Timer11isInterruptEv>:
{
  xTimerStop(mHTimer, BLOCK_TIME);
}

bool Timer::isInterrupt()
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0 ;
 800a614:	4b07      	ldr	r3, [pc, #28]	; (800a634 <_ZN5Timer11isInterruptEv+0x28>)
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bf14      	ite	ne
 800a620:	2301      	movne	r3, #1
 800a622:	2300      	moveq	r3, #0
 800a624:	b2db      	uxtb	r3, r3
}
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	e000ed00 	.word	0xe000ed00

0800a638 <_Znwj>:
#include <projdefs.h>
#include <portmacro.h>
#include <portable.h>

void * operator new( size_t size )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7fe fcb9 	bl	8008fb8 <pvPortMalloc>
 800a646:	4603      	mov	r3, r0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7fe fd79 	bl	8009150 <vPortFree>
}
 800a65e:	bf00      	nop
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <_ZdlPvj>:
 800a666:	f7ff bff3 	b.w	800a650 <_ZdlPv>

0800a66a <__cxa_pure_virtual>:
 800a66a:	b508      	push	{r3, lr}
 800a66c:	f000 f812 	bl	800a694 <_ZSt9terminatev>

0800a670 <_ZSt17__throw_bad_allocv>:
 800a670:	b508      	push	{r3, lr}
 800a672:	f000 f836 	bl	800a6e2 <abort>

0800a676 <_ZSt20__throw_length_errorPKc>:
 800a676:	b508      	push	{r3, lr}
 800a678:	f000 f833 	bl	800a6e2 <abort>

0800a67c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a67c:	b508      	push	{r3, lr}
 800a67e:	4780      	blx	r0
 800a680:	f000 f82f 	bl	800a6e2 <abort>

0800a684 <_ZSt13get_terminatev>:
 800a684:	4b02      	ldr	r3, [pc, #8]	; (800a690 <_ZSt13get_terminatev+0xc>)
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	f3bf 8f5b 	dmb	ish
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20000010 	.word	0x20000010

0800a694 <_ZSt9terminatev>:
 800a694:	b508      	push	{r3, lr}
 800a696:	f7ff fff5 	bl	800a684 <_ZSt13get_terminatev>
 800a69a:	f7ff ffef 	bl	800a67c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800a6a0 <sqrtf>:
 800a6a0:	b508      	push	{r3, lr}
 800a6a2:	ed2d 8b02 	vpush	{d8}
 800a6a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6aa:	f000 f817 	bl	800a6dc <__ieee754_sqrtf>
 800a6ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800a6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b6:	d60c      	bvs.n	800a6d2 <sqrtf+0x32>
 800a6b8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a6d8 <sqrtf+0x38>
 800a6bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c4:	d505      	bpl.n	800a6d2 <sqrtf+0x32>
 800a6c6:	f000 f813 	bl	800a6f0 <__errno>
 800a6ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a6ce:	2321      	movs	r3, #33	; 0x21
 800a6d0:	6003      	str	r3, [r0, #0]
 800a6d2:	ecbd 8b02 	vpop	{d8}
 800a6d6:	bd08      	pop	{r3, pc}
 800a6d8:	00000000 	.word	0x00000000

0800a6dc <__ieee754_sqrtf>:
 800a6dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a6e0:	4770      	bx	lr

0800a6e2 <abort>:
 800a6e2:	b508      	push	{r3, lr}
 800a6e4:	2006      	movs	r0, #6
 800a6e6:	f000 fb6b 	bl	800adc0 <raise>
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	f7f6 fea4 	bl	8001438 <_exit>

0800a6f0 <__errno>:
 800a6f0:	4b01      	ldr	r3, [pc, #4]	; (800a6f8 <__errno+0x8>)
 800a6f2:	6818      	ldr	r0, [r3, #0]
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	20000014 	.word	0x20000014

0800a6fc <std>:
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	b510      	push	{r4, lr}
 800a700:	4604      	mov	r4, r0
 800a702:	e9c0 3300 	strd	r3, r3, [r0]
 800a706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a70a:	6083      	str	r3, [r0, #8]
 800a70c:	8181      	strh	r1, [r0, #12]
 800a70e:	6643      	str	r3, [r0, #100]	; 0x64
 800a710:	81c2      	strh	r2, [r0, #14]
 800a712:	6183      	str	r3, [r0, #24]
 800a714:	4619      	mov	r1, r3
 800a716:	2208      	movs	r2, #8
 800a718:	305c      	adds	r0, #92	; 0x5c
 800a71a:	f000 f939 	bl	800a990 <memset>
 800a71e:	4b05      	ldr	r3, [pc, #20]	; (800a734 <std+0x38>)
 800a720:	6263      	str	r3, [r4, #36]	; 0x24
 800a722:	4b05      	ldr	r3, [pc, #20]	; (800a738 <std+0x3c>)
 800a724:	62a3      	str	r3, [r4, #40]	; 0x28
 800a726:	4b05      	ldr	r3, [pc, #20]	; (800a73c <std+0x40>)
 800a728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <std+0x44>)
 800a72c:	6224      	str	r4, [r4, #32]
 800a72e:	6323      	str	r3, [r4, #48]	; 0x30
 800a730:	bd10      	pop	{r4, pc}
 800a732:	bf00      	nop
 800a734:	0800adf9 	.word	0x0800adf9
 800a738:	0800ae1b 	.word	0x0800ae1b
 800a73c:	0800ae53 	.word	0x0800ae53
 800a740:	0800ae77 	.word	0x0800ae77

0800a744 <_cleanup_r>:
 800a744:	4901      	ldr	r1, [pc, #4]	; (800a74c <_cleanup_r+0x8>)
 800a746:	f000 b8af 	b.w	800a8a8 <_fwalk_reent>
 800a74a:	bf00      	nop
 800a74c:	0800b175 	.word	0x0800b175

0800a750 <__sfmoreglue>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	2268      	movs	r2, #104	; 0x68
 800a754:	1e4d      	subs	r5, r1, #1
 800a756:	4355      	muls	r5, r2
 800a758:	460e      	mov	r6, r1
 800a75a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a75e:	f000 f98b 	bl	800aa78 <_malloc_r>
 800a762:	4604      	mov	r4, r0
 800a764:	b140      	cbz	r0, 800a778 <__sfmoreglue+0x28>
 800a766:	2100      	movs	r1, #0
 800a768:	e9c0 1600 	strd	r1, r6, [r0]
 800a76c:	300c      	adds	r0, #12
 800a76e:	60a0      	str	r0, [r4, #8]
 800a770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a774:	f000 f90c 	bl	800a990 <memset>
 800a778:	4620      	mov	r0, r4
 800a77a:	bd70      	pop	{r4, r5, r6, pc}

0800a77c <__sfp_lock_acquire>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__sfp_lock_acquire+0x8>)
 800a77e:	f7f7 b8cd 	b.w	800191c <__retarget_lock_acquire_recursive>
 800a782:	bf00      	nop
 800a784:	200008cc 	.word	0x200008cc

0800a788 <__sfp_lock_release>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__sfp_lock_release+0x8>)
 800a78a:	f7f7 b8db 	b.w	8001944 <__retarget_lock_release_recursive>
 800a78e:	bf00      	nop
 800a790:	200008cc 	.word	0x200008cc

0800a794 <__sinit_lock_acquire>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__sinit_lock_acquire+0x8>)
 800a796:	f7f7 b8c1 	b.w	800191c <__retarget_lock_acquire_recursive>
 800a79a:	bf00      	nop
 800a79c:	200008c0 	.word	0x200008c0

0800a7a0 <__sinit_lock_release>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__sinit_lock_release+0x8>)
 800a7a2:	f7f7 b8cf 	b.w	8001944 <__retarget_lock_release_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	200008c0 	.word	0x200008c0

0800a7ac <__sinit>:
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	f7ff fff0 	bl	800a794 <__sinit_lock_acquire>
 800a7b4:	69a3      	ldr	r3, [r4, #24]
 800a7b6:	b11b      	cbz	r3, 800a7c0 <__sinit+0x14>
 800a7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7bc:	f7ff bff0 	b.w	800a7a0 <__sinit_lock_release>
 800a7c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a7c6:	4b13      	ldr	r3, [pc, #76]	; (800a814 <__sinit+0x68>)
 800a7c8:	4a13      	ldr	r2, [pc, #76]	; (800a818 <__sinit+0x6c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	bf04      	itt	eq
 800a7d2:	2301      	moveq	r3, #1
 800a7d4:	61a3      	streq	r3, [r4, #24]
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 f820 	bl	800a81c <__sfp>
 800a7dc:	6060      	str	r0, [r4, #4]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f81c 	bl	800a81c <__sfp>
 800a7e4:	60a0      	str	r0, [r4, #8]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 f818 	bl	800a81c <__sfp>
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	60e0      	str	r0, [r4, #12]
 800a7f0:	2104      	movs	r1, #4
 800a7f2:	6860      	ldr	r0, [r4, #4]
 800a7f4:	f7ff ff82 	bl	800a6fc <std>
 800a7f8:	68a0      	ldr	r0, [r4, #8]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	2109      	movs	r1, #9
 800a7fe:	f7ff ff7d 	bl	800a6fc <std>
 800a802:	68e0      	ldr	r0, [r4, #12]
 800a804:	2202      	movs	r2, #2
 800a806:	2112      	movs	r1, #18
 800a808:	f7ff ff78 	bl	800a6fc <std>
 800a80c:	2301      	movs	r3, #1
 800a80e:	61a3      	str	r3, [r4, #24]
 800a810:	e7d2      	b.n	800a7b8 <__sinit+0xc>
 800a812:	bf00      	nop
 800a814:	0800bc7c 	.word	0x0800bc7c
 800a818:	0800a745 	.word	0x0800a745

0800a81c <__sfp>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	4607      	mov	r7, r0
 800a820:	f7ff ffac 	bl	800a77c <__sfp_lock_acquire>
 800a824:	4b1e      	ldr	r3, [pc, #120]	; (800a8a0 <__sfp+0x84>)
 800a826:	681e      	ldr	r6, [r3, #0]
 800a828:	69b3      	ldr	r3, [r6, #24]
 800a82a:	b913      	cbnz	r3, 800a832 <__sfp+0x16>
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7ff ffbd 	bl	800a7ac <__sinit>
 800a832:	3648      	adds	r6, #72	; 0x48
 800a834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a838:	3b01      	subs	r3, #1
 800a83a:	d503      	bpl.n	800a844 <__sfp+0x28>
 800a83c:	6833      	ldr	r3, [r6, #0]
 800a83e:	b30b      	cbz	r3, 800a884 <__sfp+0x68>
 800a840:	6836      	ldr	r6, [r6, #0]
 800a842:	e7f7      	b.n	800a834 <__sfp+0x18>
 800a844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a848:	b9d5      	cbnz	r5, 800a880 <__sfp+0x64>
 800a84a:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <__sfp+0x88>)
 800a84c:	60e3      	str	r3, [r4, #12]
 800a84e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a852:	6665      	str	r5, [r4, #100]	; 0x64
 800a854:	f7f7 f83c 	bl	80018d0 <__retarget_lock_init_recursive>
 800a858:	f7ff ff96 	bl	800a788 <__sfp_lock_release>
 800a85c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a864:	6025      	str	r5, [r4, #0]
 800a866:	61a5      	str	r5, [r4, #24]
 800a868:	2208      	movs	r2, #8
 800a86a:	4629      	mov	r1, r5
 800a86c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a870:	f000 f88e 	bl	800a990 <memset>
 800a874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a87c:	4620      	mov	r0, r4
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a880:	3468      	adds	r4, #104	; 0x68
 800a882:	e7d9      	b.n	800a838 <__sfp+0x1c>
 800a884:	2104      	movs	r1, #4
 800a886:	4638      	mov	r0, r7
 800a888:	f7ff ff62 	bl	800a750 <__sfmoreglue>
 800a88c:	4604      	mov	r4, r0
 800a88e:	6030      	str	r0, [r6, #0]
 800a890:	2800      	cmp	r0, #0
 800a892:	d1d5      	bne.n	800a840 <__sfp+0x24>
 800a894:	f7ff ff78 	bl	800a788 <__sfp_lock_release>
 800a898:	230c      	movs	r3, #12
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	e7ee      	b.n	800a87c <__sfp+0x60>
 800a89e:	bf00      	nop
 800a8a0:	0800bc7c 	.word	0x0800bc7c
 800a8a4:	ffff0001 	.word	0xffff0001

0800a8a8 <_fwalk_reent>:
 800a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	4688      	mov	r8, r1
 800a8b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8b4:	2700      	movs	r7, #0
 800a8b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8ba:	f1b9 0901 	subs.w	r9, r9, #1
 800a8be:	d505      	bpl.n	800a8cc <_fwalk_reent+0x24>
 800a8c0:	6824      	ldr	r4, [r4, #0]
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	d1f7      	bne.n	800a8b6 <_fwalk_reent+0xe>
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d907      	bls.n	800a8e2 <_fwalk_reent+0x3a>
 800a8d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	d003      	beq.n	800a8e2 <_fwalk_reent+0x3a>
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4630      	mov	r0, r6
 800a8de:	47c0      	blx	r8
 800a8e0:	4307      	orrs	r7, r0
 800a8e2:	3568      	adds	r5, #104	; 0x68
 800a8e4:	e7e9      	b.n	800a8ba <_fwalk_reent+0x12>
	...

0800a8e8 <__libc_init_array>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4d0d      	ldr	r5, [pc, #52]	; (800a920 <__libc_init_array+0x38>)
 800a8ec:	4c0d      	ldr	r4, [pc, #52]	; (800a924 <__libc_init_array+0x3c>)
 800a8ee:	1b64      	subs	r4, r4, r5
 800a8f0:	10a4      	asrs	r4, r4, #2
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	42a6      	cmp	r6, r4
 800a8f6:	d109      	bne.n	800a90c <__libc_init_array+0x24>
 800a8f8:	4d0b      	ldr	r5, [pc, #44]	; (800a928 <__libc_init_array+0x40>)
 800a8fa:	4c0c      	ldr	r4, [pc, #48]	; (800a92c <__libc_init_array+0x44>)
 800a8fc:	f001 f81c 	bl	800b938 <_init>
 800a900:	1b64      	subs	r4, r4, r5
 800a902:	10a4      	asrs	r4, r4, #2
 800a904:	2600      	movs	r6, #0
 800a906:	42a6      	cmp	r6, r4
 800a908:	d105      	bne.n	800a916 <__libc_init_array+0x2e>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a910:	4798      	blx	r3
 800a912:	3601      	adds	r6, #1
 800a914:	e7ee      	b.n	800a8f4 <__libc_init_array+0xc>
 800a916:	f855 3b04 	ldr.w	r3, [r5], #4
 800a91a:	4798      	blx	r3
 800a91c:	3601      	adds	r6, #1
 800a91e:	e7f2      	b.n	800a906 <__libc_init_array+0x1e>
 800a920:	0800bcb4 	.word	0x0800bcb4
 800a924:	0800bcb4 	.word	0x0800bcb4
 800a928:	0800bcb4 	.word	0x0800bcb4
 800a92c:	0800bcbc 	.word	0x0800bcbc

0800a930 <malloc>:
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <malloc+0xc>)
 800a932:	4601      	mov	r1, r0
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f000 b89f 	b.w	800aa78 <_malloc_r>
 800a93a:	bf00      	nop
 800a93c:	20000014 	.word	0x20000014

0800a940 <memcpy>:
 800a940:	440a      	add	r2, r1
 800a942:	4291      	cmp	r1, r2
 800a944:	f100 33ff 	add.w	r3, r0, #4294967295
 800a948:	d100      	bne.n	800a94c <memcpy+0xc>
 800a94a:	4770      	bx	lr
 800a94c:	b510      	push	{r4, lr}
 800a94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a952:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a956:	4291      	cmp	r1, r2
 800a958:	d1f9      	bne.n	800a94e <memcpy+0xe>
 800a95a:	bd10      	pop	{r4, pc}

0800a95c <memmove>:
 800a95c:	4288      	cmp	r0, r1
 800a95e:	b510      	push	{r4, lr}
 800a960:	eb01 0402 	add.w	r4, r1, r2
 800a964:	d902      	bls.n	800a96c <memmove+0x10>
 800a966:	4284      	cmp	r4, r0
 800a968:	4623      	mov	r3, r4
 800a96a:	d807      	bhi.n	800a97c <memmove+0x20>
 800a96c:	1e43      	subs	r3, r0, #1
 800a96e:	42a1      	cmp	r1, r4
 800a970:	d008      	beq.n	800a984 <memmove+0x28>
 800a972:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a97a:	e7f8      	b.n	800a96e <memmove+0x12>
 800a97c:	4402      	add	r2, r0
 800a97e:	4601      	mov	r1, r0
 800a980:	428a      	cmp	r2, r1
 800a982:	d100      	bne.n	800a986 <memmove+0x2a>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a98a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a98e:	e7f7      	b.n	800a980 <memmove+0x24>

0800a990 <memset>:
 800a990:	4402      	add	r2, r0
 800a992:	4603      	mov	r3, r0
 800a994:	4293      	cmp	r3, r2
 800a996:	d100      	bne.n	800a99a <memset+0xa>
 800a998:	4770      	bx	lr
 800a99a:	f803 1b01 	strb.w	r1, [r3], #1
 800a99e:	e7f9      	b.n	800a994 <memset+0x4>

0800a9a0 <_free_r>:
 800a9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a2:	2900      	cmp	r1, #0
 800a9a4:	d044      	beq.n	800aa30 <_free_r+0x90>
 800a9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9aa:	9001      	str	r0, [sp, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a9b2:	bfb8      	it	lt
 800a9b4:	18e4      	addlt	r4, r4, r3
 800a9b6:	f000 fc91 	bl	800b2dc <__malloc_lock>
 800a9ba:	4a1e      	ldr	r2, [pc, #120]	; (800aa34 <_free_r+0x94>)
 800a9bc:	9801      	ldr	r0, [sp, #4]
 800a9be:	6813      	ldr	r3, [r2, #0]
 800a9c0:	b933      	cbnz	r3, 800a9d0 <_free_r+0x30>
 800a9c2:	6063      	str	r3, [r4, #4]
 800a9c4:	6014      	str	r4, [r2, #0]
 800a9c6:	b003      	add	sp, #12
 800a9c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9cc:	f000 bc8c 	b.w	800b2e8 <__malloc_unlock>
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d908      	bls.n	800a9e6 <_free_r+0x46>
 800a9d4:	6825      	ldr	r5, [r4, #0]
 800a9d6:	1961      	adds	r1, r4, r5
 800a9d8:	428b      	cmp	r3, r1
 800a9da:	bf01      	itttt	eq
 800a9dc:	6819      	ldreq	r1, [r3, #0]
 800a9de:	685b      	ldreq	r3, [r3, #4]
 800a9e0:	1949      	addeq	r1, r1, r5
 800a9e2:	6021      	streq	r1, [r4, #0]
 800a9e4:	e7ed      	b.n	800a9c2 <_free_r+0x22>
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	b10b      	cbz	r3, 800a9f0 <_free_r+0x50>
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d9fa      	bls.n	800a9e6 <_free_r+0x46>
 800a9f0:	6811      	ldr	r1, [r2, #0]
 800a9f2:	1855      	adds	r5, r2, r1
 800a9f4:	42a5      	cmp	r5, r4
 800a9f6:	d10b      	bne.n	800aa10 <_free_r+0x70>
 800a9f8:	6824      	ldr	r4, [r4, #0]
 800a9fa:	4421      	add	r1, r4
 800a9fc:	1854      	adds	r4, r2, r1
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	6011      	str	r1, [r2, #0]
 800aa02:	d1e0      	bne.n	800a9c6 <_free_r+0x26>
 800aa04:	681c      	ldr	r4, [r3, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	6053      	str	r3, [r2, #4]
 800aa0a:	4421      	add	r1, r4
 800aa0c:	6011      	str	r1, [r2, #0]
 800aa0e:	e7da      	b.n	800a9c6 <_free_r+0x26>
 800aa10:	d902      	bls.n	800aa18 <_free_r+0x78>
 800aa12:	230c      	movs	r3, #12
 800aa14:	6003      	str	r3, [r0, #0]
 800aa16:	e7d6      	b.n	800a9c6 <_free_r+0x26>
 800aa18:	6825      	ldr	r5, [r4, #0]
 800aa1a:	1961      	adds	r1, r4, r5
 800aa1c:	428b      	cmp	r3, r1
 800aa1e:	bf04      	itt	eq
 800aa20:	6819      	ldreq	r1, [r3, #0]
 800aa22:	685b      	ldreq	r3, [r3, #4]
 800aa24:	6063      	str	r3, [r4, #4]
 800aa26:	bf04      	itt	eq
 800aa28:	1949      	addeq	r1, r1, r5
 800aa2a:	6021      	streq	r1, [r4, #0]
 800aa2c:	6054      	str	r4, [r2, #4]
 800aa2e:	e7ca      	b.n	800a9c6 <_free_r+0x26>
 800aa30:	b003      	add	sp, #12
 800aa32:	bd30      	pop	{r4, r5, pc}
 800aa34:	2000932c 	.word	0x2000932c

0800aa38 <sbrk_aligned>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4e0e      	ldr	r6, [pc, #56]	; (800aa74 <sbrk_aligned+0x3c>)
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	6831      	ldr	r1, [r6, #0]
 800aa40:	4605      	mov	r5, r0
 800aa42:	b911      	cbnz	r1, 800aa4a <sbrk_aligned+0x12>
 800aa44:	f000 f984 	bl	800ad50 <_sbrk_r>
 800aa48:	6030      	str	r0, [r6, #0]
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 f97f 	bl	800ad50 <_sbrk_r>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d00a      	beq.n	800aa6c <sbrk_aligned+0x34>
 800aa56:	1cc4      	adds	r4, r0, #3
 800aa58:	f024 0403 	bic.w	r4, r4, #3
 800aa5c:	42a0      	cmp	r0, r4
 800aa5e:	d007      	beq.n	800aa70 <sbrk_aligned+0x38>
 800aa60:	1a21      	subs	r1, r4, r0
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 f974 	bl	800ad50 <_sbrk_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d101      	bne.n	800aa70 <sbrk_aligned+0x38>
 800aa6c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa70:	4620      	mov	r0, r4
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	20009330 	.word	0x20009330

0800aa78 <_malloc_r>:
 800aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	1ccd      	adds	r5, r1, #3
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	db01      	blt.n	800aa94 <_malloc_r+0x1c>
 800aa90:	42a9      	cmp	r1, r5
 800aa92:	d905      	bls.n	800aaa0 <_malloc_r+0x28>
 800aa94:	230c      	movs	r3, #12
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	2600      	movs	r6, #0
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa0:	4e2e      	ldr	r6, [pc, #184]	; (800ab5c <_malloc_r+0xe4>)
 800aaa2:	f000 fc1b 	bl	800b2dc <__malloc_lock>
 800aaa6:	6833      	ldr	r3, [r6, #0]
 800aaa8:	461c      	mov	r4, r3
 800aaaa:	bb34      	cbnz	r4, 800aafa <_malloc_r+0x82>
 800aaac:	4629      	mov	r1, r5
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7ff ffc2 	bl	800aa38 <sbrk_aligned>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	4604      	mov	r4, r0
 800aab8:	d14d      	bne.n	800ab56 <_malloc_r+0xde>
 800aaba:	6834      	ldr	r4, [r6, #0]
 800aabc:	4626      	mov	r6, r4
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	d140      	bne.n	800ab44 <_malloc_r+0xcc>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	4631      	mov	r1, r6
 800aac6:	4638      	mov	r0, r7
 800aac8:	eb04 0803 	add.w	r8, r4, r3
 800aacc:	f000 f940 	bl	800ad50 <_sbrk_r>
 800aad0:	4580      	cmp	r8, r0
 800aad2:	d13a      	bne.n	800ab4a <_malloc_r+0xd2>
 800aad4:	6821      	ldr	r1, [r4, #0]
 800aad6:	3503      	adds	r5, #3
 800aad8:	1a6d      	subs	r5, r5, r1
 800aada:	f025 0503 	bic.w	r5, r5, #3
 800aade:	3508      	adds	r5, #8
 800aae0:	2d0c      	cmp	r5, #12
 800aae2:	bf38      	it	cc
 800aae4:	250c      	movcc	r5, #12
 800aae6:	4629      	mov	r1, r5
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff ffa5 	bl	800aa38 <sbrk_aligned>
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d02b      	beq.n	800ab4a <_malloc_r+0xd2>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	442b      	add	r3, r5
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	e00e      	b.n	800ab18 <_malloc_r+0xa0>
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	1b52      	subs	r2, r2, r5
 800aafe:	d41e      	bmi.n	800ab3e <_malloc_r+0xc6>
 800ab00:	2a0b      	cmp	r2, #11
 800ab02:	d916      	bls.n	800ab32 <_malloc_r+0xba>
 800ab04:	1961      	adds	r1, r4, r5
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	6025      	str	r5, [r4, #0]
 800ab0a:	bf18      	it	ne
 800ab0c:	6059      	strne	r1, [r3, #4]
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	bf08      	it	eq
 800ab12:	6031      	streq	r1, [r6, #0]
 800ab14:	5162      	str	r2, [r4, r5]
 800ab16:	604b      	str	r3, [r1, #4]
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f104 060b 	add.w	r6, r4, #11
 800ab1e:	f000 fbe3 	bl	800b2e8 <__malloc_unlock>
 800ab22:	f026 0607 	bic.w	r6, r6, #7
 800ab26:	1d23      	adds	r3, r4, #4
 800ab28:	1af2      	subs	r2, r6, r3
 800ab2a:	d0b6      	beq.n	800aa9a <_malloc_r+0x22>
 800ab2c:	1b9b      	subs	r3, r3, r6
 800ab2e:	50a3      	str	r3, [r4, r2]
 800ab30:	e7b3      	b.n	800aa9a <_malloc_r+0x22>
 800ab32:	6862      	ldr	r2, [r4, #4]
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	bf0c      	ite	eq
 800ab38:	6032      	streq	r2, [r6, #0]
 800ab3a:	605a      	strne	r2, [r3, #4]
 800ab3c:	e7ec      	b.n	800ab18 <_malloc_r+0xa0>
 800ab3e:	4623      	mov	r3, r4
 800ab40:	6864      	ldr	r4, [r4, #4]
 800ab42:	e7b2      	b.n	800aaaa <_malloc_r+0x32>
 800ab44:	4634      	mov	r4, r6
 800ab46:	6876      	ldr	r6, [r6, #4]
 800ab48:	e7b9      	b.n	800aabe <_malloc_r+0x46>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	603b      	str	r3, [r7, #0]
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f000 fbca 	bl	800b2e8 <__malloc_unlock>
 800ab54:	e7a1      	b.n	800aa9a <_malloc_r+0x22>
 800ab56:	6025      	str	r5, [r4, #0]
 800ab58:	e7de      	b.n	800ab18 <_malloc_r+0xa0>
 800ab5a:	bf00      	nop
 800ab5c:	2000932c 	.word	0x2000932c

0800ab60 <iprintf>:
 800ab60:	b40f      	push	{r0, r1, r2, r3}
 800ab62:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <iprintf+0x2c>)
 800ab64:	b513      	push	{r0, r1, r4, lr}
 800ab66:	681c      	ldr	r4, [r3, #0]
 800ab68:	b124      	cbz	r4, 800ab74 <iprintf+0x14>
 800ab6a:	69a3      	ldr	r3, [r4, #24]
 800ab6c:	b913      	cbnz	r3, 800ab74 <iprintf+0x14>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff fe1c 	bl	800a7ac <__sinit>
 800ab74:	ab05      	add	r3, sp, #20
 800ab76:	9a04      	ldr	r2, [sp, #16]
 800ab78:	68a1      	ldr	r1, [r4, #8]
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fbe3 	bl	800b348 <_vfiprintf_r>
 800ab82:	b002      	add	sp, #8
 800ab84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab88:	b004      	add	sp, #16
 800ab8a:	4770      	bx	lr
 800ab8c:	20000014 	.word	0x20000014

0800ab90 <_puts_r>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	460e      	mov	r6, r1
 800ab94:	4605      	mov	r5, r0
 800ab96:	b118      	cbz	r0, 800aba0 <_puts_r+0x10>
 800ab98:	6983      	ldr	r3, [r0, #24]
 800ab9a:	b90b      	cbnz	r3, 800aba0 <_puts_r+0x10>
 800ab9c:	f7ff fe06 	bl	800a7ac <__sinit>
 800aba0:	69ab      	ldr	r3, [r5, #24]
 800aba2:	68ac      	ldr	r4, [r5, #8]
 800aba4:	b913      	cbnz	r3, 800abac <_puts_r+0x1c>
 800aba6:	4628      	mov	r0, r5
 800aba8:	f7ff fe00 	bl	800a7ac <__sinit>
 800abac:	4b2c      	ldr	r3, [pc, #176]	; (800ac60 <_puts_r+0xd0>)
 800abae:	429c      	cmp	r4, r3
 800abb0:	d120      	bne.n	800abf4 <_puts_r+0x64>
 800abb2:	686c      	ldr	r4, [r5, #4]
 800abb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abb6:	07db      	lsls	r3, r3, #31
 800abb8:	d405      	bmi.n	800abc6 <_puts_r+0x36>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	0598      	lsls	r0, r3, #22
 800abbe:	d402      	bmi.n	800abc6 <_puts_r+0x36>
 800abc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc2:	f7f6 feab 	bl	800191c <__retarget_lock_acquire_recursive>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	0719      	lsls	r1, r3, #28
 800abca:	d51d      	bpl.n	800ac08 <_puts_r+0x78>
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	b1db      	cbz	r3, 800ac08 <_puts_r+0x78>
 800abd0:	3e01      	subs	r6, #1
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abd8:	3b01      	subs	r3, #1
 800abda:	60a3      	str	r3, [r4, #8]
 800abdc:	bb39      	cbnz	r1, 800ac2e <_puts_r+0x9e>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	da38      	bge.n	800ac54 <_puts_r+0xc4>
 800abe2:	4622      	mov	r2, r4
 800abe4:	210a      	movs	r1, #10
 800abe6:	4628      	mov	r0, r5
 800abe8:	f000 f95c 	bl	800aea4 <__swbuf_r>
 800abec:	3001      	adds	r0, #1
 800abee:	d011      	beq.n	800ac14 <_puts_r+0x84>
 800abf0:	250a      	movs	r5, #10
 800abf2:	e011      	b.n	800ac18 <_puts_r+0x88>
 800abf4:	4b1b      	ldr	r3, [pc, #108]	; (800ac64 <_puts_r+0xd4>)
 800abf6:	429c      	cmp	r4, r3
 800abf8:	d101      	bne.n	800abfe <_puts_r+0x6e>
 800abfa:	68ac      	ldr	r4, [r5, #8]
 800abfc:	e7da      	b.n	800abb4 <_puts_r+0x24>
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <_puts_r+0xd8>)
 800ac00:	429c      	cmp	r4, r3
 800ac02:	bf08      	it	eq
 800ac04:	68ec      	ldreq	r4, [r5, #12]
 800ac06:	e7d5      	b.n	800abb4 <_puts_r+0x24>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f000 f9ae 	bl	800af6c <__swsetup_r>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d0dd      	beq.n	800abd0 <_puts_r+0x40>
 800ac14:	f04f 35ff 	mov.w	r5, #4294967295
 800ac18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac1a:	07da      	lsls	r2, r3, #31
 800ac1c:	d405      	bmi.n	800ac2a <_puts_r+0x9a>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	059b      	lsls	r3, r3, #22
 800ac22:	d402      	bmi.n	800ac2a <_puts_r+0x9a>
 800ac24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac26:	f7f6 fe8d 	bl	8001944 <__retarget_lock_release_recursive>
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	bd70      	pop	{r4, r5, r6, pc}
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	da04      	bge.n	800ac3c <_puts_r+0xac>
 800ac32:	69a2      	ldr	r2, [r4, #24]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	dc06      	bgt.n	800ac46 <_puts_r+0xb6>
 800ac38:	290a      	cmp	r1, #10
 800ac3a:	d004      	beq.n	800ac46 <_puts_r+0xb6>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	6022      	str	r2, [r4, #0]
 800ac42:	7019      	strb	r1, [r3, #0]
 800ac44:	e7c5      	b.n	800abd2 <_puts_r+0x42>
 800ac46:	4622      	mov	r2, r4
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f000 f92b 	bl	800aea4 <__swbuf_r>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d1bf      	bne.n	800abd2 <_puts_r+0x42>
 800ac52:	e7df      	b.n	800ac14 <_puts_r+0x84>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	250a      	movs	r5, #10
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	6022      	str	r2, [r4, #0]
 800ac5c:	701d      	strb	r5, [r3, #0]
 800ac5e:	e7db      	b.n	800ac18 <_puts_r+0x88>
 800ac60:	0800bc3c 	.word	0x0800bc3c
 800ac64:	0800bc5c 	.word	0x0800bc5c
 800ac68:	0800bc1c 	.word	0x0800bc1c

0800ac6c <puts>:
 800ac6c:	4b02      	ldr	r3, [pc, #8]	; (800ac78 <puts+0xc>)
 800ac6e:	4601      	mov	r1, r0
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	f7ff bf8d 	b.w	800ab90 <_puts_r>
 800ac76:	bf00      	nop
 800ac78:	20000014 	.word	0x20000014

0800ac7c <cleanup_glue>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	460c      	mov	r4, r1
 800ac80:	6809      	ldr	r1, [r1, #0]
 800ac82:	4605      	mov	r5, r0
 800ac84:	b109      	cbz	r1, 800ac8a <cleanup_glue+0xe>
 800ac86:	f7ff fff9 	bl	800ac7c <cleanup_glue>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac92:	f7ff be85 	b.w	800a9a0 <_free_r>
	...

0800ac98 <_reclaim_reent>:
 800ac98:	4b2c      	ldr	r3, [pc, #176]	; (800ad4c <_reclaim_reent+0xb4>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4283      	cmp	r3, r0
 800ac9e:	b570      	push	{r4, r5, r6, lr}
 800aca0:	4604      	mov	r4, r0
 800aca2:	d051      	beq.n	800ad48 <_reclaim_reent+0xb0>
 800aca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aca6:	b143      	cbz	r3, 800acba <_reclaim_reent+0x22>
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d14a      	bne.n	800ad44 <_reclaim_reent+0xac>
 800acae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	b111      	cbz	r1, 800acba <_reclaim_reent+0x22>
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7ff fe73 	bl	800a9a0 <_free_r>
 800acba:	6961      	ldr	r1, [r4, #20]
 800acbc:	b111      	cbz	r1, 800acc4 <_reclaim_reent+0x2c>
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff fe6e 	bl	800a9a0 <_free_r>
 800acc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acc6:	b111      	cbz	r1, 800acce <_reclaim_reent+0x36>
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff fe69 	bl	800a9a0 <_free_r>
 800acce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800acd0:	b111      	cbz	r1, 800acd8 <_reclaim_reent+0x40>
 800acd2:	4620      	mov	r0, r4
 800acd4:	f7ff fe64 	bl	800a9a0 <_free_r>
 800acd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800acda:	b111      	cbz	r1, 800ace2 <_reclaim_reent+0x4a>
 800acdc:	4620      	mov	r0, r4
 800acde:	f7ff fe5f 	bl	800a9a0 <_free_r>
 800ace2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ace4:	b111      	cbz	r1, 800acec <_reclaim_reent+0x54>
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7ff fe5a 	bl	800a9a0 <_free_r>
 800acec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800acee:	b111      	cbz	r1, 800acf6 <_reclaim_reent+0x5e>
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7ff fe55 	bl	800a9a0 <_free_r>
 800acf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800acf8:	b111      	cbz	r1, 800ad00 <_reclaim_reent+0x68>
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7ff fe50 	bl	800a9a0 <_free_r>
 800ad00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad02:	b111      	cbz	r1, 800ad0a <_reclaim_reent+0x72>
 800ad04:	4620      	mov	r0, r4
 800ad06:	f7ff fe4b 	bl	800a9a0 <_free_r>
 800ad0a:	69a3      	ldr	r3, [r4, #24]
 800ad0c:	b1e3      	cbz	r3, 800ad48 <_reclaim_reent+0xb0>
 800ad0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad10:	4620      	mov	r0, r4
 800ad12:	4798      	blx	r3
 800ad14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad16:	b1b9      	cbz	r1, 800ad48 <_reclaim_reent+0xb0>
 800ad18:	4620      	mov	r0, r4
 800ad1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad1e:	f7ff bfad 	b.w	800ac7c <cleanup_glue>
 800ad22:	5949      	ldr	r1, [r1, r5]
 800ad24:	b941      	cbnz	r1, 800ad38 <_reclaim_reent+0xa0>
 800ad26:	3504      	adds	r5, #4
 800ad28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad2a:	2d80      	cmp	r5, #128	; 0x80
 800ad2c:	68d9      	ldr	r1, [r3, #12]
 800ad2e:	d1f8      	bne.n	800ad22 <_reclaim_reent+0x8a>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f7ff fe35 	bl	800a9a0 <_free_r>
 800ad36:	e7ba      	b.n	800acae <_reclaim_reent+0x16>
 800ad38:	680e      	ldr	r6, [r1, #0]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f7ff fe30 	bl	800a9a0 <_free_r>
 800ad40:	4631      	mov	r1, r6
 800ad42:	e7ef      	b.n	800ad24 <_reclaim_reent+0x8c>
 800ad44:	2500      	movs	r5, #0
 800ad46:	e7ef      	b.n	800ad28 <_reclaim_reent+0x90>
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000014 	.word	0x20000014

0800ad50 <_sbrk_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d06      	ldr	r5, [pc, #24]	; (800ad6c <_sbrk_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	f7f6 fbe4 	bl	8001528 <_sbrk>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_sbrk_r+0x1a>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_sbrk_r+0x1a>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20009334 	.word	0x20009334

0800ad70 <_raise_r>:
 800ad70:	291f      	cmp	r1, #31
 800ad72:	b538      	push	{r3, r4, r5, lr}
 800ad74:	4604      	mov	r4, r0
 800ad76:	460d      	mov	r5, r1
 800ad78:	d904      	bls.n	800ad84 <_raise_r+0x14>
 800ad7a:	2316      	movs	r3, #22
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad86:	b112      	cbz	r2, 800ad8e <_raise_r+0x1e>
 800ad88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad8c:	b94b      	cbnz	r3, 800ada2 <_raise_r+0x32>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f830 	bl	800adf4 <_getpid_r>
 800ad94:	462a      	mov	r2, r5
 800ad96:	4601      	mov	r1, r0
 800ad98:	4620      	mov	r0, r4
 800ad9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad9e:	f000 b817 	b.w	800add0 <_kill_r>
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d00a      	beq.n	800adbc <_raise_r+0x4c>
 800ada6:	1c59      	adds	r1, r3, #1
 800ada8:	d103      	bne.n	800adb2 <_raise_r+0x42>
 800adaa:	2316      	movs	r3, #22
 800adac:	6003      	str	r3, [r0, #0]
 800adae:	2001      	movs	r0, #1
 800adb0:	e7e7      	b.n	800ad82 <_raise_r+0x12>
 800adb2:	2400      	movs	r4, #0
 800adb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adb8:	4628      	mov	r0, r5
 800adba:	4798      	blx	r3
 800adbc:	2000      	movs	r0, #0
 800adbe:	e7e0      	b.n	800ad82 <_raise_r+0x12>

0800adc0 <raise>:
 800adc0:	4b02      	ldr	r3, [pc, #8]	; (800adcc <raise+0xc>)
 800adc2:	4601      	mov	r1, r0
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f7ff bfd3 	b.w	800ad70 <_raise_r>
 800adca:	bf00      	nop
 800adcc:	20000014 	.word	0x20000014

0800add0 <_kill_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	; (800adf0 <_kill_r+0x20>)
 800add4:	2300      	movs	r3, #0
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	4611      	mov	r1, r2
 800addc:	602b      	str	r3, [r5, #0]
 800adde:	f7f6 fb1b 	bl	8001418 <_kill>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	d102      	bne.n	800adec <_kill_r+0x1c>
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	b103      	cbz	r3, 800adec <_kill_r+0x1c>
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	bd38      	pop	{r3, r4, r5, pc}
 800adee:	bf00      	nop
 800adf0:	20009334 	.word	0x20009334

0800adf4 <_getpid_r>:
 800adf4:	f7f6 bb08 	b.w	8001408 <_getpid>

0800adf8 <__sread>:
 800adf8:	b510      	push	{r4, lr}
 800adfa:	460c      	mov	r4, r1
 800adfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae00:	f000 fd66 	bl	800b8d0 <_read_r>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	bfab      	itete	ge
 800ae08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae0c:	181b      	addge	r3, r3, r0
 800ae0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae12:	bfac      	ite	ge
 800ae14:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae16:	81a3      	strhlt	r3, [r4, #12]
 800ae18:	bd10      	pop	{r4, pc}

0800ae1a <__swrite>:
 800ae1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1e:	461f      	mov	r7, r3
 800ae20:	898b      	ldrh	r3, [r1, #12]
 800ae22:	05db      	lsls	r3, r3, #23
 800ae24:	4605      	mov	r5, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	4616      	mov	r6, r2
 800ae2a:	d505      	bpl.n	800ae38 <__swrite+0x1e>
 800ae2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae30:	2302      	movs	r3, #2
 800ae32:	2200      	movs	r2, #0
 800ae34:	f000 f9da 	bl	800b1ec <_lseek_r>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	4632      	mov	r2, r6
 800ae46:	463b      	mov	r3, r7
 800ae48:	4628      	mov	r0, r5
 800ae4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4e:	f000 b87b 	b.w	800af48 <_write_r>

0800ae52 <__sseek>:
 800ae52:	b510      	push	{r4, lr}
 800ae54:	460c      	mov	r4, r1
 800ae56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae5a:	f000 f9c7 	bl	800b1ec <_lseek_r>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	bf15      	itete	ne
 800ae64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae6e:	81a3      	strheq	r3, [r4, #12]
 800ae70:	bf18      	it	ne
 800ae72:	81a3      	strhne	r3, [r4, #12]
 800ae74:	bd10      	pop	{r4, pc}

0800ae76 <__sclose>:
 800ae76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7a:	f000 b8e5 	b.w	800b048 <_close_r>

0800ae7e <strncpy>:
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	3901      	subs	r1, #1
 800ae82:	4603      	mov	r3, r0
 800ae84:	b132      	cbz	r2, 800ae94 <strncpy+0x16>
 800ae86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae8a:	f803 4b01 	strb.w	r4, [r3], #1
 800ae8e:	3a01      	subs	r2, #1
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	d1f7      	bne.n	800ae84 <strncpy+0x6>
 800ae94:	441a      	add	r2, r3
 800ae96:	2100      	movs	r1, #0
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d100      	bne.n	800ae9e <strncpy+0x20>
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	f803 1b01 	strb.w	r1, [r3], #1
 800aea2:	e7f9      	b.n	800ae98 <strncpy+0x1a>

0800aea4 <__swbuf_r>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	460e      	mov	r6, r1
 800aea8:	4614      	mov	r4, r2
 800aeaa:	4605      	mov	r5, r0
 800aeac:	b118      	cbz	r0, 800aeb6 <__swbuf_r+0x12>
 800aeae:	6983      	ldr	r3, [r0, #24]
 800aeb0:	b90b      	cbnz	r3, 800aeb6 <__swbuf_r+0x12>
 800aeb2:	f7ff fc7b 	bl	800a7ac <__sinit>
 800aeb6:	4b21      	ldr	r3, [pc, #132]	; (800af3c <__swbuf_r+0x98>)
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	d12b      	bne.n	800af14 <__swbuf_r+0x70>
 800aebc:	686c      	ldr	r4, [r5, #4]
 800aebe:	69a3      	ldr	r3, [r4, #24]
 800aec0:	60a3      	str	r3, [r4, #8]
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	071a      	lsls	r2, r3, #28
 800aec6:	d52f      	bpl.n	800af28 <__swbuf_r+0x84>
 800aec8:	6923      	ldr	r3, [r4, #16]
 800aeca:	b36b      	cbz	r3, 800af28 <__swbuf_r+0x84>
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	6820      	ldr	r0, [r4, #0]
 800aed0:	1ac0      	subs	r0, r0, r3
 800aed2:	6963      	ldr	r3, [r4, #20]
 800aed4:	b2f6      	uxtb	r6, r6
 800aed6:	4283      	cmp	r3, r0
 800aed8:	4637      	mov	r7, r6
 800aeda:	dc04      	bgt.n	800aee6 <__swbuf_r+0x42>
 800aedc:	4621      	mov	r1, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	f000 f948 	bl	800b174 <_fflush_r>
 800aee4:	bb30      	cbnz	r0, 800af34 <__swbuf_r+0x90>
 800aee6:	68a3      	ldr	r3, [r4, #8]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	60a3      	str	r3, [r4, #8]
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	6022      	str	r2, [r4, #0]
 800aef2:	701e      	strb	r6, [r3, #0]
 800aef4:	6963      	ldr	r3, [r4, #20]
 800aef6:	3001      	adds	r0, #1
 800aef8:	4283      	cmp	r3, r0
 800aefa:	d004      	beq.n	800af06 <__swbuf_r+0x62>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	07db      	lsls	r3, r3, #31
 800af00:	d506      	bpl.n	800af10 <__swbuf_r+0x6c>
 800af02:	2e0a      	cmp	r6, #10
 800af04:	d104      	bne.n	800af10 <__swbuf_r+0x6c>
 800af06:	4621      	mov	r1, r4
 800af08:	4628      	mov	r0, r5
 800af0a:	f000 f933 	bl	800b174 <_fflush_r>
 800af0e:	b988      	cbnz	r0, 800af34 <__swbuf_r+0x90>
 800af10:	4638      	mov	r0, r7
 800af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af14:	4b0a      	ldr	r3, [pc, #40]	; (800af40 <__swbuf_r+0x9c>)
 800af16:	429c      	cmp	r4, r3
 800af18:	d101      	bne.n	800af1e <__swbuf_r+0x7a>
 800af1a:	68ac      	ldr	r4, [r5, #8]
 800af1c:	e7cf      	b.n	800aebe <__swbuf_r+0x1a>
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <__swbuf_r+0xa0>)
 800af20:	429c      	cmp	r4, r3
 800af22:	bf08      	it	eq
 800af24:	68ec      	ldreq	r4, [r5, #12]
 800af26:	e7ca      	b.n	800aebe <__swbuf_r+0x1a>
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f81e 	bl	800af6c <__swsetup_r>
 800af30:	2800      	cmp	r0, #0
 800af32:	d0cb      	beq.n	800aecc <__swbuf_r+0x28>
 800af34:	f04f 37ff 	mov.w	r7, #4294967295
 800af38:	e7ea      	b.n	800af10 <__swbuf_r+0x6c>
 800af3a:	bf00      	nop
 800af3c:	0800bc3c 	.word	0x0800bc3c
 800af40:	0800bc5c 	.word	0x0800bc5c
 800af44:	0800bc1c 	.word	0x0800bc1c

0800af48 <_write_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d07      	ldr	r5, [pc, #28]	; (800af68 <_write_r+0x20>)
 800af4c:	4604      	mov	r4, r0
 800af4e:	4608      	mov	r0, r1
 800af50:	4611      	mov	r1, r2
 800af52:	2200      	movs	r2, #0
 800af54:	602a      	str	r2, [r5, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	f7f6 fa95 	bl	8001486 <_write>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_write_r+0x1e>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_write_r+0x1e>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	20009334 	.word	0x20009334

0800af6c <__swsetup_r>:
 800af6c:	4b32      	ldr	r3, [pc, #200]	; (800b038 <__swsetup_r+0xcc>)
 800af6e:	b570      	push	{r4, r5, r6, lr}
 800af70:	681d      	ldr	r5, [r3, #0]
 800af72:	4606      	mov	r6, r0
 800af74:	460c      	mov	r4, r1
 800af76:	b125      	cbz	r5, 800af82 <__swsetup_r+0x16>
 800af78:	69ab      	ldr	r3, [r5, #24]
 800af7a:	b913      	cbnz	r3, 800af82 <__swsetup_r+0x16>
 800af7c:	4628      	mov	r0, r5
 800af7e:	f7ff fc15 	bl	800a7ac <__sinit>
 800af82:	4b2e      	ldr	r3, [pc, #184]	; (800b03c <__swsetup_r+0xd0>)
 800af84:	429c      	cmp	r4, r3
 800af86:	d10f      	bne.n	800afa8 <__swsetup_r+0x3c>
 800af88:	686c      	ldr	r4, [r5, #4]
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af90:	0719      	lsls	r1, r3, #28
 800af92:	d42c      	bmi.n	800afee <__swsetup_r+0x82>
 800af94:	06dd      	lsls	r5, r3, #27
 800af96:	d411      	bmi.n	800afbc <__swsetup_r+0x50>
 800af98:	2309      	movs	r3, #9
 800af9a:	6033      	str	r3, [r6, #0]
 800af9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	f04f 30ff 	mov.w	r0, #4294967295
 800afa6:	e03e      	b.n	800b026 <__swsetup_r+0xba>
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <__swsetup_r+0xd4>)
 800afaa:	429c      	cmp	r4, r3
 800afac:	d101      	bne.n	800afb2 <__swsetup_r+0x46>
 800afae:	68ac      	ldr	r4, [r5, #8]
 800afb0:	e7eb      	b.n	800af8a <__swsetup_r+0x1e>
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <__swsetup_r+0xd8>)
 800afb4:	429c      	cmp	r4, r3
 800afb6:	bf08      	it	eq
 800afb8:	68ec      	ldreq	r4, [r5, #12]
 800afba:	e7e6      	b.n	800af8a <__swsetup_r+0x1e>
 800afbc:	0758      	lsls	r0, r3, #29
 800afbe:	d512      	bpl.n	800afe6 <__swsetup_r+0x7a>
 800afc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afc2:	b141      	cbz	r1, 800afd6 <__swsetup_r+0x6a>
 800afc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afc8:	4299      	cmp	r1, r3
 800afca:	d002      	beq.n	800afd2 <__swsetup_r+0x66>
 800afcc:	4630      	mov	r0, r6
 800afce:	f7ff fce7 	bl	800a9a0 <_free_r>
 800afd2:	2300      	movs	r3, #0
 800afd4:	6363      	str	r3, [r4, #52]	; 0x34
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	2300      	movs	r3, #0
 800afe0:	6063      	str	r3, [r4, #4]
 800afe2:	6923      	ldr	r3, [r4, #16]
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	f043 0308 	orr.w	r3, r3, #8
 800afec:	81a3      	strh	r3, [r4, #12]
 800afee:	6923      	ldr	r3, [r4, #16]
 800aff0:	b94b      	cbnz	r3, 800b006 <__swsetup_r+0x9a>
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800affc:	d003      	beq.n	800b006 <__swsetup_r+0x9a>
 800affe:	4621      	mov	r1, r4
 800b000:	4630      	mov	r0, r6
 800b002:	f000 f92b 	bl	800b25c <__smakebuf_r>
 800b006:	89a0      	ldrh	r0, [r4, #12]
 800b008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b00c:	f010 0301 	ands.w	r3, r0, #1
 800b010:	d00a      	beq.n	800b028 <__swsetup_r+0xbc>
 800b012:	2300      	movs	r3, #0
 800b014:	60a3      	str	r3, [r4, #8]
 800b016:	6963      	ldr	r3, [r4, #20]
 800b018:	425b      	negs	r3, r3
 800b01a:	61a3      	str	r3, [r4, #24]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	b943      	cbnz	r3, 800b032 <__swsetup_r+0xc6>
 800b020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b024:	d1ba      	bne.n	800af9c <__swsetup_r+0x30>
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	0781      	lsls	r1, r0, #30
 800b02a:	bf58      	it	pl
 800b02c:	6963      	ldrpl	r3, [r4, #20]
 800b02e:	60a3      	str	r3, [r4, #8]
 800b030:	e7f4      	b.n	800b01c <__swsetup_r+0xb0>
 800b032:	2000      	movs	r0, #0
 800b034:	e7f7      	b.n	800b026 <__swsetup_r+0xba>
 800b036:	bf00      	nop
 800b038:	20000014 	.word	0x20000014
 800b03c:	0800bc3c 	.word	0x0800bc3c
 800b040:	0800bc5c 	.word	0x0800bc5c
 800b044:	0800bc1c 	.word	0x0800bc1c

0800b048 <_close_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d06      	ldr	r5, [pc, #24]	; (800b064 <_close_r+0x1c>)
 800b04c:	2300      	movs	r3, #0
 800b04e:	4604      	mov	r4, r0
 800b050:	4608      	mov	r0, r1
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	f7f6 fa33 	bl	80014be <_close>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d102      	bne.n	800b062 <_close_r+0x1a>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	b103      	cbz	r3, 800b062 <_close_r+0x1a>
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	20009334 	.word	0x20009334

0800b068 <__sflush_r>:
 800b068:	898a      	ldrh	r2, [r1, #12]
 800b06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	4605      	mov	r5, r0
 800b070:	0710      	lsls	r0, r2, #28
 800b072:	460c      	mov	r4, r1
 800b074:	d458      	bmi.n	800b128 <__sflush_r+0xc0>
 800b076:	684b      	ldr	r3, [r1, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dc05      	bgt.n	800b088 <__sflush_r+0x20>
 800b07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b07e:	2b00      	cmp	r3, #0
 800b080:	dc02      	bgt.n	800b088 <__sflush_r+0x20>
 800b082:	2000      	movs	r0, #0
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d0f9      	beq.n	800b082 <__sflush_r+0x1a>
 800b08e:	2300      	movs	r3, #0
 800b090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b094:	682f      	ldr	r7, [r5, #0]
 800b096:	602b      	str	r3, [r5, #0]
 800b098:	d032      	beq.n	800b100 <__sflush_r+0x98>
 800b09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	075a      	lsls	r2, r3, #29
 800b0a0:	d505      	bpl.n	800b0ae <__sflush_r+0x46>
 800b0a2:	6863      	ldr	r3, [r4, #4]
 800b0a4:	1ac0      	subs	r0, r0, r3
 800b0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0a8:	b10b      	cbz	r3, 800b0ae <__sflush_r+0x46>
 800b0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0ac:	1ac0      	subs	r0, r0, r3
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0b4:	6a21      	ldr	r1, [r4, #32]
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b0      	blx	r6
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	d106      	bne.n	800b0ce <__sflush_r+0x66>
 800b0c0:	6829      	ldr	r1, [r5, #0]
 800b0c2:	291d      	cmp	r1, #29
 800b0c4:	d82c      	bhi.n	800b120 <__sflush_r+0xb8>
 800b0c6:	4a2a      	ldr	r2, [pc, #168]	; (800b170 <__sflush_r+0x108>)
 800b0c8:	40ca      	lsrs	r2, r1
 800b0ca:	07d6      	lsls	r6, r2, #31
 800b0cc:	d528      	bpl.n	800b120 <__sflush_r+0xb8>
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	6062      	str	r2, [r4, #4]
 800b0d2:	04d9      	lsls	r1, r3, #19
 800b0d4:	6922      	ldr	r2, [r4, #16]
 800b0d6:	6022      	str	r2, [r4, #0]
 800b0d8:	d504      	bpl.n	800b0e4 <__sflush_r+0x7c>
 800b0da:	1c42      	adds	r2, r0, #1
 800b0dc:	d101      	bne.n	800b0e2 <__sflush_r+0x7a>
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	b903      	cbnz	r3, 800b0e4 <__sflush_r+0x7c>
 800b0e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0e6:	602f      	str	r7, [r5, #0]
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	d0ca      	beq.n	800b082 <__sflush_r+0x1a>
 800b0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	d002      	beq.n	800b0fa <__sflush_r+0x92>
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7ff fc53 	bl	800a9a0 <_free_r>
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b0fe:	e7c1      	b.n	800b084 <__sflush_r+0x1c>
 800b100:	6a21      	ldr	r1, [r4, #32]
 800b102:	2301      	movs	r3, #1
 800b104:	4628      	mov	r0, r5
 800b106:	47b0      	blx	r6
 800b108:	1c41      	adds	r1, r0, #1
 800b10a:	d1c7      	bne.n	800b09c <__sflush_r+0x34>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0c4      	beq.n	800b09c <__sflush_r+0x34>
 800b112:	2b1d      	cmp	r3, #29
 800b114:	d001      	beq.n	800b11a <__sflush_r+0xb2>
 800b116:	2b16      	cmp	r3, #22
 800b118:	d101      	bne.n	800b11e <__sflush_r+0xb6>
 800b11a:	602f      	str	r7, [r5, #0]
 800b11c:	e7b1      	b.n	800b082 <__sflush_r+0x1a>
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b124:	81a3      	strh	r3, [r4, #12]
 800b126:	e7ad      	b.n	800b084 <__sflush_r+0x1c>
 800b128:	690f      	ldr	r7, [r1, #16]
 800b12a:	2f00      	cmp	r7, #0
 800b12c:	d0a9      	beq.n	800b082 <__sflush_r+0x1a>
 800b12e:	0793      	lsls	r3, r2, #30
 800b130:	680e      	ldr	r6, [r1, #0]
 800b132:	bf08      	it	eq
 800b134:	694b      	ldreq	r3, [r1, #20]
 800b136:	600f      	str	r7, [r1, #0]
 800b138:	bf18      	it	ne
 800b13a:	2300      	movne	r3, #0
 800b13c:	eba6 0807 	sub.w	r8, r6, r7
 800b140:	608b      	str	r3, [r1, #8]
 800b142:	f1b8 0f00 	cmp.w	r8, #0
 800b146:	dd9c      	ble.n	800b082 <__sflush_r+0x1a>
 800b148:	6a21      	ldr	r1, [r4, #32]
 800b14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b14c:	4643      	mov	r3, r8
 800b14e:	463a      	mov	r2, r7
 800b150:	4628      	mov	r0, r5
 800b152:	47b0      	blx	r6
 800b154:	2800      	cmp	r0, #0
 800b156:	dc06      	bgt.n	800b166 <__sflush_r+0xfe>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	f04f 30ff 	mov.w	r0, #4294967295
 800b164:	e78e      	b.n	800b084 <__sflush_r+0x1c>
 800b166:	4407      	add	r7, r0
 800b168:	eba8 0800 	sub.w	r8, r8, r0
 800b16c:	e7e9      	b.n	800b142 <__sflush_r+0xda>
 800b16e:	bf00      	nop
 800b170:	20400001 	.word	0x20400001

0800b174 <_fflush_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	4605      	mov	r5, r0
 800b17a:	460c      	mov	r4, r1
 800b17c:	b913      	cbnz	r3, 800b184 <_fflush_r+0x10>
 800b17e:	2500      	movs	r5, #0
 800b180:	4628      	mov	r0, r5
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	b118      	cbz	r0, 800b18e <_fflush_r+0x1a>
 800b186:	6983      	ldr	r3, [r0, #24]
 800b188:	b90b      	cbnz	r3, 800b18e <_fflush_r+0x1a>
 800b18a:	f7ff fb0f 	bl	800a7ac <__sinit>
 800b18e:	4b14      	ldr	r3, [pc, #80]	; (800b1e0 <_fflush_r+0x6c>)
 800b190:	429c      	cmp	r4, r3
 800b192:	d11b      	bne.n	800b1cc <_fflush_r+0x58>
 800b194:	686c      	ldr	r4, [r5, #4]
 800b196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0ef      	beq.n	800b17e <_fflush_r+0xa>
 800b19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1a0:	07d0      	lsls	r0, r2, #31
 800b1a2:	d404      	bmi.n	800b1ae <_fflush_r+0x3a>
 800b1a4:	0599      	lsls	r1, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_fflush_r+0x3a>
 800b1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1aa:	f7f6 fbb7 	bl	800191c <__retarget_lock_acquire_recursive>
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	f7ff ff59 	bl	800b068 <__sflush_r>
 800b1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1b8:	07da      	lsls	r2, r3, #31
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	d4e0      	bmi.n	800b180 <_fflush_r+0xc>
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	059b      	lsls	r3, r3, #22
 800b1c2:	d4dd      	bmi.n	800b180 <_fflush_r+0xc>
 800b1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1c6:	f7f6 fbbd 	bl	8001944 <__retarget_lock_release_recursive>
 800b1ca:	e7d9      	b.n	800b180 <_fflush_r+0xc>
 800b1cc:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <_fflush_r+0x70>)
 800b1ce:	429c      	cmp	r4, r3
 800b1d0:	d101      	bne.n	800b1d6 <_fflush_r+0x62>
 800b1d2:	68ac      	ldr	r4, [r5, #8]
 800b1d4:	e7df      	b.n	800b196 <_fflush_r+0x22>
 800b1d6:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <_fflush_r+0x74>)
 800b1d8:	429c      	cmp	r4, r3
 800b1da:	bf08      	it	eq
 800b1dc:	68ec      	ldreq	r4, [r5, #12]
 800b1de:	e7da      	b.n	800b196 <_fflush_r+0x22>
 800b1e0:	0800bc3c 	.word	0x0800bc3c
 800b1e4:	0800bc5c 	.word	0x0800bc5c
 800b1e8:	0800bc1c 	.word	0x0800bc1c

0800b1ec <_lseek_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d07      	ldr	r5, [pc, #28]	; (800b20c <_lseek_r+0x20>)
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	4608      	mov	r0, r1
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	602a      	str	r2, [r5, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f7f6 f986 	bl	800150c <_lseek>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_lseek_r+0x1e>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	b103      	cbz	r3, 800b20a <_lseek_r+0x1e>
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	20009334 	.word	0x20009334

0800b210 <__swhatbuf_r>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	460e      	mov	r6, r1
 800b214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b218:	2900      	cmp	r1, #0
 800b21a:	b096      	sub	sp, #88	; 0x58
 800b21c:	4614      	mov	r4, r2
 800b21e:	461d      	mov	r5, r3
 800b220:	da08      	bge.n	800b234 <__swhatbuf_r+0x24>
 800b222:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	602a      	str	r2, [r5, #0]
 800b22a:	061a      	lsls	r2, r3, #24
 800b22c:	d410      	bmi.n	800b250 <__swhatbuf_r+0x40>
 800b22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b232:	e00e      	b.n	800b252 <__swhatbuf_r+0x42>
 800b234:	466a      	mov	r2, sp
 800b236:	f000 fb5d 	bl	800b8f4 <_fstat_r>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	dbf1      	blt.n	800b222 <__swhatbuf_r+0x12>
 800b23e:	9a01      	ldr	r2, [sp, #4]
 800b240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b248:	425a      	negs	r2, r3
 800b24a:	415a      	adcs	r2, r3
 800b24c:	602a      	str	r2, [r5, #0]
 800b24e:	e7ee      	b.n	800b22e <__swhatbuf_r+0x1e>
 800b250:	2340      	movs	r3, #64	; 0x40
 800b252:	2000      	movs	r0, #0
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	b016      	add	sp, #88	; 0x58
 800b258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b25c <__smakebuf_r>:
 800b25c:	898b      	ldrh	r3, [r1, #12]
 800b25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b260:	079d      	lsls	r5, r3, #30
 800b262:	4606      	mov	r6, r0
 800b264:	460c      	mov	r4, r1
 800b266:	d507      	bpl.n	800b278 <__smakebuf_r+0x1c>
 800b268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	2301      	movs	r3, #1
 800b272:	6163      	str	r3, [r4, #20]
 800b274:	b002      	add	sp, #8
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	ab01      	add	r3, sp, #4
 800b27a:	466a      	mov	r2, sp
 800b27c:	f7ff ffc8 	bl	800b210 <__swhatbuf_r>
 800b280:	9900      	ldr	r1, [sp, #0]
 800b282:	4605      	mov	r5, r0
 800b284:	4630      	mov	r0, r6
 800b286:	f7ff fbf7 	bl	800aa78 <_malloc_r>
 800b28a:	b948      	cbnz	r0, 800b2a0 <__smakebuf_r+0x44>
 800b28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b290:	059a      	lsls	r2, r3, #22
 800b292:	d4ef      	bmi.n	800b274 <__smakebuf_r+0x18>
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	f043 0302 	orr.w	r3, r3, #2
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	e7e3      	b.n	800b268 <__smakebuf_r+0xc>
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <__smakebuf_r+0x7c>)
 800b2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	6163      	str	r3, [r4, #20]
 800b2b2:	9b01      	ldr	r3, [sp, #4]
 800b2b4:	6120      	str	r0, [r4, #16]
 800b2b6:	b15b      	cbz	r3, 800b2d0 <__smakebuf_r+0x74>
 800b2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f000 fb2b 	bl	800b918 <_isatty_r>
 800b2c2:	b128      	cbz	r0, 800b2d0 <__smakebuf_r+0x74>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	f043 0301 	orr.w	r3, r3, #1
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	89a0      	ldrh	r0, [r4, #12]
 800b2d2:	4305      	orrs	r5, r0
 800b2d4:	81a5      	strh	r5, [r4, #12]
 800b2d6:	e7cd      	b.n	800b274 <__smakebuf_r+0x18>
 800b2d8:	0800a745 	.word	0x0800a745

0800b2dc <__malloc_lock>:
 800b2dc:	4801      	ldr	r0, [pc, #4]	; (800b2e4 <__malloc_lock+0x8>)
 800b2de:	f7f6 bb1d 	b.w	800191c <__retarget_lock_acquire_recursive>
 800b2e2:	bf00      	nop
 800b2e4:	200008d8 	.word	0x200008d8

0800b2e8 <__malloc_unlock>:
 800b2e8:	4801      	ldr	r0, [pc, #4]	; (800b2f0 <__malloc_unlock+0x8>)
 800b2ea:	f7f6 bb2b 	b.w	8001944 <__retarget_lock_release_recursive>
 800b2ee:	bf00      	nop
 800b2f0:	200008d8 	.word	0x200008d8

0800b2f4 <__sfputc_r>:
 800b2f4:	6893      	ldr	r3, [r2, #8]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	b410      	push	{r4}
 800b2fc:	6093      	str	r3, [r2, #8]
 800b2fe:	da08      	bge.n	800b312 <__sfputc_r+0x1e>
 800b300:	6994      	ldr	r4, [r2, #24]
 800b302:	42a3      	cmp	r3, r4
 800b304:	db01      	blt.n	800b30a <__sfputc_r+0x16>
 800b306:	290a      	cmp	r1, #10
 800b308:	d103      	bne.n	800b312 <__sfputc_r+0x1e>
 800b30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b30e:	f7ff bdc9 	b.w	800aea4 <__swbuf_r>
 800b312:	6813      	ldr	r3, [r2, #0]
 800b314:	1c58      	adds	r0, r3, #1
 800b316:	6010      	str	r0, [r2, #0]
 800b318:	7019      	strb	r1, [r3, #0]
 800b31a:	4608      	mov	r0, r1
 800b31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <__sfputs_r>:
 800b322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b324:	4606      	mov	r6, r0
 800b326:	460f      	mov	r7, r1
 800b328:	4614      	mov	r4, r2
 800b32a:	18d5      	adds	r5, r2, r3
 800b32c:	42ac      	cmp	r4, r5
 800b32e:	d101      	bne.n	800b334 <__sfputs_r+0x12>
 800b330:	2000      	movs	r0, #0
 800b332:	e007      	b.n	800b344 <__sfputs_r+0x22>
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	463a      	mov	r2, r7
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ffda 	bl	800b2f4 <__sfputc_r>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d1f3      	bne.n	800b32c <__sfputs_r+0xa>
 800b344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b348 <_vfiprintf_r>:
 800b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	460d      	mov	r5, r1
 800b34e:	b09d      	sub	sp, #116	; 0x74
 800b350:	4614      	mov	r4, r2
 800b352:	4698      	mov	r8, r3
 800b354:	4606      	mov	r6, r0
 800b356:	b118      	cbz	r0, 800b360 <_vfiprintf_r+0x18>
 800b358:	6983      	ldr	r3, [r0, #24]
 800b35a:	b90b      	cbnz	r3, 800b360 <_vfiprintf_r+0x18>
 800b35c:	f7ff fa26 	bl	800a7ac <__sinit>
 800b360:	4b89      	ldr	r3, [pc, #548]	; (800b588 <_vfiprintf_r+0x240>)
 800b362:	429d      	cmp	r5, r3
 800b364:	d11b      	bne.n	800b39e <_vfiprintf_r+0x56>
 800b366:	6875      	ldr	r5, [r6, #4]
 800b368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b36a:	07d9      	lsls	r1, r3, #31
 800b36c:	d405      	bmi.n	800b37a <_vfiprintf_r+0x32>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	059a      	lsls	r2, r3, #22
 800b372:	d402      	bmi.n	800b37a <_vfiprintf_r+0x32>
 800b374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b376:	f7f6 fad1 	bl	800191c <__retarget_lock_acquire_recursive>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	071b      	lsls	r3, r3, #28
 800b37e:	d501      	bpl.n	800b384 <_vfiprintf_r+0x3c>
 800b380:	692b      	ldr	r3, [r5, #16]
 800b382:	b9eb      	cbnz	r3, 800b3c0 <_vfiprintf_r+0x78>
 800b384:	4629      	mov	r1, r5
 800b386:	4630      	mov	r0, r6
 800b388:	f7ff fdf0 	bl	800af6c <__swsetup_r>
 800b38c:	b1c0      	cbz	r0, 800b3c0 <_vfiprintf_r+0x78>
 800b38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b390:	07dc      	lsls	r4, r3, #31
 800b392:	d50e      	bpl.n	800b3b2 <_vfiprintf_r+0x6a>
 800b394:	f04f 30ff 	mov.w	r0, #4294967295
 800b398:	b01d      	add	sp, #116	; 0x74
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39e:	4b7b      	ldr	r3, [pc, #492]	; (800b58c <_vfiprintf_r+0x244>)
 800b3a0:	429d      	cmp	r5, r3
 800b3a2:	d101      	bne.n	800b3a8 <_vfiprintf_r+0x60>
 800b3a4:	68b5      	ldr	r5, [r6, #8]
 800b3a6:	e7df      	b.n	800b368 <_vfiprintf_r+0x20>
 800b3a8:	4b79      	ldr	r3, [pc, #484]	; (800b590 <_vfiprintf_r+0x248>)
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	bf08      	it	eq
 800b3ae:	68f5      	ldreq	r5, [r6, #12]
 800b3b0:	e7da      	b.n	800b368 <_vfiprintf_r+0x20>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	0598      	lsls	r0, r3, #22
 800b3b6:	d4ed      	bmi.n	800b394 <_vfiprintf_r+0x4c>
 800b3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ba:	f7f6 fac3 	bl	8001944 <__retarget_lock_release_recursive>
 800b3be:	e7e9      	b.n	800b394 <_vfiprintf_r+0x4c>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c4:	2320      	movs	r3, #32
 800b3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ce:	2330      	movs	r3, #48	; 0x30
 800b3d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b594 <_vfiprintf_r+0x24c>
 800b3d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3d8:	f04f 0901 	mov.w	r9, #1
 800b3dc:	4623      	mov	r3, r4
 800b3de:	469a      	mov	sl, r3
 800b3e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e4:	b10a      	cbz	r2, 800b3ea <_vfiprintf_r+0xa2>
 800b3e6:	2a25      	cmp	r2, #37	; 0x25
 800b3e8:	d1f9      	bne.n	800b3de <_vfiprintf_r+0x96>
 800b3ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ee:	d00b      	beq.n	800b408 <_vfiprintf_r+0xc0>
 800b3f0:	465b      	mov	r3, fp
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ff93 	bl	800b322 <__sfputs_r>
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	f000 80aa 	beq.w	800b556 <_vfiprintf_r+0x20e>
 800b402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b404:	445a      	add	r2, fp
 800b406:	9209      	str	r2, [sp, #36]	; 0x24
 800b408:	f89a 3000 	ldrb.w	r3, [sl]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80a2 	beq.w	800b556 <_vfiprintf_r+0x20e>
 800b412:	2300      	movs	r3, #0
 800b414:	f04f 32ff 	mov.w	r2, #4294967295
 800b418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b41c:	f10a 0a01 	add.w	sl, sl, #1
 800b420:	9304      	str	r3, [sp, #16]
 800b422:	9307      	str	r3, [sp, #28]
 800b424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b428:	931a      	str	r3, [sp, #104]	; 0x68
 800b42a:	4654      	mov	r4, sl
 800b42c:	2205      	movs	r2, #5
 800b42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b432:	4858      	ldr	r0, [pc, #352]	; (800b594 <_vfiprintf_r+0x24c>)
 800b434:	f7f4 fef4 	bl	8000220 <memchr>
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	b9d8      	cbnz	r0, 800b474 <_vfiprintf_r+0x12c>
 800b43c:	06d1      	lsls	r1, r2, #27
 800b43e:	bf44      	itt	mi
 800b440:	2320      	movmi	r3, #32
 800b442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b446:	0713      	lsls	r3, r2, #28
 800b448:	bf44      	itt	mi
 800b44a:	232b      	movmi	r3, #43	; 0x2b
 800b44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b450:	f89a 3000 	ldrb.w	r3, [sl]
 800b454:	2b2a      	cmp	r3, #42	; 0x2a
 800b456:	d015      	beq.n	800b484 <_vfiprintf_r+0x13c>
 800b458:	9a07      	ldr	r2, [sp, #28]
 800b45a:	4654      	mov	r4, sl
 800b45c:	2000      	movs	r0, #0
 800b45e:	f04f 0c0a 	mov.w	ip, #10
 800b462:	4621      	mov	r1, r4
 800b464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b468:	3b30      	subs	r3, #48	; 0x30
 800b46a:	2b09      	cmp	r3, #9
 800b46c:	d94e      	bls.n	800b50c <_vfiprintf_r+0x1c4>
 800b46e:	b1b0      	cbz	r0, 800b49e <_vfiprintf_r+0x156>
 800b470:	9207      	str	r2, [sp, #28]
 800b472:	e014      	b.n	800b49e <_vfiprintf_r+0x156>
 800b474:	eba0 0308 	sub.w	r3, r0, r8
 800b478:	fa09 f303 	lsl.w	r3, r9, r3
 800b47c:	4313      	orrs	r3, r2
 800b47e:	9304      	str	r3, [sp, #16]
 800b480:	46a2      	mov	sl, r4
 800b482:	e7d2      	b.n	800b42a <_vfiprintf_r+0xe2>
 800b484:	9b03      	ldr	r3, [sp, #12]
 800b486:	1d19      	adds	r1, r3, #4
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	9103      	str	r1, [sp, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfbb      	ittet	lt
 800b490:	425b      	neglt	r3, r3
 800b492:	f042 0202 	orrlt.w	r2, r2, #2
 800b496:	9307      	strge	r3, [sp, #28]
 800b498:	9307      	strlt	r3, [sp, #28]
 800b49a:	bfb8      	it	lt
 800b49c:	9204      	strlt	r2, [sp, #16]
 800b49e:	7823      	ldrb	r3, [r4, #0]
 800b4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b4a2:	d10c      	bne.n	800b4be <_vfiprintf_r+0x176>
 800b4a4:	7863      	ldrb	r3, [r4, #1]
 800b4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4a8:	d135      	bne.n	800b516 <_vfiprintf_r+0x1ce>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	1d1a      	adds	r2, r3, #4
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	9203      	str	r2, [sp, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bfb8      	it	lt
 800b4b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ba:	3402      	adds	r4, #2
 800b4bc:	9305      	str	r3, [sp, #20]
 800b4be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5a4 <_vfiprintf_r+0x25c>
 800b4c2:	7821      	ldrb	r1, [r4, #0]
 800b4c4:	2203      	movs	r2, #3
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	f7f4 feaa 	bl	8000220 <memchr>
 800b4cc:	b140      	cbz	r0, 800b4e0 <_vfiprintf_r+0x198>
 800b4ce:	2340      	movs	r3, #64	; 0x40
 800b4d0:	eba0 000a 	sub.w	r0, r0, sl
 800b4d4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4d8:	9b04      	ldr	r3, [sp, #16]
 800b4da:	4303      	orrs	r3, r0
 800b4dc:	3401      	adds	r4, #1
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e4:	482c      	ldr	r0, [pc, #176]	; (800b598 <_vfiprintf_r+0x250>)
 800b4e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ea:	2206      	movs	r2, #6
 800b4ec:	f7f4 fe98 	bl	8000220 <memchr>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d03f      	beq.n	800b574 <_vfiprintf_r+0x22c>
 800b4f4:	4b29      	ldr	r3, [pc, #164]	; (800b59c <_vfiprintf_r+0x254>)
 800b4f6:	bb1b      	cbnz	r3, 800b540 <_vfiprintf_r+0x1f8>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	3307      	adds	r3, #7
 800b4fc:	f023 0307 	bic.w	r3, r3, #7
 800b500:	3308      	adds	r3, #8
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b506:	443b      	add	r3, r7
 800b508:	9309      	str	r3, [sp, #36]	; 0x24
 800b50a:	e767      	b.n	800b3dc <_vfiprintf_r+0x94>
 800b50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b510:	460c      	mov	r4, r1
 800b512:	2001      	movs	r0, #1
 800b514:	e7a5      	b.n	800b462 <_vfiprintf_r+0x11a>
 800b516:	2300      	movs	r3, #0
 800b518:	3401      	adds	r4, #1
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	4619      	mov	r1, r3
 800b51e:	f04f 0c0a 	mov.w	ip, #10
 800b522:	4620      	mov	r0, r4
 800b524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b528:	3a30      	subs	r2, #48	; 0x30
 800b52a:	2a09      	cmp	r2, #9
 800b52c:	d903      	bls.n	800b536 <_vfiprintf_r+0x1ee>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0c5      	beq.n	800b4be <_vfiprintf_r+0x176>
 800b532:	9105      	str	r1, [sp, #20]
 800b534:	e7c3      	b.n	800b4be <_vfiprintf_r+0x176>
 800b536:	fb0c 2101 	mla	r1, ip, r1, r2
 800b53a:	4604      	mov	r4, r0
 800b53c:	2301      	movs	r3, #1
 800b53e:	e7f0      	b.n	800b522 <_vfiprintf_r+0x1da>
 800b540:	ab03      	add	r3, sp, #12
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	462a      	mov	r2, r5
 800b546:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <_vfiprintf_r+0x258>)
 800b548:	a904      	add	r1, sp, #16
 800b54a:	4630      	mov	r0, r6
 800b54c:	f3af 8000 	nop.w
 800b550:	4607      	mov	r7, r0
 800b552:	1c78      	adds	r0, r7, #1
 800b554:	d1d6      	bne.n	800b504 <_vfiprintf_r+0x1bc>
 800b556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b558:	07d9      	lsls	r1, r3, #31
 800b55a:	d405      	bmi.n	800b568 <_vfiprintf_r+0x220>
 800b55c:	89ab      	ldrh	r3, [r5, #12]
 800b55e:	059a      	lsls	r2, r3, #22
 800b560:	d402      	bmi.n	800b568 <_vfiprintf_r+0x220>
 800b562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b564:	f7f6 f9ee 	bl	8001944 <__retarget_lock_release_recursive>
 800b568:	89ab      	ldrh	r3, [r5, #12]
 800b56a:	065b      	lsls	r3, r3, #25
 800b56c:	f53f af12 	bmi.w	800b394 <_vfiprintf_r+0x4c>
 800b570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b572:	e711      	b.n	800b398 <_vfiprintf_r+0x50>
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	462a      	mov	r2, r5
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <_vfiprintf_r+0x258>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4630      	mov	r0, r6
 800b580:	f000 f880 	bl	800b684 <_printf_i>
 800b584:	e7e4      	b.n	800b550 <_vfiprintf_r+0x208>
 800b586:	bf00      	nop
 800b588:	0800bc3c 	.word	0x0800bc3c
 800b58c:	0800bc5c 	.word	0x0800bc5c
 800b590:	0800bc1c 	.word	0x0800bc1c
 800b594:	0800bc80 	.word	0x0800bc80
 800b598:	0800bc8a 	.word	0x0800bc8a
 800b59c:	00000000 	.word	0x00000000
 800b5a0:	0800b323 	.word	0x0800b323
 800b5a4:	0800bc86 	.word	0x0800bc86

0800b5a8 <_printf_common>:
 800b5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ac:	4616      	mov	r6, r2
 800b5ae:	4699      	mov	r9, r3
 800b5b0:	688a      	ldr	r2, [r1, #8]
 800b5b2:	690b      	ldr	r3, [r1, #16]
 800b5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	bfb8      	it	lt
 800b5bc:	4613      	movlt	r3, r2
 800b5be:	6033      	str	r3, [r6, #0]
 800b5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	b10a      	cbz	r2, 800b5ce <_printf_common+0x26>
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	6033      	str	r3, [r6, #0]
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	0699      	lsls	r1, r3, #26
 800b5d2:	bf42      	ittt	mi
 800b5d4:	6833      	ldrmi	r3, [r6, #0]
 800b5d6:	3302      	addmi	r3, #2
 800b5d8:	6033      	strmi	r3, [r6, #0]
 800b5da:	6825      	ldr	r5, [r4, #0]
 800b5dc:	f015 0506 	ands.w	r5, r5, #6
 800b5e0:	d106      	bne.n	800b5f0 <_printf_common+0x48>
 800b5e2:	f104 0a19 	add.w	sl, r4, #25
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	6832      	ldr	r2, [r6, #0]
 800b5ea:	1a9b      	subs	r3, r3, r2
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	dc26      	bgt.n	800b63e <_printf_common+0x96>
 800b5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5f4:	1e13      	subs	r3, r2, #0
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	bf18      	it	ne
 800b5fa:	2301      	movne	r3, #1
 800b5fc:	0692      	lsls	r2, r2, #26
 800b5fe:	d42b      	bmi.n	800b658 <_printf_common+0xb0>
 800b600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b604:	4649      	mov	r1, r9
 800b606:	4638      	mov	r0, r7
 800b608:	47c0      	blx	r8
 800b60a:	3001      	adds	r0, #1
 800b60c:	d01e      	beq.n	800b64c <_printf_common+0xa4>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	68e5      	ldr	r5, [r4, #12]
 800b612:	6832      	ldr	r2, [r6, #0]
 800b614:	f003 0306 	and.w	r3, r3, #6
 800b618:	2b04      	cmp	r3, #4
 800b61a:	bf08      	it	eq
 800b61c:	1aad      	subeq	r5, r5, r2
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	6922      	ldr	r2, [r4, #16]
 800b622:	bf0c      	ite	eq
 800b624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b628:	2500      	movne	r5, #0
 800b62a:	4293      	cmp	r3, r2
 800b62c:	bfc4      	itt	gt
 800b62e:	1a9b      	subgt	r3, r3, r2
 800b630:	18ed      	addgt	r5, r5, r3
 800b632:	2600      	movs	r6, #0
 800b634:	341a      	adds	r4, #26
 800b636:	42b5      	cmp	r5, r6
 800b638:	d11a      	bne.n	800b670 <_printf_common+0xc8>
 800b63a:	2000      	movs	r0, #0
 800b63c:	e008      	b.n	800b650 <_printf_common+0xa8>
 800b63e:	2301      	movs	r3, #1
 800b640:	4652      	mov	r2, sl
 800b642:	4649      	mov	r1, r9
 800b644:	4638      	mov	r0, r7
 800b646:	47c0      	blx	r8
 800b648:	3001      	adds	r0, #1
 800b64a:	d103      	bne.n	800b654 <_printf_common+0xac>
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b654:	3501      	adds	r5, #1
 800b656:	e7c6      	b.n	800b5e6 <_printf_common+0x3e>
 800b658:	18e1      	adds	r1, r4, r3
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	2030      	movs	r0, #48	; 0x30
 800b65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b662:	4422      	add	r2, r4
 800b664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b66c:	3302      	adds	r3, #2
 800b66e:	e7c7      	b.n	800b600 <_printf_common+0x58>
 800b670:	2301      	movs	r3, #1
 800b672:	4622      	mov	r2, r4
 800b674:	4649      	mov	r1, r9
 800b676:	4638      	mov	r0, r7
 800b678:	47c0      	blx	r8
 800b67a:	3001      	adds	r0, #1
 800b67c:	d0e6      	beq.n	800b64c <_printf_common+0xa4>
 800b67e:	3601      	adds	r6, #1
 800b680:	e7d9      	b.n	800b636 <_printf_common+0x8e>
	...

0800b684 <_printf_i>:
 800b684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b688:	7e0f      	ldrb	r7, [r1, #24]
 800b68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b68c:	2f78      	cmp	r7, #120	; 0x78
 800b68e:	4691      	mov	r9, r2
 800b690:	4680      	mov	r8, r0
 800b692:	460c      	mov	r4, r1
 800b694:	469a      	mov	sl, r3
 800b696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b69a:	d807      	bhi.n	800b6ac <_printf_i+0x28>
 800b69c:	2f62      	cmp	r7, #98	; 0x62
 800b69e:	d80a      	bhi.n	800b6b6 <_printf_i+0x32>
 800b6a0:	2f00      	cmp	r7, #0
 800b6a2:	f000 80d8 	beq.w	800b856 <_printf_i+0x1d2>
 800b6a6:	2f58      	cmp	r7, #88	; 0x58
 800b6a8:	f000 80a3 	beq.w	800b7f2 <_printf_i+0x16e>
 800b6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6b4:	e03a      	b.n	800b72c <_printf_i+0xa8>
 800b6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6ba:	2b15      	cmp	r3, #21
 800b6bc:	d8f6      	bhi.n	800b6ac <_printf_i+0x28>
 800b6be:	a101      	add	r1, pc, #4	; (adr r1, 800b6c4 <_printf_i+0x40>)
 800b6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	0800b731 	.word	0x0800b731
 800b6cc:	0800b6ad 	.word	0x0800b6ad
 800b6d0:	0800b6ad 	.word	0x0800b6ad
 800b6d4:	0800b6ad 	.word	0x0800b6ad
 800b6d8:	0800b6ad 	.word	0x0800b6ad
 800b6dc:	0800b731 	.word	0x0800b731
 800b6e0:	0800b6ad 	.word	0x0800b6ad
 800b6e4:	0800b6ad 	.word	0x0800b6ad
 800b6e8:	0800b6ad 	.word	0x0800b6ad
 800b6ec:	0800b6ad 	.word	0x0800b6ad
 800b6f0:	0800b83d 	.word	0x0800b83d
 800b6f4:	0800b761 	.word	0x0800b761
 800b6f8:	0800b81f 	.word	0x0800b81f
 800b6fc:	0800b6ad 	.word	0x0800b6ad
 800b700:	0800b6ad 	.word	0x0800b6ad
 800b704:	0800b85f 	.word	0x0800b85f
 800b708:	0800b6ad 	.word	0x0800b6ad
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b6ad 	.word	0x0800b6ad
 800b714:	0800b6ad 	.word	0x0800b6ad
 800b718:	0800b827 	.word	0x0800b827
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	1d1a      	adds	r2, r3, #4
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	602a      	str	r2, [r5, #0]
 800b724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b72c:	2301      	movs	r3, #1
 800b72e:	e0a3      	b.n	800b878 <_printf_i+0x1f4>
 800b730:	6820      	ldr	r0, [r4, #0]
 800b732:	6829      	ldr	r1, [r5, #0]
 800b734:	0606      	lsls	r6, r0, #24
 800b736:	f101 0304 	add.w	r3, r1, #4
 800b73a:	d50a      	bpl.n	800b752 <_printf_i+0xce>
 800b73c:	680e      	ldr	r6, [r1, #0]
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	2e00      	cmp	r6, #0
 800b742:	da03      	bge.n	800b74c <_printf_i+0xc8>
 800b744:	232d      	movs	r3, #45	; 0x2d
 800b746:	4276      	negs	r6, r6
 800b748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b74c:	485e      	ldr	r0, [pc, #376]	; (800b8c8 <_printf_i+0x244>)
 800b74e:	230a      	movs	r3, #10
 800b750:	e019      	b.n	800b786 <_printf_i+0x102>
 800b752:	680e      	ldr	r6, [r1, #0]
 800b754:	602b      	str	r3, [r5, #0]
 800b756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b75a:	bf18      	it	ne
 800b75c:	b236      	sxthne	r6, r6
 800b75e:	e7ef      	b.n	800b740 <_printf_i+0xbc>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	6820      	ldr	r0, [r4, #0]
 800b764:	1d19      	adds	r1, r3, #4
 800b766:	6029      	str	r1, [r5, #0]
 800b768:	0601      	lsls	r1, r0, #24
 800b76a:	d501      	bpl.n	800b770 <_printf_i+0xec>
 800b76c:	681e      	ldr	r6, [r3, #0]
 800b76e:	e002      	b.n	800b776 <_printf_i+0xf2>
 800b770:	0646      	lsls	r6, r0, #25
 800b772:	d5fb      	bpl.n	800b76c <_printf_i+0xe8>
 800b774:	881e      	ldrh	r6, [r3, #0]
 800b776:	4854      	ldr	r0, [pc, #336]	; (800b8c8 <_printf_i+0x244>)
 800b778:	2f6f      	cmp	r7, #111	; 0x6f
 800b77a:	bf0c      	ite	eq
 800b77c:	2308      	moveq	r3, #8
 800b77e:	230a      	movne	r3, #10
 800b780:	2100      	movs	r1, #0
 800b782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b786:	6865      	ldr	r5, [r4, #4]
 800b788:	60a5      	str	r5, [r4, #8]
 800b78a:	2d00      	cmp	r5, #0
 800b78c:	bfa2      	ittt	ge
 800b78e:	6821      	ldrge	r1, [r4, #0]
 800b790:	f021 0104 	bicge.w	r1, r1, #4
 800b794:	6021      	strge	r1, [r4, #0]
 800b796:	b90e      	cbnz	r6, 800b79c <_printf_i+0x118>
 800b798:	2d00      	cmp	r5, #0
 800b79a:	d04d      	beq.n	800b838 <_printf_i+0x1b4>
 800b79c:	4615      	mov	r5, r2
 800b79e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7a2:	fb03 6711 	mls	r7, r3, r1, r6
 800b7a6:	5dc7      	ldrb	r7, [r0, r7]
 800b7a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7ac:	4637      	mov	r7, r6
 800b7ae:	42bb      	cmp	r3, r7
 800b7b0:	460e      	mov	r6, r1
 800b7b2:	d9f4      	bls.n	800b79e <_printf_i+0x11a>
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d10b      	bne.n	800b7d0 <_printf_i+0x14c>
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	07de      	lsls	r6, r3, #31
 800b7bc:	d508      	bpl.n	800b7d0 <_printf_i+0x14c>
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	6861      	ldr	r1, [r4, #4]
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	bfde      	ittt	le
 800b7c6:	2330      	movle	r3, #48	; 0x30
 800b7c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7d0:	1b52      	subs	r2, r2, r5
 800b7d2:	6122      	str	r2, [r4, #16]
 800b7d4:	f8cd a000 	str.w	sl, [sp]
 800b7d8:	464b      	mov	r3, r9
 800b7da:	aa03      	add	r2, sp, #12
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4640      	mov	r0, r8
 800b7e0:	f7ff fee2 	bl	800b5a8 <_printf_common>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d14c      	bne.n	800b882 <_printf_i+0x1fe>
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	b004      	add	sp, #16
 800b7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f2:	4835      	ldr	r0, [pc, #212]	; (800b8c8 <_printf_i+0x244>)
 800b7f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7f8:	6829      	ldr	r1, [r5, #0]
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b800:	6029      	str	r1, [r5, #0]
 800b802:	061d      	lsls	r5, r3, #24
 800b804:	d514      	bpl.n	800b830 <_printf_i+0x1ac>
 800b806:	07df      	lsls	r7, r3, #31
 800b808:	bf44      	itt	mi
 800b80a:	f043 0320 	orrmi.w	r3, r3, #32
 800b80e:	6023      	strmi	r3, [r4, #0]
 800b810:	b91e      	cbnz	r6, 800b81a <_printf_i+0x196>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	f023 0320 	bic.w	r3, r3, #32
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	2310      	movs	r3, #16
 800b81c:	e7b0      	b.n	800b780 <_printf_i+0xfc>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f043 0320 	orr.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	2378      	movs	r3, #120	; 0x78
 800b828:	4828      	ldr	r0, [pc, #160]	; (800b8cc <_printf_i+0x248>)
 800b82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b82e:	e7e3      	b.n	800b7f8 <_printf_i+0x174>
 800b830:	0659      	lsls	r1, r3, #25
 800b832:	bf48      	it	mi
 800b834:	b2b6      	uxthmi	r6, r6
 800b836:	e7e6      	b.n	800b806 <_printf_i+0x182>
 800b838:	4615      	mov	r5, r2
 800b83a:	e7bb      	b.n	800b7b4 <_printf_i+0x130>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	6826      	ldr	r6, [r4, #0]
 800b840:	6961      	ldr	r1, [r4, #20]
 800b842:	1d18      	adds	r0, r3, #4
 800b844:	6028      	str	r0, [r5, #0]
 800b846:	0635      	lsls	r5, r6, #24
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	d501      	bpl.n	800b850 <_printf_i+0x1cc>
 800b84c:	6019      	str	r1, [r3, #0]
 800b84e:	e002      	b.n	800b856 <_printf_i+0x1d2>
 800b850:	0670      	lsls	r0, r6, #25
 800b852:	d5fb      	bpl.n	800b84c <_printf_i+0x1c8>
 800b854:	8019      	strh	r1, [r3, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	4615      	mov	r5, r2
 800b85c:	e7ba      	b.n	800b7d4 <_printf_i+0x150>
 800b85e:	682b      	ldr	r3, [r5, #0]
 800b860:	1d1a      	adds	r2, r3, #4
 800b862:	602a      	str	r2, [r5, #0]
 800b864:	681d      	ldr	r5, [r3, #0]
 800b866:	6862      	ldr	r2, [r4, #4]
 800b868:	2100      	movs	r1, #0
 800b86a:	4628      	mov	r0, r5
 800b86c:	f7f4 fcd8 	bl	8000220 <memchr>
 800b870:	b108      	cbz	r0, 800b876 <_printf_i+0x1f2>
 800b872:	1b40      	subs	r0, r0, r5
 800b874:	6060      	str	r0, [r4, #4]
 800b876:	6863      	ldr	r3, [r4, #4]
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	2300      	movs	r3, #0
 800b87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b880:	e7a8      	b.n	800b7d4 <_printf_i+0x150>
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	462a      	mov	r2, r5
 800b886:	4649      	mov	r1, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	47d0      	blx	sl
 800b88c:	3001      	adds	r0, #1
 800b88e:	d0ab      	beq.n	800b7e8 <_printf_i+0x164>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	079b      	lsls	r3, r3, #30
 800b894:	d413      	bmi.n	800b8be <_printf_i+0x23a>
 800b896:	68e0      	ldr	r0, [r4, #12]
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	4298      	cmp	r0, r3
 800b89c:	bfb8      	it	lt
 800b89e:	4618      	movlt	r0, r3
 800b8a0:	e7a4      	b.n	800b7ec <_printf_i+0x168>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	47d0      	blx	sl
 800b8ac:	3001      	adds	r0, #1
 800b8ae:	d09b      	beq.n	800b7e8 <_printf_i+0x164>
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	68e3      	ldr	r3, [r4, #12]
 800b8b4:	9903      	ldr	r1, [sp, #12]
 800b8b6:	1a5b      	subs	r3, r3, r1
 800b8b8:	42ab      	cmp	r3, r5
 800b8ba:	dcf2      	bgt.n	800b8a2 <_printf_i+0x21e>
 800b8bc:	e7eb      	b.n	800b896 <_printf_i+0x212>
 800b8be:	2500      	movs	r5, #0
 800b8c0:	f104 0619 	add.w	r6, r4, #25
 800b8c4:	e7f5      	b.n	800b8b2 <_printf_i+0x22e>
 800b8c6:	bf00      	nop
 800b8c8:	0800bc91 	.word	0x0800bc91
 800b8cc:	0800bca2 	.word	0x0800bca2

0800b8d0 <_read_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d07      	ldr	r5, [pc, #28]	; (800b8f0 <_read_r+0x20>)
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	4608      	mov	r0, r1
 800b8d8:	4611      	mov	r1, r2
 800b8da:	2200      	movs	r2, #0
 800b8dc:	602a      	str	r2, [r5, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f7f5 fdb4 	bl	800144c <_read>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d102      	bne.n	800b8ee <_read_r+0x1e>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b103      	cbz	r3, 800b8ee <_read_r+0x1e>
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	20009334 	.word	0x20009334

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	; (800b914 <_fstat_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f5 fde8 	bl	80014d6 <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20009334 	.word	0x20009334

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	; (800b934 <_isatty_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f5 fde7 	bl	80014f6 <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20009334 	.word	0x20009334

0800b938 <_init>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	bf00      	nop
 800b93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93e:	bc08      	pop	{r3}
 800b940:	469e      	mov	lr, r3
 800b942:	4770      	bx	lr

0800b944 <_fini>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	bf00      	nop
 800b948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94a:	bc08      	pop	{r3}
 800b94c:	469e      	mov	lr, r3
 800b94e:	4770      	bx	lr
