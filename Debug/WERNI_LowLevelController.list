
WERNI_LowLevelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a9c  08007a9c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a9c  08007a9c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a9c  08007a9c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009370  2000006c  08007b10  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200093dc  08007b10  000293dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a30b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000529d  00000000  00000000  0003a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cc  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ac9  00000000  00000000  00041fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f8f9  00000000  00000000  00067a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d67ea  00000000  00000000  0008737e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006584  00000000  00000000  0015db68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001640ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007818 	.word	0x08007818

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08007818 	.word	0x08007818

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
return 0;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <vApplicationGetIdleTaskMemory+0x2c>)
 8000304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	4a06      	ldr	r2, [pc, #24]	; (8000324 <vApplicationGetIdleTaskMemory+0x30>)
 800030a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	2000008c 	.word	0x2000008c
 8000324:	20000138 	.word	0x20000138

08000328 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <vApplicationGetTimerTaskMemory+0x2c>)
 8000338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <vApplicationGetTimerTaskMemory+0x30>)
 800033e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000346:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	20000338 	.word	0x20000338
 8000358:	200003e4 	.word	0x200003e4

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b5b0      	push	{r4, r5, r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of idleTask */
  osThreadDef(idleTask, StartIdleTask, osPriorityIdle, 0, 128);
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <MX_FREERTOS_Init+0x30>)
 8000364:	1d3c      	adds	r4, r7, #4
 8000366:	461d      	mov	r5, r3
 8000368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fbbe 	bl	8002afa <osThreadCreate>
 800037e:	4603      	mov	r3, r0
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <MX_FREERTOS_Init+0x34>)
 8000382:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000384:	bf00      	nop
 8000386:	3720      	adds	r7, #32
 8000388:	46bd      	mov	sp, r7
 800038a:	bdb0      	pop	{r4, r5, r7, pc}
 800038c:	0800783c 	.word	0x0800783c
 8000390:	20000088 	.word	0x20000088

08000394 <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
    MsgPool_init();
 800039c:	f005 fe52 	bl	8006044 <MsgPool_init>
    TaskList_init();
 80003a0:	f006 f830 	bl	8006404 <TaskList_init>
    app_init();
 80003a4:	f005 fd38 	bl	8005e18 <app_init>
    vTaskDelete(NULL);
 80003a8:	2000      	movs	r0, #0
 80003aa:	f003 fd2b 	bl	8003e04 <vTaskDelete>
    MsgPool_init();
 80003ae:	e7f5      	b.n	800039c <StartIdleTask+0x8>

080003b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003de:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003e4:	f043 0320 	orr.w	r3, r3, #32
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0320 	and.w	r3, r3, #32
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4a25      	ldr	r2, [pc, #148]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_GPIO_Init+0xf8>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f000 febb 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000438:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	4818      	ldr	r0, [pc, #96]	; (80004ac <MX_GPIO_Init+0xfc>)
 800044a:	f000 fc57 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800044e:	230c      	movs	r3, #12
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000452:	2302      	movs	r3, #2
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2300      	movs	r3, #0
 800045c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800045e:	230c      	movs	r3, #12
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f000 fc46 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000470:	2320      	movs	r3, #32
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fc37 	bl	8000cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2105      	movs	r1, #5
 8000492:	2028      	movs	r0, #40	; 0x28
 8000494:	f000 fbf0 	bl	8000c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000498:	2028      	movs	r0, #40	; 0x28
 800049a:	f000 fc17 	bl	8000ccc <HAL_NVIC_EnableIRQ>

}
 800049e:	bf00      	nop
 80004a0:	3728      	adds	r7, #40	; 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000800 	.word	0x48000800

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fadc 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f807 	bl	80004ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f7ff ff78 	bl	80003b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80004c0:	f7ff ff4c 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004c4:	f002 fb12 	bl	8002aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0x18>

080004ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b094      	sub	sp, #80	; 0x50
 80004ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	2238      	movs	r2, #56	; 0x38
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f006 fc4b 	bl	8006d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fed7 	bl	80012a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000508:	2304      	movs	r3, #4
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800050c:	2355      	movs	r3, #85	; 0x55
 800050e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000510:	2302      	movs	r3, #2
 8000512:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000514:	2302      	movs	r3, #2
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000518:	2302      	movs	r3, #2
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4618      	mov	r0, r3
 8000522:	f000 ff81 	bl	8001428 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800052c:	f000 f82a 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	2303      	movs	r3, #3
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2104      	movs	r1, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fb7f 	bl	8001c4c <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000554:	f000 f816 	bl	8000584 <Error_Handler>
  }
}
 8000558:	bf00      	nop
 800055a:	3750      	adds	r7, #80	; 0x50
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d101      	bne.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000572:	f000 fa95 	bl	8000aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40001000 	.word	0x40001000

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>

0800058e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_MspInit+0x50>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <HAL_MspInit+0x50>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6613      	str	r3, [r2, #96]	; 0x60
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x50>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x50>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_MspInit+0x50>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6593      	str	r3, [r2, #88]	; 0x58
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x50>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	210f      	movs	r1, #15
 80005de:	f06f 0001 	mvn.w	r0, #1
 80005e2:	f000 fb49 	bl	8000c78 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005e6:	f000 ff0f 	bl	8001408 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <HAL_InitTick+0xc4>)
 800060a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <HAL_InitTick+0xc4>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6593      	str	r3, [r2, #88]	; 0x58
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <HAL_InitTick+0xc4>)
 8000616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000620:	f107 020c 	add.w	r2, r7, #12
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd92 	bl	8002154 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000630:	f001 fd7a 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8000634:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <HAL_InitTick+0xc8>)
 800063a:	fba2 2303 	umull	r2, r3, r2, r3
 800063e:	0c9b      	lsrs	r3, r3, #18
 8000640:	3b01      	subs	r3, #1
 8000642:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <HAL_InitTick+0xcc>)
 8000646:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <HAL_InitTick+0xd0>)
 8000648:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_InitTick+0xcc>)
 800064c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000650:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <HAL_InitTick+0xcc>)
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <HAL_InitTick+0xcc>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_InitTick+0xcc>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <HAL_InitTick+0xcc>)
 8000666:	f001 fdfd 	bl	8002264 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000674:	2b00      	cmp	r3, #0
 8000676:	d11b      	bne.n	80006b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <HAL_InitTick+0xcc>)
 800067a:	f001 fedf 	bl	800243c <HAL_TIM_Base_Start_IT>
 800067e:	4603      	mov	r3, r0
 8000680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000688:	2b00      	cmp	r3, #0
 800068a:	d111      	bne.n	80006b0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800068c:	2036      	movs	r0, #54	; 0x36
 800068e:	f000 fb1d 	bl	8000ccc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d808      	bhi.n	80006aa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	2036      	movs	r0, #54	; 0x36
 800069e:	f000 faeb 	bl	8000c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <HAL_InitTick+0xd4>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	e002      	b.n	80006b0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3730      	adds	r7, #48	; 0x30
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	431bde83 	.word	0x431bde83
 80006c4:	200007e4 	.word	0x200007e4
 80006c8:	40001000 	.word	0x40001000
 80006cc:	20000004 	.word	0x20000004

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000700:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000704:	f000 fda8 	bl	8001258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM6_DAC_IRQHandler+0x10>)
 8000712:	f001 ff47 	bl	80025a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200007e4 	.word	0x200007e4

08000720 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00a      	b.n	8000748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000732:	f3af 8000 	nop.w
 8000736:	4601      	mov	r1, r0
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	b2ca      	uxtb	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf0      	blt.n	8000732 <_read+0x12>
  }

  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e009      	b.n	8000780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf1      	blt.n	800076c <_write+0x12>
  }
  return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_close>:

int _close(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ba:	605a      	str	r2, [r3, #4]
  return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <_isatty>:

int _isatty(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f006 fb6a 	bl	8006f04 <__errno>
 8000830:	4603      	mov	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2001c000 	.word	0x2001c000
 800085c:	00000400 	.word	0x00000400
 8000860:	20000830 	.word	0x20000830
 8000864:	200093e0 	.word	0x200093e0

08000868 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0b      	ldr	r4, [pc, #44]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b6:	f7ff ffd7 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f006 fb29 	bl	8006f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff fdf7 	bl	80004b0 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008d0:	08007aa4 	.word	0x08007aa4
  ldr r2, =_sbss
 80008d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008d8:	200093dc 	.word	0x200093dc

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>

080008de <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
 80008f0:	f7ff fe48 	bl	8000584 <Error_Handler>
 80008f4:	e7fe      	b.n	80008f4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e007      	b.n	800090c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	2100      	movs	r1, #0
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d9f4      	bls.n	80008fc <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	721a      	strb	r2, [r3, #8]
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d104      	bne.n	8000938 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
 8000932:	f7ff fe27 	bl	8000584 <Error_Handler>
 8000936:	e7fe      	b.n	8000936 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a1b      	ldrb	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d904      	bls.n	800094a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
 8000944:	f7ff fe1e 	bl	8000584 <Error_Handler>
 8000948:	e7fe      	b.n	8000948 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7a1b      	ldrb	r3, [r3, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	b2d1      	uxtb	r1, r2
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	7211      	strb	r1, [r2, #8]
 8000956:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000958:	f3ef 8211 	mrs	r2, BASEPRI
 800095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000960:	f383 8811 	msr	BASEPRI, r3
 8000964:	f3bf 8f6f 	isb	sy
 8000968:	f3bf 8f4f 	dsb	sy
 800096c:	60fa      	str	r2, [r7, #12]
 800096e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800098e:	b672      	cpsid	i
}
 8000990:	bf00      	nop
 8000992:	f7ff fdf7 	bl	8000584 <Error_Handler>
 8000996:	e7fe      	b.n	8000996 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	3b01      	subs	r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a1b      	ldrb	r3, [r3, #8]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d904      	bls.n	80009b6 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
 80009b0:	f7ff fde8 	bl	8000584 <Error_Handler>
 80009b4:	e7fe      	b.n	80009b4 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7a1b      	ldrb	r3, [r3, #8]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80009ca:	bf00      	nop
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80009e2:	f006 fa8f 	bl	8006f04 <__errno>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2216      	movs	r2, #22
 80009ea:	601a      	str	r2, [r3, #0]
    return;
 80009ec:	e015      	b.n	8000a1a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80009ee:	200c      	movs	r0, #12
 80009f0:	f005 ff04 	bl	80067fc <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff68 	bl	80008de <stm32_lock_init>
    return;
 8000a0e:	e004      	b.n	8000a1a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8000a14:	f7ff fdb6 	bl	8000584 <Error_Handler>
 8000a18:	e7fe      	b.n	8000a18 <__retarget_lock_init_recursive+0x44>
}
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	bf00      	nop
 8000a32:	f7ff fda7 	bl	8000584 <Error_Handler>
 8000a36:	e7fe      	b.n	8000a36 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff70 	bl	8000920 <stm32_lock_acquire>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d104      	bne.n	8000a60 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a56:	b672      	cpsid	i
}
 8000a58:	bf00      	nop
 8000a5a:	f7ff fd93 	bl	8000584 <Error_Handler>
 8000a5e:	e7fe      	b.n	8000a5e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff8c 	bl	8000980 <stm32_lock_release>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f8dc 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff fdb9 	bl	80005f8 <HAL_InitTick>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	e001      	b.n	8000a96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a92:	f7ff fd87 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a96:	79fb      	ldrb	r3, [r7, #7]

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x1c>)
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000084c 	.word	0x2000084c
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000084c 	.word	0x2000084c

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d00f      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d00c      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d009      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d006      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d003      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c5e:	21a6      	movs	r1, #166	; 0xa6
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c62:	f7ff fc94 	bl	800058e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff38 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08007858 	.word	0x08007858

08000c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d903      	bls.n	8000c94 <HAL_NVIC_SetPriority+0x1c>
 8000c8c:	21be      	movs	r1, #190	; 0xbe
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_NVIC_SetPriority+0x50>)
 8000c90:	f7ff fc7d 	bl	800058e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d903      	bls.n	8000ca2 <HAL_NVIC_SetPriority+0x2a>
 8000c9a:	21bf      	movs	r1, #191	; 0xbf
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <HAL_NVIC_SetPriority+0x50>)
 8000c9e:	f7ff fc76 	bl	800058e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca2:	f7ff ff3f 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000ca6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f7ff ff8f 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff5e 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	08007858 	.word	0x08007858

08000ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	da03      	bge.n	8000ce6 <HAL_NVIC_EnableIRQ+0x1a>
 8000cde:	21d2      	movs	r1, #210	; 0xd2
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000ce2:	f7ff fc54 	bl	800058e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff28 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08007858 	.word	0x08007858

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d10:	d01b      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <HAL_GPIO_Init+0xfc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d017      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a37      	ldr	r2, [pc, #220]	; (8000dfc <HAL_GPIO_Init+0x100>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <HAL_GPIO_Init+0x104>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00f      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <HAL_GPIO_Init+0x108>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00b      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <HAL_GPIO_Init+0x10c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <HAL_GPIO_Init+0x110>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d42:	21a9      	movs	r1, #169	; 0xa9
 8000d44:	4832      	ldr	r0, [pc, #200]	; (8000e10 <HAL_GPIO_Init+0x114>)
 8000d46:	f7ff fc22 	bl	800058e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x64>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x6c>
 8000d60:	21aa      	movs	r1, #170	; 0xaa
 8000d62:	482b      	ldr	r0, [pc, #172]	; (8000e10 <HAL_GPIO_Init+0x114>)
 8000d64:	f7ff fc13 	bl	800058e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 820a 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	f000 8205 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b11      	cmp	r3, #17
 8000d82:	f000 8200 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	f000 81fb 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b12      	cmp	r3, #18
 8000d96:	f000 81f6 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000da2:	f000 81f0 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000dae:	f000 81ea 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000dba:	f000 81e4 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000dc6:	f000 81de 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000dd2:	f000 81d8 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000dde:	f000 81d2 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	f000 81cd 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dec:	21ab      	movs	r1, #171	; 0xab
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_GPIO_Init+0x114>)
 8000df0:	f7ff fbcd 	bl	800058e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000df4:	e1c7      	b.n	8001186 <HAL_GPIO_Init+0x48a>
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	48000c00 	.word	0x48000c00
 8000e04:	48001000 	.word	0x48001000
 8000e08:	48001400 	.word	0x48001400
 8000e0c:	48001800 	.word	0x48001800
 8000e10:	08007894 	.word	0x08007894
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 81aa 	beq.w	8001180 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d144      	bne.n	8000ece <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00f      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d00b      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e64:	21bb      	movs	r1, #187	; 0xbb
 8000e66:	488b      	ldr	r0, [pc, #556]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000e68:	f7ff fb91 	bl	800058e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d027      	beq.n	8000f2a <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000ef2:	21cc      	movs	r1, #204	; 0xcc
 8000ef4:	4867      	ldr	r0, [pc, #412]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000ef6:	f7ff fb4a 	bl	800058e <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d14b      	bne.n	8000fce <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f3c:	d01b      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_GPIO_Init+0x39c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d017      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_GPIO_Init+0x3a0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a53      	ldr	r2, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x3a4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00f      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00b      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_GPIO_Init+0x3ac>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <HAL_GPIO_Init+0x3b0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f6e:	21d9      	movs	r1, #217	; 0xd9
 8000f70:	4848      	ldr	r0, [pc, #288]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000f72:	f7ff fb0c 	bl	800058e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d903      	bls.n	8000f86 <HAL_GPIO_Init+0x28a>
 8000f7e:	21da      	movs	r1, #218	; 0xda
 8000f80:	4844      	ldr	r0, [pc, #272]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000f82:	f7ff fb04 	bl	800058e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b8 	beq.w	8001180 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_GPIO_Init+0x3b4>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_GPIO_Init+0x3b4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x3b4>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x3b8>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001052:	d031      	beq.n	80010b8 <HAL_GPIO_Init+0x3bc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_GPIO_Init+0x39c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d019      	beq.n	8001090 <HAL_GPIO_Init+0x394>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x3a0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x390>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_GPIO_Init+0x3a4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x38c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x388>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_GPIO_Init+0x3ac>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x384>
 800107c:	2305      	movs	r3, #5
 800107e:	e01c      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001080:	2306      	movs	r3, #6
 8001082:	e01a      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001084:	2304      	movs	r3, #4
 8001086:	e018      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001088:	2303      	movs	r3, #3
 800108a:	e016      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 800108c:	2302      	movs	r3, #2
 800108e:	e014      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001090:	2301      	movs	r3, #1
 8001092:	e012      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001094:	08007894 	.word	0x08007894
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48001000 	.word	0x48001000
 80010a8:	48001400 	.word	0x48001400
 80010ac:	48001800 	.word	0x48001800
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	2300      	movs	r3, #0
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ca:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x4a4>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fc:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	f47f ae3f 	bne.w	8000e14 <HAL_GPIO_Init+0x118>
  }
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <HAL_GPIO_WritePin+0x20>
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_GPIO_WritePin+0x2a>
 80011c8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <HAL_GPIO_WritePin+0x5c>)
 80011ce:	f7ff f9de 	bl	800058e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_WritePin+0x40>
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d004      	beq.n	80011e8 <HAL_GPIO_WritePin+0x40>
 80011de:	f240 119b 	movw	r1, #411	; 0x19b
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <HAL_GPIO_WritePin+0x5c>)
 80011e4:	f7ff f9d3 	bl	800058e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08007894 	.word	0x08007894

08001208 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_GPIO_TogglePin+0x1c>
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	0c1b      	lsrs	r3, r3, #16
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <HAL_GPIO_TogglePin+0x26>
 8001224:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <HAL_GPIO_TogglePin+0x4c>)
 800122a:	f7ff f9b0 	bl	800058e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4013      	ands	r3, r2
 800123a:	041a      	lsls	r2, r3, #16
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43d9      	mvns	r1, r3
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	400b      	ands	r3, r1
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	08007894 	.word	0x08007894

08001258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f806 	bl	8001288 <HAL_GPIO_EXTI_Callback>
  }
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x26>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b4:	d007      	beq.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x26>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012bc:	d003      	beq.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x26>
 80012be:	219d      	movs	r1, #157	; 0x9d
 80012c0:	484d      	ldr	r0, [pc, #308]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80012c2:	f7ff f964 	bl	800058e <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d141      	bne.n	8001350 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d8:	d131      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e0:	4a46      	ldr	r2, [pc, #280]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012fa:	4b41      	ldr	r3, [pc, #260]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2232      	movs	r2, #50	; 0x32
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9b      	lsrs	r3, r3, #18
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001310:	e002      	b.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3b01      	subs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	d102      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f2      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132c:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001338:	d158      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e057      	b.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001344:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800134e:	e04d      	b.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001356:	d141      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001364:	d131      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2232      	movs	r2, #50	; 0x32
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139c:	e002      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b0:	d102      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x118>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c4:	d112      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e011      	b.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80013cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013da:	e007      	b.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	080078d0 	.word	0x080078d0
 80013fc:	40007000 	.word	0x40007000
 8001400:	20000000 	.word	0x20000000
 8001404:	431bde83 	.word	0x431bde83

08001408 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6093      	str	r3, [r2, #8]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40007000 	.word	0x40007000

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 bc02 	b.w	8001c40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d022      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d11c      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d116      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d110      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10a      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
 8001480:	f240 1145 	movw	r1, #325	; 0x145
 8001484:	4892      	ldr	r0, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x2a8>)
 8001486:	f7ff f882 	bl	800058e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8089 	beq.w	80015aa <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00e      	beq.n	80014be <HAL_RCC_OscConfig+0x96>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d009      	beq.n	80014be <HAL_RCC_OscConfig+0x96>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b2:	d004      	beq.n	80014be <HAL_RCC_OscConfig+0x96>
 80014b4:	f240 114b 	movw	r1, #331	; 0x14b
 80014b8:	4885      	ldr	r0, [pc, #532]	; (80016d0 <HAL_RCC_OscConfig+0x2a8>)
 80014ba:	f7ff f868 	bl	800058e <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c8:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0xb6>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_OscConfig+0xbc>
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x180>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e3a1      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0xec>
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a72      	ldr	r2, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0x128>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x110>
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0x128>
 8001538:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a65      	ldr	r2, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fab4 	bl	8000ac4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fab0 	bl	8000ac4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e366      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x138>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff faa0 	bl	8000ac4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fa9c 	bl	8000ac4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e352      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x160>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8093 	beq.w	80016de <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1ac>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c8:	d004      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1ac>
 80015ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80015ce:	4840      	ldr	r0, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x2a8>)
 80015d0:	f7fe ffdd 	bl	800058e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b7f      	cmp	r3, #127	; 0x7f
 80015da:	d904      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1be>
 80015dc:	f240 1181 	movw	r1, #385	; 0x181
 80015e0:	483b      	ldr	r0, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x2a8>)
 80015e2:	f7fe ffd4 	bl	800058e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d102      	bne.n	8001606 <HAL_RCC_OscConfig+0x1de>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d002      	beq.n	800160c <HAL_RCC_OscConfig+0x1e4>
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d11f      	bne.n	800164c <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x1fc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e30d      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	4928      	ldr	r1, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ffdb 	bl	80005f8 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d049      	beq.n	80016dc <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e2f9      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d023      	beq.n	800169c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fa30 	bl	8000ac4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fa2c 	bl	8000ac4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e2e2      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	490f      	ldr	r1, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e020      	b.n	80016de <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa0c 	bl	8000ac4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fa08 	bl	8000ac4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e2be      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x288>
 80016ce:	e006      	b.n	80016de <HAL_RCC_OscConfig+0x2b6>
 80016d0:	0800790c 	.word	0x0800790c
 80016d4:	40021000 	.word	0x40021000
 80016d8:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d049      	beq.n	800177e <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_RCC_OscConfig+0x2dc>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d004      	beq.n	8001704 <HAL_RCC_OscConfig+0x2dc>
 80016fa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80016fe:	48a3      	ldr	r0, [pc, #652]	; (800198c <HAL_RCC_OscConfig+0x564>)
 8001700:	f7fe ff45 	bl	800058e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170c:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001712:	4a9f      	ldr	r2, [pc, #636]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff f9d2 	bl	8000ac4 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff f9ce 	bl	8000ac4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e284      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001736:	4b96      	ldr	r3, [pc, #600]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x2fc>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff f9b5 	bl	8000ac4 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff f9b1 	bl	8000ac4 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e267      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001770:	4b87      	ldr	r3, [pc, #540]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80b7 	beq.w	80018fa <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x38a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_OscConfig+0x38a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d004      	beq.n	80017b2 <HAL_RCC_OscConfig+0x38a>
 80017a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017ac:	4877      	ldr	r0, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x564>)
 80017ae:	f7fe feee 	bl	800058e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x39a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x39c>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b71      	ldr	r3, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a70      	ldr	r2, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <HAL_RCC_OscConfig+0x56c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_RCC_OscConfig+0x56c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x56c>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fc:	f7ff f962 	bl	8000ac4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001804:	f7ff f95e 	bl	8000ac4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e214      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x56c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_RCC_OscConfig+0x414>
 800182a:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183a:	e024      	b.n	8001886 <HAL_RCC_OscConfig+0x45e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d110      	bne.n	8001866 <HAL_RCC_OscConfig+0x43e>
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001864:	e00f      	b.n	8001886 <HAL_RCC_OscConfig+0x45e>
 8001866:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d016      	beq.n	80018bc <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff f919 	bl	8000ac4 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff f915 	bl	8000ac4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1c9      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0ed      	beq.n	8001896 <HAL_RCC_OscConfig+0x46e>
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f902 	bl	8000ac4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff f8fe 	bl	8000ac4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1b2      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ed      	bne.n	80018c4 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d105      	bne.n	80018fa <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 80018f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04f      	beq.n	80019a6 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_RCC_OscConfig+0x4f8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d004      	beq.n	8001920 <HAL_RCC_OscConfig+0x4f8>
 8001916:	f240 213b 	movw	r1, #571	; 0x23b
 800191a:	481c      	ldr	r0, [pc, #112]	; (800198c <HAL_RCC_OscConfig+0x564>)
 800191c:	f7fe fe37 	bl	800058e <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff f8c4 	bl	8000ac4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001940:	f7ff f8c0 	bl	8000ac4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e176      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x518>
 8001960:	e021      	b.n	80019a6 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001968:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x568>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff f8a7 	bl	8000ac4 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001978:	e00e      	b.n	8001998 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff f8a3 	bl	8000ac4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e159      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
 800198c:	0800790c 	.word	0x0800790c
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001998:	4b89      	ldr	r3, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e9      	bne.n	800197a <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d008      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d004      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
 80019be:	f44f 7119 	mov.w	r1, #612	; 0x264
 80019c2:	4880      	ldr	r0, [pc, #512]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 80019c4:	f7fe fde3 	bl	800058e <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8136 	beq.w	8001c3e <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d2:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	f000 80ea 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	f040 80bd 	bne.w	8001b64 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x5e4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_OscConfig+0x5e4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d004      	beq.n	8001a0c <HAL_RCC_OscConfig+0x5e4>
 8001a02:	f240 216e 	movw	r1, #622	; 0x26e
 8001a06:	486f      	ldr	r0, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 8001a08:	f7fe fdc1 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_RCC_OscConfig+0x5f4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	2b10      	cmp	r3, #16
 8001a1a:	d904      	bls.n	8001a26 <HAL_RCC_OscConfig+0x5fe>
 8001a1c:	f240 216f 	movw	r1, #623	; 0x26f
 8001a20:	4868      	ldr	r0, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 8001a22:	f7fe fdb4 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	d903      	bls.n	8001a36 <HAL_RCC_OscConfig+0x60e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b7f      	cmp	r3, #127	; 0x7f
 8001a34:	d904      	bls.n	8001a40 <HAL_RCC_OscConfig+0x618>
 8001a36:	f44f 711c 	mov.w	r1, #624	; 0x270
 8001a3a:	4862      	ldr	r0, [pc, #392]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 8001a3c:	f7fe fda7 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d903      	bls.n	8001a50 <HAL_RCC_OscConfig+0x628>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b1f      	cmp	r3, #31
 8001a4e:	d904      	bls.n	8001a5a <HAL_RCC_OscConfig+0x632>
 8001a50:	f240 2171 	movw	r1, #625	; 0x271
 8001a54:	485b      	ldr	r0, [pc, #364]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 8001a56:	f7fe fd9a 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d010      	beq.n	8001a84 <HAL_RCC_OscConfig+0x65c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d00c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x65c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d008      	beq.n	8001a84 <HAL_RCC_OscConfig+0x65c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d004      	beq.n	8001a84 <HAL_RCC_OscConfig+0x65c>
 8001a7a:	f240 2172 	movw	r1, #626	; 0x272
 8001a7e:	4851      	ldr	r0, [pc, #324]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 8001a80:	f7fe fd85 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d010      	beq.n	8001aae <HAL_RCC_OscConfig+0x686>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x686>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_OscConfig+0x686>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d004      	beq.n	8001aae <HAL_RCC_OscConfig+0x686>
 8001aa4:	f240 2173 	movw	r1, #627	; 0x273
 8001aa8:	4846      	ldr	r0, [pc, #280]	; (8001bc4 <HAL_RCC_OscConfig+0x79c>)
 8001aaa:	f7fe fd70 	bl	800058e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a43      	ldr	r2, [pc, #268]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f803 	bl	8000ac4 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7fe ffff 	bl	8000ac4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0b5      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_RCC_OscConfig+0x7a0>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6a11      	ldr	r1, [r2, #32]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001afa:	0212      	lsls	r2, r2, #8
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b02:	0852      	lsrs	r2, r2, #1
 8001b04:	3a01      	subs	r2, #1
 8001b06:	0552      	lsls	r2, r2, #21
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b0e:	0852      	lsrs	r2, r2, #1
 8001b10:	3a01      	subs	r2, #1
 8001b12:	0652      	lsls	r2, r2, #25
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b1a:	06d2      	lsls	r2, r2, #27
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	4928      	ldr	r1, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7fe ffc2 	bl	8000ac4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe ffbe 	bl	8000ac4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e074      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x71c>
 8001b62:	e06c      	b.n	8001c3e <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001b82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ff9a 	bl	8000ac4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe ff96 	bl	8000ac4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e04c      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x798>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x76c>
 8001bb2:	e044      	b.n	8001c3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e03f      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	0800790c 	.word	0x0800790c
 8001bc8:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_OscConfig+0x820>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d12c      	bne.n	8001c3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	3b01      	subs	r3, #1
 8001bec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d123      	bne.n	8001c3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d11b      	bne.n	8001c3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d113      	bne.n	8001c3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	3b01      	subs	r3, #1
 8001c34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e1e2      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x30>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 030f 	bic.w	r3, r3, #15
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x3a>
 8001c7c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001c80:	4869      	ldr	r0, [pc, #420]	; (8001e28 <HAL_RCC_ClockConfig+0x1dc>)
 8001c82:	f7fe fc84 	bl	800058e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d031      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d02e      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d02b      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d028      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d025      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d022      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d01f      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b07      	cmp	r3, #7
 8001cb4:	d01c      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d019      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	d016      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b0a      	cmp	r3, #10
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b0b      	cmp	r3, #11
 8001ccc:	d010      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b0d      	cmp	r3, #13
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b0e      	cmp	r3, #14
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	d004      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xa4>
 8001ce6:	f240 310d 	movw	r1, #781	; 0x30d
 8001cea:	484f      	ldr	r0, [pc, #316]	; (8001e28 <HAL_RCC_ClockConfig+0x1dc>)
 8001cec:	f7fe fc4f 	bl	800058e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <HAL_RCC_ClockConfig+0x1e0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_ClockConfig+0x1e0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	4949      	ldr	r1, [pc, #292]	; (8001e2c <HAL_RCC_ClockConfig+0x1e0>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x1e0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e184      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 808e 	beq.w	8001e4a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d00c      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x104>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x104>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d004      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x104>
 8001d46:	f44f 7149 	mov.w	r1, #804	; 0x324
 8001d4a:	4837      	ldr	r0, [pc, #220]	; (8001e28 <HAL_RCC_ClockConfig+0x1dc>)
 8001d4c:	f7fe fc1f 	bl	800058e <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d129      	bne.n	8001dac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e160      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d68:	f000 fa36 	bl	80021d8 <RCC_GetSysClockFreqFromPLLSource>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_RCC_ClockConfig+0x1e8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d93f      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d033      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d12f      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9e:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e024      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e132      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e12a      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dd4:	f000 f93a 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_RCC_ClockConfig+0x1e8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d909      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	490b      	ldr	r1, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x1e4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e08:	f7fe fe5c 	bl	8000ac4 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e013      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe fe58 	bl	8000ac4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d90a      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e101      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
 8001e26:	bf00      	nop
 8001e28:	0800790c 	.word	0x0800790c
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e38:	4b7e      	ldr	r3, [pc, #504]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 020c 	and.w	r2, r3, #12
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d1e2      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04c      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e62:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4a73      	ldr	r2, [pc, #460]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001e68:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6c:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e7a:	4b6e      	ldr	r3, [pc, #440]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e82:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001e84:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e88:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b80      	cmp	r3, #128	; 0x80
 8001e98:	d020      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b90      	cmp	r3, #144	; 0x90
 8001ea0:	d01c      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea8:	d018      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2bb0      	cmp	r3, #176	; 0xb0
 8001eb0:	d014      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2bd0      	cmp	r3, #208	; 0xd0
 8001ec0:	d00c      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2be0      	cmp	r3, #224	; 0xe0
 8001ec8:	d008      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2bf0      	cmp	r3, #240	; 0xf0
 8001ed0:	d004      	beq.n	8001edc <HAL_RCC_ClockConfig+0x290>
 8001ed2:	f240 317b 	movw	r1, #891	; 0x37b
 8001ed6:	4858      	ldr	r0, [pc, #352]	; (8002038 <HAL_RCC_ClockConfig+0x3ec>)
 8001ed8:	f7fe fb59 	bl	800058e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b55      	ldr	r3, [pc, #340]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4952      	ldr	r1, [pc, #328]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b80      	cmp	r3, #128	; 0x80
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ef6:	4b4f      	ldr	r3, [pc, #316]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f02:	4b4e      	ldr	r3, [pc, #312]	; (800203c <HAL_RCC_ClockConfig+0x3f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d21d      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_ClockConfig+0x3f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 020f 	bic.w	r2, r3, #15
 8001f18:	4948      	ldr	r1, [pc, #288]	; (800203c <HAL_RCC_ClockConfig+0x3f0>)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f20:	f7fe fdd0 	bl	8000ac4 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7fe fdcc 	bl	8000ac4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e075      	b.n	800202a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x3f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1ed      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d025      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d018      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x346>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f68:	d013      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x346>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f72:	d00e      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x346>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x346>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f86:	d004      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x346>
 8001f88:	f240 319d 	movw	r1, #925	; 0x39d
 8001f8c:	482a      	ldr	r0, [pc, #168]	; (8002038 <HAL_RCC_ClockConfig+0x3ec>)
 8001f8e:	f7fe fafe 	bl	800058e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4925      	ldr	r1, [pc, #148]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d026      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d018      	beq.n	8001fea <HAL_RCC_ClockConfig+0x39e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc0:	d013      	beq.n	8001fea <HAL_RCC_ClockConfig+0x39e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fca:	d00e      	beq.n	8001fea <HAL_RCC_ClockConfig+0x39e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x39e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fde:	d004      	beq.n	8001fea <HAL_RCC_ClockConfig+0x39e>
 8001fe0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001fe4:	4814      	ldr	r0, [pc, #80]	; (8002038 <HAL_RCC_ClockConfig+0x3ec>)
 8001fe6:	f7fe fad2 	bl	800058e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffe:	f000 f825 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x3e8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	490c      	ldr	r1, [pc, #48]	; (8002040 <HAL_RCC_ClockConfig+0x3f4>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x3f8>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x3fc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fae8 	bl	80005f8 <HAL_InitTick>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	0800790c 	.word	0x0800790c
 800203c:	40022000 	.word	0x40022000
 8002040:	080079f8 	.word	0x080079f8
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b04      	cmp	r3, #4
 800205c:	d102      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e047      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e03e      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d136      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020aa:	68d2      	ldr	r2, [r2, #12]
 80020ac:	0a12      	lsrs	r2, r2, #8
 80020ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
      break;
 80020b8:	e00c      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	0a12      	lsrs	r2, r2, #8
 80020c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
      break;
 80020d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0e5b      	lsrs	r3, r3, #25
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e001      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020f4:	693b      	ldr	r3, [r7, #16]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	00f42400 	.word	0x00f42400
 800210c:	016e3600 	.word	0x016e3600

08002110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08007a08 	.word	0x08007a08

08002154 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <HAL_RCC_GetClockConfig+0x1a>
 8002164:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8002168:	4818      	ldr	r0, [pc, #96]	; (80021cc <HAL_RCC_GetClockConfig+0x78>)
 800216a:	f7fe fa10 	bl	800058e <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <HAL_RCC_GetClockConfig+0x2a>
 8002174:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8002178:	4814      	ldr	r0, [pc, #80]	; (80021cc <HAL_RCC_GetClockConfig+0x78>)
 800217a:	f7fe fa08 	bl	800058e <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	220f      	movs	r2, #15
 8002182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_GetClockConfig+0x7c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_GetClockConfig+0x7c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetClockConfig+0x7c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCC_GetClockConfig+0x80>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 020f 	and.w	r2, r3, #15
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800790c 	.word	0x0800790c
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40022000 	.word	0x40022000

080021d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3301      	adds	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d10c      	bne.n	8002216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002206:	68d2      	ldr	r2, [r2, #12]
 8002208:	0a12      	lsrs	r2, r2, #8
 800220a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
    break;
 8002214:	e00c      	b.n	8002230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002220:	68d2      	ldr	r2, [r2, #12]
 8002222:	0a12      	lsrs	r2, r2, #8
 8002224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    break;
 800222e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0e5b      	lsrs	r3, r3, #25
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	016e3600 	.word	0x016e3600
 8002260:	00f42400 	.word	0x00f42400

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0be      	b.n	80023f4 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_TIM_Base_Init+0x198>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d036      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d031      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5c      	ldr	r2, [pc, #368]	; (8002400 <HAL_TIM_Base_Init+0x19c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d02c      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <HAL_TIM_Base_Init+0x1a0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d027      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a59      	ldr	r2, [pc, #356]	; (8002408 <HAL_TIM_Base_Init+0x1a4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_TIM_Base_Init+0x1a8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01d      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a56      	ldr	r2, [pc, #344]	; (8002410 <HAL_TIM_Base_Init+0x1ac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d018      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_TIM_Base_Init+0x1b0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a53      	ldr	r2, [pc, #332]	; (8002418 <HAL_TIM_Base_Init+0x1b4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_TIM_Base_Init+0x1b8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_TIM_Base_Init+0x1bc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_Base_Init+0x8a>
 80022e4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80022e8:	484e      	ldr	r0, [pc, #312]	; (8002424 <HAL_TIM_Base_Init+0x1c0>)
 80022ea:	f7fe f950 	bl	800058e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d014      	beq.n	8002320 <HAL_TIM_Base_Init+0xbc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d010      	beq.n	8002320 <HAL_TIM_Base_Init+0xbc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b20      	cmp	r3, #32
 8002304:	d00c      	beq.n	8002320 <HAL_TIM_Base_Init+0xbc>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d008      	beq.n	8002320 <HAL_TIM_Base_Init+0xbc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b60      	cmp	r3, #96	; 0x60
 8002314:	d004      	beq.n	8002320 <HAL_TIM_Base_Init+0xbc>
 8002316:	f240 1123 	movw	r1, #291	; 0x123
 800231a:	4842      	ldr	r0, [pc, #264]	; (8002424 <HAL_TIM_Base_Init+0x1c0>)
 800231c:	f7fe f937 	bl	800058e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <HAL_TIM_Base_Init+0xe2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002330:	d009      	beq.n	8002346 <HAL_TIM_Base_Init+0xe2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233a:	d004      	beq.n	8002346 <HAL_TIM_Base_Init+0xe2>
 800233c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002340:	4838      	ldr	r0, [pc, #224]	; (8002424 <HAL_TIM_Base_Init+0x1c0>)
 8002342:	f7fe f924 	bl	800058e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_TIM_Base_Init+0xfc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d004      	beq.n	8002360 <HAL_TIM_Base_Init+0xfc>
 8002356:	f240 1125 	movw	r1, #293	; 0x125
 800235a:	4832      	ldr	r0, [pc, #200]	; (8002424 <HAL_TIM_Base_Init+0x1c0>)
 800235c:	f7fe f917 	bl	800058e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f857 	bl	8002428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4610      	mov	r0, r2
 800238e:	f000 fab1 	bl	80028f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40012c00 	.word	0x40012c00
 8002400:	40000400 	.word	0x40000400
 8002404:	40000800 	.word	0x40000800
 8002408:	40001000 	.word	0x40001000
 800240c:	40001400 	.word	0x40001400
 8002410:	40013400 	.word	0x40013400
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800
 8002420:	40015000 	.word	0x40015000
 8002424:	08007944 	.word	0x08007944

08002428 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4a      	ldr	r2, [pc, #296]	; (8002574 <HAL_TIM_Base_Start_IT+0x138>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d036      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002456:	d031      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a46      	ldr	r2, [pc, #280]	; (8002578 <HAL_TIM_Base_Start_IT+0x13c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02c      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a45      	ldr	r2, [pc, #276]	; (800257c <HAL_TIM_Base_Start_IT+0x140>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d027      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_TIM_Base_Start_IT+0x144>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d022      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a42      	ldr	r2, [pc, #264]	; (8002584 <HAL_TIM_Base_Start_IT+0x148>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d01d      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a40      	ldr	r2, [pc, #256]	; (8002588 <HAL_TIM_Base_Start_IT+0x14c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d018      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a3f      	ldr	r2, [pc, #252]	; (800258c <HAL_TIM_Base_Start_IT+0x150>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_TIM_Base_Start_IT+0x154>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <HAL_TIM_Base_Start_IT+0x158>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_TIM_Base_Start_IT+0x15c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 80024b2:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80024b6:	4839      	ldr	r0, [pc, #228]	; (800259c <HAL_TIM_Base_Start_IT+0x160>)
 80024b8:	f7fe f869 	bl	800058e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e04f      	b.n	800256c <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_TIM_Base_Start_IT+0x138>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01d      	beq.n	800252a <HAL_TIM_Base_Start_IT+0xee>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d018      	beq.n	800252a <HAL_TIM_Base_Start_IT+0xee>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_TIM_Base_Start_IT+0x13c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_TIM_Base_Start_IT+0xee>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_TIM_Base_Start_IT+0x140>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00e      	beq.n	800252a <HAL_TIM_Base_Start_IT+0xee>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_TIM_Base_Start_IT+0x14c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_TIM_Base_Start_IT+0xee>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_TIM_Base_Start_IT+0x150>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_TIM_Base_Start_IT+0xee>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_TIM_Base_Start_IT+0x15c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d115      	bne.n	8002556 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_TIM_Base_Start_IT+0x164>)
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b06      	cmp	r3, #6
 800253a:	d015      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x12c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d011      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	e008      	b.n	8002568 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e000      	b.n	800256a <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800
 8002580:	40001000 	.word	0x40001000
 8002584:	40001400 	.word	0x40001400
 8002588:	40013400 	.word	0x40013400
 800258c:	40014000 	.word	0x40014000
 8002590:	40014400 	.word	0x40014400
 8002594:	40014800 	.word	0x40014800
 8002598:	40015000 	.word	0x40015000
 800259c:	08007944 	.word	0x08007944
 80025a0:	00010007 	.word	0x00010007

080025a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0202 	mvn.w	r2, #2
 80025d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f965 	bl	80028b6 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f957 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f968 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b04      	cmp	r3, #4
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0204 	mvn.w	r2, #4
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f93b 	bl	80028b6 <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f92d 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f93e 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b08      	cmp	r3, #8
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0208 	mvn.w	r2, #8
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2204      	movs	r2, #4
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f911 	bl	80028b6 <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f903 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f914 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d122      	bne.n	80026fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d11b      	bne.n	80026fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0210 	mvn.w	r2, #16
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2208      	movs	r2, #8
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8e7 	bl	80028b6 <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8d9 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f8ea 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0201 	mvn.w	r2, #1
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fd ff1c 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b80      	cmp	r3, #128	; 0x80
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f978 	bl	8002a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d10e      	bne.n	8002782 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d107      	bne.n	8002782 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800277a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f96b 	bl	8002a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d10e      	bne.n	80027ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d107      	bne.n	80027ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f898 	bl	80028de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d10e      	bne.n	80027da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d107      	bne.n	80027da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f06f 0220 	mvn.w	r2, #32
 80027d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f92b 	bl	8002a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e8:	d10f      	bne.n	800280a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f8:	d107      	bne.n	800280a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f931 	bl	8002a6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002818:	d10f      	bne.n	800283a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002828:	d107      	bne.n	800283a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f923 	bl	8002a80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002848:	d10f      	bne.n	800286a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002858:	d107      	bne.n	800286a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f915 	bl	8002a94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002878:	d10f      	bne.n	800289a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002888:	d107      	bne.n	800289a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f907 	bl	8002aa8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <TIM_Base_SetConfig+0x11c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d00f      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <TIM_Base_SetConfig+0x120>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00b      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <TIM_Base_SetConfig+0x124>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3d      	ldr	r2, [pc, #244]	; (8002a1c <TIM_Base_SetConfig+0x128>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <TIM_Base_SetConfig+0x12c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d108      	bne.n	8002946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <TIM_Base_SetConfig+0x11c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d01b      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <TIM_Base_SetConfig+0x120>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d017      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <TIM_Base_SetConfig+0x124>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <TIM_Base_SetConfig+0x128>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00f      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <TIM_Base_SetConfig+0x130>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <TIM_Base_SetConfig+0x134>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <TIM_Base_SetConfig+0x138>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0x9a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <TIM_Base_SetConfig+0x12c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <TIM_Base_SetConfig+0x11c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <TIM_Base_SetConfig+0x100>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <TIM_Base_SetConfig+0x128>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00f      	beq.n	80029f4 <TIM_Base_SetConfig+0x100>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <TIM_Base_SetConfig+0x130>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x100>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <TIM_Base_SetConfig+0x134>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x100>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <TIM_Base_SetConfig+0x138>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x100>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <TIM_Base_SetConfig+0x12c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40013400 	.word	0x40013400
 8002a20:	40015000 	.word	0x40015000
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800

08002a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ace:	2b84      	cmp	r3, #132	; 0x84
 8002ad0:	d005      	beq.n	8002ade <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ad2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	3303      	adds	r3, #3
 8002adc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002af0:	f001 fa18 	bl	8003f24 <vTaskStartScheduler>
  
  return osOK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	bd80      	pop	{r7, pc}

08002afa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afc:	b089      	sub	sp, #36	; 0x24
 8002afe:	af04      	add	r7, sp, #16
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <osThreadCreate+0x54>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01c      	beq.n	8002b4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685c      	ldr	r4, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691e      	ldr	r6, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffc8 	bl	8002abc <makeFreeRtosPriority>
 8002b2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b36:	9202      	str	r2, [sp, #8]
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	9100      	str	r1, [sp, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4632      	mov	r2, r6
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 ffa4 	bl	8003a90 <xTaskCreateStatic>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e01c      	b.n	8002b88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685c      	ldr	r4, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ffaa 	bl	8002abc <makeFreeRtosPriority>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	9200      	str	r2, [sp, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	4632      	mov	r2, r6
 8002b76:	4629      	mov	r1, r5
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f000 ffe6 	bl	8003b4a <xTaskCreate>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f103 0208 	add.w	r2, r3, #8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8002baa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 0208 	add.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f103 0208 	add.w	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d103      	bne.n	8002c54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e00c      	b.n	8002c6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3308      	adds	r3, #8
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e002      	b.n	8002c62 <vListInsert+0x2e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d2f6      	bcs.n	8002c5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6892      	ldr	r2, [r2, #8]
 8002cbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6852      	ldr	r2, [r2, #4]
 8002cc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d103      	bne.n	8002cda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericReset+0x2a>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	60bb      	str	r3, [r7, #8]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d26:	f002 fcd5 	bl	80056d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	441a      	add	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	3b01      	subs	r3, #1
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	441a      	add	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d114      	bne.n	8002da6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01a      	beq.n	8002dba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3310      	adds	r3, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fb9f 	bl	80044cc <xTaskRemoveFromEventList>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d012      	beq.n	8002dba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <xQueueGenericReset+0xcc>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	e009      	b.n	8002dba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3310      	adds	r3, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fef1 	bl	8002b92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3324      	adds	r3, #36	; 0x24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff feec 	bl	8002b92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dba:	f002 fcbb 	bl	8005734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <xQueueGenericCreateStatic+0x52>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <xQueueGenericCreateStatic+0x56>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <xQueueGenericCreateStatic+0x58>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	623b      	str	r3, [r7, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <xQueueGenericCreateStatic+0x7e>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <xQueueGenericCreateStatic+0x82>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xQueueGenericCreateStatic+0x84>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	61fb      	str	r3, [r7, #28]
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e6a:	2350      	movs	r3, #80	; 0x50
 8002e6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b50      	cmp	r3, #80	; 0x50
 8002e72:	d00a      	beq.n	8002e8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	61bb      	str	r3, [r7, #24]
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f83f 	bl	8002f30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3730      	adds	r7, #48	; 0x30
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	613b      	str	r3, [r7, #16]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fd0f 	bl	8005918 <pvPortMalloc>
 8002efa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3350      	adds	r3, #80	; 0x50
 8002f0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f14:	79fa      	ldrb	r2, [r7, #7]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f805 	bl	8002f30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f26:	69bb      	ldr	r3, [r7, #24]
	}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e002      	b.n	8002f52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f5e:	2101      	movs	r1, #1
 8002f60:	69b8      	ldr	r0, [r7, #24]
 8002f62:	f7ff fecb 	bl	8002cfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f96:	2300      	movs	r3, #0
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f81d 	bl	8002fdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6939      	ldr	r1, [r7, #16]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff7a 	bl	8002ebc <xQueueGenericCreate>
 8002fc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff ffd3 	bl	8002f76 <prvInitialiseMutex>

		return xNewQueue;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericSend+0x32>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <xQueueGenericSend+0x40>
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <xQueueGenericSend+0x44>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <xQueueGenericSend+0x46>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <xQueueGenericSend+0x60>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d103      	bne.n	800304a <xQueueGenericSend+0x6e>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <xQueueGenericSend+0x72>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSend+0x74>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGenericSend+0x8e>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	623b      	str	r3, [r7, #32]
}
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800306a:	f001 fbff 	bl	800486c <xTaskGetSchedulerState>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <xQueueGenericSend+0x9e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <xQueueGenericSend+0xa2>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <xQueueGenericSend+0xa4>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericSend+0xbe>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61fb      	str	r3, [r7, #28]
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800309a:	f002 fb1b 	bl	80056d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xQueueGenericSend+0xd4>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d129      	bne.n	8003104 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030b6:	f000 fb52 	bl	800375e <prvCopyDataToQueue>
 80030ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	3324      	adds	r3, #36	; 0x24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 f9ff 	bl	80044cc <xTaskRemoveFromEventList>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <xQueueGenericSend+0x1f8>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	e00a      	b.n	80030fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <xQueueGenericSend+0x1f8>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030fc:	f002 fb1a 	bl	8005734 <vPortExitCritical>
				return pdPASS;
 8003100:	2301      	movs	r3, #1
 8003102:	e063      	b.n	80031cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800310a:	f002 fb13 	bl	8005734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800310e:	2300      	movs	r3, #0
 8003110:	e05c      	b.n	80031cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fa37 	bl	8004590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003126:	f002 fb05 	bl	8005734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800312a:	f000 ff6d 	bl	8004008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800312e:	f002 fad1 	bl	80056d4 <vPortEnterCritical>
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003138:	b25b      	sxtb	r3, r3
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d103      	bne.n	8003148 <xQueueGenericSend+0x16c>
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314e:	b25b      	sxtb	r3, r3
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d103      	bne.n	800315e <xQueueGenericSend+0x182>
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800315e:	f002 fae9 	bl	8005734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003162:	1d3a      	adds	r2, r7, #4
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fa26 	bl	80045bc <xTaskCheckForTimeOut>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d124      	bne.n	80031c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003178:	f000 fbe9 	bl	800394e <prvIsQueueFull>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	3310      	adds	r3, #16
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f001 f94e 	bl	800442c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003192:	f000 fb74 	bl	800387e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003196:	f000 ff45 	bl	8004024 <xTaskResumeAll>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f af7c 	bne.w	800309a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <xQueueGenericSend+0x1f8>)
 80031a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	e772      	b.n	800309a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b6:	f000 fb62 	bl	800387e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ba:	f000 ff33 	bl	8004024 <xTaskResumeAll>
 80031be:	e76c      	b.n	800309a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c2:	f000 fb5c 	bl	800387e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031c6:	f000 ff2d 	bl	8004024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3738      	adds	r7, #56	; 0x38
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b090      	sub	sp, #64	; 0x40
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <xQueueGenericSendFromISR+0x3c>
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <xQueueGenericSendFromISR+0x40>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <xQueueGenericSendFromISR+0x42>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d103      	bne.n	8003242 <xQueueGenericSendFromISR+0x6a>
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <xQueueGenericSendFromISR+0x6e>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <xQueueGenericSendFromISR+0x70>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	623b      	str	r3, [r7, #32]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003262:	f002 fb19 	bl	8005898 <vPortValidateInterruptPriority>
	__asm volatile
 8003266:	f3ef 8211 	mrs	r2, BASEPRI
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	61fa      	str	r2, [r7, #28]
 800327c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800327e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <xQueueGenericSendFromISR+0xbc>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d12f      	bne.n	80032f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800329a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032aa:	f000 fa58 	bl	800375e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d112      	bne.n	80032de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d016      	beq.n	80032ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	3324      	adds	r3, #36	; 0x24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f901 	bl	80044cc <xTaskRemoveFromEventList>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e007      	b.n	80032ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032e2:	3301      	adds	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	b25a      	sxtb	r2, r3
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032ee:	2301      	movs	r3, #1
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032f2:	e001      	b.n	80032f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	617b      	str	r3, [r7, #20]
	__asm volatile
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f383 8811 	msr	BASEPRI, r3
}
 8003302:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003306:	4618      	mov	r0, r3
 8003308:	3740      	adds	r7, #64	; 0x40
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <xQueueReceive+0x30>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	623b      	str	r3, [r7, #32]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <xQueueReceive+0x3e>
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <xQueueReceive+0x42>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <xQueueReceive+0x44>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <xQueueReceive+0x5e>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	61fb      	str	r3, [r7, #28]
}
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800336e:	f001 fa7d 	bl	800486c <xTaskGetSchedulerState>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <xQueueReceive+0x6e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <xQueueReceive+0x72>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueReceive+0x74>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueReceive+0x8e>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	61bb      	str	r3, [r7, #24]
}
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800339e:	f002 f999 	bl	80056d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01f      	beq.n	80033ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b2:	f000 fa3e 	bl	8003832 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00f      	beq.n	80033e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	3310      	adds	r3, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 f87e 	bl	80044cc <xTaskRemoveFromEventList>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <xQueueReceive+0x1bc>)
 80033d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033e6:	f002 f9a5 	bl	8005734 <vPortExitCritical>
				return pdPASS;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e069      	b.n	80034c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033f4:	f002 f99e 	bl	8005734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e062      	b.n	80034c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4618      	mov	r0, r3
 8003408:	f001 f8c2 	bl	8004590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003410:	f002 f990 	bl	8005734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003414:	f000 fdf8 	bl	8004008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003418:	f002 f95c 	bl	80056d4 <vPortEnterCritical>
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003422:	b25b      	sxtb	r3, r3
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d103      	bne.n	8003432 <xQueueReceive+0x122>
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003438:	b25b      	sxtb	r3, r3
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d103      	bne.n	8003448 <xQueueReceive+0x138>
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003448:	f002 f974 	bl	8005734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800344c:	1d3a      	adds	r2, r7, #4
 800344e:	f107 0310 	add.w	r3, r7, #16
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f001 f8b1 	bl	80045bc <xTaskCheckForTimeOut>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d123      	bne.n	80034a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003462:	f000 fa5e 	bl	8003922 <prvIsQueueEmpty>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ffd9 	bl	800442c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800347a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347c:	f000 f9ff 	bl	800387e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003480:	f000 fdd0 	bl	8004024 <xTaskResumeAll>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d189      	bne.n	800339e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <xQueueReceive+0x1bc>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	e780      	b.n	800339e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800349c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800349e:	f000 f9ee 	bl	800387e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034a2:	f000 fdbf 	bl	8004024 <xTaskResumeAll>
 80034a6:	e77a      	b.n	800339e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034aa:	f000 f9e8 	bl	800387e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ae:	f000 fdb9 	bl	8004024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b4:	f000 fa35 	bl	8003922 <prvIsQueueEmpty>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f43f af6f 	beq.w	800339e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	623b      	str	r3, [r7, #32]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	61fb      	str	r3, [r7, #28]
}
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003520:	f001 f9a4 	bl	800486c <xTaskGetSchedulerState>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <xQueueSemaphoreTake+0x60>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <xQueueSemaphoreTake+0x64>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <xQueueSemaphoreTake+0x66>
 8003534:	2300      	movs	r3, #0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	61bb      	str	r3, [r7, #24]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003550:	f002 f8c0 	bl	80056d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d024      	beq.n	80035aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003570:	f001 fb24 	bl	8004bbc <pvTaskIncrementMutexHeldCount>
 8003574:	4602      	mov	r2, r0
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00f      	beq.n	80035a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	3310      	adds	r3, #16
 8003586:	4618      	mov	r0, r3
 8003588:	f000 ffa0 	bl	80044cc <xTaskRemoveFromEventList>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <xQueueSemaphoreTake+0x214>)
 8003594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035a2:	f002 f8c7 	bl	8005734 <vPortExitCritical>
				return pdPASS;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e097      	b.n	80036da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	617b      	str	r3, [r7, #20]
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035cc:	f002 f8b2 	bl	8005734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e082      	b.n	80036da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ffd6 	bl	8004590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035e8:	f002 f8a4 	bl	8005734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ec:	f000 fd0c 	bl	8004008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035f0:	f002 f870 	bl	80056d4 <vPortEnterCritical>
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d103      	bne.n	800360a <xQueueSemaphoreTake+0x13a>
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003610:	b25b      	sxtb	r3, r3
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d103      	bne.n	8003620 <xQueueSemaphoreTake+0x150>
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003620:	f002 f888 	bl	8005734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003624:	463a      	mov	r2, r7
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 ffc5 	bl	80045bc <xTaskCheckForTimeOut>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d132      	bne.n	800369e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800363a:	f000 f972 	bl	8003922 <prvIsQueueEmpty>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d026      	beq.n	8003692 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800364c:	f002 f842 	bl	80056d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f927 	bl	80048a8 <xTaskPriorityInherit>
 800365a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800365c:	f002 f86a 	bl	8005734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fedf 	bl	800442c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800366e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003670:	f000 f905 	bl	800387e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003674:	f000 fcd6 	bl	8004024 <xTaskResumeAll>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	f47f af68 	bne.w	8003550 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <xQueueSemaphoreTake+0x214>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	e75e      	b.n	8003550 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003694:	f000 f8f3 	bl	800387e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003698:	f000 fcc4 	bl	8004024 <xTaskResumeAll>
 800369c:	e758      	b.n	8003550 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800369e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036a0:	f000 f8ed 	bl	800387e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036a4:	f000 fcbe 	bl	8004024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036aa:	f000 f93a 	bl	8003922 <prvIsQueueEmpty>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f43f af4d 	beq.w	8003550 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80036bc:	f002 f80a 	bl	80056d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80036c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036c2:	f000 f834 	bl	800372e <prvGetDisinheritPriorityAfterTimeout>
 80036c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f9e6 	bl	8004aa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036d4:	f002 f82e 	bl	8005734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3738      	adds	r7, #56	; 0x38
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <vQueueDelete+0x28>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60bb      	str	r3, [r7, #8]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f95f 	bl	80039d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f002 f9c5 	bl	8005ab0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1c3 0312 	rsb	r3, r3, #18
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e001      	b.n	8003750 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003750:	68fb      	ldr	r3, [r7, #12]
	}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d14d      	bne.n	8003820 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f903 	bl	8004994 <xTaskPriorityDisinherit>
 800378e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	e043      	b.n	8003820 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6858      	ldr	r0, [r3, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	461a      	mov	r2, r3
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	f003 fbd5 	bl	8006f58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	441a      	add	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d32b      	bcc.n	8003820 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	e026      	b.n	8003820 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68d8      	ldr	r0, [r3, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	461a      	mov	r2, r3
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	f003 fbbb 	bl	8006f58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	425b      	negs	r3, r3
 80037ec:	441a      	add	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d207      	bcs.n	800380e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	425b      	negs	r3, r3
 8003808:	441a      	add	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d105      	bne.n	8003820 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3b01      	subs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003828:	697b      	ldr	r3, [r7, #20]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d018      	beq.n	8003876 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	441a      	add	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d303      	bcc.n	8003866 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68d9      	ldr	r1, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	461a      	mov	r2, r3
 8003870:	6838      	ldr	r0, [r7, #0]
 8003872:	f003 fb71 	bl	8006f58 <memcpy>
	}
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003886:	f001 ff25 	bl	80056d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003890:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003892:	e011      	b.n	80038b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe13 	bl	80044cc <xTaskRemoveFromEventList>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038ac:	f000 fee8 	bl	8004680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	dce9      	bgt.n	8003894 <prvUnlockQueue+0x16>
 80038c0:	e000      	b.n	80038c4 <prvUnlockQueue+0x46>
					break;
 80038c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038cc:	f001 ff32 	bl	8005734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038d0:	f001 ff00 	bl	80056d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038dc:	e011      	b.n	8003902 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3310      	adds	r3, #16
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fdee 	bl	80044cc <xTaskRemoveFromEventList>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038f6:	f000 fec3 	bl	8004680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038fa:	7bbb      	ldrb	r3, [r7, #14]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003906:	2b00      	cmp	r3, #0
 8003908:	dce9      	bgt.n	80038de <prvUnlockQueue+0x60>
 800390a:	e000      	b.n	800390e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800390c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003916:	f001 ff0d 	bl	8005734 <vPortExitCritical>
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800392a:	f001 fed3 	bl	80056d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003936:	2301      	movs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e001      	b.n	8003940 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003940:	f001 fef8 	bl	8005734 <vPortExitCritical>

	return xReturn;
 8003944:	68fb      	ldr	r3, [r7, #12]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003956:	f001 febd 	bl	80056d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	429a      	cmp	r2, r3
 8003964:	d102      	bne.n	800396c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e001      	b.n	8003970 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003970:	f001 fee0 	bl	8005734 <vPortExitCritical>

	return xReturn;
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e014      	b.n	80039ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <vQueueAddToRegistry+0x50>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <vQueueAddToRegistry+0x50>)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <vQueueAddToRegistry+0x50>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039b2:	e006      	b.n	80039c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b07      	cmp	r3, #7
 80039be:	d9e7      	bls.n	8003990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000850 	.word	0x20000850

080039d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e016      	b.n	8003a10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <vQueueUnregisterQueue+0x50>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10b      	bne.n	8003a0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <vQueueUnregisterQueue+0x50>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2100      	movs	r1, #0
 80039f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80039fc:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <vQueueUnregisterQueue+0x50>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
				break;
 8003a08:	e006      	b.n	8003a18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b07      	cmp	r3, #7
 8003a14:	d9e5      	bls.n	80039e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	20000850 	.word	0x20000850

08003a28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a38:	f001 fe4c 	bl	80056d4 <vPortEnterCritical>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d103      	bne.n	8003a52 <vQueueWaitForMessageRestricted+0x2a>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a58:	b25b      	sxtb	r3, r3
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d103      	bne.n	8003a68 <vQueueWaitForMessageRestricted+0x40>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a68:	f001 fe64 	bl	8005734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3324      	adds	r3, #36	; 0x24
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fcf9 	bl	8004474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	f7ff fefb 	bl	800387e <prvUnlockQueue>
	}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08e      	sub	sp, #56	; 0x38
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <xTaskCreateStatic+0x2a>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	623b      	str	r3, [r7, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	61fb      	str	r3, [r7, #28]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ad6:	23ac      	movs	r3, #172	; 0xac
 8003ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2bac      	cmp	r3, #172	; 0xac
 8003ade:	d00a      	beq.n	8003af6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	61bb      	str	r3, [r7, #24]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003af6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01e      	beq.n	8003b3c <xTaskCreateStatic+0xac>
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b16:	2300      	movs	r3, #0
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f850 	bl	8003bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b36:	f000 f8f7 	bl	8003d28 <prvAddNewTaskToReadyList>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b40:	697b      	ldr	r3, [r7, #20]
	}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3728      	adds	r7, #40	; 0x28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b08c      	sub	sp, #48	; 0x30
 8003b4e:	af04      	add	r7, sp, #16
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 feda 	bl	8005918 <pvPortMalloc>
 8003b64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b6c:	20ac      	movs	r0, #172	; 0xac
 8003b6e:	f001 fed3 	bl	8005918 <pvPortMalloc>
 8003b72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b80:	e005      	b.n	8003b8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f001 ff94 	bl	8005ab0 <vPortFree>
 8003b88:	e001      	b.n	8003b8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9303      	str	r3, [sp, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	9302      	str	r3, [sp, #8]
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f80e 	bl	8003bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bb8:	69f8      	ldr	r0, [r7, #28]
 8003bba:	f000 f8b5 	bl	8003d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e002      	b.n	8003bca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bca:	69bb      	ldr	r3, [r7, #24]
	}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	21a5      	movs	r1, #165	; 0xa5
 8003bee:	f003 f8c1 	bl	8006d74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	617b      	str	r3, [r7, #20]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e012      	b.n	8003c5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	7819      	ldrb	r1, [r3, #0]
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	3334      	adds	r3, #52	; 0x34
 8003c48:	460a      	mov	r2, r1
 8003c4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d9e9      	bls.n	8003c38 <prvInitialiseNewTask+0x64>
 8003c64:	e000      	b.n	8003c68 <prvInitialiseNewTask+0x94>
			{
				break;
 8003c66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	e003      	b.n	8003c7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	2b11      	cmp	r3, #17
 8003c7e:	d901      	bls.n	8003c84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c80:	2311      	movs	r3, #17
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	2200      	movs	r2, #0
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe ff99 	bl	8002bd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe ff94 	bl	8002bd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	f1c3 0212 	rsb	r2, r3, #18
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	3358      	adds	r3, #88	; 0x58
 8003cda:	224c      	movs	r2, #76	; 0x4c
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 f848 	bl	8006d74 <memset>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <prvInitialiseNewTask+0x148>)
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <prvInitialiseNewTask+0x14c>)
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <prvInitialiseNewTask+0x150>)
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	68f9      	ldr	r1, [r7, #12]
 8003cfa:	69b8      	ldr	r0, [r7, #24]
 8003cfc:	f001 fbba 	bl	8005474 <pxPortInitialiseStack>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d12:	bf00      	nop
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000929c 	.word	0x2000929c
 8003d20:	20009304 	.word	0x20009304
 8003d24:	2000936c 	.word	0x2000936c

08003d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d30:	f001 fcd0 	bl	80056d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <prvAddNewTaskToReadyList+0xc0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <prvAddNewTaskToReadyList+0xc0>)
 8003d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d46:	4a29      	ldr	r2, [pc, #164]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <prvAddNewTaskToReadyList+0xc0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d54:	f000 fcb8 	bl	80046c8 <prvInitialiseTaskLists>
 8003d58:	e00d      	b.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d802      	bhi.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d76:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <prvAddNewTaskToReadyList+0xd4>)
 8003da8:	441a      	add	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7fe ff1b 	bl	8002bec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003db6:	f001 fcbd 	bl	8005734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d207      	bcs.n	8003de0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <prvAddNewTaskToReadyList+0xd8>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000a6c 	.word	0x20000a6c
 8003dec:	20000890 	.word	0x20000890
 8003df0:	20000a78 	.word	0x20000a78
 8003df4:	20000a88 	.word	0x20000a88
 8003df8:	20000a74 	.word	0x20000a74
 8003dfc:	20000894 	.word	0x20000894
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003e0c:	f001 fc62 	bl	80056d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <vTaskDelete+0x18>
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <vTaskDelete+0xf8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <vTaskDelete+0x1a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe ff3e 	bl	8002ca6 <uxListRemove>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d115      	bne.n	8003e5c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4932      	ldr	r1, [pc, #200]	; (8003f00 <vTaskDelete+0xfc>)
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <vTaskDelete+0x58>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43da      	mvns	r2, r3
 8003e52:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <vTaskDelete+0x100>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4013      	ands	r3, r2
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <vTaskDelete+0x100>)
 8003e5a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ff1c 	bl	8002ca6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <vTaskDelete+0x104>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <vTaskDelete+0x104>)
 8003e76:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003e78:	4b20      	ldr	r3, [pc, #128]	; (8003efc <vTaskDelete+0xf8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10b      	bne.n	8003e9a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4820      	ldr	r0, [pc, #128]	; (8003f0c <vTaskDelete+0x108>)
 8003e8a:	f7fe feaf 	bl	8002bec <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <vTaskDelete+0x10c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <vTaskDelete+0x10c>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	e009      	b.n	8003eae <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <vTaskDelete+0x110>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <vTaskDelete+0x110>)
 8003ea2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fc7d 	bl	80047a4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003eaa:	f000 fcaf 	bl	800480c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003eae:	f001 fc41 	bl	8005734 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <vTaskDelete+0x114>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01b      	beq.n	8003ef2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <vTaskDelete+0xf8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d116      	bne.n	8003ef2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <vTaskDelete+0x118>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <vTaskDelete+0xde>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	60bb      	str	r3, [r7, #8]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <vTaskDelete+0x11c>)
 8003ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000890 	.word	0x20000890
 8003f00:	20000894 	.word	0x20000894
 8003f04:	20000a74 	.word	0x20000a74
 8003f08:	20000a88 	.word	0x20000a88
 8003f0c:	20000a40 	.word	0x20000a40
 8003f10:	20000a54 	.word	0x20000a54
 8003f14:	20000a6c 	.word	0x20000a6c
 8003f18:	20000a78 	.word	0x20000a78
 8003f1c:	20000a94 	.word	0x20000a94
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f32:	463a      	mov	r2, r7
 8003f34:	1d39      	adds	r1, r7, #4
 8003f36:	f107 0308 	add.w	r3, r7, #8
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc f9da 	bl	80002f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	9202      	str	r2, [sp, #8]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	460a      	mov	r2, r1
 8003f52:	4925      	ldr	r1, [pc, #148]	; (8003fe8 <vTaskStartScheduler+0xc4>)
 8003f54:	4825      	ldr	r0, [pc, #148]	; (8003fec <vTaskStartScheduler+0xc8>)
 8003f56:	f7ff fd9b 	bl	8003a90 <xTaskCreateStatic>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <vTaskStartScheduler+0xcc>)
 8003f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <vTaskStartScheduler+0xcc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e001      	b.n	8003f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f78:	f000 fe9a 	bl	8004cb0 <xTimerCreateTimerTask>
 8003f7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d11d      	bne.n	8003fc0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <vTaskStartScheduler+0xd0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3358      	adds	r3, #88	; 0x58
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <vTaskStartScheduler+0xd4>)
 8003fa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <vTaskStartScheduler+0xd8>)
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <vTaskStartScheduler+0xdc>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <vTaskStartScheduler+0xe0>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003fb6:	f7fc f983 	bl	80002c0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fba:	f001 fae9 	bl	8005590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fbe:	e00e      	b.n	8003fde <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d10a      	bne.n	8003fde <vTaskStartScheduler+0xba>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60fb      	str	r3, [r7, #12]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <vTaskStartScheduler+0xb8>
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	0800797c 	.word	0x0800797c
 8003fec:	08004699 	.word	0x08004699
 8003ff0:	20000a90 	.word	0x20000a90
 8003ff4:	20000890 	.word	0x20000890
 8003ff8:	20000068 	.word	0x20000068
 8003ffc:	20000a8c 	.word	0x20000a8c
 8004000:	20000a78 	.word	0x20000a78
 8004004:	20000a70 	.word	0x20000a70

08004008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <vTaskSuspendAll+0x18>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	4a03      	ldr	r2, [pc, #12]	; (8004020 <vTaskSuspendAll+0x18>)
 8004014:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000a94 	.word	0x20000a94

08004024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <xTaskResumeAll+0x114>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <xTaskResumeAll+0x2c>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	603b      	str	r3, [r7, #0]
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004050:	f001 fb40 	bl	80056d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004054:	4b38      	ldr	r3, [pc, #224]	; (8004138 <xTaskResumeAll+0x114>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3b01      	subs	r3, #1
 800405a:	4a37      	ldr	r2, [pc, #220]	; (8004138 <xTaskResumeAll+0x114>)
 800405c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <xTaskResumeAll+0x114>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d161      	bne.n	800412a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004066:	4b35      	ldr	r3, [pc, #212]	; (800413c <xTaskResumeAll+0x118>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d05d      	beq.n	800412a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406e:	e02e      	b.n	80040ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004070:	4b33      	ldr	r3, [pc, #204]	; (8004140 <xTaskResumeAll+0x11c>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3318      	adds	r3, #24
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fe12 	bl	8002ca6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fe0d 	bl	8002ca6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	2201      	movs	r2, #1
 8004092:	409a      	lsls	r2, r3
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <xTaskResumeAll+0x120>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	4a2a      	ldr	r2, [pc, #168]	; (8004144 <xTaskResumeAll+0x120>)
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <xTaskResumeAll+0x124>)
 80040ac:	441a      	add	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fe fd99 	bl	8002bec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4b23      	ldr	r3, [pc, #140]	; (800414c <xTaskResumeAll+0x128>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040c8:	4b21      	ldr	r3, [pc, #132]	; (8004150 <xTaskResumeAll+0x12c>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <xTaskResumeAll+0x11c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1cc      	bne.n	8004070 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040dc:	f000 fb96 	bl	800480c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040e0:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <xTaskResumeAll+0x130>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040ec:	f000 f858 	bl	80041a0 <xTaskIncrementTick>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040f6:	4b16      	ldr	r3, [pc, #88]	; (8004150 <xTaskResumeAll+0x12c>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f1      	bne.n	80040ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <xTaskResumeAll+0x130>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <xTaskResumeAll+0x12c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <xTaskResumeAll+0x134>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800412a:	f001 fb03 	bl	8005734 <vPortExitCritical>

	return xAlreadyYielded;
 800412e:	68bb      	ldr	r3, [r7, #8]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000a94 	.word	0x20000a94
 800413c:	20000a6c 	.word	0x20000a6c
 8004140:	20000a2c 	.word	0x20000a2c
 8004144:	20000a74 	.word	0x20000a74
 8004148:	20000894 	.word	0x20000894
 800414c:	20000890 	.word	0x20000890
 8004150:	20000a80 	.word	0x20000a80
 8004154:	20000a7c 	.word	0x20000a7c
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <xTaskGetTickCount+0x1c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004168:	687b      	ldr	r3, [r7, #4]
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000a70 	.word	0x20000a70

0800417c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004182:	f001 fb89 	bl	8005898 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <xTaskGetTickCountFromISR+0x20>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004190:	683b      	ldr	r3, [r7, #0]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000a70 	.word	0x20000a70

080041a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041aa:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <xTaskIncrementTick+0x144>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 808e 	bne.w	80042d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041b4:	4b4c      	ldr	r3, [pc, #304]	; (80042e8 <xTaskIncrementTick+0x148>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041bc:	4a4a      	ldr	r2, [pc, #296]	; (80042e8 <xTaskIncrementTick+0x148>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d120      	bne.n	800420a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041c8:	4b48      	ldr	r3, [pc, #288]	; (80042ec <xTaskIncrementTick+0x14c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	603b      	str	r3, [r7, #0]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xTaskIncrementTick+0x46>
 80041e8:	4b40      	ldr	r3, [pc, #256]	; (80042ec <xTaskIncrementTick+0x14c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <xTaskIncrementTick+0x150>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a3e      	ldr	r2, [pc, #248]	; (80042ec <xTaskIncrementTick+0x14c>)
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4a3e      	ldr	r2, [pc, #248]	; (80042f0 <xTaskIncrementTick+0x150>)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b3d      	ldr	r3, [pc, #244]	; (80042f4 <xTaskIncrementTick+0x154>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <xTaskIncrementTick+0x154>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	f000 fb01 	bl	800480c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800420a:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <xTaskIncrementTick+0x158>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d348      	bcc.n	80042a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004214:	4b35      	ldr	r3, [pc, #212]	; (80042ec <xTaskIncrementTick+0x14c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <xTaskIncrementTick+0x158>)
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	601a      	str	r2, [r3, #0]
					break;
 8004226:	e03e      	b.n	80042a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004228:	4b30      	ldr	r3, [pc, #192]	; (80042ec <xTaskIncrementTick+0x14c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d203      	bcs.n	8004248 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <xTaskIncrementTick+0x158>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004246:	e02e      	b.n	80042a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3304      	adds	r3, #4
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fd2a 	bl	8002ca6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3318      	adds	r3, #24
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fd21 	bl	8002ca6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <xTaskIncrementTick+0x15c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <xTaskIncrementTick+0x15c>)
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <xTaskIncrementTick+0x160>)
 8004284:	441a      	add	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f7fe fcad 	bl	8002bec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <xTaskIncrementTick+0x164>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	429a      	cmp	r2, r3
 800429e:	d3b9      	bcc.n	8004214 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a4:	e7b6      	b.n	8004214 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <xTaskIncrementTick+0x164>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4914      	ldr	r1, [pc, #80]	; (8004300 <xTaskIncrementTick+0x160>)
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d901      	bls.n	80042c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <xTaskIncrementTick+0x168>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e004      	b.n	80042da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <xTaskIncrementTick+0x16c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a0d      	ldr	r2, [pc, #52]	; (800430c <xTaskIncrementTick+0x16c>)
 80042d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042da:	697b      	ldr	r3, [r7, #20]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000a94 	.word	0x20000a94
 80042e8:	20000a70 	.word	0x20000a70
 80042ec:	20000a24 	.word	0x20000a24
 80042f0:	20000a28 	.word	0x20000a28
 80042f4:	20000a84 	.word	0x20000a84
 80042f8:	20000a8c 	.word	0x20000a8c
 80042fc:	20000a74 	.word	0x20000a74
 8004300:	20000894 	.word	0x20000894
 8004304:	20000890 	.word	0x20000890
 8004308:	20000a80 	.word	0x20000a80
 800430c:	20000a7c 	.word	0x20000a7c

08004310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004316:	4b3d      	ldr	r3, [pc, #244]	; (800440c <vTaskSwitchContext+0xfc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800431e:	4b3c      	ldr	r3, [pc, #240]	; (8004410 <vTaskSwitchContext+0x100>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004324:	e06e      	b.n	8004404 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8004326:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <vTaskSwitchContext+0x100>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800432c:	f7fb ffcf 	bl	80002ce <getRunTimeCounterValue>
 8004330:	4603      	mov	r3, r0
 8004332:	4a38      	ldr	r2, [pc, #224]	; (8004414 <vTaskSwitchContext+0x104>)
 8004334:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004336:	4b37      	ldr	r3, [pc, #220]	; (8004414 <vTaskSwitchContext+0x104>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b37      	ldr	r3, [pc, #220]	; (8004418 <vTaskSwitchContext+0x108>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d909      	bls.n	8004356 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004342:	4b36      	ldr	r3, [pc, #216]	; (800441c <vTaskSwitchContext+0x10c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004348:	4a32      	ldr	r2, [pc, #200]	; (8004414 <vTaskSwitchContext+0x104>)
 800434a:	6810      	ldr	r0, [r2, #0]
 800434c:	4a32      	ldr	r2, [pc, #200]	; (8004418 <vTaskSwitchContext+0x108>)
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	1a82      	subs	r2, r0, r2
 8004352:	440a      	add	r2, r1
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <vTaskSwitchContext+0x104>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2f      	ldr	r2, [pc, #188]	; (8004418 <vTaskSwitchContext+0x108>)
 800435c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800435e:	4b2f      	ldr	r3, [pc, #188]	; (800441c <vTaskSwitchContext+0x10c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <vTaskSwitchContext+0x10c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	429a      	cmp	r2, r3
 800436c:	d808      	bhi.n	8004380 <vTaskSwitchContext+0x70>
 800436e:	4b2b      	ldr	r3, [pc, #172]	; (800441c <vTaskSwitchContext+0x10c>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <vTaskSwitchContext+0x10c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3334      	adds	r3, #52	; 0x34
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f7fb ffaf 	bl	80002de <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <vTaskSwitchContext+0x110>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	fab3 f383 	clz	r3, r3
 800438c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800438e:	7afb      	ldrb	r3, [r7, #11]
 8004390:	f1c3 031f 	rsb	r3, r3, #31
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	4923      	ldr	r1, [pc, #140]	; (8004424 <vTaskSwitchContext+0x114>)
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <vTaskSwitchContext+0xb0>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	607b      	str	r3, [r7, #4]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <vTaskSwitchContext+0xae>
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <vTaskSwitchContext+0x114>)
 80043cc:	4413      	add	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3308      	adds	r3, #8
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d104      	bne.n	80043f0 <vTaskSwitchContext+0xe0>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <vTaskSwitchContext+0x10c>)
 80043f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <vTaskSwitchContext+0x10c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3358      	adds	r3, #88	; 0x58
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <vTaskSwitchContext+0x118>)
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000a94 	.word	0x20000a94
 8004410:	20000a80 	.word	0x20000a80
 8004414:	20000a9c 	.word	0x20000a9c
 8004418:	20000a98 	.word	0x20000a98
 800441c:	20000890 	.word	0x20000890
 8004420:	20000a74 	.word	0x20000a74
 8004424:	20000894 	.word	0x20000894
 8004428:	20000068 	.word	0x20000068

0800442c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <vTaskPlaceOnEventList+0x44>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3318      	adds	r3, #24
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fe fbea 	bl	8002c34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004460:	2101      	movs	r1, #1
 8004462:	6838      	ldr	r0, [r7, #0]
 8004464:	f000 fbbe 	bl	8004be4 <prvAddCurrentTaskToDelayedList>
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000890 	.word	0x20000890

08004474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	617b      	str	r3, [r7, #20]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3318      	adds	r3, #24
 80044a2:	4619      	mov	r1, r3
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7fe fba1 	bl	8002bec <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	68b8      	ldr	r0, [r7, #8]
 80044ba:	f000 fb93 	bl	8004be4 <prvAddCurrentTaskToDelayedList>
	}
 80044be:	bf00      	nop
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000890 	.word	0x20000890

080044cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	60fb      	str	r3, [r7, #12]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3318      	adds	r3, #24
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fbd2 	bl	8002ca6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <xTaskRemoveFromEventList+0xac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11c      	bne.n	8004544 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fbc9 	bl	8002ca6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	2201      	movs	r2, #1
 800451a:	409a      	lsls	r2, r3
 800451c:	4b17      	ldr	r3, [pc, #92]	; (800457c <xTaskRemoveFromEventList+0xb0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4313      	orrs	r3, r2
 8004522:	4a16      	ldr	r2, [pc, #88]	; (800457c <xTaskRemoveFromEventList+0xb0>)
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <xTaskRemoveFromEventList+0xb4>)
 8004534:	441a      	add	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fe fb55 	bl	8002bec <vListInsertEnd>
 8004542:	e005      	b.n	8004550 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	3318      	adds	r3, #24
 8004548:	4619      	mov	r1, r3
 800454a:	480e      	ldr	r0, [pc, #56]	; (8004584 <xTaskRemoveFromEventList+0xb8>)
 800454c:	f7fe fb4e 	bl	8002bec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <xTaskRemoveFromEventList+0xbc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	429a      	cmp	r2, r3
 800455c:	d905      	bls.n	800456a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <xTaskRemoveFromEventList+0xc0>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e001      	b.n	800456e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800456e:	697b      	ldr	r3, [r7, #20]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000a94 	.word	0x20000a94
 800457c:	20000a74 	.word	0x20000a74
 8004580:	20000894 	.word	0x20000894
 8004584:	20000a2c 	.word	0x20000a2c
 8004588:	20000890 	.word	0x20000890
 800458c:	20000a80 	.word	0x20000a80

08004590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <vTaskInternalSetTimeOutState+0x24>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <vTaskInternalSetTimeOutState+0x28>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	20000a84 	.word	0x20000a84
 80045b8:	20000a70 	.word	0x20000a70

080045bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	613b      	str	r3, [r7, #16]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	60fb      	str	r3, [r7, #12]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045fe:	f001 f869 	bl	80056d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <xTaskCheckForTimeOut+0xbc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d102      	bne.n	8004622 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e023      	b.n	800466a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <xTaskCheckForTimeOut+0xc0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d007      	beq.n	800463e <xTaskCheckForTimeOut+0x82>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e015      	b.n	800466a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	d20b      	bcs.n	8004660 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff9b 	bl	8004590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e004      	b.n	800466a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800466a:	f001 f863 	bl	8005734 <vPortExitCritical>

	return xReturn;
 800466e:	69fb      	ldr	r3, [r7, #28]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000a70 	.word	0x20000a70
 800467c:	20000a84 	.word	0x20000a84

08004680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <vTaskMissedYield+0x14>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	20000a80 	.word	0x20000a80

08004698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046a0:	f000 f852 	bl	8004748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <prvIdleTask+0x28>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d9f9      	bls.n	80046a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <prvIdleTask+0x2c>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046bc:	e7f0      	b.n	80046a0 <prvIdleTask+0x8>
 80046be:	bf00      	nop
 80046c0:	20000894 	.word	0x20000894
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	e00c      	b.n	80046ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4a12      	ldr	r2, [pc, #72]	; (8004728 <prvInitialiseTaskLists+0x60>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fa55 	bl	8002b92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3301      	adds	r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b11      	cmp	r3, #17
 80046f2:	d9ef      	bls.n	80046d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046f4:	480d      	ldr	r0, [pc, #52]	; (800472c <prvInitialiseTaskLists+0x64>)
 80046f6:	f7fe fa4c 	bl	8002b92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046fa:	480d      	ldr	r0, [pc, #52]	; (8004730 <prvInitialiseTaskLists+0x68>)
 80046fc:	f7fe fa49 	bl	8002b92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004700:	480c      	ldr	r0, [pc, #48]	; (8004734 <prvInitialiseTaskLists+0x6c>)
 8004702:	f7fe fa46 	bl	8002b92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004706:	480c      	ldr	r0, [pc, #48]	; (8004738 <prvInitialiseTaskLists+0x70>)
 8004708:	f7fe fa43 	bl	8002b92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800470c:	480b      	ldr	r0, [pc, #44]	; (800473c <prvInitialiseTaskLists+0x74>)
 800470e:	f7fe fa40 	bl	8002b92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <prvInitialiseTaskLists+0x78>)
 8004714:	4a05      	ldr	r2, [pc, #20]	; (800472c <prvInitialiseTaskLists+0x64>)
 8004716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvInitialiseTaskLists+0x7c>)
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <prvInitialiseTaskLists+0x68>)
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000894 	.word	0x20000894
 800472c:	200009fc 	.word	0x200009fc
 8004730:	20000a10 	.word	0x20000a10
 8004734:	20000a2c 	.word	0x20000a2c
 8004738:	20000a40 	.word	0x20000a40
 800473c:	20000a58 	.word	0x20000a58
 8004740:	20000a24 	.word	0x20000a24
 8004744:	20000a28 	.word	0x20000a28

08004748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800474e:	e019      	b.n	8004784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004750:	f000 ffc0 	bl	80056d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <prvCheckTasksWaitingTermination+0x50>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe faa0 	bl	8002ca6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <prvCheckTasksWaitingTermination+0x54>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	4a0b      	ldr	r2, [pc, #44]	; (800479c <prvCheckTasksWaitingTermination+0x54>)
 800476e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <prvCheckTasksWaitingTermination+0x58>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <prvCheckTasksWaitingTermination+0x58>)
 8004778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800477a:	f000 ffdb 	bl	8005734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f810 	bl	80047a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <prvCheckTasksWaitingTermination+0x58>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e1      	bne.n	8004750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000a40 	.word	0x20000a40
 800479c:	20000a6c 	.word	0x20000a6c
 80047a0:	20000a54 	.word	0x20000a54

080047a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3358      	adds	r3, #88	; 0x58
 80047b0:	4618      	mov	r0, r3
 80047b2:	f002 fb0b 	bl	8006dcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d108      	bne.n	80047d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 f973 	bl	8005ab0 <vPortFree>
				vPortFree( pxTCB );
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 f970 	bl	8005ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047d0:	e018      	b.n	8004804 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d103      	bne.n	80047e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 f967 	bl	8005ab0 <vPortFree>
	}
 80047e2:	e00f      	b.n	8004804 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d00a      	beq.n	8004804 <prvDeleteTCB+0x60>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60fb      	str	r3, [r7, #12]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <prvDeleteTCB+0x5e>
	}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <prvResetNextTaskUnblockTime+0x38>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <prvResetNextTaskUnblockTime+0x3c>)
 800481e:	f04f 32ff 	mov.w	r2, #4294967295
 8004822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004824:	e008      	b.n	8004838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <prvResetNextTaskUnblockTime+0x38>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <prvResetNextTaskUnblockTime+0x3c>)
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	20000a24 	.word	0x20000a24
 8004848:	20000a8c 	.word	0x20000a8c

0800484c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <xTaskGetCurrentTaskHandle+0x1c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004858:	687b      	ldr	r3, [r7, #4]
	}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000890 	.word	0x20000890

0800486c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <xTaskGetSchedulerState+0x34>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800487a:	2301      	movs	r3, #1
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	e008      	b.n	8004892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <xTaskGetSchedulerState+0x38>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004888:	2302      	movs	r3, #2
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	e001      	b.n	8004892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004892:	687b      	ldr	r3, [r7, #4]
	}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	20000a78 	.word	0x20000a78
 80048a4:	20000a94 	.word	0x20000a94

080048a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d05e      	beq.n	800497c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <xTaskPriorityInherit+0xe0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d24e      	bcs.n	800496a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db06      	blt.n	80048e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d4:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <xTaskPriorityInherit+0xe0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f1c3 0212 	rsb	r2, r3, #18
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6959      	ldr	r1, [r3, #20]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a26      	ldr	r2, [pc, #152]	; (800498c <xTaskPriorityInherit+0xe4>)
 80048f4:	4413      	add	r3, r2
 80048f6:	4299      	cmp	r1, r3
 80048f8:	d12f      	bne.n	800495a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe f9d1 	bl	8002ca6 <uxListRemove>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	2201      	movs	r2, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43da      	mvns	r2, r3
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <xTaskPriorityInherit+0xe8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4013      	ands	r3, r2
 800491c:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <xTaskPriorityInherit+0xe8>)
 800491e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <xTaskPriorityInherit+0xe0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	2201      	movs	r2, #1
 8004930:	409a      	lsls	r2, r3
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <xTaskPriorityInherit+0xe8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	4a15      	ldr	r2, [pc, #84]	; (8004990 <xTaskPriorityInherit+0xe8>)
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4a10      	ldr	r2, [pc, #64]	; (800498c <xTaskPriorityInherit+0xe4>)
 800494a:	441a      	add	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fe f94a 	bl	8002bec <vListInsertEnd>
 8004958:	e004      	b.n	8004964 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <xTaskPriorityInherit+0xe0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e008      	b.n	800497c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <xTaskPriorityInherit+0xe0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d201      	bcs.n	800497c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800497c:	68fb      	ldr	r3, [r7, #12]
	}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000890 	.word	0x20000890
 800498c:	20000894 	.word	0x20000894
 8004990:	20000a74 	.word	0x20000a74

08004994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06e      	beq.n	8004a88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049aa:	4b3a      	ldr	r3, [pc, #232]	; (8004a94 <xTaskPriorityDisinherit+0x100>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d00a      	beq.n	80049ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60fb      	str	r3, [r7, #12]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60bb      	str	r3, [r7, #8]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	1e5a      	subs	r2, r3, #1
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d044      	beq.n	8004a88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d140      	bne.n	8004a88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe f94b 	bl	8002ca6 <uxListRemove>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d115      	bne.n	8004a42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	491f      	ldr	r1, [pc, #124]	; (8004a98 <xTaskPriorityDisinherit+0x104>)
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xTaskPriorityDisinherit+0xae>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2201      	movs	r2, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <xTaskPriorityDisinherit+0x108>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <xTaskPriorityDisinherit+0x108>)
 8004a40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f1c3 0212 	rsb	r2, r3, #18
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <xTaskPriorityDisinherit+0x108>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <xTaskPriorityDisinherit+0x108>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <xTaskPriorityDisinherit+0x104>)
 8004a76:	441a      	add	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fe f8b4 	bl	8002bec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a88:	697b      	ldr	r3, [r7, #20]
	}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000890 	.word	0x20000890
 8004a98:	20000894 	.word	0x20000894
 8004a9c:	20000a74 	.word	0x20000a74

08004aa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d077      	beq.n	8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60fb      	str	r3, [r7, #12]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d902      	bls.n	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e002      	b.n	8004aec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d058      	beq.n	8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d153      	bne.n	8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d10a      	bne.n	8004b20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60bb      	str	r3, [r7, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	db04      	blt.n	8004b3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f1c3 0212 	rsb	r2, r3, #18
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	6959      	ldr	r1, [r3, #20]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b4e:	4413      	add	r3, r2
 8004b50:	4299      	cmp	r1, r3
 8004b52:	d129      	bne.n	8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe f8a4 	bl	8002ca6 <uxListRemove>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	2201      	movs	r2, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4013      	ands	r3, r2
 8004b76:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	2201      	movs	r2, #1
 8004b80:	409a      	lsls	r2, r3
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4a0b      	ldr	r2, [pc, #44]	; (8004bb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b9a:	441a      	add	r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fe f822 	bl	8002bec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ba8:	bf00      	nop
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000890 	.word	0x20000890
 8004bb4:	20000894 	.word	0x20000894
 8004bb8:	20000a74 	.word	0x20000a74

08004bbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bce:	3201      	adds	r2, #1
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004bd2:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
	}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000890 	.word	0x20000890

08004be4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bee:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf4:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe f853 	bl	8002ca6 <uxListRemove>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d10a      	bne.n	8004c3c <prvAddCurrentTaskToDelayedList+0x58>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	481a      	ldr	r0, [pc, #104]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c36:	f7fd ffd9 	bl	8002bec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c3a:	e026      	b.n	8004c8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c44:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d209      	bcs.n	8004c68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fd ffe7 	bl	8002c34 <vListInsert>
}
 8004c66:	e010      	b.n	8004c8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fd ffdd 	bl	8002c34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d202      	bcs.n	8004c8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6013      	str	r3, [r2, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000a70 	.word	0x20000a70
 8004c98:	20000890 	.word	0x20000890
 8004c9c:	20000a74 	.word	0x20000a74
 8004ca0:	20000a58 	.word	0x20000a58
 8004ca4:	20000a28 	.word	0x20000a28
 8004ca8:	20000a24 	.word	0x20000a24
 8004cac:	20000a8c 	.word	0x20000a8c

08004cb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	; 0x28
 8004cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cba:	f000 fb7b 	bl	80053b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <xTimerCreateTimerTask+0x80>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d021      	beq.n	8004d0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cce:	1d3a      	adds	r2, r7, #4
 8004cd0:	f107 0108 	add.w	r1, r7, #8
 8004cd4:	f107 030c 	add.w	r3, r7, #12
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fb fb25 	bl	8000328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	9202      	str	r2, [sp, #8]
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	2302      	movs	r3, #2
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2300      	movs	r3, #0
 8004cee:	460a      	mov	r2, r1
 8004cf0:	4910      	ldr	r1, [pc, #64]	; (8004d34 <xTimerCreateTimerTask+0x84>)
 8004cf2:	4811      	ldr	r0, [pc, #68]	; (8004d38 <xTimerCreateTimerTask+0x88>)
 8004cf4:	f7fe fecc 	bl	8003a90 <xTaskCreateStatic>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <xTimerCreateTimerTask+0x8c>)
 8004cfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <xTimerCreateTimerTask+0x8c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d06:	2301      	movs	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	613b      	str	r3, [r7, #16]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d26:	697b      	ldr	r3, [r7, #20]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000ad0 	.word	0x20000ad0
 8004d34:	080079ac 	.word	0x080079ac
 8004d38:	08004f95 	.word	0x08004f95
 8004d3c:	20000ad4 	.word	0x20000ad4

08004d40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004d4e:	202c      	movs	r0, #44	; 0x2c
 8004d50:	f000 fde2 	bl	8005918 <pvPortMalloc>
 8004d54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f805 	bl	8004d82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004d78:	697b      	ldr	r3, [r7, #20]
	}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	617b      	str	r3, [r7, #20]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01e      	beq.n	8004df0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004db2:	f000 faff 	bl	80053b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fefd 	bl	8002bd2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de4:	f043 0304 	orr.w	r3, r3, #4
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	623b      	str	r3, [r7, #32]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <xTimerGenericCommand+0x98>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d02a      	beq.n	8004e84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	dc18      	bgt.n	8004e72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e40:	f7ff fd14 	bl	800486c <xTaskGetSchedulerState>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d109      	bne.n	8004e5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <xTimerGenericCommand+0x98>)
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	f107 0114 	add.w	r1, r7, #20
 8004e52:	2300      	movs	r3, #0
 8004e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e56:	f7fe f8c1 	bl	8002fdc <xQueueGenericSend>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e5c:	e012      	b.n	8004e84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <xTimerGenericCommand+0x98>)
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	f107 0114 	add.w	r1, r7, #20
 8004e66:	2300      	movs	r3, #0
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f7fe f8b7 	bl	8002fdc <xQueueGenericSend>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004e70:	e008      	b.n	8004e84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e72:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <xTimerGenericCommand+0x98>)
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	f107 0114 	add.w	r1, r7, #20
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	f7fe f9ab 	bl	80031d8 <xQueueGenericSendFromISR>
 8004e82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	; 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000ad0 	.word	0x20000ad0

08004e94 <vTimerSetReloadMode>:
	return pxTimer->xTimerPeriodInTicks;
}
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
Timer_t * pxTimer =  xTimer;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <vTimerSetReloadMode+0x2a>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60bb      	str	r3, [r7, #8]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTimerSetReloadMode+0x28>
	taskENTER_CRITICAL();
 8004ebe:	f000 fc09 	bl	80056d4 <vPortEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <vTimerSetReloadMode+0x48>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ece:	f043 0304 	orr.w	r3, r3, #4
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004eda:	e008      	b.n	8004eee <vTimerSetReloadMode+0x5a>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f000 fc21 	bl	8005734 <vPortExitCritical>
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f06:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <prvProcessExpiredTimer+0x94>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fd fec6 	bl	8002ca6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d022      	beq.n	8004f6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	18d1      	adds	r1, r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	f000 f8d1 	bl	80050dc <prvInsertTimerInActiveList>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01f      	beq.n	8004f80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	2100      	movs	r1, #0
 8004f4a:	6978      	ldr	r0, [r7, #20]
 8004f4c:	f7ff ff54 	bl	8004df8 <xTimerGenericCommand>
 8004f50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d113      	bne.n	8004f80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	6978      	ldr	r0, [r7, #20]
 8004f86:	4798      	blx	r3
}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000ac8 	.word	0x20000ac8

08004f94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f9c:	f107 0308 	add.w	r3, r7, #8
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f857 	bl	8005054 <prvGetNextExpireTime>
 8004fa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4619      	mov	r1, r3
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f803 	bl	8004fb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fb2:	f000 f8d5 	bl	8005160 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fb6:	e7f1      	b.n	8004f9c <prvTimerTask+0x8>

08004fb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fc2:	f7ff f821 	bl	8004008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f866 	bl	800509c <prvSampleTimeNow>
 8004fd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d130      	bne.n	800503a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <prvProcessTimerOrBlockTask+0x3c>
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d806      	bhi.n	8004ff4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fe6:	f7ff f81d 	bl	8004024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ff85 	bl	8004efc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ff2:	e024      	b.n	800503e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <prvProcessTimerOrBlockTask+0x90>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <prvProcessTimerOrBlockTask+0x50>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <prvProcessTimerOrBlockTask+0x52>
 8005008:	2300      	movs	r3, #0
 800500a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <prvProcessTimerOrBlockTask+0x94>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	f7fe fd05 	bl	8003a28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800501e:	f7ff f801 	bl	8004024 <xTaskResumeAll>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <prvProcessTimerOrBlockTask+0x98>)
 800502a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	f3bf 8f6f 	isb	sy
}
 8005038:	e001      	b.n	800503e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800503a:	f7fe fff3 	bl	8004024 <xTaskResumeAll>
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000acc 	.word	0x20000acc
 800504c:	20000ad0 	.word	0x20000ad0
 8005050:	e000ed04 	.word	0xe000ed04

08005054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <prvGetNextExpireTime+0x44>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <prvGetNextExpireTime+0x16>
 8005066:	2201      	movs	r2, #1
 8005068:	e000      	b.n	800506c <prvGetNextExpireTime+0x18>
 800506a:	2200      	movs	r2, #0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <prvGetNextExpireTime+0x44>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e001      	b.n	8005088 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000ac8 	.word	0x20000ac8

0800509c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050a4:	f7ff f85a 	bl	800415c <xTaskGetTickCount>
 80050a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <prvSampleTimeNow+0x3c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d205      	bcs.n	80050c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050b4:	f000 f91a 	bl	80052ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e002      	b.n	80050c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050c6:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <prvSampleTimeNow+0x3c>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000ad8 	.word	0x20000ad8

080050dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d812      	bhi.n	8005128 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	429a      	cmp	r2, r3
 800510e:	d302      	bcc.n	8005116 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e01b      	b.n	800514e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <prvInsertTimerInActiveList+0x7c>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7fd fd87 	bl	8002c34 <vListInsert>
 8005126:	e012      	b.n	800514e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d206      	bcs.n	800513e <prvInsertTimerInActiveList+0x62>
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e007      	b.n	800514e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <prvInsertTimerInActiveList+0x80>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7fd fd73 	bl	8002c34 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800514e:	697b      	ldr	r3, [r7, #20]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000acc 	.word	0x20000acc
 800515c:	20000ac8 	.word	0x20000ac8

08005160 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	; 0x30
 8005164:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005166:	e0ae      	b.n	80052c6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f2c0 80ab 	blt.w	80052c6 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fd fd90 	bl	8002ca6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff87 	bl	800509c <prvSampleTimeNow>
 800518e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b09      	cmp	r3, #9
 8005194:	f200 8096 	bhi.w	80052c4 <prvProcessReceivedCommands+0x164>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <prvProcessReceivedCommands+0x40>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051c9 	.word	0x080051c9
 80051ac:	0800523d 	.word	0x0800523d
 80051b0:	08005251 	.word	0x08005251
 80051b4:	0800529b 	.word	0x0800529b
 80051b8:	080051c9 	.word	0x080051c9
 80051bc:	080051c9 	.word	0x080051c9
 80051c0:	0800523d 	.word	0x0800523d
 80051c4:	08005251 	.word	0x08005251
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	18d1      	adds	r1, r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a3a      	ldr	r2, [r7, #32]
 80051e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051e8:	f7ff ff78 	bl	80050dc <prvInsertTimerInActiveList>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d069      	beq.n	80052c6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d05e      	beq.n	80052c6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	441a      	add	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	2100      	movs	r1, #0
 8005218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800521a:	f7ff fded 	bl	8004df8 <xTimerGenericCommand>
 800521e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d14f      	bne.n	80052c6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	61bb      	str	r3, [r7, #24]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800524e:	e03a      	b.n	80052c6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	617b      	str	r3, [r7, #20]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	18d1      	adds	r1, r2, r3
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	6a3a      	ldr	r2, [r7, #32]
 8005292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005294:	f7ff ff22 	bl	80050dc <prvInsertTimerInActiveList>
					break;
 8005298:	e015      	b.n	80052c6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80052a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052aa:	f000 fc01 	bl	8005ab0 <vPortFree>
 80052ae:	e00a      	b.n	80052c6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052c2:	e000      	b.n	80052c6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80052c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <prvProcessReceivedCommands+0x188>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f107 0108 	add.w	r1, r7, #8
 80052ce:	2200      	movs	r2, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe f81d 	bl	8003310 <xQueueReceive>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f47f af45 	bne.w	8005168 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	3728      	adds	r7, #40	; 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000ad0 	.word	0x20000ad0

080052ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052f2:	e048      	b.n	8005386 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052f4:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <prvSwitchTimerLists+0xc0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fe:	4b2b      	ldr	r3, [pc, #172]	; (80053ac <prvSwitchTimerLists+0xc0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3304      	adds	r3, #4
 800530c:	4618      	mov	r0, r3
 800530e:	f7fd fcca 	bl	8002ca6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02e      	beq.n	8005386 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d90e      	bls.n	8005358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005346:	4b19      	ldr	r3, [pc, #100]	; (80053ac <prvSwitchTimerLists+0xc0>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3304      	adds	r3, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fd fc6f 	bl	8002c34 <vListInsert>
 8005356:	e016      	b.n	8005386 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005358:	2300      	movs	r3, #0
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	2100      	movs	r1, #0
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff fd48 	bl	8004df8 <xTimerGenericCommand>
 8005368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	603b      	str	r3, [r7, #0]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <prvSwitchTimerLists+0xc0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1b1      	bne.n	80052f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <prvSwitchTimerLists+0xc0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <prvSwitchTimerLists+0xc4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a04      	ldr	r2, [pc, #16]	; (80053ac <prvSwitchTimerLists+0xc0>)
 800539c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800539e:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <prvSwitchTimerLists+0xc4>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	6013      	str	r3, [r2, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000ac8 	.word	0x20000ac8
 80053b0:	20000acc 	.word	0x20000acc

080053b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ba:	f000 f98b 	bl	80056d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d120      	bne.n	8005408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053c6:	4814      	ldr	r0, [pc, #80]	; (8005418 <prvCheckForValidListAndQueue+0x64>)
 80053c8:	f7fd fbe3 	bl	8002b92 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053cc:	4813      	ldr	r0, [pc, #76]	; (800541c <prvCheckForValidListAndQueue+0x68>)
 80053ce:	f7fd fbe0 	bl	8002b92 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053d2:	4b13      	ldr	r3, [pc, #76]	; (8005420 <prvCheckForValidListAndQueue+0x6c>)
 80053d4:	4a10      	ldr	r2, [pc, #64]	; (8005418 <prvCheckForValidListAndQueue+0x64>)
 80053d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053d8:	4b12      	ldr	r3, [pc, #72]	; (8005424 <prvCheckForValidListAndQueue+0x70>)
 80053da:	4a10      	ldr	r2, [pc, #64]	; (800541c <prvCheckForValidListAndQueue+0x68>)
 80053dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <prvCheckForValidListAndQueue+0x74>)
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <prvCheckForValidListAndQueue+0x78>)
 80053e6:	210c      	movs	r1, #12
 80053e8:	2064      	movs	r0, #100	; 0x64
 80053ea:	f7fd fcef 	bl	8002dcc <xQueueGenericCreateStatic>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	490b      	ldr	r1, [pc, #44]	; (8005430 <prvCheckForValidListAndQueue+0x7c>)
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fabc 	bl	8003980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005408:	f000 f994 	bl	8005734 <vPortExitCritical>
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000ad0 	.word	0x20000ad0
 8005418:	20000aa0 	.word	0x20000aa0
 800541c:	20000ab4 	.word	0x20000ab4
 8005420:	20000ac8 	.word	0x20000ac8
 8005424:	20000acc 	.word	0x20000acc
 8005428:	20000f8c 	.word	0x20000f8c
 800542c:	20000adc 	.word	0x20000adc
 8005430:	080079b4 	.word	0x080079b4

08005434 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <pvTimerGetTimerID+0x28>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800545c:	f000 f93a 	bl	80056d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005466:	f000 f965 	bl	8005734 <vPortExitCritical>

	return pvReturn;
 800546a:	693b      	ldr	r3, [r7, #16]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3b04      	subs	r3, #4
 8005484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800548c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3b04      	subs	r3, #4
 8005492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 0201 	bic.w	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3b04      	subs	r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054a4:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <pxPortInitialiseStack+0x64>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3b14      	subs	r3, #20
 80054ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3b04      	subs	r3, #4
 80054ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f06f 0202 	mvn.w	r2, #2
 80054c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b20      	subs	r3, #32
 80054c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	080054dd 	.word	0x080054dd

080054dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <prvTaskExitError+0x54>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d00a      	beq.n	8005506 <prvTaskExitError+0x2a>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <prvTaskExitError+0x28>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60bb      	str	r3, [r7, #8]
}
 8005518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800551a:	bf00      	nop
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0fc      	beq.n	800551c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	2000000c 	.word	0x2000000c
	...

08005540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <pxCurrentTCBConst2>)
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	f380 8809 	msr	PSP, r0
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f380 8811 	msr	BASEPRI, r0
 800555a:	4770      	bx	lr
 800555c:	f3af 8000 	nop.w

08005560 <pxCurrentTCBConst2>:
 8005560:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005568:	4808      	ldr	r0, [pc, #32]	; (800558c <prvPortStartFirstTask+0x24>)
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	6800      	ldr	r0, [r0, #0]
 800556e:	f380 8808 	msr	MSP, r0
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f380 8814 	msr	CONTROL, r0
 800557a:	b662      	cpsie	i
 800557c:	b661      	cpsie	f
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	df00      	svc	0
 8005588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800558a:	bf00      	nop
 800558c:	e000ed08 	.word	0xe000ed08

08005590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005596:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <xPortStartScheduler+0x120>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a46      	ldr	r2, [pc, #280]	; (80056b4 <xPortStartScheduler+0x124>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d10a      	bne.n	80055b6 <xPortStartScheduler+0x26>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	613b      	str	r3, [r7, #16]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055b6:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <xPortStartScheduler+0x120>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <xPortStartScheduler+0x128>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10a      	bne.n	80055d6 <xPortStartScheduler+0x46>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055d6:	4b39      	ldr	r3, [pc, #228]	; (80056bc <xPortStartScheduler+0x12c>)
 80055d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <xPortStartScheduler+0x130>)
 80055fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <xPortStartScheduler+0x134>)
 8005600:	2207      	movs	r2, #7
 8005602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005604:	e009      	b.n	800561a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005606:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <xPortStartScheduler+0x134>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3b01      	subs	r3, #1
 800560c:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <xPortStartScheduler+0x134>)
 800560e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d0ef      	beq.n	8005606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005626:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <xPortStartScheduler+0x134>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1c3 0307 	rsb	r3, r3, #7
 800562e:	2b04      	cmp	r3, #4
 8005630:	d00a      	beq.n	8005648 <xPortStartScheduler+0xb8>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	60bb      	str	r3, [r7, #8]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005648:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <xPortStartScheduler+0x134>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <xPortStartScheduler+0x134>)
 8005650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005652:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <xPortStartScheduler+0x134>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800565a:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <xPortStartScheduler+0x134>)
 800565c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <xPortStartScheduler+0x138>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <xPortStartScheduler+0x138>)
 800566c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <xPortStartScheduler+0x138>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <xPortStartScheduler+0x138>)
 8005678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800567c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800567e:	f000 f8dd 	bl	800583c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <xPortStartScheduler+0x13c>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005688:	f000 f8fc 	bl	8005884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <xPortStartScheduler+0x140>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <xPortStartScheduler+0x140>)
 8005692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005698:	f7ff ff66 	bl	8005568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800569c:	f7fe fe38 	bl	8004310 <vTaskSwitchContext>
	prvTaskExitError();
 80056a0:	f7ff ff1c 	bl	80054dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	e000ed00 	.word	0xe000ed00
 80056b4:	410fc271 	.word	0x410fc271
 80056b8:	410fc270 	.word	0x410fc270
 80056bc:	e000e400 	.word	0xe000e400
 80056c0:	20000fdc 	.word	0x20000fdc
 80056c4:	20000fe0 	.word	0x20000fe0
 80056c8:	e000ed20 	.word	0xe000ed20
 80056cc:	2000000c 	.word	0x2000000c
 80056d0:	e000ef34 	.word	0xe000ef34

080056d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	607b      	str	r3, [r7, #4]
}
 80056ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <vPortEnterCritical+0x58>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a0d      	ldr	r2, [pc, #52]	; (800572c <vPortEnterCritical+0x58>)
 80056f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <vPortEnterCritical+0x58>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10f      	bne.n	8005720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <vPortEnterCritical+0x5c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <vPortEnterCritical+0x4c>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	603b      	str	r3, [r7, #0]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <vPortEnterCritical+0x4a>
	}
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	2000000c 	.word	0x2000000c
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <vPortExitCritical+0x50>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <vPortExitCritical+0x24>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	607b      	str	r3, [r7, #4]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <vPortExitCritical+0x50>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3b01      	subs	r3, #1
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <vPortExitCritical+0x50>)
 8005760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <vPortExitCritical+0x50>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d105      	bne.n	8005776 <vPortExitCritical+0x42>
 800576a:	2300      	movs	r3, #0
 800576c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f383 8811 	msr	BASEPRI, r3
}
 8005774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
	...

08005790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005790:	f3ef 8009 	mrs	r0, PSP
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <pxCurrentTCBConst>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	f01e 0f10 	tst.w	lr, #16
 80057a0:	bf08      	it	eq
 80057a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	6010      	str	r0, [r2, #0]
 80057ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057b4:	f380 8811 	msr	BASEPRI, r0
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f7fe fda6 	bl	8004310 <vTaskSwitchContext>
 80057c4:	f04f 0000 	mov.w	r0, #0
 80057c8:	f380 8811 	msr	BASEPRI, r0
 80057cc:	bc09      	pop	{r0, r3}
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	6808      	ldr	r0, [r1, #0]
 80057d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d6:	f01e 0f10 	tst.w	lr, #16
 80057da:	bf08      	it	eq
 80057dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057e0:	f380 8809 	msr	PSP, r0
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	f3af 8000 	nop.w

080057f0 <pxCurrentTCBConst>:
 80057f0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop

080057f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
}
 8005810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005812:	f7fe fcc5 	bl	80041a0 <xTaskIncrementTick>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <SysTick_Handler+0x40>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	f383 8811 	msr	BASEPRI, r3
}
 800582e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <vPortSetupTimerInterrupt+0x34>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <vPortSetupTimerInterrupt+0x38>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <vPortSetupTimerInterrupt+0x3c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a0a      	ldr	r2, [pc, #40]	; (800587c <vPortSetupTimerInterrupt+0x40>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	4a09      	ldr	r2, [pc, #36]	; (8005880 <vPortSetupTimerInterrupt+0x44>)
 800585a:	3b01      	subs	r3, #1
 800585c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800585e:	4b04      	ldr	r3, [pc, #16]	; (8005870 <vPortSetupTimerInterrupt+0x34>)
 8005860:	2207      	movs	r2, #7
 8005862:	601a      	str	r2, [r3, #0]
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	e000e010 	.word	0xe000e010
 8005874:	e000e018 	.word	0xe000e018
 8005878:	20000000 	.word	0x20000000
 800587c:	10624dd3 	.word	0x10624dd3
 8005880:	e000e014 	.word	0xe000e014

08005884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005894 <vPortEnableVFP+0x10>
 8005888:	6801      	ldr	r1, [r0, #0]
 800588a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800588e:	6001      	str	r1, [r0, #0]
 8005890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005892:	bf00      	nop
 8005894:	e000ed88 	.word	0xe000ed88

08005898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800589e:	f3ef 8305 	mrs	r3, IPSR
 80058a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d914      	bls.n	80058d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <vPortValidateInterruptPriority+0x70>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058b4:	4b15      	ldr	r3, [pc, #84]	; (800590c <vPortValidateInterruptPriority+0x74>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	7afa      	ldrb	r2, [r7, #11]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d20a      	bcs.n	80058d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <vPortValidateInterruptPriority+0x78>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <vPortValidateInterruptPriority+0x7c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d90a      	bls.n	80058fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	603b      	str	r3, [r7, #0]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <vPortValidateInterruptPriority+0x60>
	}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000e3f0 	.word	0xe000e3f0
 800590c:	20000fdc 	.word	0x20000fdc
 8005910:	e000ed0c 	.word	0xe000ed0c
 8005914:	20000fe0 	.word	0x20000fe0

08005918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005924:	f7fe fb70 	bl	8004008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005928:	4b5b      	ldr	r3, [pc, #364]	; (8005a98 <pvPortMalloc+0x180>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005930:	f000 f920 	bl	8005b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <pvPortMalloc+0x184>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 8093 	bne.w	8005a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01d      	beq.n	8005984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005948:	2208      	movs	r2, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b00      	cmp	r3, #0
 8005958:	d014      	beq.n	8005984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f023 0307 	bic.w	r3, r3, #7
 8005960:	3308      	adds	r3, #8
 8005962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <pvPortMalloc+0x6c>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	617b      	str	r3, [r7, #20]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d06e      	beq.n	8005a68 <pvPortMalloc+0x150>
 800598a:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <pvPortMalloc+0x188>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d869      	bhi.n	8005a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005994:	4b43      	ldr	r3, [pc, #268]	; (8005aa4 <pvPortMalloc+0x18c>)
 8005996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005998:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <pvPortMalloc+0x18c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800599e:	e004      	b.n	80059aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d903      	bls.n	80059bc <pvPortMalloc+0xa4>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f1      	bne.n	80059a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059bc:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <pvPortMalloc+0x180>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d050      	beq.n	8005a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2208      	movs	r2, #8
 80059cc:	4413      	add	r3, r2
 80059ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	2308      	movs	r3, #8
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d91f      	bls.n	8005a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <pvPortMalloc+0xf8>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	613b      	str	r3, [r7, #16]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a22:	69b8      	ldr	r0, [r7, #24]
 8005a24:	f000 f908 	bl	8005c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a28:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <pvPortMalloc+0x188>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <pvPortMalloc+0x188>)
 8005a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <pvPortMalloc+0x188>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <pvPortMalloc+0x190>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d203      	bcs.n	8005a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a42:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <pvPortMalloc+0x188>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <pvPortMalloc+0x190>)
 8005a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <pvPortMalloc+0x184>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <pvPortMalloc+0x194>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a11      	ldr	r2, [pc, #68]	; (8005aac <pvPortMalloc+0x194>)
 8005a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a68:	f7fe fadc 	bl	8004024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <pvPortMalloc+0x174>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <pvPortMalloc+0x172>
	return pvReturn;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3728      	adds	r7, #40	; 0x28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20008fec 	.word	0x20008fec
 8005a9c:	20009000 	.word	0x20009000
 8005aa0:	20008ff0 	.word	0x20008ff0
 8005aa4:	20008fe4 	.word	0x20008fe4
 8005aa8:	20008ff4 	.word	0x20008ff4
 8005aac:	20008ff8 	.word	0x20008ff8

08005ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d04d      	beq.n	8005b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	425b      	negs	r3, r3
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <vPortFree+0xb8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <vPortFree+0x44>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60fb      	str	r3, [r7, #12]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <vPortFree+0x62>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60bb      	str	r3, [r7, #8]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <vPortFree+0xb8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01e      	beq.n	8005b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11a      	bne.n	8005b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <vPortFree+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b38:	f7fe fa66 	bl	8004008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <vPortFree+0xbc>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4413      	add	r3, r2
 8005b46:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <vPortFree+0xbc>)
 8005b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f000 f874 	bl	8005c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <vPortFree+0xc0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a06      	ldr	r2, [pc, #24]	; (8005b70 <vPortFree+0xc0>)
 8005b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b5a:	f7fe fa63 	bl	8004024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20009000 	.word	0x20009000
 8005b6c:	20008ff0 	.word	0x20008ff0
 8005b70:	20008ffc 	.word	0x20008ffc

08005b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <prvHeapInit+0xac>)
 8005b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3307      	adds	r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <prvHeapInit+0xac>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <prvHeapInit+0xb0>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <prvHeapInit+0xb0>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <prvHeapInit+0xb4>)
 8005bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <prvHeapInit+0xb4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <prvHeapInit+0xb4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvHeapInit+0xb4>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a0a      	ldr	r2, [pc, #40]	; (8005c2c <prvHeapInit+0xb8>)
 8005c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <prvHeapInit+0xbc>)
 8005c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <prvHeapInit+0xc0>)
 8005c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c12:	601a      	str	r2, [r3, #0]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20000fe4 	.word	0x20000fe4
 8005c24:	20008fe4 	.word	0x20008fe4
 8005c28:	20008fec 	.word	0x20008fec
 8005c2c:	20008ff4 	.word	0x20008ff4
 8005c30:	20008ff0 	.word	0x20008ff0
 8005c34:	20009000 	.word	0x20009000

08005c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <prvInsertBlockIntoFreeList+0xac>)
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e002      	b.n	8005c4c <prvInsertBlockIntoFreeList+0x14>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d8f7      	bhi.n	8005c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d108      	bne.n	8005c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	441a      	add	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d118      	bne.n	8005cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d00d      	beq.n	8005cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e008      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e003      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d002      	beq.n	8005cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20008fe4 	.word	0x20008fe4
 8005ce8:	20008fec 	.word	0x20008fec

08005cec <_ZN14ComHandlerTaskC1E6TaskIdPKc>:
#include "ComHandlerTask.h"
#include "main.h"

ComHandlerTask* ComHandlerTask::mspThis = 0;

ComHandlerTask::ComHandlerTask(TaskId id, const char* name): Task(id, name)
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	72fb      	strb	r3, [r7, #11]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	7af9      	ldrb	r1, [r7, #11]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fafb 	bl	80062fc <_ZN4TaskC1E6TaskIdPKc>
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <_ZN14ComHandlerTaskC1E6TaskIdPKc+0x68>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	601a      	str	r2, [r3, #0]
{
  //Message::reserveIsr(MSG_ID_TEMPLATETASK_EVENT, ComHandlerTaskId, 0);
  mpTimerLed = new Timer(ComHandlerTaskId, TimerComLed);
 8005d0c:	200c      	movs	r0, #12
 8005d0e:	f000 fd5b 	bl	80067c8 <_Znwj>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461c      	mov	r4, r3
 8005d16:	2201      	movs	r2, #1
 8005d18:	2102      	movs	r1, #2
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fc4c 	bl	80065b8 <_ZN5TimerC1E6TaskId7TimerId>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	625c      	str	r4, [r3, #36]	; 0x24
  mpTimerLed->setInterval(500);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fcc1 	bl	80066b4 <_ZN5Timer11setIntervalEi>
  mpTimerLed->setSingleShot(false);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fcd9 	bl	80066f0 <_ZN5Timer13setSingleShotEb>
  mpTimerLed->start();
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fce8 	bl	8006718 <_ZN5Timer5startEv>
}
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08007a18 	.word	0x08007a18

08005d58 <_ZN14ComHandlerTask8instanceEv>:

ComHandlerTask* ComHandlerTask::instance()
{
 8005d58:	b598      	push	{r3, r4, r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  if(ComHandlerTask::mspThis == 0)
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <_ZN14ComHandlerTask8instanceEv+0x2c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <_ZN14ComHandlerTask8instanceEv+0x24>
  {
    mspThis = new ComHandlerTask(ComHandlerTaskId, "ComHandlerTask\0");
 8005d64:	202c      	movs	r0, #44	; 0x2c
 8005d66:	f000 fd2f 	bl	80067c8 <_Znwj>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461c      	mov	r4, r3
 8005d6e:	4a06      	ldr	r2, [pc, #24]	; (8005d88 <_ZN14ComHandlerTask8instanceEv+0x30>)
 8005d70:	2102      	movs	r1, #2
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff ffba 	bl	8005cec <_ZN14ComHandlerTaskC1E6TaskIdPKc>
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <_ZN14ComHandlerTask8instanceEv+0x2c>)
 8005d7a:	601c      	str	r4, [r3, #0]
  }
  return ComHandlerTask::mspThis;
 8005d7c:	4b01      	ldr	r3, [pc, #4]	; (8005d84 <_ZN14ComHandlerTask8instanceEv+0x2c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	bd98      	pop	{r3, r4, r7, pc}
 8005d84:	20009004 	.word	0x20009004
 8005d88:	080079bc 	.word	0x080079bc

08005d8c <_ZN14ComHandlerTask13handleMessageEP7Message>:
  mspThis->mpIsrEventMsg->setValue(123);
  mspThis->mpIsrEventMsg->sendMsg();
}

void ComHandlerTask::handleMessage(Message* message)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  switch(message->id())
 8005d96:	6838      	ldr	r0, [r7, #0]
 8005d98:	f000 f916 	bl	8005fc8 <_ZN7Message2idEv>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d012      	beq.n	8005dc8 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3c>
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d000      	beq.n	8005da8 <_ZN14ComHandlerTask13handleMessageEP7Message+0x1c>
          break;
      }
      break;
    }
    default:
      break;
 8005da6:	e010      	b.n	8005dca <_ZN14ComHandlerTask13handleMessageEP7Message+0x3e>
      switch(message->data().longword)
 8005da8:	6838      	ldr	r0, [r7, #0]
 8005daa:	f000 f925 	bl	8005ff8 <_ZN7Message4dataEv>
 8005dae:	4603      	mov	r3, r0
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d105      	bne.n	8005dc4 <_ZN14ComHandlerTask13handleMessageEP7Message+0x38>
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8005db8:	2120      	movs	r1, #32
 8005dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dbe:	f7fb fa23 	bl	8001208 <HAL_GPIO_TogglePin>
          break;
 8005dc2:	e000      	b.n	8005dc6 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3a>
          break;
 8005dc4:	bf00      	nop
      break;
 8005dc6:	e000      	b.n	8005dca <_ZN14ComHandlerTask13handleMessageEP7Message+0x3e>
      break;
 8005dc8:	bf00      	nop
  }

}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <_ZN14ComHandlerTaskD1Ev>:

#include "TaskClass.h"
#include "Timer.h"


class ComHandlerTask: public Task
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	4a05      	ldr	r2, [pc, #20]	; (8005df4 <_ZN14ComHandlerTaskD1Ev+0x20>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fad5 	bl	8006394 <_ZN4TaskD1Ev>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	08007a18 	.word	0x08007a18

08005df8 <_ZN14ComHandlerTaskD0Ev>:
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ffe7 	bl	8005dd4 <_ZN14ComHandlerTaskD1Ev>
 8005e06:	212c      	movs	r1, #44	; 0x2c
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fcf4 	bl	80067f6 <_ZdlPvj>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <app_init>:
#include "ComHandlerTask.h"

int app_init_done = 0;

void app_init()
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /////////////////    create tasks

  ComHandlerTask::instance();
 8005e1c:	f7ff ff9c 	bl	8005d58 <_ZN14ComHandlerTask8instanceEv>
//  lpMsg = Message::reserve(MSG_ID_START, LopTaskId);
//  lpMsg->sendMsg();
//
//  SET_BLUE_STATE_LED(LED_OFF);
//  app_init_done = 1;
}
 8005e20:	bf00      	nop
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <_ZN7MessageC1Ev>:
#include <stdio.h>


MsgPool* Message::mspPool = 0;

Message::Message()
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
{

}
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <_ZN7Message4initEP7MsgPool>:

void Message::init(MsgPool* pPool)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  Message::mspPool = pPool;
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <_ZN7Message4initEP7MsgPool+0x1c>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6013      	str	r3, [r2, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20009008 	.word	0x20009008

08005e5c <_ZN7Message7reserveEhh9DataUnion>:
  configASSERT(pMsg && lpSharedMem);
  return pMsg;
}

Message* Message::reserve(uint8_t id, uint8_t destination, DataUnion data)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	603a      	str	r2, [r7, #0]
 8005e66:	71fb      	strb	r3, [r7, #7]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	71bb      	strb	r3, [r7, #6]
  Message* pMsg = Message::mspPool->resMsg();
 8005e6c:	f000 f972 	bl	8006154 <_ZN7MsgPool6resMsgEv>
 8005e70:	60f8      	str	r0, [r7, #12]
  pMsg->mMsg.DataMsg.Id = id;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	79fa      	ldrb	r2, [r7, #7]
 8005e76:	701a      	strb	r2, [r3, #0]
  pMsg->mMsg.DataMsg.Type = MsgData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	705a      	strb	r2, [r3, #1]
  pMsg->mMsg.DataMsg.DestAddr = destination;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	79ba      	ldrb	r2, [r7, #6]
 8005e82:	709a      	strb	r2, [r3, #2]
  pMsg->mMsg.DataMsg.SrcAddr = TaskList::getTaskId(xTaskGetCurrentTaskHandle());
 8005e84:	f7fe fce2 	bl	800484c <xTaskGetCurrentTaskHandle>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fb42 	bl	8006514 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	70da      	strb	r2, [r3, #3]
  pMsg->mMsg.DataMsg.Data = data;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	6810      	ldr	r0, [r2, #0]
 8005ea0:	6018      	str	r0, [r3, #0]
  configASSERT(pMsg);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <_ZN7Message7reserveEhh9DataUnion+0x62>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60bb      	str	r3, [r7, #8]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <_ZN7Message7reserveEhh9DataUnion+0x60>
  return pMsg;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_ZN7Message7sendMsgEv>:
  configASSERT(pMsg);
  return pMsg;
}

void Message::sendMsg()
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  QueueHandle_t lDestQueue = TaskList::getQueue((TaskId)mMsg.NoneMsg.DestAddr);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	789b      	ldrb	r3, [r3, #2]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fb45 	bl	8006564 <_ZN8TaskList8getQueueE6TaskId>
 8005eda:	61b8      	str	r0, [r7, #24]
  Message* lpMessage = this;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	613b      	str	r3, [r7, #16]
  if(lDestQueue)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02d      	beq.n	8005f42 <_ZN7Message7sendMsgEv+0x7a>
  {
    BaseType_t lRes;
    if(lpMessage->type() == MsgIsr)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 f879 	bl	8005fe0 <_ZN7Message4typeEv>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <_ZN7Message7sendMsgEv+0x4e>
    {
      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
      lRes = xQueueSendFromISR(lDestQueue, &lpMessage, &xHigherPriorityTaskWoken);
 8005f02:	f107 020c 	add.w	r2, r7, #12
 8005f06:	f107 0110 	add.w	r1, r7, #16
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	69b8      	ldr	r0, [r7, #24]
 8005f0e:	f7fd f963 	bl	80031d8 <xQueueGenericSendFromISR>
 8005f12:	61f8      	str	r0, [r7, #28]
 8005f14:	e007      	b.n	8005f26 <_ZN7Message7sendMsgEv+0x5e>
    }
    else
    {
      lRes = xQueueSend(lDestQueue, &lpMessage, (TickType_t) 0);
 8005f16:	f107 0110 	add.w	r1, r7, #16
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	69b8      	ldr	r0, [r7, #24]
 8005f20:	f7fd f85c 	bl	8002fdc <xQueueGenericSend>
 8005f24:	61f8      	str	r0, [r7, #28]
    }
    configASSERT(lRes == 1);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d00d      	beq.n	8005f48 <_ZN7Message7sendMsgEv+0x80>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	617b      	str	r3, [r7, #20]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <_ZN7Message7sendMsgEv+0x78>
  }
  else
  {
    freeMsg();
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f804 	bl	8005f50 <_ZN7Message7freeMsgEv>
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZN7Message7freeMsgEv>:


void Message::freeMsg()
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  switch(type())
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f841 	bl	8005fe0 <_ZN7Message4typeEv>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d01d      	beq.n	8005fa0 <_ZN7Message7freeMsgEv+0x50>
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d125      	bne.n	8005fb4 <_ZN7Message7freeMsgEv+0x64>
  {
    case MsgMem:
    {
      if(mMsg.MemMsg.Memory)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d023      	beq.n	8005fb8 <_ZN7Message7freeMsgEv+0x68>
      {
        vPortFree(mMsg.MemMsg.Memory->memory);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fd9a 	bl	8005ab0 <vPortFree>
        delete mMsg.MemMsg.Memory;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <_ZN7Message7freeMsgEv+0x3c>
 8005f84:	2108      	movs	r1, #8
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fc35 	bl	80067f6 <_ZdlPvj>
        mMsg.MemMsg.Memory = 0;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	711a      	strb	r2, [r3, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	715a      	strb	r2, [r3, #5]
 8005f96:	2200      	movs	r2, #0
 8005f98:	719a      	strb	r2, [r3, #6]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	71da      	strb	r2, [r3, #7]
      }
      break;
 8005f9e:	e00b      	b.n	8005fb8 <_ZN7Message7freeMsgEv+0x68>
    }
    case MsgData:
    {
      mMsg.DataMsg.Data.longword = 0;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	711a      	strb	r2, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	715a      	strb	r2, [r3, #5]
 8005faa:	2200      	movs	r2, #0
 8005fac:	719a      	strb	r2, [r3, #6]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	71da      	strb	r2, [r3, #7]
      break;
 8005fb2:	e002      	b.n	8005fba <_ZN7Message7freeMsgEv+0x6a>
    }
    default:
      break;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <_ZN7Message7freeMsgEv+0x6a>
      break;
 8005fb8:	bf00      	nop
  }

  Message::mspPool->freeMsg(this);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f904 	bl	80061c8 <_ZN7MsgPool7freeMsgEP7Message>
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_ZN7Message2idEv>:

uint8_t Message::id()
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Id;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_ZN7Message4typeEv>:
{
  return mMsg.NoneMsg.DestAddr;
}

uint8_t Message::type()
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Type;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	785b      	ldrb	r3, [r3, #1]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <_ZN7Message4dataEv>:

DataUnion Message::data()
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  DataUnion lRetval;
  lRetval.longword = (uint32_t)(-1);
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	60bb      	str	r3, [r7, #8]
  if(mMsg.DataMsg.Type == MsgData)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <_ZN7Message4dataEv+0x22>
  {
    lRetval = mMsg.DataMsg.Data;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	f107 0308 	add.w	r3, r7, #8
 8006014:	3204      	adds	r2, #4
 8006016:	6810      	ldr	r0, [r2, #0]
 8006018:	6018      	str	r0, [r3, #0]
  }
  return lRetval;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	2300      	movs	r3, #0
 8006020:	7b3a      	ldrb	r2, [r7, #12]
 8006022:	f362 0307 	bfi	r3, r2, #0, #8
 8006026:	7b7a      	ldrb	r2, [r7, #13]
 8006028:	f362 230f 	bfi	r3, r2, #8, #8
 800602c:	7bba      	ldrb	r2, [r7, #14]
 800602e:	f362 4317 	bfi	r3, r2, #16, #8
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	f362 631f 	bfi	r3, r2, #24, #8
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <MsgPool_init>:
#include "os_init.h"
#include "MsgPool.h"


void MsgPool_init()
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  Message::init(MsgPool::instance());
 8006048:	f000 f86e 	bl	8006128 <_ZN7MsgPool8instanceEv>
 800604c:	4603      	mov	r3, r0
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fef4 	bl	8005e3c <_ZN7Message4initEP7MsgPool>
}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}

08006058 <_ZN7MsgPoolC1Ev>:

MsgPool* MsgPool::mspThis = 0;

MsgPool::MsgPool()
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <_ZN7MsgPoolC1Ev+0x5c>)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	33cc      	adds	r3, #204	; 0xcc
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f8e8 	bl	8006240 <_ZN5MutexC1Ev>
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e015      	b.n	80060a2 <_ZN7MsgPoolC1Ev+0x4a>
  {
    mPool[i].mMsg = new Message;
 8006076:	2008      	movs	r0, #8
 8006078:	f000 fba6 	bl	80067c8 <_Znwj>
 800607c:	4603      	mov	r3, r0
 800607e:	461c      	mov	r4, r3
 8006080:	4620      	mov	r0, r4
 8006082:	f7ff fecf 	bl	8005e24 <_ZN7MessageC1Ev>
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	605c      	str	r4, [r3, #4]
    mPool[i].mUsed = false;
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4413      	add	r3, r2
 8006098:	2200      	movs	r2, #0
 800609a:	721a      	strb	r2, [r3, #8]
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b18      	cmp	r3, #24
 80060a6:	dde6      	ble.n	8006076 <_ZN7MsgPoolC1Ev+0x1e>
  }

}
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	08007a2c 	.word	0x08007a2c

080060b8 <_ZN7MsgPoolD1Ev>:

MsgPool::~MsgPool()
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	4a10      	ldr	r2, [pc, #64]	; (8006104 <_ZN7MsgPoolD1Ev+0x4c>)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	e00d      	b.n	80060e8 <_ZN7MsgPoolD1Ev+0x30>
  {
    delete mPool[i].mMsg;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4413      	add	r3, r2
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <_ZN7MsgPoolD1Ev+0x2a>
 80060da:	2108      	movs	r1, #8
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fb8a 	bl	80067f6 <_ZdlPvj>
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b18      	cmp	r3, #24
 80060ec:	ddee      	ble.n	80060cc <_ZN7MsgPoolD1Ev+0x14>
MsgPool::~MsgPool()
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	33cc      	adds	r3, #204	; 0xcc
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f8b8 	bl	8006268 <_ZN5MutexD1Ev>
  }
}
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	08007a2c 	.word	0x08007a2c

08006108 <_ZN7MsgPoolD0Ev>:
MsgPool::~MsgPool()
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
}
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ffd1 	bl	80060b8 <_ZN7MsgPoolD1Ev>
 8006116:	21d8      	movs	r1, #216	; 0xd8
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb6c 	bl	80067f6 <_ZdlPvj>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_ZN7MsgPool8instanceEv>:

MsgPool* MsgPool::instance()
{
 8006128:	b598      	push	{r3, r4, r7, lr}
 800612a:	af00      	add	r7, sp, #0
  if(mspThis == 0)
 800612c:	4b08      	ldr	r3, [pc, #32]	; (8006150 <_ZN7MsgPool8instanceEv+0x28>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d109      	bne.n	8006148 <_ZN7MsgPool8instanceEv+0x20>
  {
    mspThis = new MsgPool;
 8006134:	20d8      	movs	r0, #216	; 0xd8
 8006136:	f000 fb47 	bl	80067c8 <_Znwj>
 800613a:	4603      	mov	r3, r0
 800613c:	461c      	mov	r4, r3
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff8a 	bl	8006058 <_ZN7MsgPoolC1Ev>
 8006144:	4b02      	ldr	r3, [pc, #8]	; (8006150 <_ZN7MsgPool8instanceEv+0x28>)
 8006146:	601c      	str	r4, [r3, #0]
  }
  return mspThis;
 8006148:	4b01      	ldr	r3, [pc, #4]	; (8006150 <_ZN7MsgPool8instanceEv+0x28>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	bd98      	pop	{r3, r4, r7, pc}
 8006150:	2000900c 	.word	0x2000900c

08006154 <_ZN7MsgPool6resMsgEv>:

Message* MsgPool::resMsg()
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
  Message* lpRetVal = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
  mspThis->mMutex.lock();
 800615e:	4b19      	ldr	r3, [pc, #100]	; (80061c4 <_ZN7MsgPool6resMsgEv+0x70>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	33cc      	adds	r3, #204	; 0xcc
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f8a2 	bl	80062b0 <_ZN5Mutex4lockEh>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 800616c:	2300      	movs	r3, #0
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	e019      	b.n	80061a6 <_ZN7MsgPool6resMsgEv+0x52>
  {
    if(mspThis->mPool[i].mUsed == false)
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <_ZN7MsgPool6resMsgEv+0x70>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	7a1b      	ldrb	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10e      	bne.n	80061a0 <_ZN7MsgPool6resMsgEv+0x4c>
    {
      mspThis->mPool[i].mUsed = true;
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <_ZN7MsgPool6resMsgEv+0x70>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	2201      	movs	r2, #1
 800618e:	721a      	strb	r2, [r3, #8]
      lpRetVal = mspThis->mPool[i].mMsg;
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <_ZN7MsgPool6resMsgEv+0x70>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	4413      	add	r3, r2
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	607b      	str	r3, [r7, #4]
      break;
 800619e:	e005      	b.n	80061ac <_ZN7MsgPool6resMsgEv+0x58>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b18      	cmp	r3, #24
 80061aa:	dde2      	ble.n	8006172 <_ZN7MsgPool6resMsgEv+0x1e>
    }
  }
  mspThis->mMutex.unlock();
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <_ZN7MsgPool6resMsgEv+0x70>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	33cc      	adds	r3, #204	; 0xcc
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f890 	bl	80062d8 <_ZN5Mutex6unlockEv>
  return lpRetVal;
 80061b8:	687b      	ldr	r3, [r7, #4]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2000900c 	.word	0x2000900c

080061c8 <_ZN7MsgPool7freeMsgEP7Message>:

void MsgPool::freeMsg(Message* p_msg)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  if(p_msg->type() != MsgIsr)
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff05 	bl	8005fe0 <_ZN7Message4typeEv>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b03      	cmp	r3, #3
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d026      	beq.n	8006234 <_ZN7MsgPool7freeMsgEP7Message+0x6c>
  {
    mspThis->mMutex.lock();
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	33cc      	adds	r3, #204	; 0xcc
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f85e 	bl	80062b0 <_ZN5Mutex4lockEh>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e013      	b.n	8006222 <_ZN7MsgPool7freeMsgEP7Message+0x5a>
    {
      if(mspThis->mPool[i].mMsg == p_msg)
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	4413      	add	r3, r2
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d107      	bne.n	800621c <_ZN7MsgPool7freeMsgEP7Message+0x54>
      {
        mspThis->mPool[i].mUsed = false;
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	2200      	movs	r2, #0
 8006218:	721a      	strb	r2, [r3, #8]
        break;
 800621a:	e005      	b.n	8006228 <_ZN7MsgPool7freeMsgEP7Message+0x60>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b18      	cmp	r3, #24
 8006226:	dde8      	ble.n	80061fa <_ZN7MsgPool7freeMsgEP7Message+0x32>
      }
    }
    mspThis->mMutex.unlock();
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	33cc      	adds	r3, #204	; 0xcc
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f852 	bl	80062d8 <_ZN5Mutex6unlockEv>
  }
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	2000900c 	.word	0x2000900c

08006240 <_ZN5MutexC1Ev>:
 *      Author: axel
 */

#include <Mutex.h>

Mutex::Mutex()
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	4a06      	ldr	r2, [pc, #24]	; (8006264 <_ZN5MutexC1Ev+0x24>)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
{
  mMutex = xSemaphoreCreateMutex();
 800624e:	2001      	movs	r0, #1
 8006250:	f7fc feab 	bl	8002faa <xQueueCreateMutex>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]
}
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	08007a3c 	.word	0x08007a3c

08006268 <_ZN5MutexD1Ev>:

Mutex::~Mutex()
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <_ZN5MutexD1Ev+0x24>)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
{
  vSemaphoreDelete(mMutex);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4618      	mov	r0, r3
 800627c:	f7fd fa34 	bl	80036e8 <vQueueDelete>
}
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	08007a3c 	.word	0x08007a3c

08006290 <_ZN5MutexD0Ev>:
Mutex::~Mutex()
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
}
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ffe5 	bl	8006268 <_ZN5MutexD1Ev>
 800629e:	210c      	movs	r1, #12
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 faa8 	bl	80067f6 <_ZdlPvj>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <_ZN5Mutex4lockEh>:

void Mutex::lock(uint8_t causedLockId)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  xSemaphoreTake(mMutex, portMAX_DELAY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f04f 31ff 	mov.w	r1, #4294967295
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fd f903 	bl	80034d0 <xQueueSemaphoreTake>
  mCausedLockId = causedLockId;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	78fa      	ldrb	r2, [r7, #3]
 80062ce:	721a      	strb	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZN5Mutex6unlockEv>:

void Mutex::unlock()
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  xSemaphoreGive(mMutex);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6858      	ldr	r0, [r3, #4]
 80062e4:	2300      	movs	r3, #0
 80062e6:	2200      	movs	r2, #0
 80062e8:	2100      	movs	r1, #0
 80062ea:	f7fc fe77 	bl	8002fdc <xQueueGenericSend>
  mCausedLockId = 0;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	721a      	strb	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <_ZN4TaskC1E6TaskIdPKc>:
#include <string.h>
#include "TaskClass.h"



Task::Task(TaskId id, const char* name)
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	460b      	mov	r3, r1
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	72fb      	strb	r3, [r7, #11]
 800630a:	4a20      	ldr	r2, [pc, #128]	; (800638c <_ZN4TaskC1E6TaskIdPKc+0x90>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	601a      	str	r2, [r3, #0]
{
  mId = id;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	7afa      	ldrb	r2, [r7, #11]
 8006314:	711a      	strb	r2, [r3, #4]
  strncpy(mName,name, TASK_NAME_LEN);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3305      	adds	r3, #5
 800631a:	2214      	movs	r2, #20
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fd30 	bl	8006d84 <strncpy>
  mQueue = xQueueCreate(MSG_QUEUE_SIZE, sizeof(Message*));
 8006324:	2200      	movs	r2, #0
 8006326:	2104      	movs	r1, #4
 8006328:	200a      	movs	r0, #10
 800632a:	f7fc fdc7 	bl	8002ebc <xQueueGenericCreate>
 800632e:	4602      	mov	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	621a      	str	r2, [r3, #32]
  xTaskCreate(Task::mainLoop, mName,  TASK_STACK_SIZE , this, tskIDLE_PRIORITY, &mHandle);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1d59      	adds	r1, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	331c      	adds	r3, #28
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006348:	4811      	ldr	r0, [pc, #68]	; (8006390 <_ZN4TaskC1E6TaskIdPKc+0x94>)
 800634a:	f7fd fbfe 	bl	8003b4a <xTaskCreate>
  configASSERT(mHandle != 0);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <_ZN4TaskC1E6TaskIdPKc+0x70>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	617b      	str	r3, [r7, #20]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <_ZN4TaskC1E6TaskIdPKc+0x6e>
  TaskList::createEntry(mId, mName, mHandle, mQueue);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	7918      	ldrb	r0, [r3, #4]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1d59      	adds	r1, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f000 f874 	bl	8006468 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>
}
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	08007a4c 	.word	0x08007a4c
 8006390:	080063b5 	.word	0x080063b5

08006394 <_ZN4TaskD1Ev>:

Task::~Task()
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <_ZN4TaskD1Ev+0x1c>)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	08007a4c 	.word	0x08007a4c

080063b4 <_ZN4Task8mainLoopEPv>:

void Task::mainLoop(void* args)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  Task* lpThis = (Task*)args;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	617b      	str	r3, [r7, #20]
  Message* lpReceiveMsg = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    BaseType_t lResult = xQueueReceive(lpThis->mQueue, &lpReceiveMsg, portMAX_DELAY);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f107 010c 	add.w	r1, r7, #12
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fc ff9d 	bl	8003310 <xQueueReceive>
 80063d6:	6138      	str	r0, [r7, #16]
    if(lResult == true)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10c      	bne.n	80063f8 <_ZN4Task8mainLoopEPv+0x44>
    {
      //printf("queue message received %d\n",lpThis->mId);
      lpThis->handleMessage(lpReceiveMsg);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4611      	mov	r1, r2
 80063ea:	6978      	ldr	r0, [r7, #20]
 80063ec:	4798      	blx	r3
      lpReceiveMsg->freeMsg();
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fdad 	bl	8005f50 <_ZN7Message7freeMsgEv>
 80063f6:	e7e5      	b.n	80063c4 <_ZN4Task8mainLoopEPv+0x10>
    }
    else
    {
    	printf("deqeuing failed");
 80063f8:	4801      	ldr	r0, [pc, #4]	; (8006400 <_ZN4Task8mainLoopEPv+0x4c>)
 80063fa:	f000 fb75 	bl	8006ae8 <iprintf>
    }
  }
 80063fe:	e7e1      	b.n	80063c4 <_ZN4Task8mainLoopEPv+0x10>
 8006400:	080079cc 	.word	0x080079cc

08006404 <TaskList_init>:
#include "os_init.h"
#include "TaskList.h"
#include <string.h>

void TaskList_init()
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  TaskList::instance();
 8006408:	f000 f802 	bl	8006410 <_ZN8TaskList8instanceEv>
}
 800640c:	bf00      	nop
 800640e:	bd80      	pop	{r7, pc}

08006410 <_ZN8TaskList8instanceEv>:
TaskList::table_struct TaskList::mTaskTable[TASK_MAX_COUNT];

TaskList* TaskList::mspThis=0;

TaskList* TaskList::instance()
{
 8006410:	b598      	push	{r3, r4, r7, lr}
 8006412:	af00      	add	r7, sp, #0
  if(TaskList::mspThis == 0)
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <_ZN8TaskList8instanceEv+0x28>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <_ZN8TaskList8instanceEv+0x20>
  {
    TaskList::mspThis = new TaskList;
 800641c:	200c      	movs	r0, #12
 800641e:	f000 f9d3 	bl	80067c8 <_Znwj>
 8006422:	4603      	mov	r3, r0
 8006424:	461c      	mov	r4, r3
 8006426:	4620      	mov	r0, r4
 8006428:	f000 f808 	bl	800643c <_ZN8TaskListC1Ev>
 800642c:	4b02      	ldr	r3, [pc, #8]	; (8006438 <_ZN8TaskList8instanceEv+0x28>)
 800642e:	601c      	str	r4, [r3, #0]
  }
  return TaskList::mspThis;
 8006430:	4b01      	ldr	r3, [pc, #4]	; (8006438 <_ZN8TaskList8instanceEv+0x28>)
 8006432:	681b      	ldr	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd98      	pop	{r3, r4, r7, pc}
 8006438:	20009290 	.word	0x20009290

0800643c <_ZN8TaskListC1Ev>:

TaskList::TaskList()
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fefa 	bl	8006240 <_ZN5MutexC1Ev>
{
  memset(&mTaskTable, 0, sizeof(mTaskTable));
 800644c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006450:	2100      	movs	r1, #0
 8006452:	4804      	ldr	r0, [pc, #16]	; (8006464 <_ZN8TaskListC1Ev+0x28>)
 8006454:	f000 fc8e 	bl	8006d74 <memset>
}
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20009010 	.word	0x20009010

08006468 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>:

void TaskList::createEntry(TaskId id, char* name, TaskHandle_t task, QueueHandle_t address)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
  TaskList::getMutex()->lock();
 8006478:	f000 f840 	bl	80064fc <_ZN8TaskList8getMutexEv>
 800647c:	4603      	mov	r3, r0
 800647e:	2101      	movs	r1, #1
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff15 	bl	80062b0 <_ZN5Mutex4lockEh>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e028      	b.n	80064de <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x76>
  {
    if(TaskList::mTaskTable[i].id == NoTask)
 800648c:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	015b      	lsls	r3, r3, #5
 8006492:	4413      	add	r3, r2
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11e      	bne.n	80064d8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x70>
    {
      TaskList::mTaskTable[i].id = id;
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	015b      	lsls	r3, r3, #5
 80064a0:	4413      	add	r3, r2
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	701a      	strb	r2, [r3, #0]
      strncpy(TaskList::mTaskTable[i].name, name, TASK_NAME_LEN);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	015b      	lsls	r3, r3, #5
 80064aa:	4a13      	ldr	r2, [pc, #76]	; (80064f8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 80064ac:	4413      	add	r3, r2
 80064ae:	3301      	adds	r3, #1
 80064b0:	2214      	movs	r2, #20
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fc65 	bl	8006d84 <strncpy>
      TaskList::mTaskTable[i].hTask = task;
 80064ba:	4a0f      	ldr	r2, [pc, #60]	; (80064f8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	015b      	lsls	r3, r3, #5
 80064c0:	4413      	add	r3, r2
 80064c2:	3318      	adds	r3, #24
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
      TaskList::mTaskTable[i].hQueue = address;
 80064c8:	4a0b      	ldr	r2, [pc, #44]	; (80064f8 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	015b      	lsls	r3, r3, #5
 80064ce:	4413      	add	r3, r2
 80064d0:	331c      	adds	r3, #28
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	601a      	str	r2, [r3, #0]
      break;
 80064d6:	e005      	b.n	80064e4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x7c>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	3301      	adds	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b13      	cmp	r3, #19
 80064e2:	ddd3      	ble.n	800648c <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x24>
    }
  }
  TaskList::getMutex()->unlock();
 80064e4:	f000 f80a 	bl	80064fc <_ZN8TaskList8getMutexEv>
 80064e8:	4603      	mov	r3, r0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fef4 	bl	80062d8 <_ZN5Mutex6unlockEv>
}
 80064f0:	bf00      	nop
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20009010 	.word	0x20009010

080064fc <_ZN8TaskList8getMutexEv>:

Mutex* TaskList::getMutex()
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return &TaskList::mspThis->mMutex;
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <_ZN8TaskList8getMutexEv+0x14>)
 8006502:	681b      	ldr	r3, [r3, #0]
}
 8006504:	4618      	mov	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20009290 	.word	0x20009290

08006514 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock>:
  }
  return lRetVal;
}

TaskId TaskList::getTaskId(TaskHandle_t handle)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  TaskId lRetVal = NoTask;
 800651c:	2300      	movs	r3, #0
 800651e:	73fb      	strb	r3, [r7, #15]
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006520:	2300      	movs	r3, #0
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	e012      	b.n	800654c <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x38>
  {
    if(handle == TaskList::mTaskTable[i].hTask)
 8006526:	4a0e      	ldr	r2, [pc, #56]	; (8006560 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x4c>)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015b      	lsls	r3, r3, #5
 800652c:	4413      	add	r3, r2
 800652e:	3318      	adds	r3, #24
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d106      	bne.n	8006546 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x32>
    {
      lRetVal = TaskList::mTaskTable[i].id; //atomic
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x4c>)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	015b      	lsls	r3, r3, #5
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	73fb      	strb	r3, [r7, #15]
      break;
 8006544:	e005      	b.n	8006552 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x3e>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3301      	adds	r3, #1
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b13      	cmp	r3, #19
 8006550:	dde9      	ble.n	8006526 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x12>
    }
  }
  return lRetVal;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	20009010 	.word	0x20009010

08006564 <_ZN8TaskList8getQueueE6TaskId>:

QueueHandle_t TaskList::getQueue(TaskId id)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t lRetVal = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	e012      	b.n	800659e <_ZN8TaskList8getQueueE6TaskId+0x3a>
  {
    if(id == TaskList::mTaskTable[i].id)
 8006578:	4a0e      	ldr	r2, [pc, #56]	; (80065b4 <_ZN8TaskList8getQueueE6TaskId+0x50>)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	015b      	lsls	r3, r3, #5
 800657e:	4413      	add	r3, r2
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	79fa      	ldrb	r2, [r7, #7]
 8006584:	429a      	cmp	r2, r3
 8006586:	d107      	bne.n	8006598 <_ZN8TaskList8getQueueE6TaskId+0x34>
    {
      lRetVal = TaskList::mTaskTable[i].hQueue; //atomic
 8006588:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <_ZN8TaskList8getQueueE6TaskId+0x50>)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015b      	lsls	r3, r3, #5
 800658e:	4413      	add	r3, r2
 8006590:	331c      	adds	r3, #28
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
      break;
 8006596:	e005      	b.n	80065a4 <_ZN8TaskList8getQueueE6TaskId+0x40>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	3301      	adds	r3, #1
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b13      	cmp	r3, #19
 80065a2:	dde9      	ble.n	8006578 <_ZN8TaskList8getQueueE6TaskId+0x14>
    }
  }
  return lRetVal;
 80065a4:	68fb      	ldr	r3, [r7, #12]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20009010 	.word	0x20009010

080065b8 <_ZN5TimerC1E6TaskId7TimerId>:
#include <stdio.h>
#include <stm32g491xx.h>

#define BLOCK_TIME   1000

Timer::Timer(TaskId addressee, TimerId timer)
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
 80065c4:	4613      	mov	r3, r2
 80065c6:	70bb      	strb	r3, [r7, #2]
 80065c8:	4a16      	ldr	r2, [pc, #88]	; (8006624 <_ZN5TimerC1E6TaskId7TimerId+0x6c>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
{
  mTimerData.addressee = addressee;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	711a      	strb	r2, [r3, #4]
  mTimerData.timer = timer;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	78ba      	ldrb	r2, [r7, #2]
 80065d8:	715a      	strb	r2, [r3, #5]
  const int cDefaultPeriod = 1000;
 80065da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065de:	60fb      	str	r3, [r7, #12]
  mHTimer = xTimerCreate("Timer\0", pdMS_TO_TICKS(cDefaultPeriod), pdFALSE, &mTimerData, CallbackFunction);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4a10      	ldr	r2, [pc, #64]	; (8006628 <_ZN5TimerC1E6TaskId7TimerId+0x70>)
 80065e6:	9200      	str	r2, [sp, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065ee:	480f      	ldr	r0, [pc, #60]	; (800662c <_ZN5TimerC1E6TaskId7TimerId+0x74>)
 80065f0:	f7fe fba6 	bl	8004d40 <xTimerCreate>
 80065f4:	4602      	mov	r2, r0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	609a      	str	r2, [r3, #8]
  configASSERT(mHTimer != 0);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <_ZN5TimerC1E6TaskId7TimerId+0x60>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60bb      	str	r3, [r7, #8]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <_ZN5TimerC1E6TaskId7TimerId+0x5e>
}
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	08007a60 	.word	0x08007a60
 8006628:	08006681 	.word	0x08006681
 800662c:	080079dc 	.word	0x080079dc

08006630 <_ZN5TimerD1Ev>:

Timer::~Timer()
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	4a08      	ldr	r2, [pc, #32]	; (800665c <_ZN5TimerD1Ev+0x2c>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
{
  xTimerDelete(mHTimer, BLOCK_TIME);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6898      	ldr	r0, [r3, #8]
 8006642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2300      	movs	r3, #0
 800664a:	2200      	movs	r2, #0
 800664c:	2105      	movs	r1, #5
 800664e:	f7fe fbd3 	bl	8004df8 <xTimerGenericCommand>
}
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	08007a60 	.word	0x08007a60

08006660 <_ZN5TimerD0Ev>:
Timer::~Timer()
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
}
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ffe1 	bl	8006630 <_ZN5TimerD1Ev>
 800666e:	210c      	movs	r1, #12
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8c0 	bl	80067f6 <_ZdlPvj>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_ZN5Timer16CallbackFunctionEP15tmrTimerControl>:

void Timer::CallbackFunction( TimerHandle_t xTimer )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  timerDataStruct* lpTimerData = (timerDataStruct*)pvTimerGetTimerID(xTimer);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fe fed3 	bl	8005434 <pvTimerGetTimerID>
 800668e:	6178      	str	r0, [r7, #20]
  DataUnion lTimerId;
  lTimerId.longword = lpTimerData->timer;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	60fb      	str	r3, [r7, #12]
  Message* lpMsg = Message::reserve(MSG_ID_TIMEOUT, lpTimerData->addressee, lTimerId);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4619      	mov	r1, r3
 800669e:	2002      	movs	r0, #2
 80066a0:	f7ff fbdc 	bl	8005e5c <_ZN7Message7reserveEhh9DataUnion>
 80066a4:	6138      	str	r0, [r7, #16]
  lpMsg->sendMsg();
 80066a6:	6938      	ldr	r0, [r7, #16]
 80066a8:	f7ff fc0e 	bl	8005ec8 <_ZN7Message7sendMsgEv>
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN5Timer11setIntervalEi>:

void Timer::setInterval(int period)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  xTimerChangePeriod( mHTimer, pdMS_TO_TICKS(period), BLOCK_TIME);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6898      	ldr	r0, [r3, #8]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066c8:	fb02 f303 	mul.w	r3, r2, r3
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <_ZN5Timer11setIntervalEi+0x38>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	099a      	lsrs	r2, r3, #6
 80066d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	2300      	movs	r3, #0
 80066dc:	2104      	movs	r1, #4
 80066de:	f7fe fb8b 	bl	8004df8 <xTimerGenericCommand>
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	10624dd3 	.word	0x10624dd3

080066f0 <_ZN5Timer13setSingleShotEb>:

void Timer::setSingleShot(bool once)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  vTimerSetReloadMode(mHTimer, !once);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f083 0301 	eor.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fe fbc2 	bl	8004e94 <vTimerSetReloadMode>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <_ZN5Timer5startEv>:

void Timer::start()
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b087      	sub	sp, #28
 800671c:	af02      	add	r7, sp, #8
 800671e:	6078      	str	r0, [r7, #4]
  bool lResult = pdFAIL;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]
  if(isInterrupt())
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f837 	bl	800679c <_ZN5Timer11isInterruptEv>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d013      	beq.n	800675c <_ZN5Timer5startEv+0x44>
  {
    lResult = xTimerStartFromISR(mHTimer, &xHigherPriorityTaskWoken);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689c      	ldr	r4, [r3, #8]
 8006738:	f7fd fd20 	bl	800417c <xTaskGetTickCountFromISR>
 800673c:	4602      	mov	r2, r0
 800673e:	f107 0308 	add.w	r3, r7, #8
 8006742:	2100      	movs	r1, #0
 8006744:	9100      	str	r1, [sp, #0]
 8006746:	2106      	movs	r1, #6
 8006748:	4620      	mov	r0, r4
 800674a:	f7fe fb55 	bl	8004df8 <xTimerGenericCommand>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	e012      	b.n	8006782 <_ZN5Timer5startEv+0x6a>
  }
  else
  {
    lResult = xTimerStart(mHTimer, BLOCK_TIME);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689c      	ldr	r4, [r3, #8]
 8006760:	f7fd fcfc 	bl	800415c <xTaskGetTickCount>
 8006764:	4602      	mov	r2, r0
 8006766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	2101      	movs	r1, #1
 8006770:	4620      	mov	r0, r4
 8006772:	f7fe fb41 	bl	8004df8 <xTimerGenericCommand>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	73fb      	strb	r3, [r7, #15]
  }
  if(lResult == pdFAIL)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <_ZN5Timer5startEv+0x76>
  {
    printf("start timer failed\n");
 8006788:	4803      	ldr	r0, [pc, #12]	; (8006798 <_ZN5Timer5startEv+0x80>)
 800678a:	f000 fa13 	bl	8006bb4 <puts>
  }
}
 800678e:	bf00      	nop
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	080079e4 	.word	0x080079e4

0800679c <_ZN5Timer11isInterruptEv>:
{
  xTimerStop(mHTimer, BLOCK_TIME);
}

bool Timer::isInterrupt()
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0 ;
 80067a4:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <_ZN5Timer11isInterruptEv+0x28>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	e000ed00 	.word	0xe000ed00

080067c8 <_Znwj>:
#include <projdefs.h>
#include <portmacro.h>
#include <portable.h>

void * operator new( size_t size )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff f8a1 	bl	8005918 <pvPortMalloc>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff f961 	bl	8005ab0 <vPortFree>
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <_ZdlPvj>:
 80067f6:	f7ff bff3 	b.w	80067e0 <_ZdlPv>
	...

080067fc <malloc>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	; (8006808 <malloc+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f000 b823 	b.w	800684c <_malloc_r>
 8006806:	bf00      	nop
 8006808:	20000068 	.word	0x20000068

0800680c <sbrk_aligned>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4e0e      	ldr	r6, [pc, #56]	; (8006848 <sbrk_aligned+0x3c>)
 8006810:	460c      	mov	r4, r1
 8006812:	6831      	ldr	r1, [r6, #0]
 8006814:	4605      	mov	r5, r0
 8006816:	b911      	cbnz	r1, 800681e <sbrk_aligned+0x12>
 8006818:	f000 fb52 	bl	8006ec0 <_sbrk_r>
 800681c:	6030      	str	r0, [r6, #0]
 800681e:	4621      	mov	r1, r4
 8006820:	4628      	mov	r0, r5
 8006822:	f000 fb4d 	bl	8006ec0 <_sbrk_r>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	d00a      	beq.n	8006840 <sbrk_aligned+0x34>
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d007      	beq.n	8006844 <sbrk_aligned+0x38>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fb42 	bl	8006ec0 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d101      	bne.n	8006844 <sbrk_aligned+0x38>
 8006840:	f04f 34ff 	mov.w	r4, #4294967295
 8006844:	4620      	mov	r0, r4
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	20009298 	.word	0x20009298

0800684c <_malloc_r>:
 800684c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006850:	1ccd      	adds	r5, r1, #3
 8006852:	f025 0503 	bic.w	r5, r5, #3
 8006856:	3508      	adds	r5, #8
 8006858:	2d0c      	cmp	r5, #12
 800685a:	bf38      	it	cc
 800685c:	250c      	movcc	r5, #12
 800685e:	2d00      	cmp	r5, #0
 8006860:	4607      	mov	r7, r0
 8006862:	db01      	blt.n	8006868 <_malloc_r+0x1c>
 8006864:	42a9      	cmp	r1, r5
 8006866:	d905      	bls.n	8006874 <_malloc_r+0x28>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	2600      	movs	r6, #0
 800686e:	4630      	mov	r0, r6
 8006870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006948 <_malloc_r+0xfc>
 8006878:	f000 f868 	bl	800694c <__malloc_lock>
 800687c:	f8d8 3000 	ldr.w	r3, [r8]
 8006880:	461c      	mov	r4, r3
 8006882:	bb5c      	cbnz	r4, 80068dc <_malloc_r+0x90>
 8006884:	4629      	mov	r1, r5
 8006886:	4638      	mov	r0, r7
 8006888:	f7ff ffc0 	bl	800680c <sbrk_aligned>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	4604      	mov	r4, r0
 8006890:	d155      	bne.n	800693e <_malloc_r+0xf2>
 8006892:	f8d8 4000 	ldr.w	r4, [r8]
 8006896:	4626      	mov	r6, r4
 8006898:	2e00      	cmp	r6, #0
 800689a:	d145      	bne.n	8006928 <_malloc_r+0xdc>
 800689c:	2c00      	cmp	r4, #0
 800689e:	d048      	beq.n	8006932 <_malloc_r+0xe6>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	4631      	mov	r1, r6
 80068a4:	4638      	mov	r0, r7
 80068a6:	eb04 0903 	add.w	r9, r4, r3
 80068aa:	f000 fb09 	bl	8006ec0 <_sbrk_r>
 80068ae:	4581      	cmp	r9, r0
 80068b0:	d13f      	bne.n	8006932 <_malloc_r+0xe6>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	1a6d      	subs	r5, r5, r1
 80068b6:	4629      	mov	r1, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff ffa7 	bl	800680c <sbrk_aligned>
 80068be:	3001      	adds	r0, #1
 80068c0:	d037      	beq.n	8006932 <_malloc_r+0xe6>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	442b      	add	r3, r5
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	f8d8 3000 	ldr.w	r3, [r8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d038      	beq.n	8006942 <_malloc_r+0xf6>
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	42a2      	cmp	r2, r4
 80068d4:	d12b      	bne.n	800692e <_malloc_r+0xe2>
 80068d6:	2200      	movs	r2, #0
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	e00f      	b.n	80068fc <_malloc_r+0xb0>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	1b52      	subs	r2, r2, r5
 80068e0:	d41f      	bmi.n	8006922 <_malloc_r+0xd6>
 80068e2:	2a0b      	cmp	r2, #11
 80068e4:	d917      	bls.n	8006916 <_malloc_r+0xca>
 80068e6:	1961      	adds	r1, r4, r5
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	bf18      	it	ne
 80068ee:	6059      	strne	r1, [r3, #4]
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	bf08      	it	eq
 80068f4:	f8c8 1000 	streq.w	r1, [r8]
 80068f8:	5162      	str	r2, [r4, r5]
 80068fa:	604b      	str	r3, [r1, #4]
 80068fc:	4638      	mov	r0, r7
 80068fe:	f104 060b 	add.w	r6, r4, #11
 8006902:	f000 f829 	bl	8006958 <__malloc_unlock>
 8006906:	f026 0607 	bic.w	r6, r6, #7
 800690a:	1d23      	adds	r3, r4, #4
 800690c:	1af2      	subs	r2, r6, r3
 800690e:	d0ae      	beq.n	800686e <_malloc_r+0x22>
 8006910:	1b9b      	subs	r3, r3, r6
 8006912:	50a3      	str	r3, [r4, r2]
 8006914:	e7ab      	b.n	800686e <_malloc_r+0x22>
 8006916:	42a3      	cmp	r3, r4
 8006918:	6862      	ldr	r2, [r4, #4]
 800691a:	d1dd      	bne.n	80068d8 <_malloc_r+0x8c>
 800691c:	f8c8 2000 	str.w	r2, [r8]
 8006920:	e7ec      	b.n	80068fc <_malloc_r+0xb0>
 8006922:	4623      	mov	r3, r4
 8006924:	6864      	ldr	r4, [r4, #4]
 8006926:	e7ac      	b.n	8006882 <_malloc_r+0x36>
 8006928:	4634      	mov	r4, r6
 800692a:	6876      	ldr	r6, [r6, #4]
 800692c:	e7b4      	b.n	8006898 <_malloc_r+0x4c>
 800692e:	4613      	mov	r3, r2
 8006930:	e7cc      	b.n	80068cc <_malloc_r+0x80>
 8006932:	230c      	movs	r3, #12
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4638      	mov	r0, r7
 8006938:	f000 f80e 	bl	8006958 <__malloc_unlock>
 800693c:	e797      	b.n	800686e <_malloc_r+0x22>
 800693e:	6025      	str	r5, [r4, #0]
 8006940:	e7dc      	b.n	80068fc <_malloc_r+0xb0>
 8006942:	605b      	str	r3, [r3, #4]
 8006944:	deff      	udf	#255	; 0xff
 8006946:	bf00      	nop
 8006948:	20009294 	.word	0x20009294

0800694c <__malloc_lock>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__malloc_lock+0x8>)
 800694e:	f7fa b867 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	20000840 	.word	0x20000840

08006958 <__malloc_unlock>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__malloc_unlock+0x8>)
 800695a:	f7fa b875 	b.w	8000a48 <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	20000840 	.word	0x20000840

08006964 <std>:
 8006964:	2300      	movs	r3, #0
 8006966:	b510      	push	{r4, lr}
 8006968:	4604      	mov	r4, r0
 800696a:	e9c0 3300 	strd	r3, r3, [r0]
 800696e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006972:	6083      	str	r3, [r0, #8]
 8006974:	8181      	strh	r1, [r0, #12]
 8006976:	6643      	str	r3, [r0, #100]	; 0x64
 8006978:	81c2      	strh	r2, [r0, #14]
 800697a:	6183      	str	r3, [r0, #24]
 800697c:	4619      	mov	r1, r3
 800697e:	2208      	movs	r2, #8
 8006980:	305c      	adds	r0, #92	; 0x5c
 8006982:	f000 f9f7 	bl	8006d74 <memset>
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <std+0x58>)
 8006988:	6263      	str	r3, [r4, #36]	; 0x24
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <std+0x5c>)
 800698c:	62a3      	str	r3, [r4, #40]	; 0x28
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <std+0x60>)
 8006990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006992:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <std+0x64>)
 8006994:	6323      	str	r3, [r4, #48]	; 0x30
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <std+0x68>)
 8006998:	6224      	str	r4, [r4, #32]
 800699a:	429c      	cmp	r4, r3
 800699c:	d006      	beq.n	80069ac <std+0x48>
 800699e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80069a2:	4294      	cmp	r4, r2
 80069a4:	d002      	beq.n	80069ac <std+0x48>
 80069a6:	33d0      	adds	r3, #208	; 0xd0
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d105      	bne.n	80069b8 <std+0x54>
 80069ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b4:	f7fa b80e 	b.w	80009d4 <__retarget_lock_init_recursive>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	bf00      	nop
 80069bc:	08006bc5 	.word	0x08006bc5
 80069c0:	08006be7 	.word	0x08006be7
 80069c4:	08006c1f 	.word	0x08006c1f
 80069c8:	08006c43 	.word	0x08006c43
 80069cc:	2000929c 	.word	0x2000929c

080069d0 <stdio_exit_handler>:
 80069d0:	4a02      	ldr	r2, [pc, #8]	; (80069dc <stdio_exit_handler+0xc>)
 80069d2:	4903      	ldr	r1, [pc, #12]	; (80069e0 <stdio_exit_handler+0x10>)
 80069d4:	4803      	ldr	r0, [pc, #12]	; (80069e4 <stdio_exit_handler+0x14>)
 80069d6:	f000 b869 	b.w	8006aac <_fwalk_sglue>
 80069da:	bf00      	nop
 80069dc:	20000010 	.word	0x20000010
 80069e0:	080076c1 	.word	0x080076c1
 80069e4:	2000001c 	.word	0x2000001c

080069e8 <cleanup_stdio>:
 80069e8:	6841      	ldr	r1, [r0, #4]
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <cleanup_stdio+0x34>)
 80069ec:	4299      	cmp	r1, r3
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	d001      	beq.n	80069f8 <cleanup_stdio+0x10>
 80069f4:	f000 fe64 	bl	80076c0 <_fflush_r>
 80069f8:	68a1      	ldr	r1, [r4, #8]
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <cleanup_stdio+0x38>)
 80069fc:	4299      	cmp	r1, r3
 80069fe:	d002      	beq.n	8006a06 <cleanup_stdio+0x1e>
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fe5d 	bl	80076c0 <_fflush_r>
 8006a06:	68e1      	ldr	r1, [r4, #12]
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <cleanup_stdio+0x3c>)
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	d004      	beq.n	8006a18 <cleanup_stdio+0x30>
 8006a0e:	4620      	mov	r0, r4
 8006a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a14:	f000 be54 	b.w	80076c0 <_fflush_r>
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	2000929c 	.word	0x2000929c
 8006a20:	20009304 	.word	0x20009304
 8006a24:	2000936c 	.word	0x2000936c

08006a28 <global_stdio_init.part.0>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <global_stdio_init.part.0+0x30>)
 8006a2c:	4c0b      	ldr	r4, [pc, #44]	; (8006a5c <global_stdio_init.part.0+0x34>)
 8006a2e:	4a0c      	ldr	r2, [pc, #48]	; (8006a60 <global_stdio_init.part.0+0x38>)
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	4620      	mov	r0, r4
 8006a34:	2200      	movs	r2, #0
 8006a36:	2104      	movs	r1, #4
 8006a38:	f7ff ff94 	bl	8006964 <std>
 8006a3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a40:	2201      	movs	r2, #1
 8006a42:	2109      	movs	r1, #9
 8006a44:	f7ff ff8e 	bl	8006964 <std>
 8006a48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a52:	2112      	movs	r1, #18
 8006a54:	f7ff bf86 	b.w	8006964 <std>
 8006a58:	200093d4 	.word	0x200093d4
 8006a5c:	2000929c 	.word	0x2000929c
 8006a60:	080069d1 	.word	0x080069d1

08006a64 <__sfp_lock_acquire>:
 8006a64:	4801      	ldr	r0, [pc, #4]	; (8006a6c <__sfp_lock_acquire+0x8>)
 8006a66:	f7f9 bfdb 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	20000834 	.word	0x20000834

08006a70 <__sfp_lock_release>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__sfp_lock_release+0x8>)
 8006a72:	f7f9 bfe9 	b.w	8000a48 <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	20000834 	.word	0x20000834

08006a7c <__sinit>:
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	4604      	mov	r4, r0
 8006a80:	f7ff fff0 	bl	8006a64 <__sfp_lock_acquire>
 8006a84:	6a23      	ldr	r3, [r4, #32]
 8006a86:	b11b      	cbz	r3, 8006a90 <__sinit+0x14>
 8006a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8c:	f7ff bff0 	b.w	8006a70 <__sfp_lock_release>
 8006a90:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <__sinit+0x28>)
 8006a92:	6223      	str	r3, [r4, #32]
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <__sinit+0x2c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f5      	bne.n	8006a88 <__sinit+0xc>
 8006a9c:	f7ff ffc4 	bl	8006a28 <global_stdio_init.part.0>
 8006aa0:	e7f2      	b.n	8006a88 <__sinit+0xc>
 8006aa2:	bf00      	nop
 8006aa4:	080069e9 	.word	0x080069e9
 8006aa8:	200093d4 	.word	0x200093d4

08006aac <_fwalk_sglue>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	4688      	mov	r8, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006abc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ac0:	d505      	bpl.n	8006ace <_fwalk_sglue+0x22>
 8006ac2:	6824      	ldr	r4, [r4, #0]
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	d1f7      	bne.n	8006ab8 <_fwalk_sglue+0xc>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d907      	bls.n	8006ae4 <_fwalk_sglue+0x38>
 8006ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	d003      	beq.n	8006ae4 <_fwalk_sglue+0x38>
 8006adc:	4629      	mov	r1, r5
 8006ade:	4638      	mov	r0, r7
 8006ae0:	47c0      	blx	r8
 8006ae2:	4306      	orrs	r6, r0
 8006ae4:	3568      	adds	r5, #104	; 0x68
 8006ae6:	e7e9      	b.n	8006abc <_fwalk_sglue+0x10>

08006ae8 <iprintf>:
 8006ae8:	b40f      	push	{r0, r1, r2, r3}
 8006aea:	b507      	push	{r0, r1, r2, lr}
 8006aec:	4906      	ldr	r1, [pc, #24]	; (8006b08 <iprintf+0x20>)
 8006aee:	ab04      	add	r3, sp, #16
 8006af0:	6808      	ldr	r0, [r1, #0]
 8006af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006af6:	6881      	ldr	r1, [r0, #8]
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	f000 fab1 	bl	8007060 <_vfiprintf_r>
 8006afe:	b003      	add	sp, #12
 8006b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b04:	b004      	add	sp, #16
 8006b06:	4770      	bx	lr
 8006b08:	20000068 	.word	0x20000068

08006b0c <_puts_r>:
 8006b0c:	6a03      	ldr	r3, [r0, #32]
 8006b0e:	b570      	push	{r4, r5, r6, lr}
 8006b10:	6884      	ldr	r4, [r0, #8]
 8006b12:	4605      	mov	r5, r0
 8006b14:	460e      	mov	r6, r1
 8006b16:	b90b      	cbnz	r3, 8006b1c <_puts_r+0x10>
 8006b18:	f7ff ffb0 	bl	8006a7c <__sinit>
 8006b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b1e:	07db      	lsls	r3, r3, #31
 8006b20:	d405      	bmi.n	8006b2e <_puts_r+0x22>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	0598      	lsls	r0, r3, #22
 8006b26:	d402      	bmi.n	8006b2e <_puts_r+0x22>
 8006b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b2a:	f7f9 ff79 	bl	8000a20 <__retarget_lock_acquire_recursive>
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	0719      	lsls	r1, r3, #28
 8006b32:	d513      	bpl.n	8006b5c <_puts_r+0x50>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	b18b      	cbz	r3, 8006b5c <_puts_r+0x50>
 8006b38:	3e01      	subs	r6, #1
 8006b3a:	68a3      	ldr	r3, [r4, #8]
 8006b3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b40:	3b01      	subs	r3, #1
 8006b42:	60a3      	str	r3, [r4, #8]
 8006b44:	b9e9      	cbnz	r1, 8006b82 <_puts_r+0x76>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da2e      	bge.n	8006ba8 <_puts_r+0x9c>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f87b 	bl	8006c4a <__swbuf_r>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d007      	beq.n	8006b68 <_puts_r+0x5c>
 8006b58:	250a      	movs	r5, #10
 8006b5a:	e007      	b.n	8006b6c <_puts_r+0x60>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f8b0 	bl	8006cc4 <__swsetup_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d0e7      	beq.n	8006b38 <_puts_r+0x2c>
 8006b68:	f04f 35ff 	mov.w	r5, #4294967295
 8006b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6e:	07da      	lsls	r2, r3, #31
 8006b70:	d405      	bmi.n	8006b7e <_puts_r+0x72>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	059b      	lsls	r3, r3, #22
 8006b76:	d402      	bmi.n	8006b7e <_puts_r+0x72>
 8006b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7a:	f7f9 ff65 	bl	8000a48 <__retarget_lock_release_recursive>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	bd70      	pop	{r4, r5, r6, pc}
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da04      	bge.n	8006b90 <_puts_r+0x84>
 8006b86:	69a2      	ldr	r2, [r4, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	dc06      	bgt.n	8006b9a <_puts_r+0x8e>
 8006b8c:	290a      	cmp	r1, #10
 8006b8e:	d004      	beq.n	8006b9a <_puts_r+0x8e>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	7019      	strb	r1, [r3, #0]
 8006b98:	e7cf      	b.n	8006b3a <_puts_r+0x2e>
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f000 f854 	bl	8006c4a <__swbuf_r>
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d1c9      	bne.n	8006b3a <_puts_r+0x2e>
 8006ba6:	e7df      	b.n	8006b68 <_puts_r+0x5c>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	250a      	movs	r5, #10
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	701d      	strb	r5, [r3, #0]
 8006bb2:	e7db      	b.n	8006b6c <_puts_r+0x60>

08006bb4 <puts>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <puts+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f7ff bfa7 	b.w	8006b0c <_puts_r>
 8006bbe:	bf00      	nop
 8006bc0:	20000068 	.word	0x20000068

08006bc4 <__sread>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	f000 f966 	bl	8006e9c <_read_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	bfab      	itete	ge
 8006bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd8:	181b      	addge	r3, r3, r0
 8006bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bde:	bfac      	ite	ge
 8006be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006be2:	81a3      	strhlt	r3, [r4, #12]
 8006be4:	bd10      	pop	{r4, pc}

08006be6 <__swrite>:
 8006be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bea:	461f      	mov	r7, r3
 8006bec:	898b      	ldrh	r3, [r1, #12]
 8006bee:	05db      	lsls	r3, r3, #23
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	d505      	bpl.n	8006c04 <__swrite+0x1e>
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f000 f93a 	bl	8006e78 <_lseek_r>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	4632      	mov	r2, r6
 8006c12:	463b      	mov	r3, r7
 8006c14:	4628      	mov	r0, r5
 8006c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1a:	f000 b961 	b.w	8006ee0 <_write_r>

08006c1e <__sseek>:
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c26:	f000 f927 	bl	8006e78 <_lseek_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	bf15      	itete	ne
 8006c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c3a:	81a3      	strheq	r3, [r4, #12]
 8006c3c:	bf18      	it	ne
 8006c3e:	81a3      	strhne	r3, [r4, #12]
 8006c40:	bd10      	pop	{r4, pc}

08006c42 <__sclose>:
 8006c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c46:	f000 b8b1 	b.w	8006dac <_close_r>

08006c4a <__swbuf_r>:
 8006c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4c:	460e      	mov	r6, r1
 8006c4e:	4614      	mov	r4, r2
 8006c50:	4605      	mov	r5, r0
 8006c52:	b118      	cbz	r0, 8006c5c <__swbuf_r+0x12>
 8006c54:	6a03      	ldr	r3, [r0, #32]
 8006c56:	b90b      	cbnz	r3, 8006c5c <__swbuf_r+0x12>
 8006c58:	f7ff ff10 	bl	8006a7c <__sinit>
 8006c5c:	69a3      	ldr	r3, [r4, #24]
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	071a      	lsls	r2, r3, #28
 8006c64:	d525      	bpl.n	8006cb2 <__swbuf_r+0x68>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	b31b      	cbz	r3, 8006cb2 <__swbuf_r+0x68>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	6922      	ldr	r2, [r4, #16]
 8006c6e:	1a98      	subs	r0, r3, r2
 8006c70:	6963      	ldr	r3, [r4, #20]
 8006c72:	b2f6      	uxtb	r6, r6
 8006c74:	4283      	cmp	r3, r0
 8006c76:	4637      	mov	r7, r6
 8006c78:	dc04      	bgt.n	8006c84 <__swbuf_r+0x3a>
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 fd1f 	bl	80076c0 <_fflush_r>
 8006c82:	b9e0      	cbnz	r0, 8006cbe <__swbuf_r+0x74>
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	701e      	strb	r6, [r3, #0]
 8006c92:	6962      	ldr	r2, [r4, #20]
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d004      	beq.n	8006ca4 <__swbuf_r+0x5a>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d506      	bpl.n	8006cae <__swbuf_r+0x64>
 8006ca0:	2e0a      	cmp	r6, #10
 8006ca2:	d104      	bne.n	8006cae <__swbuf_r+0x64>
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 fd0a 	bl	80076c0 <_fflush_r>
 8006cac:	b938      	cbnz	r0, 8006cbe <__swbuf_r+0x74>
 8006cae:	4638      	mov	r0, r7
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f805 	bl	8006cc4 <__swsetup_r>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d0d5      	beq.n	8006c6a <__swbuf_r+0x20>
 8006cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8006cc2:	e7f4      	b.n	8006cae <__swbuf_r+0x64>

08006cc4 <__swsetup_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <__swsetup_r+0xac>)
 8006cc8:	4605      	mov	r5, r0
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	460c      	mov	r4, r1
 8006cce:	b118      	cbz	r0, 8006cd8 <__swsetup_r+0x14>
 8006cd0:	6a03      	ldr	r3, [r0, #32]
 8006cd2:	b90b      	cbnz	r3, 8006cd8 <__swsetup_r+0x14>
 8006cd4:	f7ff fed2 	bl	8006a7c <__sinit>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cde:	0718      	lsls	r0, r3, #28
 8006ce0:	d422      	bmi.n	8006d28 <__swsetup_r+0x64>
 8006ce2:	06d9      	lsls	r1, r3, #27
 8006ce4:	d407      	bmi.n	8006cf6 <__swsetup_r+0x32>
 8006ce6:	2309      	movs	r3, #9
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e034      	b.n	8006d60 <__swsetup_r+0x9c>
 8006cf6:	0758      	lsls	r0, r3, #29
 8006cf8:	d512      	bpl.n	8006d20 <__swsetup_r+0x5c>
 8006cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cfc:	b141      	cbz	r1, 8006d10 <__swsetup_r+0x4c>
 8006cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d02:	4299      	cmp	r1, r3
 8006d04:	d002      	beq.n	8006d0c <__swsetup_r+0x48>
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f934 	bl	8006f74 <_free_r>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6363      	str	r3, [r4, #52]	; 0x34
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6063      	str	r3, [r4, #4]
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	f043 0308 	orr.w	r3, r3, #8
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	b94b      	cbnz	r3, 8006d40 <__swsetup_r+0x7c>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d36:	d003      	beq.n	8006d40 <__swsetup_r+0x7c>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f000 fd0e 	bl	800775c <__smakebuf_r>
 8006d40:	89a0      	ldrh	r0, [r4, #12]
 8006d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d46:	f010 0301 	ands.w	r3, r0, #1
 8006d4a:	d00a      	beq.n	8006d62 <__swsetup_r+0x9e>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	6963      	ldr	r3, [r4, #20]
 8006d52:	425b      	negs	r3, r3
 8006d54:	61a3      	str	r3, [r4, #24]
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	b943      	cbnz	r3, 8006d6c <__swsetup_r+0xa8>
 8006d5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d5e:	d1c4      	bne.n	8006cea <__swsetup_r+0x26>
 8006d60:	bd38      	pop	{r3, r4, r5, pc}
 8006d62:	0781      	lsls	r1, r0, #30
 8006d64:	bf58      	it	pl
 8006d66:	6963      	ldrpl	r3, [r4, #20]
 8006d68:	60a3      	str	r3, [r4, #8]
 8006d6a:	e7f4      	b.n	8006d56 <__swsetup_r+0x92>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e7f7      	b.n	8006d60 <__swsetup_r+0x9c>
 8006d70:	20000068 	.word	0x20000068

08006d74 <memset>:
 8006d74:	4402      	add	r2, r0
 8006d76:	4603      	mov	r3, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <strncpy>:
 8006d84:	b510      	push	{r4, lr}
 8006d86:	3901      	subs	r1, #1
 8006d88:	4603      	mov	r3, r0
 8006d8a:	b132      	cbz	r2, 8006d9a <strncpy+0x16>
 8006d8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d90:	f803 4b01 	strb.w	r4, [r3], #1
 8006d94:	3a01      	subs	r2, #1
 8006d96:	2c00      	cmp	r4, #0
 8006d98:	d1f7      	bne.n	8006d8a <strncpy+0x6>
 8006d9a:	441a      	add	r2, r3
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d100      	bne.n	8006da4 <strncpy+0x20>
 8006da2:	bd10      	pop	{r4, pc}
 8006da4:	f803 1b01 	strb.w	r1, [r3], #1
 8006da8:	e7f9      	b.n	8006d9e <strncpy+0x1a>
	...

08006dac <_close_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	; (8006dc8 <_close_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7f9 fceb 	bl	8000792 <_close>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_close_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_close_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	200093d8 	.word	0x200093d8

08006dcc <_reclaim_reent>:
 8006dcc:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <_reclaim_reent+0xa8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4283      	cmp	r3, r0
 8006dd2:	b570      	push	{r4, r5, r6, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	d04b      	beq.n	8006e70 <_reclaim_reent+0xa4>
 8006dd8:	69c3      	ldr	r3, [r0, #28]
 8006dda:	b143      	cbz	r3, 8006dee <_reclaim_reent+0x22>
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d144      	bne.n	8006e6c <_reclaim_reent+0xa0>
 8006de2:	69e3      	ldr	r3, [r4, #28]
 8006de4:	6819      	ldr	r1, [r3, #0]
 8006de6:	b111      	cbz	r1, 8006dee <_reclaim_reent+0x22>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f8c3 	bl	8006f74 <_free_r>
 8006dee:	6961      	ldr	r1, [r4, #20]
 8006df0:	b111      	cbz	r1, 8006df8 <_reclaim_reent+0x2c>
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f8be 	bl	8006f74 <_free_r>
 8006df8:	69e1      	ldr	r1, [r4, #28]
 8006dfa:	b111      	cbz	r1, 8006e02 <_reclaim_reent+0x36>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 f8b9 	bl	8006f74 <_free_r>
 8006e02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e04:	b111      	cbz	r1, 8006e0c <_reclaim_reent+0x40>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 f8b4 	bl	8006f74 <_free_r>
 8006e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e0e:	b111      	cbz	r1, 8006e16 <_reclaim_reent+0x4a>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 f8af 	bl	8006f74 <_free_r>
 8006e16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e18:	b111      	cbz	r1, 8006e20 <_reclaim_reent+0x54>
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 f8aa 	bl	8006f74 <_free_r>
 8006e20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e22:	b111      	cbz	r1, 8006e2a <_reclaim_reent+0x5e>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 f8a5 	bl	8006f74 <_free_r>
 8006e2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e2c:	b111      	cbz	r1, 8006e34 <_reclaim_reent+0x68>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 f8a0 	bl	8006f74 <_free_r>
 8006e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e36:	b111      	cbz	r1, 8006e3e <_reclaim_reent+0x72>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f89b 	bl	8006f74 <_free_r>
 8006e3e:	6a23      	ldr	r3, [r4, #32]
 8006e40:	b1b3      	cbz	r3, 8006e70 <_reclaim_reent+0xa4>
 8006e42:	4620      	mov	r0, r4
 8006e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e48:	4718      	bx	r3
 8006e4a:	5949      	ldr	r1, [r1, r5]
 8006e4c:	b941      	cbnz	r1, 8006e60 <_reclaim_reent+0x94>
 8006e4e:	3504      	adds	r5, #4
 8006e50:	69e3      	ldr	r3, [r4, #28]
 8006e52:	2d80      	cmp	r5, #128	; 0x80
 8006e54:	68d9      	ldr	r1, [r3, #12]
 8006e56:	d1f8      	bne.n	8006e4a <_reclaim_reent+0x7e>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 f88b 	bl	8006f74 <_free_r>
 8006e5e:	e7c0      	b.n	8006de2 <_reclaim_reent+0x16>
 8006e60:	680e      	ldr	r6, [r1, #0]
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f886 	bl	8006f74 <_free_r>
 8006e68:	4631      	mov	r1, r6
 8006e6a:	e7ef      	b.n	8006e4c <_reclaim_reent+0x80>
 8006e6c:	2500      	movs	r5, #0
 8006e6e:	e7ef      	b.n	8006e50 <_reclaim_reent+0x84>
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	bf00      	nop
 8006e74:	20000068 	.word	0x20000068

08006e78 <_lseek_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_lseek_r+0x20>)
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7f9 fcaa 	bl	80007e0 <_lseek>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_lseek_r+0x1e>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_lseek_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	200093d8 	.word	0x200093d8

08006e9c <_read_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d07      	ldr	r5, [pc, #28]	; (8006ebc <_read_r+0x20>)
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7f9 fc38 	bl	8000720 <_read>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_read_r+0x1e>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_read_r+0x1e>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	200093d8 	.word	0x200093d8

08006ec0 <_sbrk_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d06      	ldr	r5, [pc, #24]	; (8006edc <_sbrk_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f7f9 fc96 	bl	80007fc <_sbrk>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_sbrk_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_sbrk_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	200093d8 	.word	0x200093d8

08006ee0 <_write_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	; (8006f00 <_write_r+0x20>)
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7f9 fc33 	bl	800075a <_write>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_write_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_write_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	200093d8 	.word	0x200093d8

08006f04 <__errno>:
 8006f04:	4b01      	ldr	r3, [pc, #4]	; (8006f0c <__errno+0x8>)
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000068 	.word	0x20000068

08006f10 <__libc_init_array>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	4d0d      	ldr	r5, [pc, #52]	; (8006f48 <__libc_init_array+0x38>)
 8006f14:	4c0d      	ldr	r4, [pc, #52]	; (8006f4c <__libc_init_array+0x3c>)
 8006f16:	1b64      	subs	r4, r4, r5
 8006f18:	10a4      	asrs	r4, r4, #2
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	d109      	bne.n	8006f34 <__libc_init_array+0x24>
 8006f20:	4d0b      	ldr	r5, [pc, #44]	; (8006f50 <__libc_init_array+0x40>)
 8006f22:	4c0c      	ldr	r4, [pc, #48]	; (8006f54 <__libc_init_array+0x44>)
 8006f24:	f000 fc78 	bl	8007818 <_init>
 8006f28:	1b64      	subs	r4, r4, r5
 8006f2a:	10a4      	asrs	r4, r4, #2
 8006f2c:	2600      	movs	r6, #0
 8006f2e:	42a6      	cmp	r6, r4
 8006f30:	d105      	bne.n	8006f3e <__libc_init_array+0x2e>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f38:	4798      	blx	r3
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7ee      	b.n	8006f1c <__libc_init_array+0xc>
 8006f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f42:	4798      	blx	r3
 8006f44:	3601      	adds	r6, #1
 8006f46:	e7f2      	b.n	8006f2e <__libc_init_array+0x1e>
 8006f48:	08007a9c 	.word	0x08007a9c
 8006f4c:	08007a9c 	.word	0x08007a9c
 8006f50:	08007a9c 	.word	0x08007a9c
 8006f54:	08007aa0 	.word	0x08007aa0

08006f58 <memcpy>:
 8006f58:	440a      	add	r2, r1
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f60:	d100      	bne.n	8006f64 <memcpy+0xc>
 8006f62:	4770      	bx	lr
 8006f64:	b510      	push	{r4, lr}
 8006f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	d1f9      	bne.n	8006f66 <memcpy+0xe>
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <_free_r>:
 8006f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d044      	beq.n	8007004 <_free_r+0x90>
 8006f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7e:	9001      	str	r0, [sp, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f1a1 0404 	sub.w	r4, r1, #4
 8006f86:	bfb8      	it	lt
 8006f88:	18e4      	addlt	r4, r4, r3
 8006f8a:	f7ff fcdf 	bl	800694c <__malloc_lock>
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <_free_r+0x94>)
 8006f90:	9801      	ldr	r0, [sp, #4]
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	b933      	cbnz	r3, 8006fa4 <_free_r+0x30>
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	6014      	str	r4, [r2, #0]
 8006f9a:	b003      	add	sp, #12
 8006f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa0:	f7ff bcda 	b.w	8006958 <__malloc_unlock>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d908      	bls.n	8006fba <_free_r+0x46>
 8006fa8:	6825      	ldr	r5, [r4, #0]
 8006faa:	1961      	adds	r1, r4, r5
 8006fac:	428b      	cmp	r3, r1
 8006fae:	bf01      	itttt	eq
 8006fb0:	6819      	ldreq	r1, [r3, #0]
 8006fb2:	685b      	ldreq	r3, [r3, #4]
 8006fb4:	1949      	addeq	r1, r1, r5
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	e7ed      	b.n	8006f96 <_free_r+0x22>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x50>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x46>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1855      	adds	r5, r2, r1
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x70>
 8006fcc:	6824      	ldr	r4, [r4, #0]
 8006fce:	4421      	add	r1, r4
 8006fd0:	1854      	adds	r4, r2, r1
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1e0      	bne.n	8006f9a <_free_r+0x26>
 8006fd8:	681c      	ldr	r4, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	440c      	add	r4, r1
 8006fe0:	6014      	str	r4, [r2, #0]
 8006fe2:	e7da      	b.n	8006f9a <_free_r+0x26>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x78>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	6003      	str	r3, [r0, #0]
 8006fea:	e7d6      	b.n	8006f9a <_free_r+0x26>
 8006fec:	6825      	ldr	r5, [r4, #0]
 8006fee:	1961      	adds	r1, r4, r5
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1949      	addeq	r1, r1, r5
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7ca      	b.n	8006f9a <_free_r+0x26>
 8007004:	b003      	add	sp, #12
 8007006:	bd30      	pop	{r4, r5, pc}
 8007008:	20009294 	.word	0x20009294

0800700c <__sfputc_r>:
 800700c:	6893      	ldr	r3, [r2, #8]
 800700e:	3b01      	subs	r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	b410      	push	{r4}
 8007014:	6093      	str	r3, [r2, #8]
 8007016:	da08      	bge.n	800702a <__sfputc_r+0x1e>
 8007018:	6994      	ldr	r4, [r2, #24]
 800701a:	42a3      	cmp	r3, r4
 800701c:	db01      	blt.n	8007022 <__sfputc_r+0x16>
 800701e:	290a      	cmp	r1, #10
 8007020:	d103      	bne.n	800702a <__sfputc_r+0x1e>
 8007022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007026:	f7ff be10 	b.w	8006c4a <__swbuf_r>
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	1c58      	adds	r0, r3, #1
 800702e:	6010      	str	r0, [r2, #0]
 8007030:	7019      	strb	r1, [r3, #0]
 8007032:	4608      	mov	r0, r1
 8007034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007038:	4770      	bx	lr

0800703a <__sfputs_r>:
 800703a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703c:	4606      	mov	r6, r0
 800703e:	460f      	mov	r7, r1
 8007040:	4614      	mov	r4, r2
 8007042:	18d5      	adds	r5, r2, r3
 8007044:	42ac      	cmp	r4, r5
 8007046:	d101      	bne.n	800704c <__sfputs_r+0x12>
 8007048:	2000      	movs	r0, #0
 800704a:	e007      	b.n	800705c <__sfputs_r+0x22>
 800704c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007050:	463a      	mov	r2, r7
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ffda 	bl	800700c <__sfputc_r>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d1f3      	bne.n	8007044 <__sfputs_r+0xa>
 800705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007060 <_vfiprintf_r>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	460d      	mov	r5, r1
 8007066:	b09d      	sub	sp, #116	; 0x74
 8007068:	4614      	mov	r4, r2
 800706a:	4698      	mov	r8, r3
 800706c:	4606      	mov	r6, r0
 800706e:	b118      	cbz	r0, 8007078 <_vfiprintf_r+0x18>
 8007070:	6a03      	ldr	r3, [r0, #32]
 8007072:	b90b      	cbnz	r3, 8007078 <_vfiprintf_r+0x18>
 8007074:	f7ff fd02 	bl	8006a7c <__sinit>
 8007078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800707a:	07d9      	lsls	r1, r3, #31
 800707c:	d405      	bmi.n	800708a <_vfiprintf_r+0x2a>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	059a      	lsls	r2, r3, #22
 8007082:	d402      	bmi.n	800708a <_vfiprintf_r+0x2a>
 8007084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007086:	f7f9 fccb 	bl	8000a20 <__retarget_lock_acquire_recursive>
 800708a:	89ab      	ldrh	r3, [r5, #12]
 800708c:	071b      	lsls	r3, r3, #28
 800708e:	d501      	bpl.n	8007094 <_vfiprintf_r+0x34>
 8007090:	692b      	ldr	r3, [r5, #16]
 8007092:	b99b      	cbnz	r3, 80070bc <_vfiprintf_r+0x5c>
 8007094:	4629      	mov	r1, r5
 8007096:	4630      	mov	r0, r6
 8007098:	f7ff fe14 	bl	8006cc4 <__swsetup_r>
 800709c:	b170      	cbz	r0, 80070bc <_vfiprintf_r+0x5c>
 800709e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070a0:	07dc      	lsls	r4, r3, #31
 80070a2:	d504      	bpl.n	80070ae <_vfiprintf_r+0x4e>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	b01d      	add	sp, #116	; 0x74
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	0598      	lsls	r0, r3, #22
 80070b2:	d4f7      	bmi.n	80070a4 <_vfiprintf_r+0x44>
 80070b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b6:	f7f9 fcc7 	bl	8000a48 <__retarget_lock_release_recursive>
 80070ba:	e7f3      	b.n	80070a4 <_vfiprintf_r+0x44>
 80070bc:	2300      	movs	r3, #0
 80070be:	9309      	str	r3, [sp, #36]	; 0x24
 80070c0:	2320      	movs	r3, #32
 80070c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ca:	2330      	movs	r3, #48	; 0x30
 80070cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007280 <_vfiprintf_r+0x220>
 80070d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070d4:	f04f 0901 	mov.w	r9, #1
 80070d8:	4623      	mov	r3, r4
 80070da:	469a      	mov	sl, r3
 80070dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070e0:	b10a      	cbz	r2, 80070e6 <_vfiprintf_r+0x86>
 80070e2:	2a25      	cmp	r2, #37	; 0x25
 80070e4:	d1f9      	bne.n	80070da <_vfiprintf_r+0x7a>
 80070e6:	ebba 0b04 	subs.w	fp, sl, r4
 80070ea:	d00b      	beq.n	8007104 <_vfiprintf_r+0xa4>
 80070ec:	465b      	mov	r3, fp
 80070ee:	4622      	mov	r2, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	4630      	mov	r0, r6
 80070f4:	f7ff ffa1 	bl	800703a <__sfputs_r>
 80070f8:	3001      	adds	r0, #1
 80070fa:	f000 80a9 	beq.w	8007250 <_vfiprintf_r+0x1f0>
 80070fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007100:	445a      	add	r2, fp
 8007102:	9209      	str	r2, [sp, #36]	; 0x24
 8007104:	f89a 3000 	ldrb.w	r3, [sl]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80a1 	beq.w	8007250 <_vfiprintf_r+0x1f0>
 800710e:	2300      	movs	r3, #0
 8007110:	f04f 32ff 	mov.w	r2, #4294967295
 8007114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007118:	f10a 0a01 	add.w	sl, sl, #1
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	9307      	str	r3, [sp, #28]
 8007120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007124:	931a      	str	r3, [sp, #104]	; 0x68
 8007126:	4654      	mov	r4, sl
 8007128:	2205      	movs	r2, #5
 800712a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712e:	4854      	ldr	r0, [pc, #336]	; (8007280 <_vfiprintf_r+0x220>)
 8007130:	f7f9 f876 	bl	8000220 <memchr>
 8007134:	9a04      	ldr	r2, [sp, #16]
 8007136:	b9d8      	cbnz	r0, 8007170 <_vfiprintf_r+0x110>
 8007138:	06d1      	lsls	r1, r2, #27
 800713a:	bf44      	itt	mi
 800713c:	2320      	movmi	r3, #32
 800713e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007142:	0713      	lsls	r3, r2, #28
 8007144:	bf44      	itt	mi
 8007146:	232b      	movmi	r3, #43	; 0x2b
 8007148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800714c:	f89a 3000 	ldrb.w	r3, [sl]
 8007150:	2b2a      	cmp	r3, #42	; 0x2a
 8007152:	d015      	beq.n	8007180 <_vfiprintf_r+0x120>
 8007154:	9a07      	ldr	r2, [sp, #28]
 8007156:	4654      	mov	r4, sl
 8007158:	2000      	movs	r0, #0
 800715a:	f04f 0c0a 	mov.w	ip, #10
 800715e:	4621      	mov	r1, r4
 8007160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007164:	3b30      	subs	r3, #48	; 0x30
 8007166:	2b09      	cmp	r3, #9
 8007168:	d94d      	bls.n	8007206 <_vfiprintf_r+0x1a6>
 800716a:	b1b0      	cbz	r0, 800719a <_vfiprintf_r+0x13a>
 800716c:	9207      	str	r2, [sp, #28]
 800716e:	e014      	b.n	800719a <_vfiprintf_r+0x13a>
 8007170:	eba0 0308 	sub.w	r3, r0, r8
 8007174:	fa09 f303 	lsl.w	r3, r9, r3
 8007178:	4313      	orrs	r3, r2
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	46a2      	mov	sl, r4
 800717e:	e7d2      	b.n	8007126 <_vfiprintf_r+0xc6>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	1d19      	adds	r1, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	9103      	str	r1, [sp, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	bfbb      	ittet	lt
 800718c:	425b      	neglt	r3, r3
 800718e:	f042 0202 	orrlt.w	r2, r2, #2
 8007192:	9307      	strge	r3, [sp, #28]
 8007194:	9307      	strlt	r3, [sp, #28]
 8007196:	bfb8      	it	lt
 8007198:	9204      	strlt	r2, [sp, #16]
 800719a:	7823      	ldrb	r3, [r4, #0]
 800719c:	2b2e      	cmp	r3, #46	; 0x2e
 800719e:	d10c      	bne.n	80071ba <_vfiprintf_r+0x15a>
 80071a0:	7863      	ldrb	r3, [r4, #1]
 80071a2:	2b2a      	cmp	r3, #42	; 0x2a
 80071a4:	d134      	bne.n	8007210 <_vfiprintf_r+0x1b0>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	1d1a      	adds	r2, r3, #4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	9203      	str	r2, [sp, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bfb8      	it	lt
 80071b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071b6:	3402      	adds	r4, #2
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007290 <_vfiprintf_r+0x230>
 80071be:	7821      	ldrb	r1, [r4, #0]
 80071c0:	2203      	movs	r2, #3
 80071c2:	4650      	mov	r0, sl
 80071c4:	f7f9 f82c 	bl	8000220 <memchr>
 80071c8:	b138      	cbz	r0, 80071da <_vfiprintf_r+0x17a>
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	eba0 000a 	sub.w	r0, r0, sl
 80071d0:	2240      	movs	r2, #64	; 0x40
 80071d2:	4082      	lsls	r2, r0
 80071d4:	4313      	orrs	r3, r2
 80071d6:	3401      	adds	r4, #1
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071de:	4829      	ldr	r0, [pc, #164]	; (8007284 <_vfiprintf_r+0x224>)
 80071e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071e4:	2206      	movs	r2, #6
 80071e6:	f7f9 f81b 	bl	8000220 <memchr>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d03f      	beq.n	800726e <_vfiprintf_r+0x20e>
 80071ee:	4b26      	ldr	r3, [pc, #152]	; (8007288 <_vfiprintf_r+0x228>)
 80071f0:	bb1b      	cbnz	r3, 800723a <_vfiprintf_r+0x1da>
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	3307      	adds	r3, #7
 80071f6:	f023 0307 	bic.w	r3, r3, #7
 80071fa:	3308      	adds	r3, #8
 80071fc:	9303      	str	r3, [sp, #12]
 80071fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007200:	443b      	add	r3, r7
 8007202:	9309      	str	r3, [sp, #36]	; 0x24
 8007204:	e768      	b.n	80070d8 <_vfiprintf_r+0x78>
 8007206:	fb0c 3202 	mla	r2, ip, r2, r3
 800720a:	460c      	mov	r4, r1
 800720c:	2001      	movs	r0, #1
 800720e:	e7a6      	b.n	800715e <_vfiprintf_r+0xfe>
 8007210:	2300      	movs	r3, #0
 8007212:	3401      	adds	r4, #1
 8007214:	9305      	str	r3, [sp, #20]
 8007216:	4619      	mov	r1, r3
 8007218:	f04f 0c0a 	mov.w	ip, #10
 800721c:	4620      	mov	r0, r4
 800721e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007222:	3a30      	subs	r2, #48	; 0x30
 8007224:	2a09      	cmp	r2, #9
 8007226:	d903      	bls.n	8007230 <_vfiprintf_r+0x1d0>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0c6      	beq.n	80071ba <_vfiprintf_r+0x15a>
 800722c:	9105      	str	r1, [sp, #20]
 800722e:	e7c4      	b.n	80071ba <_vfiprintf_r+0x15a>
 8007230:	fb0c 2101 	mla	r1, ip, r1, r2
 8007234:	4604      	mov	r4, r0
 8007236:	2301      	movs	r3, #1
 8007238:	e7f0      	b.n	800721c <_vfiprintf_r+0x1bc>
 800723a:	ab03      	add	r3, sp, #12
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	462a      	mov	r2, r5
 8007240:	4b12      	ldr	r3, [pc, #72]	; (800728c <_vfiprintf_r+0x22c>)
 8007242:	a904      	add	r1, sp, #16
 8007244:	4630      	mov	r0, r6
 8007246:	f3af 8000 	nop.w
 800724a:	4607      	mov	r7, r0
 800724c:	1c78      	adds	r0, r7, #1
 800724e:	d1d6      	bne.n	80071fe <_vfiprintf_r+0x19e>
 8007250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007252:	07d9      	lsls	r1, r3, #31
 8007254:	d405      	bmi.n	8007262 <_vfiprintf_r+0x202>
 8007256:	89ab      	ldrh	r3, [r5, #12]
 8007258:	059a      	lsls	r2, r3, #22
 800725a:	d402      	bmi.n	8007262 <_vfiprintf_r+0x202>
 800725c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800725e:	f7f9 fbf3 	bl	8000a48 <__retarget_lock_release_recursive>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	065b      	lsls	r3, r3, #25
 8007266:	f53f af1d 	bmi.w	80070a4 <_vfiprintf_r+0x44>
 800726a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726c:	e71c      	b.n	80070a8 <_vfiprintf_r+0x48>
 800726e:	ab03      	add	r3, sp, #12
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	462a      	mov	r2, r5
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <_vfiprintf_r+0x22c>)
 8007276:	a904      	add	r1, sp, #16
 8007278:	4630      	mov	r0, r6
 800727a:	f000 f879 	bl	8007370 <_printf_i>
 800727e:	e7e4      	b.n	800724a <_vfiprintf_r+0x1ea>
 8007280:	08007a68 	.word	0x08007a68
 8007284:	08007a72 	.word	0x08007a72
 8007288:	00000000 	.word	0x00000000
 800728c:	0800703b 	.word	0x0800703b
 8007290:	08007a6e 	.word	0x08007a6e

08007294 <_printf_common>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	4616      	mov	r6, r2
 800729a:	4699      	mov	r9, r3
 800729c:	688a      	ldr	r2, [r1, #8]
 800729e:	690b      	ldr	r3, [r1, #16]
 80072a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	bfb8      	it	lt
 80072a8:	4613      	movlt	r3, r2
 80072aa:	6033      	str	r3, [r6, #0]
 80072ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b0:	4607      	mov	r7, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	b10a      	cbz	r2, 80072ba <_printf_common+0x26>
 80072b6:	3301      	adds	r3, #1
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	0699      	lsls	r1, r3, #26
 80072be:	bf42      	ittt	mi
 80072c0:	6833      	ldrmi	r3, [r6, #0]
 80072c2:	3302      	addmi	r3, #2
 80072c4:	6033      	strmi	r3, [r6, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	f015 0506 	ands.w	r5, r5, #6
 80072cc:	d106      	bne.n	80072dc <_printf_common+0x48>
 80072ce:	f104 0a19 	add.w	sl, r4, #25
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc26      	bgt.n	800732a <_printf_common+0x96>
 80072dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e0:	1e13      	subs	r3, r2, #0
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	0692      	lsls	r2, r2, #26
 80072ea:	d42b      	bmi.n	8007344 <_printf_common+0xb0>
 80072ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d01e      	beq.n	8007338 <_printf_common+0xa4>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	6922      	ldr	r2, [r4, #16]
 80072fe:	f003 0306 	and.w	r3, r3, #6
 8007302:	2b04      	cmp	r3, #4
 8007304:	bf02      	ittt	eq
 8007306:	68e5      	ldreq	r5, [r4, #12]
 8007308:	6833      	ldreq	r3, [r6, #0]
 800730a:	1aed      	subeq	r5, r5, r3
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	bf0c      	ite	eq
 8007310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007314:	2500      	movne	r5, #0
 8007316:	4293      	cmp	r3, r2
 8007318:	bfc4      	itt	gt
 800731a:	1a9b      	subgt	r3, r3, r2
 800731c:	18ed      	addgt	r5, r5, r3
 800731e:	2600      	movs	r6, #0
 8007320:	341a      	adds	r4, #26
 8007322:	42b5      	cmp	r5, r6
 8007324:	d11a      	bne.n	800735c <_printf_common+0xc8>
 8007326:	2000      	movs	r0, #0
 8007328:	e008      	b.n	800733c <_printf_common+0xa8>
 800732a:	2301      	movs	r3, #1
 800732c:	4652      	mov	r2, sl
 800732e:	4649      	mov	r1, r9
 8007330:	4638      	mov	r0, r7
 8007332:	47c0      	blx	r8
 8007334:	3001      	adds	r0, #1
 8007336:	d103      	bne.n	8007340 <_printf_common+0xac>
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	3501      	adds	r5, #1
 8007342:	e7c6      	b.n	80072d2 <_printf_common+0x3e>
 8007344:	18e1      	adds	r1, r4, r3
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	2030      	movs	r0, #48	; 0x30
 800734a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800734e:	4422      	add	r2, r4
 8007350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007358:	3302      	adds	r3, #2
 800735a:	e7c7      	b.n	80072ec <_printf_common+0x58>
 800735c:	2301      	movs	r3, #1
 800735e:	4622      	mov	r2, r4
 8007360:	4649      	mov	r1, r9
 8007362:	4638      	mov	r0, r7
 8007364:	47c0      	blx	r8
 8007366:	3001      	adds	r0, #1
 8007368:	d0e6      	beq.n	8007338 <_printf_common+0xa4>
 800736a:	3601      	adds	r6, #1
 800736c:	e7d9      	b.n	8007322 <_printf_common+0x8e>
	...

08007370 <_printf_i>:
 8007370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	7e0f      	ldrb	r7, [r1, #24]
 8007376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007378:	2f78      	cmp	r7, #120	; 0x78
 800737a:	4691      	mov	r9, r2
 800737c:	4680      	mov	r8, r0
 800737e:	460c      	mov	r4, r1
 8007380:	469a      	mov	sl, r3
 8007382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007386:	d807      	bhi.n	8007398 <_printf_i+0x28>
 8007388:	2f62      	cmp	r7, #98	; 0x62
 800738a:	d80a      	bhi.n	80073a2 <_printf_i+0x32>
 800738c:	2f00      	cmp	r7, #0
 800738e:	f000 80d4 	beq.w	800753a <_printf_i+0x1ca>
 8007392:	2f58      	cmp	r7, #88	; 0x58
 8007394:	f000 80c0 	beq.w	8007518 <_printf_i+0x1a8>
 8007398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800739c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a0:	e03a      	b.n	8007418 <_printf_i+0xa8>
 80073a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073a6:	2b15      	cmp	r3, #21
 80073a8:	d8f6      	bhi.n	8007398 <_printf_i+0x28>
 80073aa:	a101      	add	r1, pc, #4	; (adr r1, 80073b0 <_printf_i+0x40>)
 80073ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b0:	08007409 	.word	0x08007409
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	08007399 	.word	0x08007399
 80073bc:	08007399 	.word	0x08007399
 80073c0:	08007399 	.word	0x08007399
 80073c4:	08007399 	.word	0x08007399
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007399 	.word	0x08007399
 80073d0:	08007399 	.word	0x08007399
 80073d4:	08007399 	.word	0x08007399
 80073d8:	08007399 	.word	0x08007399
 80073dc:	08007521 	.word	0x08007521
 80073e0:	08007449 	.word	0x08007449
 80073e4:	080074db 	.word	0x080074db
 80073e8:	08007399 	.word	0x08007399
 80073ec:	08007399 	.word	0x08007399
 80073f0:	08007543 	.word	0x08007543
 80073f4:	08007399 	.word	0x08007399
 80073f8:	08007449 	.word	0x08007449
 80073fc:	08007399 	.word	0x08007399
 8007400:	08007399 	.word	0x08007399
 8007404:	080074e3 	.word	0x080074e3
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	1d1a      	adds	r2, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	602a      	str	r2, [r5, #0]
 8007410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007418:	2301      	movs	r3, #1
 800741a:	e09f      	b.n	800755c <_printf_i+0x1ec>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	0607      	lsls	r7, r0, #24
 8007422:	f103 0104 	add.w	r1, r3, #4
 8007426:	6029      	str	r1, [r5, #0]
 8007428:	d501      	bpl.n	800742e <_printf_i+0xbe>
 800742a:	681e      	ldr	r6, [r3, #0]
 800742c:	e003      	b.n	8007436 <_printf_i+0xc6>
 800742e:	0646      	lsls	r6, r0, #25
 8007430:	d5fb      	bpl.n	800742a <_printf_i+0xba>
 8007432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007436:	2e00      	cmp	r6, #0
 8007438:	da03      	bge.n	8007442 <_printf_i+0xd2>
 800743a:	232d      	movs	r3, #45	; 0x2d
 800743c:	4276      	negs	r6, r6
 800743e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007442:	485a      	ldr	r0, [pc, #360]	; (80075ac <_printf_i+0x23c>)
 8007444:	230a      	movs	r3, #10
 8007446:	e012      	b.n	800746e <_printf_i+0xfe>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	6029      	str	r1, [r5, #0]
 8007450:	0605      	lsls	r5, r0, #24
 8007452:	d501      	bpl.n	8007458 <_printf_i+0xe8>
 8007454:	681e      	ldr	r6, [r3, #0]
 8007456:	e002      	b.n	800745e <_printf_i+0xee>
 8007458:	0641      	lsls	r1, r0, #25
 800745a:	d5fb      	bpl.n	8007454 <_printf_i+0xe4>
 800745c:	881e      	ldrh	r6, [r3, #0]
 800745e:	4853      	ldr	r0, [pc, #332]	; (80075ac <_printf_i+0x23c>)
 8007460:	2f6f      	cmp	r7, #111	; 0x6f
 8007462:	bf0c      	ite	eq
 8007464:	2308      	moveq	r3, #8
 8007466:	230a      	movne	r3, #10
 8007468:	2100      	movs	r1, #0
 800746a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800746e:	6865      	ldr	r5, [r4, #4]
 8007470:	60a5      	str	r5, [r4, #8]
 8007472:	2d00      	cmp	r5, #0
 8007474:	bfa2      	ittt	ge
 8007476:	6821      	ldrge	r1, [r4, #0]
 8007478:	f021 0104 	bicge.w	r1, r1, #4
 800747c:	6021      	strge	r1, [r4, #0]
 800747e:	b90e      	cbnz	r6, 8007484 <_printf_i+0x114>
 8007480:	2d00      	cmp	r5, #0
 8007482:	d04b      	beq.n	800751c <_printf_i+0x1ac>
 8007484:	4615      	mov	r5, r2
 8007486:	fbb6 f1f3 	udiv	r1, r6, r3
 800748a:	fb03 6711 	mls	r7, r3, r1, r6
 800748e:	5dc7      	ldrb	r7, [r0, r7]
 8007490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007494:	4637      	mov	r7, r6
 8007496:	42bb      	cmp	r3, r7
 8007498:	460e      	mov	r6, r1
 800749a:	d9f4      	bls.n	8007486 <_printf_i+0x116>
 800749c:	2b08      	cmp	r3, #8
 800749e:	d10b      	bne.n	80074b8 <_printf_i+0x148>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	07de      	lsls	r6, r3, #31
 80074a4:	d508      	bpl.n	80074b8 <_printf_i+0x148>
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	6861      	ldr	r1, [r4, #4]
 80074aa:	4299      	cmp	r1, r3
 80074ac:	bfde      	ittt	le
 80074ae:	2330      	movle	r3, #48	; 0x30
 80074b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074b8:	1b52      	subs	r2, r2, r5
 80074ba:	6122      	str	r2, [r4, #16]
 80074bc:	f8cd a000 	str.w	sl, [sp]
 80074c0:	464b      	mov	r3, r9
 80074c2:	aa03      	add	r2, sp, #12
 80074c4:	4621      	mov	r1, r4
 80074c6:	4640      	mov	r0, r8
 80074c8:	f7ff fee4 	bl	8007294 <_printf_common>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d14a      	bne.n	8007566 <_printf_i+0x1f6>
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	b004      	add	sp, #16
 80074d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	4833      	ldr	r0, [pc, #204]	; (80075b0 <_printf_i+0x240>)
 80074e4:	2778      	movs	r7, #120	; 0x78
 80074e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	6829      	ldr	r1, [r5, #0]
 80074ee:	061f      	lsls	r7, r3, #24
 80074f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074f4:	d402      	bmi.n	80074fc <_printf_i+0x18c>
 80074f6:	065f      	lsls	r7, r3, #25
 80074f8:	bf48      	it	mi
 80074fa:	b2b6      	uxthmi	r6, r6
 80074fc:	07df      	lsls	r7, r3, #31
 80074fe:	bf48      	it	mi
 8007500:	f043 0320 	orrmi.w	r3, r3, #32
 8007504:	6029      	str	r1, [r5, #0]
 8007506:	bf48      	it	mi
 8007508:	6023      	strmi	r3, [r4, #0]
 800750a:	b91e      	cbnz	r6, 8007514 <_printf_i+0x1a4>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	f023 0320 	bic.w	r3, r3, #32
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	2310      	movs	r3, #16
 8007516:	e7a7      	b.n	8007468 <_printf_i+0xf8>
 8007518:	4824      	ldr	r0, [pc, #144]	; (80075ac <_printf_i+0x23c>)
 800751a:	e7e4      	b.n	80074e6 <_printf_i+0x176>
 800751c:	4615      	mov	r5, r2
 800751e:	e7bd      	b.n	800749c <_printf_i+0x12c>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	6826      	ldr	r6, [r4, #0]
 8007524:	6961      	ldr	r1, [r4, #20]
 8007526:	1d18      	adds	r0, r3, #4
 8007528:	6028      	str	r0, [r5, #0]
 800752a:	0635      	lsls	r5, r6, #24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	d501      	bpl.n	8007534 <_printf_i+0x1c4>
 8007530:	6019      	str	r1, [r3, #0]
 8007532:	e002      	b.n	800753a <_printf_i+0x1ca>
 8007534:	0670      	lsls	r0, r6, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0x1c0>
 8007538:	8019      	strh	r1, [r3, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	4615      	mov	r5, r2
 8007540:	e7bc      	b.n	80074bc <_printf_i+0x14c>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	602a      	str	r2, [r5, #0]
 8007548:	681d      	ldr	r5, [r3, #0]
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	2100      	movs	r1, #0
 800754e:	4628      	mov	r0, r5
 8007550:	f7f8 fe66 	bl	8000220 <memchr>
 8007554:	b108      	cbz	r0, 800755a <_printf_i+0x1ea>
 8007556:	1b40      	subs	r0, r0, r5
 8007558:	6060      	str	r0, [r4, #4]
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	2300      	movs	r3, #0
 8007560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007564:	e7aa      	b.n	80074bc <_printf_i+0x14c>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	462a      	mov	r2, r5
 800756a:	4649      	mov	r1, r9
 800756c:	4640      	mov	r0, r8
 800756e:	47d0      	blx	sl
 8007570:	3001      	adds	r0, #1
 8007572:	d0ad      	beq.n	80074d0 <_printf_i+0x160>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	079b      	lsls	r3, r3, #30
 8007578:	d413      	bmi.n	80075a2 <_printf_i+0x232>
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	4298      	cmp	r0, r3
 8007580:	bfb8      	it	lt
 8007582:	4618      	movlt	r0, r3
 8007584:	e7a6      	b.n	80074d4 <_printf_i+0x164>
 8007586:	2301      	movs	r3, #1
 8007588:	4632      	mov	r2, r6
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	47d0      	blx	sl
 8007590:	3001      	adds	r0, #1
 8007592:	d09d      	beq.n	80074d0 <_printf_i+0x160>
 8007594:	3501      	adds	r5, #1
 8007596:	68e3      	ldr	r3, [r4, #12]
 8007598:	9903      	ldr	r1, [sp, #12]
 800759a:	1a5b      	subs	r3, r3, r1
 800759c:	42ab      	cmp	r3, r5
 800759e:	dcf2      	bgt.n	8007586 <_printf_i+0x216>
 80075a0:	e7eb      	b.n	800757a <_printf_i+0x20a>
 80075a2:	2500      	movs	r5, #0
 80075a4:	f104 0619 	add.w	r6, r4, #25
 80075a8:	e7f5      	b.n	8007596 <_printf_i+0x226>
 80075aa:	bf00      	nop
 80075ac:	08007a79 	.word	0x08007a79
 80075b0:	08007a8a 	.word	0x08007a8a

080075b4 <__sflush_r>:
 80075b4:	898a      	ldrh	r2, [r1, #12]
 80075b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	4605      	mov	r5, r0
 80075bc:	0710      	lsls	r0, r2, #28
 80075be:	460c      	mov	r4, r1
 80075c0:	d458      	bmi.n	8007674 <__sflush_r+0xc0>
 80075c2:	684b      	ldr	r3, [r1, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dc05      	bgt.n	80075d4 <__sflush_r+0x20>
 80075c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	dc02      	bgt.n	80075d4 <__sflush_r+0x20>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	d0f9      	beq.n	80075ce <__sflush_r+0x1a>
 80075da:	2300      	movs	r3, #0
 80075dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075e0:	682f      	ldr	r7, [r5, #0]
 80075e2:	6a21      	ldr	r1, [r4, #32]
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	d032      	beq.n	800764e <__sflush_r+0x9a>
 80075e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	075a      	lsls	r2, r3, #29
 80075ee:	d505      	bpl.n	80075fc <__sflush_r+0x48>
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	1ac0      	subs	r0, r0, r3
 80075f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f6:	b10b      	cbz	r3, 80075fc <__sflush_r+0x48>
 80075f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075fa:	1ac0      	subs	r0, r0, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	4602      	mov	r2, r0
 8007600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007602:	6a21      	ldr	r1, [r4, #32]
 8007604:	4628      	mov	r0, r5
 8007606:	47b0      	blx	r6
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	d106      	bne.n	800761c <__sflush_r+0x68>
 800760e:	6829      	ldr	r1, [r5, #0]
 8007610:	291d      	cmp	r1, #29
 8007612:	d82b      	bhi.n	800766c <__sflush_r+0xb8>
 8007614:	4a29      	ldr	r2, [pc, #164]	; (80076bc <__sflush_r+0x108>)
 8007616:	410a      	asrs	r2, r1
 8007618:	07d6      	lsls	r6, r2, #31
 800761a:	d427      	bmi.n	800766c <__sflush_r+0xb8>
 800761c:	2200      	movs	r2, #0
 800761e:	6062      	str	r2, [r4, #4]
 8007620:	04d9      	lsls	r1, r3, #19
 8007622:	6922      	ldr	r2, [r4, #16]
 8007624:	6022      	str	r2, [r4, #0]
 8007626:	d504      	bpl.n	8007632 <__sflush_r+0x7e>
 8007628:	1c42      	adds	r2, r0, #1
 800762a:	d101      	bne.n	8007630 <__sflush_r+0x7c>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b903      	cbnz	r3, 8007632 <__sflush_r+0x7e>
 8007630:	6560      	str	r0, [r4, #84]	; 0x54
 8007632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007634:	602f      	str	r7, [r5, #0]
 8007636:	2900      	cmp	r1, #0
 8007638:	d0c9      	beq.n	80075ce <__sflush_r+0x1a>
 800763a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800763e:	4299      	cmp	r1, r3
 8007640:	d002      	beq.n	8007648 <__sflush_r+0x94>
 8007642:	4628      	mov	r0, r5
 8007644:	f7ff fc96 	bl	8006f74 <_free_r>
 8007648:	2000      	movs	r0, #0
 800764a:	6360      	str	r0, [r4, #52]	; 0x34
 800764c:	e7c0      	b.n	80075d0 <__sflush_r+0x1c>
 800764e:	2301      	movs	r3, #1
 8007650:	4628      	mov	r0, r5
 8007652:	47b0      	blx	r6
 8007654:	1c41      	adds	r1, r0, #1
 8007656:	d1c8      	bne.n	80075ea <__sflush_r+0x36>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0c5      	beq.n	80075ea <__sflush_r+0x36>
 800765e:	2b1d      	cmp	r3, #29
 8007660:	d001      	beq.n	8007666 <__sflush_r+0xb2>
 8007662:	2b16      	cmp	r3, #22
 8007664:	d101      	bne.n	800766a <__sflush_r+0xb6>
 8007666:	602f      	str	r7, [r5, #0]
 8007668:	e7b1      	b.n	80075ce <__sflush_r+0x1a>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	e7ad      	b.n	80075d0 <__sflush_r+0x1c>
 8007674:	690f      	ldr	r7, [r1, #16]
 8007676:	2f00      	cmp	r7, #0
 8007678:	d0a9      	beq.n	80075ce <__sflush_r+0x1a>
 800767a:	0793      	lsls	r3, r2, #30
 800767c:	680e      	ldr	r6, [r1, #0]
 800767e:	bf08      	it	eq
 8007680:	694b      	ldreq	r3, [r1, #20]
 8007682:	600f      	str	r7, [r1, #0]
 8007684:	bf18      	it	ne
 8007686:	2300      	movne	r3, #0
 8007688:	eba6 0807 	sub.w	r8, r6, r7
 800768c:	608b      	str	r3, [r1, #8]
 800768e:	f1b8 0f00 	cmp.w	r8, #0
 8007692:	dd9c      	ble.n	80075ce <__sflush_r+0x1a>
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007698:	4643      	mov	r3, r8
 800769a:	463a      	mov	r2, r7
 800769c:	4628      	mov	r0, r5
 800769e:	47b0      	blx	r6
 80076a0:	2800      	cmp	r0, #0
 80076a2:	dc06      	bgt.n	80076b2 <__sflush_r+0xfe>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076aa:	81a3      	strh	r3, [r4, #12]
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e78e      	b.n	80075d0 <__sflush_r+0x1c>
 80076b2:	4407      	add	r7, r0
 80076b4:	eba8 0800 	sub.w	r8, r8, r0
 80076b8:	e7e9      	b.n	800768e <__sflush_r+0xda>
 80076ba:	bf00      	nop
 80076bc:	dfbffffe 	.word	0xdfbffffe

080076c0 <_fflush_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	690b      	ldr	r3, [r1, #16]
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b913      	cbnz	r3, 80076d0 <_fflush_r+0x10>
 80076ca:	2500      	movs	r5, #0
 80076cc:	4628      	mov	r0, r5
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	b118      	cbz	r0, 80076da <_fflush_r+0x1a>
 80076d2:	6a03      	ldr	r3, [r0, #32]
 80076d4:	b90b      	cbnz	r3, 80076da <_fflush_r+0x1a>
 80076d6:	f7ff f9d1 	bl	8006a7c <__sinit>
 80076da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f3      	beq.n	80076ca <_fflush_r+0xa>
 80076e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076e4:	07d0      	lsls	r0, r2, #31
 80076e6:	d404      	bmi.n	80076f2 <_fflush_r+0x32>
 80076e8:	0599      	lsls	r1, r3, #22
 80076ea:	d402      	bmi.n	80076f2 <_fflush_r+0x32>
 80076ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ee:	f7f9 f997 	bl	8000a20 <__retarget_lock_acquire_recursive>
 80076f2:	4628      	mov	r0, r5
 80076f4:	4621      	mov	r1, r4
 80076f6:	f7ff ff5d 	bl	80075b4 <__sflush_r>
 80076fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076fc:	07da      	lsls	r2, r3, #31
 80076fe:	4605      	mov	r5, r0
 8007700:	d4e4      	bmi.n	80076cc <_fflush_r+0xc>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	059b      	lsls	r3, r3, #22
 8007706:	d4e1      	bmi.n	80076cc <_fflush_r+0xc>
 8007708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770a:	f7f9 f99d 	bl	8000a48 <__retarget_lock_release_recursive>
 800770e:	e7dd      	b.n	80076cc <_fflush_r+0xc>

08007710 <__swhatbuf_r>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	460c      	mov	r4, r1
 8007714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007718:	2900      	cmp	r1, #0
 800771a:	b096      	sub	sp, #88	; 0x58
 800771c:	4615      	mov	r5, r2
 800771e:	461e      	mov	r6, r3
 8007720:	da0d      	bge.n	800773e <__swhatbuf_r+0x2e>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	bf0c      	ite	eq
 800772e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007732:	2340      	movne	r3, #64	; 0x40
 8007734:	2000      	movs	r0, #0
 8007736:	6031      	str	r1, [r6, #0]
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	b016      	add	sp, #88	; 0x58
 800773c:	bd70      	pop	{r4, r5, r6, pc}
 800773e:	466a      	mov	r2, sp
 8007740:	f000 f848 	bl	80077d4 <_fstat_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	dbec      	blt.n	8007722 <__swhatbuf_r+0x12>
 8007748:	9901      	ldr	r1, [sp, #4]
 800774a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800774e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007752:	4259      	negs	r1, r3
 8007754:	4159      	adcs	r1, r3
 8007756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775a:	e7eb      	b.n	8007734 <__swhatbuf_r+0x24>

0800775c <__smakebuf_r>:
 800775c:	898b      	ldrh	r3, [r1, #12]
 800775e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007760:	079d      	lsls	r5, r3, #30
 8007762:	4606      	mov	r6, r0
 8007764:	460c      	mov	r4, r1
 8007766:	d507      	bpl.n	8007778 <__smakebuf_r+0x1c>
 8007768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	2301      	movs	r3, #1
 8007772:	6163      	str	r3, [r4, #20]
 8007774:	b002      	add	sp, #8
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	ab01      	add	r3, sp, #4
 800777a:	466a      	mov	r2, sp
 800777c:	f7ff ffc8 	bl	8007710 <__swhatbuf_r>
 8007780:	9900      	ldr	r1, [sp, #0]
 8007782:	4605      	mov	r5, r0
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff f861 	bl	800684c <_malloc_r>
 800778a:	b948      	cbnz	r0, 80077a0 <__smakebuf_r+0x44>
 800778c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007790:	059a      	lsls	r2, r3, #22
 8007792:	d4ef      	bmi.n	8007774 <__smakebuf_r+0x18>
 8007794:	f023 0303 	bic.w	r3, r3, #3
 8007798:	f043 0302 	orr.w	r3, r3, #2
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	e7e3      	b.n	8007768 <__smakebuf_r+0xc>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	6020      	str	r0, [r4, #0]
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	6163      	str	r3, [r4, #20]
 80077ae:	9b01      	ldr	r3, [sp, #4]
 80077b0:	6120      	str	r0, [r4, #16]
 80077b2:	b15b      	cbz	r3, 80077cc <__smakebuf_r+0x70>
 80077b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 f81d 	bl	80077f8 <_isatty_r>
 80077be:	b128      	cbz	r0, 80077cc <__smakebuf_r+0x70>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	431d      	orrs	r5, r3
 80077d0:	81a5      	strh	r5, [r4, #12]
 80077d2:	e7cf      	b.n	8007774 <__smakebuf_r+0x18>

080077d4 <_fstat_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d07      	ldr	r5, [pc, #28]	; (80077f4 <_fstat_r+0x20>)
 80077d8:	2300      	movs	r3, #0
 80077da:	4604      	mov	r4, r0
 80077dc:	4608      	mov	r0, r1
 80077de:	4611      	mov	r1, r2
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	f7f8 ffe2 	bl	80007aa <_fstat>
 80077e6:	1c43      	adds	r3, r0, #1
 80077e8:	d102      	bne.n	80077f0 <_fstat_r+0x1c>
 80077ea:	682b      	ldr	r3, [r5, #0]
 80077ec:	b103      	cbz	r3, 80077f0 <_fstat_r+0x1c>
 80077ee:	6023      	str	r3, [r4, #0]
 80077f0:	bd38      	pop	{r3, r4, r5, pc}
 80077f2:	bf00      	nop
 80077f4:	200093d8 	.word	0x200093d8

080077f8 <_isatty_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d06      	ldr	r5, [pc, #24]	; (8007814 <_isatty_r+0x1c>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	f7f8 ffe1 	bl	80007ca <_isatty>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_isatty_r+0x1a>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_isatty_r+0x1a>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200093d8 	.word	0x200093d8

08007818 <_init>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr

08007824 <_fini>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr
