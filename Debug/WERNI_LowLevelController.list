
WERNI_LowLevelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a14  08005a14  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005a14  08005a14  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a14  08005a14  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009350  20000060  08005a7c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200093b0  08005a7c  000293b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c30  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004464  00000000  00000000  00037d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a5  00000000  00000000  0003d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229a5  00000000  00000000  0003e7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc94  00000000  00000000  00061172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4710  00000000  00000000  0007de06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a90  00000000  00000000  00152518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00157fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005838 	.word	0x08005838

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005838 	.word	0x08005838

08000220 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
return 0;
 8000232:	2300      	movs	r3, #0
}
 8000234:	4618      	mov	r0, r3
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr

0800023e <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <vApplicationGetIdleTaskMemory+0x2c>)
 8000264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <vApplicationGetIdleTaskMemory+0x30>)
 800026a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000080 	.word	0x20000080
 8000284:	2000012c 	.word	0x2000012c

08000288 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <vApplicationGetTimerTaskMemory+0x30>)
 800029e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	2000032c 	.word	0x2000032c
 80002b8:	200003d8 	.word	0x200003d8

080002bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002bc:	b5b0      	push	{r4, r5, r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of idleTask */
  osThreadDef(idleTask, StartIdleTask, osPriorityIdle, 0, 128);
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <MX_FREERTOS_Init+0x30>)
 80002c4:	1d3c      	adds	r4, r7, #4
 80002c6:	461d      	mov	r5, r3
 80002c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 faac 	bl	8002836 <osThreadCreate>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a03      	ldr	r2, [pc, #12]	; (80002f0 <MX_FREERTOS_Init+0x34>)
 80002e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002e4:	bf00      	nop
 80002e6:	3720      	adds	r7, #32
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bdb0      	pop	{r4, r5, r7, pc}
 80002ec:	0800585c 	.word	0x0800585c
 80002f0:	2000007c 	.word	0x2000007c

080002f4 <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
    MsgPool_init();
 80002fc:	f005 f8a8 	bl	8005450 <MsgPool_init>
    TaskList_init();
 8000300:	f005 f966 	bl	80055d0 <TaskList_init>
    app_init();
 8000304:	f005 f882 	bl	800540c <app_init>
    vTaskDelete(NULL);
 8000308:	2000      	movs	r0, #0
 800030a:	f003 faf5 	bl	80038f8 <vTaskDelete>
    MsgPool_init();
 800030e:	e7f5      	b.n	80002fc <StartIdleTask+0x8>

08000310 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000326:	4b38      	ldr	r3, [pc, #224]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	4a37      	ldr	r2, [pc, #220]	; (8000408 <MX_GPIO_Init+0xf8>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000332:	4b35      	ldr	r3, [pc, #212]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	f003 0304 	and.w	r3, r3, #4
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800033e:	4b32      	ldr	r3, [pc, #200]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4a31      	ldr	r2, [pc, #196]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000344:	f043 0320 	orr.w	r3, r3, #32
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4b2f      	ldr	r3, [pc, #188]	; (8000408 <MX_GPIO_Init+0xf8>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0320 	and.w	r3, r3, #32
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <MX_GPIO_Init+0xf8>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4b29      	ldr	r3, [pc, #164]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b26      	ldr	r3, [pc, #152]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a25      	ldr	r2, [pc, #148]	; (8000408 <MX_GPIO_Init+0xf8>)
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b23      	ldr	r3, [pc, #140]	; (8000408 <MX_GPIO_Init+0xf8>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0302 	and.w	r3, r3, #2
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2120      	movs	r1, #32
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f000 fdd1 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000398:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	4619      	mov	r1, r3
 80003a8:	4818      	ldr	r0, [pc, #96]	; (800040c <MX_GPIO_Init+0xfc>)
 80003aa:	f000 fb6d 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80003ae:	230c      	movs	r3, #12
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80003be:	230c      	movs	r3, #12
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003cc:	f000 fb5c 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d0:	2320      	movs	r3, #32
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fb4d 	bl	8000a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2105      	movs	r1, #5
 80003f2:	2028      	movs	r0, #40	; 0x28
 80003f4:	f000 fb06 	bl	8000a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003f8:	2028      	movs	r0, #40	; 0x28
 80003fa:	f000 fb2d 	bl	8000a58 <HAL_NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	; 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	48000800 	.word	0x48000800

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 f9f1 	bl	80007fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f807 	bl	800042a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f7ff ff78 	bl	8000310 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000420:	f7ff ff4c 	bl	80002bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000424:	f002 fa00 	bl	8002828 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000428:	e7fe      	b.n	8000428 <main+0x18>

0800042a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b094      	sub	sp, #80	; 0x50
 800042e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	2238      	movs	r2, #56	; 0x38
 8000436:	2100      	movs	r1, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f005 f921 	bl	8005680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fdc5 	bl	8000fdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000452:	2302      	movs	r3, #2
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800045a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045c:	2340      	movs	r3, #64	; 0x40
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000460:	2302      	movs	r3, #2
 8000462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000464:	2302      	movs	r3, #2
 8000466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000468:	2304      	movs	r3, #4
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800046c:	2355      	movs	r3, #85	; 0x55
 800046e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000470:	2302      	movs	r3, #2
 8000472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000474:	2302      	movs	r3, #2
 8000476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000478:	2302      	movs	r3, #2
 800047a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	f107 0318 	add.w	r3, r7, #24
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fe6f 	bl	8001164 <HAL_RCC_OscConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800048c:	f000 f82a 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000490:	230f      	movs	r3, #15
 8000492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	2303      	movs	r3, #3
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2104      	movs	r1, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 fa6d 	bl	8001988 <HAL_RCC_ClockConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004b4:	f000 f816 	bl	80004e4 <Error_Handler>
  }
}
 80004b8:	bf00      	nop
 80004ba:	3750      	adds	r7, #80	; 0x50
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d101      	bne.n	80004d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004d2:	f000 f9ab 	bl	800082c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40001000 	.word	0x40001000

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>

080004ee <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x50>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <HAL_MspInit+0x50>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6613      	str	r3, [r2, #96]	; 0x60
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x50>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x50>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_MspInit+0x50>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6593      	str	r3, [r2, #88]	; 0x58
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_MspInit+0x50>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	210f      	movs	r1, #15
 800053e:	f06f 0001 	mvn.w	r0, #1
 8000542:	f000 fa5f 	bl	8000a04 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000546:	f000 fdfd 	bl	8001144 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <HAL_InitTick+0xc4>)
 800056a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <HAL_InitTick+0xc4>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6593      	str	r3, [r2, #88]	; 0x58
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <HAL_InitTick+0xc4>)
 8000576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000578:	f003 0310 	and.w	r3, r3, #16
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000580:	f107 020c 	add.w	r2, r7, #12
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fc80 	bl	8001e90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000590:	f001 fc68 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8000594:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <HAL_InitTick+0xc8>)
 800059a:	fba2 2303 	umull	r2, r3, r2, r3
 800059e:	0c9b      	lsrs	r3, r3, #18
 80005a0:	3b01      	subs	r3, #1
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_InitTick+0xcc>)
 80005a6:	4a20      	ldr	r2, [pc, #128]	; (8000628 <HAL_InitTick+0xd0>)
 80005a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <HAL_InitTick+0xcc>)
 80005ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <HAL_InitTick+0xcc>)
 80005b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <HAL_InitTick+0xcc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_InitTick+0xcc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80005c4:	4817      	ldr	r0, [pc, #92]	; (8000624 <HAL_InitTick+0xcc>)
 80005c6:	f001 fceb 	bl	8001fa0 <HAL_TIM_Base_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80005d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d11b      	bne.n	8000610 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <HAL_InitTick+0xcc>)
 80005da:	f001 fdcd 	bl	8002178 <HAL_TIM_Base_Start_IT>
 80005de:	4603      	mov	r3, r0
 80005e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80005e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d111      	bne.n	8000610 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005ec:	2036      	movs	r0, #54	; 0x36
 80005ee:	f000 fa33 	bl	8000a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d808      	bhi.n	800060a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	2036      	movs	r0, #54	; 0x36
 80005fe:	f000 fa01 	bl	8000a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <HAL_InitTick+0xd4>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e002      	b.n	8000610 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000614:	4618      	mov	r0, r3
 8000616:	3730      	adds	r7, #48	; 0x30
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	431bde83 	.word	0x431bde83
 8000624:	200007d8 	.word	0x200007d8
 8000628:	40001000 	.word	0x40001000
 800062c:	20000004 	.word	0x20000004

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>

0800064e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000664:	f000 fc96 	bl	8000f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <TIM6_DAC_IRQHandler+0x10>)
 8000672:	f001 fe35 	bl	80022e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200007d8 	.word	0x200007d8

08000680 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <SystemInit+0x20>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <SystemInit+0x20>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0b      	ldr	r4, [pc, #44]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ce:	f7ff ffd7 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f005 f833 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d6:	f7ff fe9b 	bl	8000410 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006e8:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 80006ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006f0:	200093b0 	.word	0x200093b0

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>

080006f6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d104      	bne.n	800070e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
 8000708:	f7ff feec 	bl	80004e4 <Error_Handler>
 800070c:	e7fe      	b.n	800070c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7a1b      	ldrb	r3, [r3, #8]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d904      	bls.n	8000720 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000716:	b672      	cpsid	i
}
 8000718:	bf00      	nop
 800071a:	f7ff fee3 	bl	80004e4 <Error_Handler>
 800071e:	e7fe      	b.n	800071e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	b2d1      	uxtb	r1, r2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	7211      	strb	r1, [r2, #8]
 800072c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800072e:	f3ef 8211 	mrs	r2, BASEPRI
 8000732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000736:	f383 8811 	msr	BASEPRI, r3
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	60fa      	str	r2, [r7, #12]
 8000744:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d104      	bne.n	800076e <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
 8000768:	f7ff febc 	bl	80004e4 <Error_Handler>
 800076c:	e7fe      	b.n	800076c <stm32_lock_release+0x16>
  lock->nesting_level--;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7a1b      	ldrb	r3, [r3, #8]
 8000772:	3b01      	subs	r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1b      	ldrb	r3, [r3, #8]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d904      	bls.n	800078c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000782:	b672      	cpsid	i
}
 8000784:	bf00      	nop
 8000786:	f7ff fead 	bl	80004e4 <Error_Handler>
 800078a:	e7fe      	b.n	800078a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7a1b      	ldrb	r3, [r3, #8]
 8000790:	461a      	mov	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000798:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80007a0:	bf00      	nop
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
 80007bc:	f7ff fe92 	bl	80004e4 <Error_Handler>
 80007c0:	e7fe      	b.n	80007c0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff96 	bl	80006f6 <stm32_lock_acquire>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d104      	bne.n	80007ea <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
 80007e4:	f7ff fe7e 	bl	80004e4 <Error_Handler>
 80007e8:	e7fe      	b.n	80007e8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffb2 	bl	8000756 <stm32_lock_release>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f8dd 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	200f      	movs	r0, #15
 800080c:	f7ff fea4 	bl	8000558 <HAL_InitTick>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e001      	b.n	8000820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081c:	f7ff fe72 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000820:	79fb      	ldrb	r3, [r7, #7]

}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4413      	add	r3, r2
 800083a:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x1c>)
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000830 	.word	0x20000830
 800084c:	20000008 	.word	0x20000008

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000830 	.word	0x20000830

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <__NVIC_EnableIRQ+0x38>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d00f      	beq.n	80009f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d00c      	beq.n	80009f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d009      	beq.n	80009f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d006      	beq.n	80009f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d003      	beq.n	80009f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009ea:	21a6      	movs	r1, #166	; 0xa6
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80009ee:	f7ff fd7e 	bl	80004ee <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff38 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08005878 	.word	0x08005878

08000a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d903      	bls.n	8000a20 <HAL_NVIC_SetPriority+0x1c>
 8000a18:	21be      	movs	r1, #190	; 0xbe
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <HAL_NVIC_SetPriority+0x50>)
 8000a1c:	f7ff fd67 	bl	80004ee <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d903      	bls.n	8000a2e <HAL_NVIC_SetPriority+0x2a>
 8000a26:	21bf      	movs	r1, #191	; 0xbf
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <HAL_NVIC_SetPriority+0x50>)
 8000a2a:	f7ff fd60 	bl	80004ee <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2e:	f7ff ff3f 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 8000a32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	6978      	ldr	r0, [r7, #20]
 8000a3a:	f7ff ff8f 	bl	800095c <NVIC_EncodePriority>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08005878 	.word	0x08005878

08000a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da03      	bge.n	8000a72 <HAL_NVIC_EnableIRQ+0x1a>
 8000a6a:	21d2      	movs	r1, #210	; 0xd2
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <HAL_NVIC_EnableIRQ+0x2c>)
 8000a6e:	f7ff fd3e 	bl	80004ee <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff28 	bl	80008cc <__NVIC_EnableIRQ>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08005878 	.word	0x08005878

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a9c:	d01b      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <HAL_GPIO_Init+0xfc>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d017      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a37      	ldr	r2, [pc, #220]	; (8000b88 <HAL_GPIO_Init+0x100>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a36      	ldr	r2, [pc, #216]	; (8000b8c <HAL_GPIO_Init+0x104>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00f      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a35      	ldr	r2, [pc, #212]	; (8000b90 <HAL_GPIO_Init+0x108>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00b      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <HAL_GPIO_Init+0x10c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <HAL_GPIO_Init+0x110>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x4e>
 8000ace:	21a9      	movs	r1, #169	; 0xa9
 8000ad0:	4832      	ldr	r0, [pc, #200]	; (8000b9c <HAL_GPIO_Init+0x114>)
 8000ad2:	f7ff fd0c 	bl	80004ee <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <HAL_GPIO_Init+0x64>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0c1b      	lsrs	r3, r3, #16
 8000ae6:	041b      	lsls	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x6c>
 8000aec:	21aa      	movs	r1, #170	; 0xaa
 8000aee:	482b      	ldr	r0, [pc, #172]	; (8000b9c <HAL_GPIO_Init+0x114>)
 8000af0:	f7ff fcfd 	bl	80004ee <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 820a 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	f000 8205 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b11      	cmp	r3, #17
 8000b0e:	f000 8200 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	f000 81fb 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	f000 81f6 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000b2e:	f000 81f0 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000b3a:	f000 81ea 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000b46:	f000 81e4 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000b52:	f000 81de 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000b5e:	f000 81d8 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000b6a:	f000 81d2 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f000 81cd 	beq.w	8000f12 <HAL_GPIO_Init+0x48a>
 8000b78:	21ab      	movs	r1, #171	; 0xab
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <HAL_GPIO_Init+0x114>)
 8000b7c:	f7ff fcb7 	bl	80004ee <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b80:	e1c7      	b.n	8000f12 <HAL_GPIO_Init+0x48a>
 8000b82:	bf00      	nop
 8000b84:	48000400 	.word	0x48000400
 8000b88:	48000800 	.word	0x48000800
 8000b8c:	48000c00 	.word	0x48000c00
 8000b90:	48001000 	.word	0x48001000
 8000b94:	48001400 	.word	0x48001400
 8000b98:	48001800 	.word	0x48001800
 8000b9c:	080058b4 	.word	0x080058b4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 81aa 	beq.w	8000f0c <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d005      	beq.n	8000bd0 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d144      	bne.n	8000c5a <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00f      	beq.n	8000bf8 <HAL_GPIO_Init+0x170>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d00b      	beq.n	8000bf8 <HAL_GPIO_Init+0x170>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x170>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x170>
 8000bf0:	21bb      	movs	r1, #187	; 0xbb
 8000bf2:	488b      	ldr	r0, [pc, #556]	; (8000e20 <HAL_GPIO_Init+0x398>)
 8000bf4:	f7ff fc7b 	bl	80004ee <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d027      	beq.n	8000cb6 <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00b      	beq.n	8000c86 <HAL_GPIO_Init+0x1fe>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x1fe>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x1fe>
 8000c7e:	21cc      	movs	r1, #204	; 0xcc
 8000c80:	4867      	ldr	r0, [pc, #412]	; (8000e20 <HAL_GPIO_Init+0x398>)
 8000c82:	f7ff fc34 	bl	80004ee <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d14b      	bne.n	8000d5a <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cc8:	d01b      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a55      	ldr	r2, [pc, #340]	; (8000e24 <HAL_GPIO_Init+0x39c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d017      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a54      	ldr	r2, [pc, #336]	; (8000e28 <HAL_GPIO_Init+0x3a0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <HAL_GPIO_Init+0x3a4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00f      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a52      	ldr	r2, [pc, #328]	; (8000e30 <HAL_GPIO_Init+0x3a8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00b      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <HAL_GPIO_Init+0x3ac>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d007      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a50      	ldr	r2, [pc, #320]	; (8000e38 <HAL_GPIO_Init+0x3b0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x27a>
 8000cfa:	21d9      	movs	r1, #217	; 0xd9
 8000cfc:	4848      	ldr	r0, [pc, #288]	; (8000e20 <HAL_GPIO_Init+0x398>)
 8000cfe:	f7ff fbf6 	bl	80004ee <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	d903      	bls.n	8000d12 <HAL_GPIO_Init+0x28a>
 8000d0a:	21da      	movs	r1, #218	; 0xda
 8000d0c:	4844      	ldr	r0, [pc, #272]	; (8000e20 <HAL_GPIO_Init+0x398>)
 8000d0e:	f7ff fbee 	bl	80004ee <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	6939      	ldr	r1, [r7, #16]
 8000d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0203 	and.w	r2, r3, #3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80b8 	beq.w	8000f0c <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_GPIO_Init+0x3b4>)
 8000d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_GPIO_Init+0x3b4>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6613      	str	r3, [r2, #96]	; 0x60
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_GPIO_Init+0x3b4>)
 8000daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <HAL_GPIO_Init+0x3b8>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dde:	d031      	beq.n	8000e44 <HAL_GPIO_Init+0x3bc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_GPIO_Init+0x39c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x394>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_GPIO_Init+0x3a0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x390>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_GPIO_Init+0x3a4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x38c>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_GPIO_Init+0x3a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x388>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <HAL_GPIO_Init+0x3ac>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x384>
 8000e08:	2305      	movs	r3, #5
 8000e0a:	e01c      	b.n	8000e46 <HAL_GPIO_Init+0x3be>
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	e01a      	b.n	8000e46 <HAL_GPIO_Init+0x3be>
 8000e10:	2304      	movs	r3, #4
 8000e12:	e018      	b.n	8000e46 <HAL_GPIO_Init+0x3be>
 8000e14:	2303      	movs	r3, #3
 8000e16:	e016      	b.n	8000e46 <HAL_GPIO_Init+0x3be>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e014      	b.n	8000e46 <HAL_GPIO_Init+0x3be>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e012      	b.n	8000e46 <HAL_GPIO_Init+0x3be>
 8000e20:	080058b4 	.word	0x080058b4
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	48000c00 	.word	0x48000c00
 8000e30:	48001000 	.word	0x48001000
 8000e34:	48001400 	.word	0x48001400
 8000e38:	48001800 	.word	0x48001800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	2300      	movs	r3, #0
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e56:	4935      	ldr	r1, [pc, #212]	; (8000f2c <HAL_GPIO_Init+0x4a4>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e88:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_GPIO_Init+0x4a8>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f47f ae3f 	bne.w	8000ba0 <HAL_GPIO_Init+0x118>
  }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <HAL_GPIO_WritePin+0x20>
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	041b      	lsls	r3, r3, #16
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <HAL_GPIO_WritePin+0x2a>
 8000f54:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <HAL_GPIO_WritePin+0x5c>)
 8000f5a:	f7ff fac8 	bl	80004ee <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000f5e:	787b      	ldrb	r3, [r7, #1]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_WritePin+0x40>
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d004      	beq.n	8000f74 <HAL_GPIO_WritePin+0x40>
 8000f6a:	f240 119b 	movw	r1, #411	; 0x19b
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <HAL_GPIO_WritePin+0x5c>)
 8000f70:	f7ff fabd 	bl	80004ee <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	080058b4 	.word	0x080058b4

08000f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f806 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff0:	d007      	beq.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d003      	beq.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000ffa:	219d      	movs	r1, #157	; 0x9d
 8000ffc:	484d      	ldr	r0, [pc, #308]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8000ffe:	f7ff fa76 	bl	80004ee <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d141      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001008:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001014:	d131      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001016:	4b48      	ldr	r3, [pc, #288]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101c:	4a46      	ldr	r2, [pc, #280]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800101e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001022:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800102e:	4a42      	ldr	r2, [pc, #264]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001034:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2232      	movs	r2, #50	; 0x32
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	4a3f      	ldr	r2, [pc, #252]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9b      	lsrs	r3, r3, #18
 8001048:	3301      	adds	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800104c:	e002      	b.n	8001054 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3b01      	subs	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001060:	d102      	bne.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f2      	bne.n	800104e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001074:	d158      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e057      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001080:	4a2d      	ldr	r2, [pc, #180]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001086:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800108a:	e04d      	b.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001092:	d141      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800109c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a0:	d131      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ba:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <HAL_PWREx_ControlVoltageScaling+0x160>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2232      	movs	r2, #50	; 0x32
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80010ce:	fba2 2303 	umull	r2, r3, r2, r3
 80010d2:	0c9b      	lsrs	r3, r3, #18
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d8:	e002      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3b01      	subs	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ec:	d102      	bne.n	80010f4 <HAL_PWREx_ControlVoltageScaling+0x118>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f2      	bne.n	80010da <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001100:	d112      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e011      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001116:	e007      	b.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080058f0 	.word	0x080058f0
 8001138:	40007000 	.word	0x40007000
 800113c:	20000000 	.word	0x20000000
 8001140:	431bde83 	.word	0x431bde83

08001144 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001152:	6093      	str	r3, [r2, #8]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40007000 	.word	0x40007000

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	f000 bc02 	b.w	800197c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d022      	beq.n	80011c6 <HAL_RCC_OscConfig+0x62>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d11c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d116      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d110      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
 80011bc:	f240 1145 	movw	r1, #325	; 0x145
 80011c0:	4892      	ldr	r0, [pc, #584]	; (800140c <HAL_RCC_OscConfig+0x2a8>)
 80011c2:	f7ff f994 	bl	80004ee <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8089 	beq.w	80012e6 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00e      	beq.n	80011fa <HAL_RCC_OscConfig+0x96>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d009      	beq.n	80011fa <HAL_RCC_OscConfig+0x96>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ee:	d004      	beq.n	80011fa <HAL_RCC_OscConfig+0x96>
 80011f0:	f240 114b 	movw	r1, #331	; 0x14b
 80011f4:	4885      	ldr	r0, [pc, #532]	; (800140c <HAL_RCC_OscConfig+0x2a8>)
 80011f6:	f7ff f97a 	bl	80004ee <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001204:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d102      	bne.n	800121a <HAL_RCC_OscConfig+0xb6>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d002      	beq.n	8001220 <HAL_RCC_OscConfig+0xbc>
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x180>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e3a1      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0xec>
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0x128>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x110>
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0x128>
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a62      	ldr	r2, [pc, #392]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fadc 	bl	8000850 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fad8 	bl	8000850 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e366      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ae:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x138>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fac8 	bl	8000850 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fac4 	bl	8000850 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e352      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d6:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x160>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8093 	beq.w	800141a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <HAL_RCC_OscConfig+0x1ac>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001304:	d004      	beq.n	8001310 <HAL_RCC_OscConfig+0x1ac>
 8001306:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800130a:	4840      	ldr	r0, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x2a8>)
 800130c:	f7ff f8ef 	bl	80004ee <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b7f      	cmp	r3, #127	; 0x7f
 8001316:	d904      	bls.n	8001322 <HAL_RCC_OscConfig+0x1be>
 8001318:	f240 1181 	movw	r1, #385	; 0x181
 800131c:	483b      	ldr	r0, [pc, #236]	; (800140c <HAL_RCC_OscConfig+0x2a8>)
 800131e:	f7ff f8e6 	bl	80004ee <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b0c      	cmp	r3, #12
 800133a:	d102      	bne.n	8001342 <HAL_RCC_OscConfig+0x1de>
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d002      	beq.n	8001348 <HAL_RCC_OscConfig+0x1e4>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d11f      	bne.n	8001388 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x1fc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e30d      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	4928      	ldr	r1, [pc, #160]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x2b0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8ed 	bl	8000558 <HAL_InitTick>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d049      	beq.n	8001418 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e2f9      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d023      	beq.n	80013d8 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fa58 	bl	8000850 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fa54 	bl	8000850 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e2e2      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	061b      	lsls	r3, r3, #24
 80013d0:	490f      	ldr	r1, [pc, #60]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
 80013d6:	e020      	b.n	800141a <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fa34 	bl	8000850 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fa30 	bl	8000850 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e2be      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x288>
 800140a:	e006      	b.n	800141a <HAL_RCC_OscConfig+0x2b6>
 800140c:	0800592c 	.word	0x0800592c
 8001410:	40021000 	.word	0x40021000
 8001414:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d049      	beq.n	80014ba <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <HAL_RCC_OscConfig+0x2dc>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d004      	beq.n	8001440 <HAL_RCC_OscConfig+0x2dc>
 8001436:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800143a:	48a3      	ldr	r0, [pc, #652]	; (80016c8 <HAL_RCC_OscConfig+0x564>)
 800143c:	f7ff f857 	bl	80004ee <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01c      	beq.n	8001482 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001448:	4ba0      	ldr	r3, [pc, #640]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 800144a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144e:	4a9f      	ldr	r2, [pc, #636]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff f9fa 	bl	8000850 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff f9f6 	bl	8000850 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e284      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001472:	4b96      	ldr	r3, [pc, #600]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ef      	beq.n	8001460 <HAL_RCC_OscConfig+0x2fc>
 8001480:	e01b      	b.n	80014ba <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001482:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001488:	4a90      	ldr	r2, [pc, #576]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff f9dd 	bl	8000850 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff f9d9 	bl	8000850 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e267      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ac:	4b87      	ldr	r3, [pc, #540]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ef      	bne.n	800149a <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80b7 	beq.w	8001636 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_RCC_OscConfig+0x38a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d008      	beq.n	80014ee <HAL_RCC_OscConfig+0x38a>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d004      	beq.n	80014ee <HAL_RCC_OscConfig+0x38a>
 80014e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014e8:	4877      	ldr	r0, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x564>)
 80014ea:	f7ff f800 	bl	80004ee <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014ee:	4b77      	ldr	r3, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x39a>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x39c>
 80014fe:	2300      	movs	r3, #0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00d      	beq.n	8001520 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001504:	4b71      	ldr	r3, [pc, #452]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	4a70      	ldr	r2, [pc, #448]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150e:	6593      	str	r3, [r2, #88]	; 0x58
 8001510:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800151c:	2301      	movs	r3, #1
 800151e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x56c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d118      	bne.n	800155e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x56c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x56c>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001538:	f7ff f98a 	bl	8000850 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001540:	f7ff f986 	bl	8000850 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e214      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x56c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d108      	bne.n	8001578 <HAL_RCC_OscConfig+0x414>
 8001566:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001576:	e024      	b.n	80015c2 <HAL_RCC_OscConfig+0x45e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d110      	bne.n	80015a2 <HAL_RCC_OscConfig+0x43e>
 8001580:	4b52      	ldr	r3, [pc, #328]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	4a51      	ldr	r2, [pc, #324]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001590:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a0:	e00f      	b.n	80015c2 <HAL_RCC_OscConfig+0x45e>
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a8:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b2:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b8:	4a44      	ldr	r2, [pc, #272]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80015ba:	f023 0304 	bic.w	r3, r3, #4
 80015be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d016      	beq.n	80015f8 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff f941 	bl	8000850 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff f93d 	bl	8000850 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1c9      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e8:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ed      	beq.n	80015d2 <HAL_RCC_OscConfig+0x46e>
 80015f6:	e015      	b.n	8001624 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff f92a 	bl	8000850 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff f926 	bl	8000850 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1b2      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ed      	bne.n	8001600 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d105      	bne.n	8001636 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	2b00      	cmp	r3, #0
 8001640:	d04f      	beq.n	80016e2 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_RCC_OscConfig+0x4f8>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d004      	beq.n	800165c <HAL_RCC_OscConfig+0x4f8>
 8001652:	f240 213b 	movw	r1, #571	; 0x23b
 8001656:	481c      	ldr	r0, [pc, #112]	; (80016c8 <HAL_RCC_OscConfig+0x564>)
 8001658:	f7fe ff49 	bl	80004ee <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01c      	beq.n	800169e <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff f8ec 	bl	8000850 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800167c:	f7ff f8e8 	bl	8000850 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e176      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 8001690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ef      	beq.n	800167c <HAL_RCC_OscConfig+0x518>
 800169c:	e021      	b.n	80016e2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80016a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a4:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_RCC_OscConfig+0x568>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff f8cf 	bl	8000850 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016b4:	e00e      	b.n	80016d4 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b6:	f7ff f8cb 	bl	8000850 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d907      	bls.n	80016d4 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e159      	b.n	800197c <HAL_RCC_OscConfig+0x818>
 80016c8:	0800592c 	.word	0x0800592c
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016d4:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80016d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1e9      	bne.n	80016b6 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00c      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a0>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d008      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a0>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d004      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a0>
 80016fa:	f44f 7119 	mov.w	r1, #612	; 0x264
 80016fe:	4880      	ldr	r0, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 8001700:	f7fe fef5 	bl	80004ee <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8136 	beq.w	800197a <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b0c      	cmp	r3, #12
 8001718:	f000 80ea 	beq.w	80018f0 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b02      	cmp	r3, #2
 8001722:	f040 80bd 	bne.w	80018a0 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x5e4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d008      	beq.n	8001748 <HAL_RCC_OscConfig+0x5e4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d004      	beq.n	8001748 <HAL_RCC_OscConfig+0x5e4>
 800173e:	f240 216e 	movw	r1, #622	; 0x26e
 8001742:	486f      	ldr	r0, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 8001744:	f7fe fed3 	bl	80004ee <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_RCC_OscConfig+0x5f4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	2b10      	cmp	r3, #16
 8001756:	d904      	bls.n	8001762 <HAL_RCC_OscConfig+0x5fe>
 8001758:	f240 216f 	movw	r1, #623	; 0x26f
 800175c:	4868      	ldr	r0, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 800175e:	f7fe fec6 	bl	80004ee <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	2b07      	cmp	r3, #7
 8001768:	d903      	bls.n	8001772 <HAL_RCC_OscConfig+0x60e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	2b7f      	cmp	r3, #127	; 0x7f
 8001770:	d904      	bls.n	800177c <HAL_RCC_OscConfig+0x618>
 8001772:	f44f 711c 	mov.w	r1, #624	; 0x270
 8001776:	4862      	ldr	r0, [pc, #392]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 8001778:	f7fe feb9 	bl	80004ee <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d903      	bls.n	800178c <HAL_RCC_OscConfig+0x628>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b1f      	cmp	r3, #31
 800178a:	d904      	bls.n	8001796 <HAL_RCC_OscConfig+0x632>
 800178c:	f240 2171 	movw	r1, #625	; 0x271
 8001790:	485b      	ldr	r0, [pc, #364]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 8001792:	f7fe feac 	bl	80004ee <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	2b02      	cmp	r3, #2
 800179c:	d010      	beq.n	80017c0 <HAL_RCC_OscConfig+0x65c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d00c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x65c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d008      	beq.n	80017c0 <HAL_RCC_OscConfig+0x65c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x65c>
 80017b6:	f240 2172 	movw	r1, #626	; 0x272
 80017ba:	4851      	ldr	r0, [pc, #324]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 80017bc:	f7fe fe97 	bl	80004ee <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d010      	beq.n	80017ea <HAL_RCC_OscConfig+0x686>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x686>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	2b06      	cmp	r3, #6
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_OscConfig+0x686>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d004      	beq.n	80017ea <HAL_RCC_OscConfig+0x686>
 80017e0:	f240 2173 	movw	r1, #627	; 0x273
 80017e4:	4846      	ldr	r0, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x79c>)
 80017e6:	f7fe fe82 	bl	80004ee <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a43      	ldr	r2, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80017f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff f82b 	bl	8000850 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f827 	bl	8000850 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0b5      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_RCC_OscConfig+0x7a0>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6a11      	ldr	r1, [r2, #32]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182c:	3a01      	subs	r2, #1
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001836:	0212      	lsls	r2, r2, #8
 8001838:	4311      	orrs	r1, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800183e:	0852      	lsrs	r2, r2, #1
 8001840:	3a01      	subs	r2, #1
 8001842:	0552      	lsls	r2, r2, #21
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800184a:	0852      	lsrs	r2, r2, #1
 800184c:	3a01      	subs	r2, #1
 800184e:	0652      	lsls	r2, r2, #25
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001856:	06d2      	lsls	r2, r2, #27
 8001858:	430a      	orrs	r2, r1
 800185a:	4928      	ldr	r1, [pc, #160]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 800185c:	4313      	orrs	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7fe ffea 	bl	8000850 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7fe ffe6 	bl	8000850 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e074      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x71c>
 800189e:	e06c      	b.n	800197a <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7fe ffc2 	bl	8000850 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7fe ffbe 	bl	8000850 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04c      	b.n	800197c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x798>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x76c>
 80018ee:	e044      	b.n	800197a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e03f      	b.n	800197c <HAL_RCC_OscConfig+0x818>
 80018fc:	40021000 	.word	0x40021000
 8001900:	0800592c 	.word	0x0800592c
 8001904:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_RCC_OscConfig+0x820>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d12c      	bne.n	8001976 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	3b01      	subs	r3, #1
 8001928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d123      	bne.n	8001976 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d11b      	bne.n	8001976 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d113      	bne.n	8001976 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d109      	bne.n	8001976 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e1e2      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x30>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 030f 	bic.w	r3, r3, #15
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x3a>
 80019b8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80019bc:	4869      	ldr	r0, [pc, #420]	; (8001b64 <HAL_RCC_ClockConfig+0x1dc>)
 80019be:	f7fe fd96 	bl	80004ee <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d031      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d02e      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d02b      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d028      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d025      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d022      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d01f      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	d01c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d019      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b0a      	cmp	r3, #10
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2b0b      	cmp	r3, #11
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d00d      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b0d      	cmp	r3, #13
 8001a14:	d00a      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b0e      	cmp	r3, #14
 8001a1a:	d007      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	d004      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xa4>
 8001a22:	f240 310d 	movw	r1, #781	; 0x30d
 8001a26:	484f      	ldr	r0, [pc, #316]	; (8001b64 <HAL_RCC_ClockConfig+0x1dc>)
 8001a28:	f7fe fd61 	bl	80004ee <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b4e      	ldr	r3, [pc, #312]	; (8001b68 <HAL_RCC_ClockConfig+0x1e0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <HAL_RCC_ClockConfig+0x1e0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 020f 	bic.w	r2, r3, #15
 8001a42:	4949      	ldr	r1, [pc, #292]	; (8001b68 <HAL_RCC_ClockConfig+0x1e0>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_ClockConfig+0x1e0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e184      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 808e 	beq.w	8001b86 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d00c      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x104>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x104>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d004      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x104>
 8001a82:	f44f 7149 	mov.w	r1, #804	; 0x324
 8001a86:	4837      	ldr	r0, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1dc>)
 8001a88:	f7fe fd31 	bl	80004ee <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d129      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e160      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aa4:	f000 fa36 	bl	8001f14 <RCC_GetSysClockFreqFromPLLSource>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_RCC_ClockConfig+0x1e8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d93f      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d033      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d12f      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e024      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e132      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e12a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b10:	f000 f93a 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <HAL_RCC_ClockConfig+0x1e8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d909      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1e4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b44:	f7fe fe84 	bl	8000850 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e013      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7fe fe80 	bl	8000850 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d90a      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e101      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
 8001b62:	bf00      	nop
 8001b64:	0800592c 	.word	0x0800592c
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b74:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 020c 	and.w	r2, r3, #12
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d1e2      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d04c      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9e:	4b74      	ldr	r3, [pc, #464]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4a73      	ldr	r2, [pc, #460]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001ba4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ba8:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bb6:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bbe:	4a6c      	ldr	r2, [pc, #432]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001bc0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bc4:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d024      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d020      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b90      	cmp	r3, #144	; 0x90
 8001bdc:	d01c      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2ba0      	cmp	r3, #160	; 0xa0
 8001be4:	d018      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2bb0      	cmp	r3, #176	; 0xb0
 8001bec:	d014      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8001bf4:	d010      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2bd0      	cmp	r3, #208	; 0xd0
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2be0      	cmp	r3, #224	; 0xe0
 8001c04:	d008      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2bf0      	cmp	r3, #240	; 0xf0
 8001c0c:	d004      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x290>
 8001c0e:	f240 317b 	movw	r1, #891	; 0x37b
 8001c12:	4858      	ldr	r0, [pc, #352]	; (8001d74 <HAL_RCC_ClockConfig+0x3ec>)
 8001c14:	f7fe fc6b 	bl	80004ee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b55      	ldr	r3, [pc, #340]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4952      	ldr	r1, [pc, #328]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c32:	4b4f      	ldr	r3, [pc, #316]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_RCC_ClockConfig+0x3f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d21d      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_ClockConfig+0x3f0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 020f 	bic.w	r2, r3, #15
 8001c54:	4948      	ldr	r1, [pc, #288]	; (8001d78 <HAL_RCC_ClockConfig+0x3f0>)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe fdf8 	bl	8000850 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7fe fdf4 	bl	8000850 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e075      	b.n	8001d66 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_ClockConfig+0x3f0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1ed      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d025      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d018      	beq.n	8001cce <HAL_RCC_ClockConfig+0x346>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca4:	d013      	beq.n	8001cce <HAL_RCC_ClockConfig+0x346>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cae:	d00e      	beq.n	8001cce <HAL_RCC_ClockConfig+0x346>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x346>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cc2:	d004      	beq.n	8001cce <HAL_RCC_ClockConfig+0x346>
 8001cc4:	f240 319d 	movw	r1, #925	; 0x39d
 8001cc8:	482a      	ldr	r0, [pc, #168]	; (8001d74 <HAL_RCC_ClockConfig+0x3ec>)
 8001cca:	f7fe fc10 	bl	80004ee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4925      	ldr	r1, [pc, #148]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d026      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d018      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x39e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfc:	d013      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x39e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d06:	d00e      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x39e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x39e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d1a:	d004      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x39e>
 8001d1c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001d20:	4814      	ldr	r0, [pc, #80]	; (8001d74 <HAL_RCC_ClockConfig+0x3ec>)
 8001d22:	f7fe fbe4 	bl	80004ee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d3a:	f000 f825 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x3e8>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490c      	ldr	r1, [pc, #48]	; (8001d7c <HAL_RCC_ClockConfig+0x3f4>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x3f8>)
 8001d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x3fc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbfa 	bl	8000558 <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	0800592c 	.word	0x0800592c
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	080059dc 	.word	0x080059dc
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	e047      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dac:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e03e      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d136      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ddc:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de6:	68d2      	ldr	r2, [r2, #12]
 8001de8:	0a12      	lsrs	r2, r2, #8
 8001dea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
      break;
 8001df4:	e00c      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e00:	68d2      	ldr	r2, [r2, #12]
 8001e02:	0a12      	lsrs	r2, r2, #8
 8001e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0e5b      	lsrs	r3, r3, #25
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	e001      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e30:	693b      	ldr	r3, [r7, #16]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	016e3600 	.word	0x016e3600

08001e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4904      	ldr	r1, [pc, #16]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	080059ec 	.word	0x080059ec

08001e90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <HAL_RCC_GetClockConfig+0x1a>
 8001ea0:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8001ea4:	4818      	ldr	r0, [pc, #96]	; (8001f08 <HAL_RCC_GetClockConfig+0x78>)
 8001ea6:	f7fe fb22 	bl	80004ee <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d104      	bne.n	8001eba <HAL_RCC_GetClockConfig+0x2a>
 8001eb0:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8001eb4:	4814      	ldr	r0, [pc, #80]	; (8001f08 <HAL_RCC_GetClockConfig+0x78>)
 8001eb6:	f7fe fb1a 	bl	80004ee <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_GetClockConfig+0x7c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_RCC_GetClockConfig+0x7c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_GetClockConfig+0x7c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_GetClockConfig+0x7c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_RCC_GetClockConfig+0x80>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 020f 	and.w	r2, r3, #15
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0800592c 	.word	0x0800592c
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40022000 	.word	0x40022000

08001f14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d10c      	bne.n	8001f52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f38:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f42:	68d2      	ldr	r2, [r2, #12]
 8001f44:	0a12      	lsrs	r2, r2, #8
 8001f46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
    break;
 8001f50:	e00c      	b.n	8001f6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	0a12      	lsrs	r2, r2, #8
 8001f60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    break;
 8001f6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0e5b      	lsrs	r3, r3, #25
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	3301      	adds	r3, #1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000
 8001f98:	016e3600 	.word	0x016e3600
 8001f9c:	00f42400 	.word	0x00f42400

08001fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0be      	b.n	8002130 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_TIM_Base_Init+0x198>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d036      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d031      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5c      	ldr	r2, [pc, #368]	; (800213c <HAL_TIM_Base_Init+0x19c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d02c      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_TIM_Base_Init+0x1a0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d027      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_TIM_Base_Init+0x1a4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_TIM_Base_Init+0x1a8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01d      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a56      	ldr	r2, [pc, #344]	; (800214c <HAL_TIM_Base_Init+0x1ac>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d018      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a54      	ldr	r2, [pc, #336]	; (8002150 <HAL_TIM_Base_Init+0x1b0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a53      	ldr	r2, [pc, #332]	; (8002154 <HAL_TIM_Base_Init+0x1b4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00e      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_TIM_Base_Init+0x1b8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_TIM_Base_Init+0x1bc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_TIM_Base_Init+0x8a>
 8002020:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002024:	484e      	ldr	r0, [pc, #312]	; (8002160 <HAL_TIM_Base_Init+0x1c0>)
 8002026:	f7fe fa62 	bl	80004ee <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d014      	beq.n	800205c <HAL_TIM_Base_Init+0xbc>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b10      	cmp	r3, #16
 8002038:	d010      	beq.n	800205c <HAL_TIM_Base_Init+0xbc>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b20      	cmp	r3, #32
 8002040:	d00c      	beq.n	800205c <HAL_TIM_Base_Init+0xbc>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d008      	beq.n	800205c <HAL_TIM_Base_Init+0xbc>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b60      	cmp	r3, #96	; 0x60
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Init+0xbc>
 8002052:	f240 1123 	movw	r1, #291	; 0x123
 8002056:	4842      	ldr	r0, [pc, #264]	; (8002160 <HAL_TIM_Base_Init+0x1c0>)
 8002058:	f7fe fa49 	bl	80004ee <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <HAL_TIM_Base_Init+0xe2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d009      	beq.n	8002082 <HAL_TIM_Base_Init+0xe2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002076:	d004      	beq.n	8002082 <HAL_TIM_Base_Init+0xe2>
 8002078:	f44f 7192 	mov.w	r1, #292	; 0x124
 800207c:	4838      	ldr	r0, [pc, #224]	; (8002160 <HAL_TIM_Base_Init+0x1c0>)
 800207e:	f7fe fa36 	bl	80004ee <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_TIM_Base_Init+0xfc>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d004      	beq.n	800209c <HAL_TIM_Base_Init+0xfc>
 8002092:	f240 1125 	movw	r1, #293	; 0x125
 8002096:	4832      	ldr	r0, [pc, #200]	; (8002160 <HAL_TIM_Base_Init+0x1c0>)
 8002098:	f7fe fa29 	bl	80004ee <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f857 	bl	8002164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f000 fab1 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40012c00 	.word	0x40012c00
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40001000 	.word	0x40001000
 8002148:	40001400 	.word	0x40001400
 800214c:	40013400 	.word	0x40013400
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	40015000 	.word	0x40015000
 8002160:	08005964 	.word	0x08005964

08002164 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4a      	ldr	r2, [pc, #296]	; (80022b0 <HAL_TIM_Base_Start_IT+0x138>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d036      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d031      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_TIM_Base_Start_IT+0x13c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02c      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a45      	ldr	r2, [pc, #276]	; (80022b8 <HAL_TIM_Base_Start_IT+0x140>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a43      	ldr	r2, [pc, #268]	; (80022bc <HAL_TIM_Base_Start_IT+0x144>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <HAL_TIM_Base_Start_IT+0x148>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d01d      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a40      	ldr	r2, [pc, #256]	; (80022c4 <HAL_TIM_Base_Start_IT+0x14c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3f      	ldr	r2, [pc, #252]	; (80022c8 <HAL_TIM_Base_Start_IT+0x150>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <HAL_TIM_Base_Start_IT+0x154>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <HAL_TIM_Base_Start_IT+0x158>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_TIM_Base_Start_IT+0x15c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x80>
 80021ee:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80021f2:	4839      	ldr	r0, [pc, #228]	; (80022d8 <HAL_TIM_Base_Start_IT+0x160>)
 80021f4:	f7fe f97b 	bl	80004ee <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d001      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e04f      	b.n	80022a8 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_TIM_Base_Start_IT+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0xee>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002232:	d018      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0xee>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_TIM_Base_Start_IT+0x13c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0xee>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_TIM_Base_Start_IT+0x140>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0xee>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_TIM_Base_Start_IT+0x14c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0xee>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_TIM_Base_Start_IT+0x150>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0xee>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_TIM_Base_Start_IT+0x15c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d115      	bne.n	8002292 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_TIM_Base_Start_IT+0x164>)
 800226e:	4013      	ands	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d015      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x12c>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d011      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	e008      	b.n	80022a4 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e000      	b.n	80022a6 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40012c00 	.word	0x40012c00
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40001000 	.word	0x40001000
 80022c0:	40001400 	.word	0x40001400
 80022c4:	40013400 	.word	0x40013400
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800
 80022d4:	40015000 	.word	0x40015000
 80022d8:	08005964 	.word	0x08005964
 80022dc:	00010007 	.word	0x00010007

080022e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d122      	bne.n	800233c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b02      	cmp	r3, #2
 8002302:	d11b      	bne.n	800233c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0202 	mvn.w	r2, #2
 800230c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f965 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f957 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f968 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b04      	cmp	r3, #4
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0204 	mvn.w	r2, #4
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f93b 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f92d 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f93e 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b08      	cmp	r3, #8
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0208 	mvn.w	r2, #8
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f911 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f903 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f914 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d122      	bne.n	8002438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d11b      	bne.n	8002438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0210 	mvn.w	r2, #16
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2208      	movs	r2, #8
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8e7 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8d9 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8ea 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0201 	mvn.w	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe f82e 	bl	80004c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f978 	bl	8002780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249e:	d10e      	bne.n	80024be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b80      	cmp	r3, #128	; 0x80
 80024ac:	d107      	bne.n	80024be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f96b 	bl	8002794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d10e      	bne.n	80024ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	d107      	bne.n	80024ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f898 	bl	800261a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d10e      	bne.n	8002516 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b20      	cmp	r3, #32
 8002504:	d107      	bne.n	8002516 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0220 	mvn.w	r2, #32
 800250e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f92b 	bl	800276c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002524:	d10f      	bne.n	8002546 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002534:	d107      	bne.n	8002546 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f931 	bl	80027a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002554:	d10f      	bne.n	8002576 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002564:	d107      	bne.n	8002576 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800256e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f923 	bl	80027bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002584:	d10f      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002594:	d107      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800259e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f915 	bl	80027d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b4:	d10f      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c4:	d107      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80025ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f907 	bl	80027e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a42      	ldr	r2, [pc, #264]	; (800274c <TIM_Base_SetConfig+0x11c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d00f      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3f      	ldr	r2, [pc, #252]	; (8002750 <TIM_Base_SetConfig+0x120>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00b      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3e      	ldr	r2, [pc, #248]	; (8002754 <TIM_Base_SetConfig+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <TIM_Base_SetConfig+0x128>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3c      	ldr	r2, [pc, #240]	; (800275c <TIM_Base_SetConfig+0x12c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d108      	bne.n	8002682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a31      	ldr	r2, [pc, #196]	; (800274c <TIM_Base_SetConfig+0x11c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01f      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d01b      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <TIM_Base_SetConfig+0x120>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d017      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <TIM_Base_SetConfig+0x124>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <TIM_Base_SetConfig+0x128>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00f      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <TIM_Base_SetConfig+0x130>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00b      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <TIM_Base_SetConfig+0x134>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <TIM_Base_SetConfig+0x138>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_Base_SetConfig+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <TIM_Base_SetConfig+0x12c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <TIM_Base_SetConfig+0x11c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <TIM_Base_SetConfig+0x100>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <TIM_Base_SetConfig+0x128>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00f      	beq.n	8002730 <TIM_Base_SetConfig+0x100>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <TIM_Base_SetConfig+0x130>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0x100>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <TIM_Base_SetConfig+0x134>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0x100>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <TIM_Base_SetConfig+0x138>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0x100>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <TIM_Base_SetConfig+0x12c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d103      	bne.n	8002738 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	615a      	str	r2, [r3, #20]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40013400 	.word	0x40013400
 800275c:	40015000 	.word	0x40015000
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400
 8002768:	40014800 	.word	0x40014800

0800276c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	2b84      	cmp	r3, #132	; 0x84
 800280c:	d005      	beq.n	800281a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800280e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	3303      	adds	r3, #3
 8002818:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800282c:	f001 f8f4 	bl	8003a18 <vTaskStartScheduler>
  
  return osOK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}

08002836 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002838:	b089      	sub	sp, #36	; 0x24
 800283a:	af04      	add	r7, sp, #16
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <osThreadCreate+0x54>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01c      	beq.n	800288a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685c      	ldr	r4, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691e      	ldr	r6, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ffc8 	bl	80027f8 <makeFreeRtosPriority>
 8002868:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002872:	9202      	str	r2, [sp, #8]
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	9100      	str	r1, [sp, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4632      	mov	r2, r6
 800287c:	4629      	mov	r1, r5
 800287e:	4620      	mov	r0, r4
 8002880:	f000 fe80 	bl	8003584 <xTaskCreateStatic>
 8002884:	4603      	mov	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e01c      	b.n	80028c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685c      	ldr	r4, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002896:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffaa 	bl	80027f8 <makeFreeRtosPriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	4632      	mov	r2, r6
 80028b2:	4629      	mov	r1, r5
 80028b4:	4620      	mov	r0, r4
 80028b6:	f000 fec2 	bl	800363e <xTaskCreate>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f103 0208 	add.w	r2, r3, #8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295
 80028e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f103 0208 	add.w	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f103 0208 	add.w	r2, r3, #8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d103      	bne.n	8002990 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e00c      	b.n	80029aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3308      	adds	r3, #8
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e002      	b.n	800299e <vListInsert+0x2e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d2f6      	bcs.n	8002998 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6852      	ldr	r2, [r2, #4]
 8002a02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d103      	bne.n	8002a16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericReset+0x2a>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	60bb      	str	r3, [r7, #8]
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a62:	f002 f9c7 	bl	8004df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	441a      	add	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	3b01      	subs	r3, #1
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	441a      	add	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	22ff      	movs	r2, #255	; 0xff
 8002aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d114      	bne.n	8002ae2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01a      	beq.n	8002af6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 fa69 	bl	8003f9c <xTaskRemoveFromEventList>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <xQueueGenericReset+0xcc>)
 8002ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	e009      	b.n	8002af6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fef1 	bl	80028ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3324      	adds	r3, #36	; 0x24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff feec 	bl	80028ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002af6:	f002 f9ad 	bl	8004e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08e      	sub	sp, #56	; 0x38
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <xQueueGenericCreateStatic+0x52>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <xQueueGenericCreateStatic+0x56>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericCreateStatic+0x58>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	623b      	str	r3, [r7, #32]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <xQueueGenericCreateStatic+0x7e>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <xQueueGenericCreateStatic+0x82>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <xQueueGenericCreateStatic+0x84>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	61fb      	str	r3, [r7, #28]
}
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ba6:	2350      	movs	r3, #80	; 0x50
 8002ba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b50      	cmp	r3, #80	; 0x50
 8002bae:	d00a      	beq.n	8002bc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61bb      	str	r3, [r7, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f83f 	bl	8002c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3730      	adds	r7, #48	; 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	613b      	str	r3, [r7, #16]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3350      	adds	r3, #80	; 0x50
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fa01 	bl	8005038 <pvPortMalloc>
 8002c36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d011      	beq.n	8002c62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3350      	adds	r3, #80	; 0x50
 8002c46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f805 	bl	8002c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c62:	69bb      	ldr	r3, [r7, #24]
	}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	69b8      	ldr	r0, [r7, #24]
 8002c9e:	f7ff fecb 	bl	8002a38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f81d 	bl	8002d18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6939      	ldr	r1, [r7, #16]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff7a 	bl	8002bf8 <xQueueGenericCreate>
 8002d04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff ffd3 	bl	8002cb2 <prvInitialiseMutex>

		return xNewQueue;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueGenericSend+0x32>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <xQueueGenericSend+0x40>
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <xQueueGenericSend+0x44>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <xQueueGenericSend+0x46>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <xQueueGenericSend+0x60>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x6e>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0x72>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericSend+0x74>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da6:	f001 fab9 	bl	800431c <xTaskGetSchedulerState>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <xQueueGenericSend+0x9e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xQueueGenericSend+0xa2>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <xQueueGenericSend+0xa4>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61fb      	str	r3, [r7, #28]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd6:	f002 f80d 	bl	8004df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <xQueueGenericSend+0xd4>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d129      	bne.n	8002e40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df2:	f000 fa2e 	bl	8003252 <prvCopyDataToQueue>
 8002df6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 f8c9 	bl	8003f9c <xTaskRemoveFromEventList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <xQueueGenericSend+0x1f8>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	e00a      	b.n	8002e38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e28:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <xQueueGenericSend+0x1f8>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e38:	f002 f80c 	bl	8004e54 <vPortExitCritical>
				return pdPASS;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e063      	b.n	8002f08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e46:	f002 f805 	bl	8004e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e05c      	b.n	8002f08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f901 	bl	8004060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e62:	f001 fff7 	bl	8004e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e66:	f000 fe49 	bl	8003afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6a:	f001 ffc3 	bl	8004df4 <vPortEnterCritical>
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d103      	bne.n	8002e84 <xQueueGenericSend+0x16c>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d103      	bne.n	8002e9a <xQueueGenericSend+0x182>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9a:	f001 ffdb 	bl	8004e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9e:	1d3a      	adds	r2, r7, #4
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f8f0 	bl	800408c <xTaskCheckForTimeOut>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d124      	bne.n	8002efc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb4:	f000 fac5 	bl	8003442 <prvIsQueueFull>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f818 	bl	8003efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ece:	f000 fa50 	bl	8003372 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed2:	f000 fe21 	bl	8003b18 <xTaskResumeAll>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f af7c 	bne.w	8002dd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <xQueueGenericSend+0x1f8>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	e772      	b.n	8002dd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa3e 	bl	8003372 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef6:	f000 fe0f 	bl	8003b18 <xTaskResumeAll>
 8002efa:	e76c      	b.n	8002dd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efe:	f000 fa38 	bl	8003372 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f02:	f000 fe09 	bl	8003b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3738      	adds	r7, #56	; 0x38
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b090      	sub	sp, #64	; 0x40
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <xQueueGenericSendFromISR+0x3c>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <xQueueGenericSendFromISR+0x40>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <xQueueGenericSendFromISR+0x42>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d103      	bne.n	8002f7e <xQueueGenericSendFromISR+0x6a>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <xQueueGenericSendFromISR+0x6e>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <xQueueGenericSendFromISR+0x70>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	623b      	str	r3, [r7, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f9e:	f002 f80b 	bl	8004fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8002fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	61fa      	str	r2, [r7, #28]
 8002fb8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002fba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <xQueueGenericSendFromISR+0xbc>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d12f      	bne.n	8003030 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe6:	f000 f934 	bl	8003252 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d112      	bne.n	800301a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d016      	beq.n	800302a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	3324      	adds	r3, #36	; 0x24
 8003000:	4618      	mov	r0, r3
 8003002:	f000 ffcb 	bl	8003f9c <xTaskRemoveFromEventList>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e007      	b.n	800302a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800301a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800301e:	3301      	adds	r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	b25a      	sxtb	r2, r3
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800302a:	2301      	movs	r3, #1
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800302e:	e001      	b.n	8003034 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003030:	2300      	movs	r3, #0
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f383 8811 	msr	BASEPRI, r3
}
 800303e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003042:	4618      	mov	r0, r3
 8003044:	3740      	adds	r7, #64	; 0x40
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <xQueueReceive+0x30>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	623b      	str	r3, [r7, #32]
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueReceive+0x3e>
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueReceive+0x42>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueReceive+0x44>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueReceive+0x5e>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61fb      	str	r3, [r7, #28]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030aa:	f001 f937 	bl	800431c <xTaskGetSchedulerState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueReceive+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueReceive+0x72>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueReceive+0x74>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueReceive+0x8e>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61bb      	str	r3, [r7, #24]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030da:	f001 fe8b 	bl	8004df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01f      	beq.n	800312a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ee:	f000 f91a 	bl	8003326 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00f      	beq.n	8003122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	3310      	adds	r3, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f000 ff48 	bl	8003f9c <xTaskRemoveFromEventList>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <xQueueReceive+0x1bc>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003122:	f001 fe97 	bl	8004e54 <vPortExitCritical>
				return pdPASS;
 8003126:	2301      	movs	r3, #1
 8003128:	e069      	b.n	80031fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003130:	f001 fe90 	bl	8004e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003134:	2300      	movs	r3, #0
 8003136:	e062      	b.n	80031fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f000 ff8c 	bl	8004060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800314c:	f001 fe82 	bl	8004e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003150:	f000 fcd4 	bl	8003afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003154:	f001 fe4e 	bl	8004df4 <vPortEnterCritical>
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315e:	b25b      	sxtb	r3, r3
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d103      	bne.n	800316e <xQueueReceive+0x122>
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x138>
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003184:	f001 fe66 	bl	8004e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003188:	1d3a      	adds	r2, r7, #4
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 ff7b 	bl	800408c <xTaskCheckForTimeOut>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d123      	bne.n	80031e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319e:	f000 f93a 	bl	8003416 <prvIsQueueEmpty>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	3324      	adds	r3, #36	; 0x24
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fea3 	bl	8003efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b8:	f000 f8db 	bl	8003372 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031bc:	f000 fcac 	bl	8003b18 <xTaskResumeAll>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d189      	bne.n	80030da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <xQueueReceive+0x1bc>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	e780      	b.n	80030da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 f8ca 	bl	8003372 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031de:	f000 fc9b 	bl	8003b18 <xTaskResumeAll>
 80031e2:	e77a      	b.n	80030da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e6:	f000 f8c4 	bl	8003372 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ea:	f000 fc95 	bl	8003b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f0:	f000 f911 	bl	8003416 <prvIsQueueEmpty>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f43f af6f 	beq.w	80030da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <vQueueDelete+0x28>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	60bb      	str	r3, [r7, #8]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f947 	bl	80034c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f001 ffc3 	bl	80051d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d14d      	bne.n	8003314 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f86b 	bl	8004358 <xTaskPriorityDisinherit>
 8003282:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	e043      	b.n	8003314 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d119      	bne.n	80032c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6858      	ldr	r0, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	461a      	mov	r2, r3
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	f002 fa71 	bl	8005784 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	441a      	add	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d32b      	bcc.n	8003314 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	e026      	b.n	8003314 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68d8      	ldr	r0, [r3, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	461a      	mov	r2, r3
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	f002 fa57 	bl	8005784 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	425b      	negs	r3, r3
 80032e0:	441a      	add	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d207      	bcs.n	8003302 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	425b      	negs	r3, r3
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d105      	bne.n	8003314 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3b01      	subs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800331c:	697b      	ldr	r3, [r7, #20]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d018      	beq.n	800336a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	d303      	bcc.n	800335a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	461a      	mov	r2, r3
 8003364:	6838      	ldr	r0, [r7, #0]
 8003366:	f002 fa0d 	bl	8005784 <memcpy>
	}
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800337a:	f001 fd3b 	bl	8004df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003384:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003386:	e011      	b.n	80033ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3324      	adds	r3, #36	; 0x24
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fe01 	bl	8003f9c <xTaskRemoveFromEventList>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033a0:	f000 fed6 	bl	8004150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dce9      	bgt.n	8003388 <prvUnlockQueue+0x16>
 80033b4:	e000      	b.n	80033b8 <prvUnlockQueue+0x46>
					break;
 80033b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033c0:	f001 fd48 	bl	8004e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033c4:	f001 fd16 	bl	8004df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033d0:	e011      	b.n	80033f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3310      	adds	r3, #16
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fddc 	bl	8003f9c <xTaskRemoveFromEventList>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033ea:	f000 feb1 	bl	8004150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033ee:	7bbb      	ldrb	r3, [r7, #14]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	dce9      	bgt.n	80033d2 <prvUnlockQueue+0x60>
 80033fe:	e000      	b.n	8003402 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003400:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800340a:	f001 fd23 	bl	8004e54 <vPortExitCritical>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800341e:	f001 fce9 	bl	8004df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800342a:	2301      	movs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e001      	b.n	8003434 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003434:	f001 fd0e 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800344a:	f001 fcd3 	bl	8004df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	429a      	cmp	r2, r3
 8003458:	d102      	bne.n	8003460 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800345a:	2301      	movs	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e001      	b.n	8003464 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003464:	f001 fcf6 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e014      	b.n	80034ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003484:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <vQueueAddToRegistry+0x50>)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003490:	490c      	ldr	r1, [pc, #48]	; (80034c4 <vQueueAddToRegistry+0x50>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <vQueueAddToRegistry+0x50>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034a6:	e006      	b.n	80034b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b07      	cmp	r3, #7
 80034b2:	d9e7      	bls.n	8003484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000834 	.word	0x20000834

080034c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e016      	b.n	8003504 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80034d6:	4a10      	ldr	r2, [pc, #64]	; (8003518 <vQueueUnregisterQueue+0x50>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d10b      	bne.n	80034fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <vQueueUnregisterQueue+0x50>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2100      	movs	r1, #0
 80034ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80034f0:	4a09      	ldr	r2, [pc, #36]	; (8003518 <vQueueUnregisterQueue+0x50>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	2200      	movs	r2, #0
 80034fa:	605a      	str	r2, [r3, #4]
				break;
 80034fc:	e006      	b.n	800350c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3301      	adds	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b07      	cmp	r3, #7
 8003508:	d9e5      	bls.n	80034d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	20000834 	.word	0x20000834

0800351c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800352c:	f001 fc62 	bl	8004df4 <vPortEnterCritical>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003536:	b25b      	sxtb	r3, r3
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d103      	bne.n	8003546 <vQueueWaitForMessageRestricted+0x2a>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800354c:	b25b      	sxtb	r3, r3
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d103      	bne.n	800355c <vQueueWaitForMessageRestricted+0x40>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355c:	f001 fc7a 	bl	8004e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fce7 	bl	8003f44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff fefb 	bl	8003372 <prvUnlockQueue>
	}
 800357c:	bf00      	nop
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	; 0x38
 8003588:	af04      	add	r7, sp, #16
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	623b      	str	r3, [r7, #32]
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xTaskCreateStatic+0x46>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	61fb      	str	r3, [r7, #28]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035ca:	23ac      	movs	r3, #172	; 0xac
 80035cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2bac      	cmp	r3, #172	; 0xac
 80035d2:	d00a      	beq.n	80035ea <xTaskCreateStatic+0x66>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	61bb      	str	r3, [r7, #24]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01e      	beq.n	8003630 <xTaskCreateStatic+0xac>
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003600:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	2202      	movs	r2, #2
 8003606:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800360a:	2300      	movs	r3, #0
 800360c:	9303      	str	r3, [sp, #12]
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	9302      	str	r3, [sp, #8]
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f850 	bl	80036c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800362a:	f000 f8f7 	bl	800381c <prvAddNewTaskToReadyList>
 800362e:	e001      	b.n	8003634 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003634:	697b      	ldr	r3, [r7, #20]
	}
 8003636:	4618      	mov	r0, r3
 8003638:	3728      	adds	r7, #40	; 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08c      	sub	sp, #48	; 0x30
 8003642:	af04      	add	r7, sp, #16
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fcf0 	bl	8005038 <pvPortMalloc>
 8003658:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003660:	20ac      	movs	r0, #172	; 0xac
 8003662:	f001 fce9 	bl	8005038 <pvPortMalloc>
 8003666:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
 8003674:	e005      	b.n	8003682 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f001 fdaa 	bl	80051d0 <vPortFree>
 800367c:	e001      	b.n	8003682 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	2300      	movs	r3, #0
 8003694:	9303      	str	r3, [sp, #12]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f80e 	bl	80036c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036ac:	69f8      	ldr	r0, [r7, #28]
 80036ae:	f000 f8b5 	bl	800381c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e002      	b.n	80036be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036be:	69bb      	ldr	r3, [r7, #24]
	}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	21a5      	movs	r1, #165	; 0xa5
 80036e2:	f001 ffcd 	bl	8005680 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036f0:	3b01      	subs	r3, #1
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f023 0307 	bic.w	r3, r3, #7
 80036fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <prvInitialiseNewTask+0x58>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	617b      	str	r3, [r7, #20]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01f      	beq.n	8003766 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e012      	b.n	8003752 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	7819      	ldrb	r1, [r3, #0]
 8003734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	3334      	adds	r3, #52	; 0x34
 800373c:	460a      	mov	r2, r1
 800373e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d006      	beq.n	800375a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b0f      	cmp	r3, #15
 8003756:	d9e9      	bls.n	800372c <prvInitialiseNewTask+0x64>
 8003758:	e000      	b.n	800375c <prvInitialiseNewTask+0x94>
			{
				break;
 800375a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003764:	e003      	b.n	800376e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	2b11      	cmp	r3, #17
 8003772:	d901      	bls.n	8003778 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003774:	2311      	movs	r3, #17
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003782:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	2200      	movs	r2, #0
 8003788:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	3304      	adds	r3, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f8bd 	bl	800290e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	3318      	adds	r3, #24
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f8b8 	bl	800290e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f1c3 0212 	rsb	r2, r3, #18
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	3358      	adds	r3, #88	; 0x58
 80037ce:	224c      	movs	r2, #76	; 0x4c
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 ff54 	bl	8005680 <memset>
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <prvInitialiseNewTask+0x148>)
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <prvInitialiseNewTask+0x14c>)
 80037e2:	661a      	str	r2, [r3, #96]	; 0x60
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <prvInitialiseNewTask+0x150>)
 80037e8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	68f9      	ldr	r1, [r7, #12]
 80037ee:	69b8      	ldr	r0, [r7, #24]
 80037f0:	f001 f9d0 	bl	8004b94 <pxPortInitialiseStack>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003806:	bf00      	nop
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20009278 	.word	0x20009278
 8003814:	200092e0 	.word	0x200092e0
 8003818:	20009348 	.word	0x20009348

0800381c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003824:	f001 fae6 	bl	8004df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003828:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <prvAddNewTaskToReadyList+0xc0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <prvAddNewTaskToReadyList+0xc0>)
 8003830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800383a:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003840:	4b26      	ldr	r3, [pc, #152]	; (80038dc <prvAddNewTaskToReadyList+0xc0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d110      	bne.n	800386a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003848:	f000 fca6 	bl	8004198 <prvInitialiseTaskLists>
 800384c:	e00d      	b.n	800386a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d802      	bhi.n	800386a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <prvAddNewTaskToReadyList+0xcc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <prvAddNewTaskToReadyList+0xcc>)
 8003872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <prvAddNewTaskToReadyList+0xcc>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <prvAddNewTaskToReadyList+0xd0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	4a18      	ldr	r2, [pc, #96]	; (80038ec <prvAddNewTaskToReadyList+0xd0>)
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <prvAddNewTaskToReadyList+0xd4>)
 800389c:	441a      	add	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7ff f83f 	bl	8002928 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038aa:	f001 fad3 	bl	8004e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d207      	bcs.n	80038d4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <prvAddNewTaskToReadyList+0xd8>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000a50 	.word	0x20000a50
 80038e0:	20000874 	.word	0x20000874
 80038e4:	20000a5c 	.word	0x20000a5c
 80038e8:	20000a6c 	.word	0x20000a6c
 80038ec:	20000a58 	.word	0x20000a58
 80038f0:	20000878 	.word	0x20000878
 80038f4:	e000ed04 	.word	0xe000ed04

080038f8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003900:	f001 fa78 	bl	8004df4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <vTaskDelete+0x18>
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <vTaskDelete+0xf8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e000      	b.n	8003912 <vTaskDelete+0x1a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3304      	adds	r3, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f862 	bl	80029e2 <uxListRemove>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d115      	bne.n	8003950 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	4932      	ldr	r1, [pc, #200]	; (80039f4 <vTaskDelete+0xfc>)
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <vTaskDelete+0x58>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	2201      	movs	r2, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43da      	mvns	r2, r3
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <vTaskDelete+0x100>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4013      	ands	r3, r2
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <vTaskDelete+0x100>)
 800394e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3318      	adds	r3, #24
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f840 	bl	80029e2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <vTaskDelete+0x104>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	4a24      	ldr	r2, [pc, #144]	; (80039fc <vTaskDelete+0x104>)
 800396a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800396c:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <vTaskDelete+0xf8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	429a      	cmp	r2, r3
 8003974:	d10b      	bne.n	800398e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4820      	ldr	r0, [pc, #128]	; (8003a00 <vTaskDelete+0x108>)
 800397e:	f7fe ffd3 	bl	8002928 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <vTaskDelete+0x10c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <vTaskDelete+0x10c>)
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e009      	b.n	80039a2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <vTaskDelete+0x110>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <vTaskDelete+0x110>)
 8003996:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fc6b 	bl	8004274 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800399e:	f000 fc9d 	bl	80042dc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80039a2:	f001 fa57 	bl	8004e54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <vTaskDelete+0x114>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01b      	beq.n	80039e6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <vTaskDelete+0xf8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d116      	bne.n	80039e6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <vTaskDelete+0x118>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <vTaskDelete+0xde>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60bb      	str	r3, [r7, #8]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <vTaskDelete+0x11c>)
 80039d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000874 	.word	0x20000874
 80039f4:	20000878 	.word	0x20000878
 80039f8:	20000a58 	.word	0x20000a58
 80039fc:	20000a6c 	.word	0x20000a6c
 8003a00:	20000a24 	.word	0x20000a24
 8003a04:	20000a38 	.word	0x20000a38
 8003a08:	20000a50 	.word	0x20000a50
 8003a0c:	20000a5c 	.word	0x20000a5c
 8003a10:	20000a78 	.word	0x20000a78
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a26:	463a      	mov	r2, r7
 8003a28:	1d39      	adds	r1, r7, #4
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fc fc10 	bl	8000254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	9202      	str	r2, [sp, #8]
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	460a      	mov	r2, r1
 8003a46:	4925      	ldr	r1, [pc, #148]	; (8003adc <vTaskStartScheduler+0xc4>)
 8003a48:	4825      	ldr	r0, [pc, #148]	; (8003ae0 <vTaskStartScheduler+0xc8>)
 8003a4a:	f7ff fd9b 	bl	8003584 <xTaskCreateStatic>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a24      	ldr	r2, [pc, #144]	; (8003ae4 <vTaskStartScheduler+0xcc>)
 8003a52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a54:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <vTaskStartScheduler+0xcc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e001      	b.n	8003a66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a6c:	f000 fd60 	bl	8004530 <xTimerCreateTimerTask>
 8003a70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d11d      	bne.n	8003ab4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	613b      	str	r3, [r7, #16]
}
 8003a8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <vTaskStartScheduler+0xd0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3358      	adds	r3, #88	; 0x58
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <vTaskStartScheduler+0xd4>)
 8003a94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <vTaskStartScheduler+0xd8>)
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <vTaskStartScheduler+0xdc>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <vTaskStartScheduler+0xe0>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003aaa:	f7fc fbb9 	bl	8000220 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aae:	f001 f8ff 	bl	8004cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ab2:	e00e      	b.n	8003ad2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d10a      	bne.n	8003ad2 <vTaskStartScheduler+0xba>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	60fb      	str	r3, [r7, #12]
}
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <vTaskStartScheduler+0xb8>
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	0800599c 	.word	0x0800599c
 8003ae0:	08004169 	.word	0x08004169
 8003ae4:	20000a74 	.word	0x20000a74
 8003ae8:	20000874 	.word	0x20000874
 8003aec:	2000005c 	.word	0x2000005c
 8003af0:	20000a70 	.word	0x20000a70
 8003af4:	20000a5c 	.word	0x20000a5c
 8003af8:	20000a54 	.word	0x20000a54

08003afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <vTaskSuspendAll+0x18>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a03      	ldr	r2, [pc, #12]	; (8003b14 <vTaskSuspendAll+0x18>)
 8003b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	20000a78 	.word	0x20000a78

08003b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	603b      	str	r3, [r7, #0]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b44:	f001 f956 	bl	8004df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b48:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b52:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d161      	bne.n	8003c1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b5a:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <xTaskResumeAll+0x118>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d05d      	beq.n	8003c1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b62:	e02e      	b.n	8003bc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <xTaskResumeAll+0x11c>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe ff36 	bl	80029e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe ff31 	bl	80029e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	2201      	movs	r2, #1
 8003b86:	409a      	lsls	r2, r3
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <xTaskResumeAll+0x120>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <xTaskResumeAll+0x120>)
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <xTaskResumeAll+0x124>)
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f7fe febd 	bl	8002928 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <xTaskResumeAll+0x128>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <xTaskResumeAll+0x12c>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <xTaskResumeAll+0x11c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1cc      	bne.n	8003b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bd0:	f000 fb84 	bl	80042dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <xTaskResumeAll+0x130>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003be0:	f000 f846 	bl	8003c70 <xTaskIncrementTick>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <xTaskResumeAll+0x12c>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f1      	bne.n	8003be0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <xTaskResumeAll+0x130>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <xTaskResumeAll+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <xTaskResumeAll+0x134>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c1e:	f001 f919 	bl	8004e54 <vPortExitCritical>

	return xAlreadyYielded;
 8003c22:	68bb      	ldr	r3, [r7, #8]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000a78 	.word	0x20000a78
 8003c30:	20000a50 	.word	0x20000a50
 8003c34:	20000a10 	.word	0x20000a10
 8003c38:	20000a58 	.word	0x20000a58
 8003c3c:	20000878 	.word	0x20000878
 8003c40:	20000874 	.word	0x20000874
 8003c44:	20000a64 	.word	0x20000a64
 8003c48:	20000a60 	.word	0x20000a60
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <xTaskGetTickCount+0x1c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000a54 	.word	0x20000a54

08003c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <xTaskIncrementTick+0x144>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 808e 	bne.w	8003da0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <xTaskIncrementTick+0x148>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	; (8003db8 <xTaskIncrementTick+0x148>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	603b      	str	r3, [r7, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xTaskIncrementTick+0x46>
 8003cb8:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <xTaskIncrementTick+0x150>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4a3e      	ldr	r2, [pc, #248]	; (8003dc0 <xTaskIncrementTick+0x150>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <xTaskIncrementTick+0x154>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <xTaskIncrementTick+0x154>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	f000 fb01 	bl	80042dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d348      	bcc.n	8003d76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	601a      	str	r2, [r3, #0]
					break;
 8003cf6:	e03e      	b.n	8003d76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf8:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d203      	bcs.n	8003d18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d16:	e02e      	b.n	8003d76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fe60 	bl	80029e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fe57 	bl	80029e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <xTaskIncrementTick+0x15c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <xTaskIncrementTick+0x15c>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <xTaskIncrementTick+0x160>)
 8003d54:	441a      	add	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7fe fde3 	bl	8002928 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <xTaskIncrementTick+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3b9      	bcc.n	8003ce4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d74:	e7b6      	b.n	8003ce4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <xTaskIncrementTick+0x164>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	4914      	ldr	r1, [pc, #80]	; (8003dd0 <xTaskIncrementTick+0x160>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d901      	bls.n	8003d92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <xTaskIncrementTick+0x168>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e004      	b.n	8003daa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <xTaskIncrementTick+0x16c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <xTaskIncrementTick+0x16c>)
 8003da8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003daa:	697b      	ldr	r3, [r7, #20]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000a78 	.word	0x20000a78
 8003db8:	20000a54 	.word	0x20000a54
 8003dbc:	20000a08 	.word	0x20000a08
 8003dc0:	20000a0c 	.word	0x20000a0c
 8003dc4:	20000a68 	.word	0x20000a68
 8003dc8:	20000a70 	.word	0x20000a70
 8003dcc:	20000a58 	.word	0x20000a58
 8003dd0:	20000878 	.word	0x20000878
 8003dd4:	20000874 	.word	0x20000874
 8003dd8:	20000a64 	.word	0x20000a64
 8003ddc:	20000a60 	.word	0x20000a60

08003de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <vTaskSwitchContext+0xfc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <vTaskSwitchContext+0x100>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003df4:	e06e      	b.n	8003ed4 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <vTaskSwitchContext+0x100>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003dfc:	f7fc fa17 	bl	800022e <getRunTimeCounterValue>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <vTaskSwitchContext+0x104>)
 8003e04:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <vTaskSwitchContext+0x104>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <vTaskSwitchContext+0x108>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d909      	bls.n	8003e26 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e18:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <vTaskSwitchContext+0x104>)
 8003e1a:	6810      	ldr	r0, [r2, #0]
 8003e1c:	4a32      	ldr	r2, [pc, #200]	; (8003ee8 <vTaskSwitchContext+0x108>)
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	1a82      	subs	r2, r0, r2
 8003e22:	440a      	add	r2, r1
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003e26:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <vTaskSwitchContext+0x104>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <vTaskSwitchContext+0x108>)
 8003e2c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d808      	bhi.n	8003e50 <vTaskSwitchContext+0x70>
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3334      	adds	r3, #52	; 0x34
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f7fc f9f7 	bl	800023e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <vTaskSwitchContext+0x110>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	f1c3 031f 	rsb	r3, r3, #31
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	4923      	ldr	r1, [pc, #140]	; (8003ef4 <vTaskSwitchContext+0x114>)
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <vTaskSwitchContext+0xb0>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	607b      	str	r3, [r7, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <vTaskSwitchContext+0xae>
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <vTaskSwitchContext+0x114>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d104      	bne.n	8003ec0 <vTaskSwitchContext+0xe0>
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003ec8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <vTaskSwitchContext+0x10c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3358      	adds	r3, #88	; 0x58
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <vTaskSwitchContext+0x118>)
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000a78 	.word	0x20000a78
 8003ee0:	20000a64 	.word	0x20000a64
 8003ee4:	20000a80 	.word	0x20000a80
 8003ee8:	20000a7c 	.word	0x20000a7c
 8003eec:	20000874 	.word	0x20000874
 8003ef0:	20000a58 	.word	0x20000a58
 8003ef4:	20000878 	.word	0x20000878
 8003ef8:	2000005c 	.word	0x2000005c

08003efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	60fb      	str	r3, [r7, #12]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <vTaskPlaceOnEventList+0x44>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe fd20 	bl	8002970 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f30:	2101      	movs	r1, #1
 8003f32:	6838      	ldr	r0, [r7, #0]
 8003f34:	f000 fa96 	bl	8004464 <prvAddCurrentTaskToDelayedList>
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000874 	.word	0x20000874

08003f44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	617b      	str	r3, [r7, #20]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3318      	adds	r3, #24
 8003f72:	4619      	mov	r1, r3
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7fe fcd7 	bl	8002928 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295
 8003f84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68b8      	ldr	r0, [r7, #8]
 8003f8a:	f000 fa6b 	bl	8004464 <prvAddCurrentTaskToDelayedList>
	}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000874 	.word	0x20000874

08003f9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60fb      	str	r3, [r7, #12]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fd08 	bl	80029e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <xTaskRemoveFromEventList+0xac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11c      	bne.n	8004014 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fcff 	bl	80029e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <xTaskRemoveFromEventList+0xb0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	4a16      	ldr	r2, [pc, #88]	; (800404c <xTaskRemoveFromEventList+0xb0>)
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <xTaskRemoveFromEventList+0xb4>)
 8004004:	441a      	add	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7fe fc8b 	bl	8002928 <vListInsertEnd>
 8004012:	e005      	b.n	8004020 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	3318      	adds	r3, #24
 8004018:	4619      	mov	r1, r3
 800401a:	480e      	ldr	r0, [pc, #56]	; (8004054 <xTaskRemoveFromEventList+0xb8>)
 800401c:	f7fe fc84 	bl	8002928 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <xTaskRemoveFromEventList+0xbc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	429a      	cmp	r2, r3
 800402c:	d905      	bls.n	800403a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800402e:	2301      	movs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <xTaskRemoveFromEventList+0xc0>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e001      	b.n	800403e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800403e:	697b      	ldr	r3, [r7, #20]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000a78 	.word	0x20000a78
 800404c:	20000a58 	.word	0x20000a58
 8004050:	20000878 	.word	0x20000878
 8004054:	20000a10 	.word	0x20000a10
 8004058:	20000874 	.word	0x20000874
 800405c:	20000a64 	.word	0x20000a64

08004060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <vTaskInternalSetTimeOutState+0x24>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <vTaskInternalSetTimeOutState+0x28>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000a68 	.word	0x20000a68
 8004088:	20000a54 	.word	0x20000a54

0800408c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	613b      	str	r3, [r7, #16]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040ce:	f000 fe91 	bl	8004df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <xTaskCheckForTimeOut+0xbc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d102      	bne.n	80040f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e023      	b.n	800413a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <xTaskCheckForTimeOut+0xc0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d007      	beq.n	800410e <xTaskCheckForTimeOut+0x82>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	d302      	bcc.n	800410e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e015      	b.n	800413a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	429a      	cmp	r2, r3
 8004116:	d20b      	bcs.n	8004130 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff9b 	bl	8004060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e004      	b.n	800413a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800413a:	f000 fe8b 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 800413e:	69fb      	ldr	r3, [r7, #28]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000a54 	.word	0x20000a54
 800414c:	20000a68 	.word	0x20000a68

08004150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <vTaskMissedYield+0x14>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20000a64 	.word	0x20000a64

08004168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004170:	f000 f852 	bl	8004218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <prvIdleTask+0x28>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d9f9      	bls.n	8004170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <prvIdleTask+0x2c>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800418c:	e7f0      	b.n	8004170 <prvIdleTask+0x8>
 800418e:	bf00      	nop
 8004190:	20000878 	.word	0x20000878
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e00c      	b.n	80041be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <prvInitialiseTaskLists+0x60>)
 80041b0:	4413      	add	r3, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fb8b 	bl	80028ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3301      	adds	r3, #1
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b11      	cmp	r3, #17
 80041c2:	d9ef      	bls.n	80041a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041c4:	480d      	ldr	r0, [pc, #52]	; (80041fc <prvInitialiseTaskLists+0x64>)
 80041c6:	f7fe fb82 	bl	80028ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041ca:	480d      	ldr	r0, [pc, #52]	; (8004200 <prvInitialiseTaskLists+0x68>)
 80041cc:	f7fe fb7f 	bl	80028ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041d0:	480c      	ldr	r0, [pc, #48]	; (8004204 <prvInitialiseTaskLists+0x6c>)
 80041d2:	f7fe fb7c 	bl	80028ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041d6:	480c      	ldr	r0, [pc, #48]	; (8004208 <prvInitialiseTaskLists+0x70>)
 80041d8:	f7fe fb79 	bl	80028ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <prvInitialiseTaskLists+0x74>)
 80041de:	f7fe fb76 	bl	80028ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <prvInitialiseTaskLists+0x78>)
 80041e4:	4a05      	ldr	r2, [pc, #20]	; (80041fc <prvInitialiseTaskLists+0x64>)
 80041e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <prvInitialiseTaskLists+0x7c>)
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <prvInitialiseTaskLists+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000878 	.word	0x20000878
 80041fc:	200009e0 	.word	0x200009e0
 8004200:	200009f4 	.word	0x200009f4
 8004204:	20000a10 	.word	0x20000a10
 8004208:	20000a24 	.word	0x20000a24
 800420c:	20000a3c 	.word	0x20000a3c
 8004210:	20000a08 	.word	0x20000a08
 8004214:	20000a0c 	.word	0x20000a0c

08004218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800421e:	e019      	b.n	8004254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004220:	f000 fde8 	bl	8004df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <prvCheckTasksWaitingTermination+0x50>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fbd6 	bl	80029e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <prvCheckTasksWaitingTermination+0x54>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a0b      	ldr	r2, [pc, #44]	; (800426c <prvCheckTasksWaitingTermination+0x54>)
 800423e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <prvCheckTasksWaitingTermination+0x58>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3b01      	subs	r3, #1
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <prvCheckTasksWaitingTermination+0x58>)
 8004248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800424a:	f000 fe03 	bl	8004e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f810 	bl	8004274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <prvCheckTasksWaitingTermination+0x58>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e1      	bne.n	8004220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000a24 	.word	0x20000a24
 800426c:	20000a50 	.word	0x20000a50
 8004270:	20000a38 	.word	0x20000a38

08004274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3358      	adds	r3, #88	; 0x58
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fa05 	bl	8005690 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	4618      	mov	r0, r3
 8004296:	f000 ff9b 	bl	80051d0 <vPortFree>
				vPortFree( pxTCB );
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 ff98 	bl	80051d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042a0:	e018      	b.n	80042d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d103      	bne.n	80042b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 ff8f 	bl	80051d0 <vPortFree>
	}
 80042b2:	e00f      	b.n	80042d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d00a      	beq.n	80042d4 <prvDeleteTCB+0x60>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <prvDeleteTCB+0x5e>
	}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <prvResetNextTaskUnblockTime+0x38>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <prvResetNextTaskUnblockTime+0x3c>)
 80042ee:	f04f 32ff 	mov.w	r2, #4294967295
 80042f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042f4:	e008      	b.n	8004308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <prvResetNextTaskUnblockTime+0x38>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <prvResetNextTaskUnblockTime+0x3c>)
 8004306:	6013      	str	r3, [r2, #0]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000a08 	.word	0x20000a08
 8004318:	20000a70 	.word	0x20000a70

0800431c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <xTaskGetSchedulerState+0x34>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800432a:	2301      	movs	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	e008      	b.n	8004342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <xTaskGetSchedulerState+0x38>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004338:	2302      	movs	r3, #2
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	e001      	b.n	8004342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004342:	687b      	ldr	r3, [r7, #4]
	}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	20000a5c 	.word	0x20000a5c
 8004354:	20000a78 	.word	0x20000a78

08004358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d06e      	beq.n	800444c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800436e:	4b3a      	ldr	r3, [pc, #232]	; (8004458 <xTaskPriorityDisinherit+0x100>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	429a      	cmp	r2, r3
 8004376:	d00a      	beq.n	800438e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	60fb      	str	r3, [r7, #12]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60bb      	str	r3, [r7, #8]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	1e5a      	subs	r2, r3, #1
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	429a      	cmp	r2, r3
 80043c0:	d044      	beq.n	800444c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d140      	bne.n	800444c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fb07 	bl	80029e2 <uxListRemove>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d115      	bne.n	8004406 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043de:	491f      	ldr	r1, [pc, #124]	; (800445c <xTaskPriorityDisinherit+0x104>)
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xTaskPriorityDisinherit+0xae>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	2201      	movs	r2, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <xTaskPriorityDisinherit+0x108>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4013      	ands	r3, r2
 8004402:	4a17      	ldr	r2, [pc, #92]	; (8004460 <xTaskPriorityDisinherit+0x108>)
 8004404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f1c3 0212 	rsb	r2, r3, #18
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	2201      	movs	r2, #1
 8004420:	409a      	lsls	r2, r3
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <xTaskPriorityDisinherit+0x108>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <xTaskPriorityDisinherit+0x108>)
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4a08      	ldr	r2, [pc, #32]	; (800445c <xTaskPriorityDisinherit+0x104>)
 800443a:	441a      	add	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7fe fa70 	bl	8002928 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004448:	2301      	movs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800444c:	697b      	ldr	r3, [r7, #20]
	}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000874 	.word	0x20000874
 800445c:	20000878 	.word	0x20000878
 8004460:	20000a58 	.word	0x20000a58

08004464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800446e:	4b29      	ldr	r3, [pc, #164]	; (8004514 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004474:	4b28      	ldr	r3, [pc, #160]	; (8004518 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3304      	adds	r3, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fab1 	bl	80029e2 <uxListRemove>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	2201      	movs	r2, #1
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43da      	mvns	r2, r3
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4013      	ands	r3, r2
 800449a:	4a20      	ldr	r2, [pc, #128]	; (800451c <prvAddCurrentTaskToDelayedList+0xb8>)
 800449c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d10a      	bne.n	80044bc <prvAddCurrentTaskToDelayedList+0x58>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	481a      	ldr	r0, [pc, #104]	; (8004520 <prvAddCurrentTaskToDelayedList+0xbc>)
 80044b6:	f7fe fa37 	bl	8002928 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044ba:	e026      	b.n	800450a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d209      	bcs.n	80044e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <prvAddCurrentTaskToDelayedList+0xc0>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe fa45 	bl	8002970 <vListInsert>
}
 80044e6:	e010      	b.n	800450a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <prvAddCurrentTaskToDelayedList+0xc4>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fe fa3b 	bl	8002970 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d202      	bcs.n	800450a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004504:	4a09      	ldr	r2, [pc, #36]	; (800452c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000a54 	.word	0x20000a54
 8004518:	20000874 	.word	0x20000874
 800451c:	20000a58 	.word	0x20000a58
 8004520:	20000a3c 	.word	0x20000a3c
 8004524:	20000a0c 	.word	0x20000a0c
 8004528:	20000a08 	.word	0x20000a08
 800452c:	20000a70 	.word	0x20000a70

08004530 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800453a:	f000 faeb 	bl	8004b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <xTimerCreateTimerTask+0x80>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d021      	beq.n	800458a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	f107 0108 	add.w	r1, r7, #8
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	4618      	mov	r0, r3
 800455a:	f7fb fe95 	bl	8000288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	9202      	str	r2, [sp, #8]
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	2302      	movs	r3, #2
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	460a      	mov	r2, r1
 8004570:	4910      	ldr	r1, [pc, #64]	; (80045b4 <xTimerCreateTimerTask+0x84>)
 8004572:	4811      	ldr	r0, [pc, #68]	; (80045b8 <xTimerCreateTimerTask+0x88>)
 8004574:	f7ff f806 	bl	8003584 <xTaskCreateStatic>
 8004578:	4603      	mov	r3, r0
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <xTimerCreateTimerTask+0x8c>)
 800457c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <xTimerCreateTimerTask+0x8c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004586:	2301      	movs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	613b      	str	r3, [r7, #16]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045a6:	697b      	ldr	r3, [r7, #20]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000ab4 	.word	0x20000ab4
 80045b4:	080059cc 	.word	0x080059cc
 80045b8:	080046f5 	.word	0x080046f5
 80045bc:	20000ab8 	.word	0x20000ab8

080045c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045ee:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <xTimerGenericCommand+0x98>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02a      	beq.n	800464c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b05      	cmp	r3, #5
 8004606:	dc18      	bgt.n	800463a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004608:	f7ff fe88 	bl	800431c <xTaskGetSchedulerState>
 800460c:	4603      	mov	r3, r0
 800460e:	2b02      	cmp	r3, #2
 8004610:	d109      	bne.n	8004626 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <xTimerGenericCommand+0x98>)
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	f107 0114 	add.w	r1, r7, #20
 800461a:	2300      	movs	r3, #0
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	f7fe fb7b 	bl	8002d18 <xQueueGenericSend>
 8004622:	6278      	str	r0, [r7, #36]	; 0x24
 8004624:	e012      	b.n	800464c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <xTimerGenericCommand+0x98>)
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	f107 0114 	add.w	r1, r7, #20
 800462e:	2300      	movs	r3, #0
 8004630:	2200      	movs	r2, #0
 8004632:	f7fe fb71 	bl	8002d18 <xQueueGenericSend>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24
 8004638:	e008      	b.n	800464c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <xTimerGenericCommand+0x98>)
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	f107 0114 	add.w	r1, r7, #20
 8004642:	2300      	movs	r3, #0
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f7fe fc65 	bl	8002f14 <xQueueGenericSendFromISR>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000ab4 	.word	0x20000ab4

0800465c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <prvProcessExpiredTimer+0x94>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe f9b4 	bl	80029e2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d022      	beq.n	80046ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	18d1      	adds	r1, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6978      	ldr	r0, [r7, #20]
 8004696:	f000 f8d1 	bl	800483c <prvInsertTimerInActiveList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01f      	beq.n	80046e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff88 	bl	80045c0 <xTimerGenericCommand>
 80046b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d113      	bne.n	80046e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	4798      	blx	r3
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000aac 	.word	0x20000aac

080046f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f857 	bl	80047b4 <prvGetNextExpireTime>
 8004706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4619      	mov	r1, r3
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f803 	bl	8004718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004712:	f000 f8d5 	bl	80048c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004716:	e7f1      	b.n	80046fc <prvTimerTask+0x8>

08004718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004722:	f7ff f9eb 	bl	8003afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f866 	bl	80047fc <prvSampleTimeNow>
 8004730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d130      	bne.n	800479a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	429a      	cmp	r2, r3
 8004744:	d806      	bhi.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004746:	f7ff f9e7 	bl	8003b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff85 	bl	800465c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004752:	e024      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <prvProcessTimerOrBlockTask+0x90>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <prvProcessTimerOrBlockTask+0x50>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <prvProcessTimerOrBlockTask+0x52>
 8004768:	2300      	movs	r3, #0
 800476a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <prvProcessTimerOrBlockTask+0x94>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	f7fe fecf 	bl	800351c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800477e:	f7ff f9cb 	bl	8003b18 <xTaskResumeAll>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <prvProcessTimerOrBlockTask+0x98>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
}
 8004798:	e001      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800479a:	f7ff f9bd 	bl	8003b18 <xTaskResumeAll>
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000ab0 	.word	0x20000ab0
 80047ac:	20000ab4 	.word	0x20000ab4
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <prvGetNextExpireTime+0x16>
 80047c6:	2201      	movs	r2, #1
 80047c8:	e000      	b.n	80047cc <prvGetNextExpireTime+0x18>
 80047ca:	2200      	movs	r2, #0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e001      	b.n	80047e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000aac 	.word	0x20000aac

080047fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004804:	f7ff fa24 	bl	8003c50 <xTaskGetTickCount>
 8004808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvSampleTimeNow+0x3c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d205      	bcs.n	8004820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004814:	f000 f91a 	bl	8004a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e002      	b.n	8004826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvSampleTimeNow+0x3c>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000abc 	.word	0x20000abc

0800483c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d812      	bhi.n	8004888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e01b      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <prvInsertTimerInActiveList+0x7c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fe f875 	bl	8002970 <vListInsert>
 8004886:	e012      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d206      	bcs.n	800489e <prvInsertTimerInActiveList+0x62>
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e007      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <prvInsertTimerInActiveList+0x80>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe f861 	bl	8002970 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000ab0 	.word	0x20000ab0
 80048bc:	20000aac 	.word	0x20000aac

080048c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	; 0x30
 80048c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048c6:	e0ae      	b.n	8004a26 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f2c0 80ab 	blt.w	8004a26 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	3304      	adds	r3, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe f87e 	bl	80029e2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff87 	bl	80047fc <prvSampleTimeNow>
 80048ee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	f200 8096 	bhi.w	8004a24 <prvProcessReceivedCommands+0x164>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <prvProcessReceivedCommands+0x40>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004929 	.word	0x08004929
 8004904:	08004929 	.word	0x08004929
 8004908:	08004929 	.word	0x08004929
 800490c:	0800499d 	.word	0x0800499d
 8004910:	080049b1 	.word	0x080049b1
 8004914:	080049fb 	.word	0x080049fb
 8004918:	08004929 	.word	0x08004929
 800491c:	08004929 	.word	0x08004929
 8004920:	0800499d 	.word	0x0800499d
 8004924:	080049b1 	.word	0x080049b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	18d1      	adds	r1, r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004948:	f7ff ff78 	bl	800483c <prvInsertTimerInActiveList>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d069      	beq.n	8004a26 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004958:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05e      	beq.n	8004a26 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	441a      	add	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	2100      	movs	r1, #0
 8004978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800497a:	f7ff fe21 	bl	80045c0 <xTimerGenericCommand>
 800497e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d14f      	bne.n	8004a26 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	61bb      	str	r3, [r7, #24]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80049ae:	e03a      	b.n	8004a26 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	617b      	str	r3, [r7, #20]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	18d1      	adds	r1, r2, r3
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049f4:	f7ff ff22 	bl	800483c <prvInsertTimerInActiveList>
					break;
 80049f8:	e015      	b.n	8004a26 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a0a:	f000 fbe1 	bl	80051d0 <vPortFree>
 8004a0e:	e00a      	b.n	8004a26 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a22:	e000      	b.n	8004a26 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8004a24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <prvProcessReceivedCommands+0x188>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f107 0108 	add.w	r1, r7, #8
 8004a2e:	2200      	movs	r2, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe fb0b 	bl	800304c <xQueueReceive>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f af45 	bne.w	80048c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000ab4 	.word	0x20000ab4

08004a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a52:	e048      	b.n	8004ae6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fd ffb8 	bl	80029e2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02e      	beq.n	8004ae6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d90e      	bls.n	8004ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa6:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fd ff5d 	bl	8002970 <vListInsert>
 8004ab6:	e016      	b.n	8004ae6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fd7c 	bl	80045c0 <xTimerGenericCommand>
 8004ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	603b      	str	r3, [r7, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1b1      	bne.n	8004a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <prvSwitchTimerLists+0xc4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004afc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004afe:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <prvSwitchTimerLists+0xc4>)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000aac 	.word	0x20000aac
 8004b10:	20000ab0 	.word	0x20000ab0

08004b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b1a:	f000 f96b 	bl	8004df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d120      	bne.n	8004b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b26:	4814      	ldr	r0, [pc, #80]	; (8004b78 <prvCheckForValidListAndQueue+0x64>)
 8004b28:	f7fd fed1 	bl	80028ce <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b2c:	4813      	ldr	r0, [pc, #76]	; (8004b7c <prvCheckForValidListAndQueue+0x68>)
 8004b2e:	f7fd fece 	bl	80028ce <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <prvCheckForValidListAndQueue+0x6c>)
 8004b34:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <prvCheckForValidListAndQueue+0x64>)
 8004b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <prvCheckForValidListAndQueue+0x70>)
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <prvCheckForValidListAndQueue+0x68>)
 8004b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <prvCheckForValidListAndQueue+0x74>)
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <prvCheckForValidListAndQueue+0x78>)
 8004b46:	210c      	movs	r1, #12
 8004b48:	2064      	movs	r0, #100	; 0x64
 8004b4a:	f7fd ffdd 	bl	8002b08 <xQueueGenericCreateStatic>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	490b      	ldr	r1, [pc, #44]	; (8004b90 <prvCheckForValidListAndQueue+0x7c>)
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fc86 	bl	8003474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b68:	f000 f974 	bl	8004e54 <vPortExitCritical>
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000ab4 	.word	0x20000ab4
 8004b78:	20000a84 	.word	0x20000a84
 8004b7c:	20000a98 	.word	0x20000a98
 8004b80:	20000aac 	.word	0x20000aac
 8004b84:	20000ab0 	.word	0x20000ab0
 8004b88:	20000f70 	.word	0x20000f70
 8004b8c:	20000ac0 	.word	0x20000ac0
 8004b90:	080059d4 	.word	0x080059d4

08004b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bc4:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <pxPortInitialiseStack+0x64>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b14      	subs	r3, #20
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b04      	subs	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f06f 0202 	mvn.w	r2, #2
 8004be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b20      	subs	r3, #32
 8004be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	08004bfd 	.word	0x08004bfd

08004bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <prvTaskExitError+0x54>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d00a      	beq.n	8004c26 <prvTaskExitError+0x2a>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <prvTaskExitError+0x28>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60bb      	str	r3, [r7, #8]
}
 8004c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c3a:	bf00      	nop
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0fc      	beq.n	8004c3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	2000000c 	.word	0x2000000c
	...

08004c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <pxCurrentTCBConst2>)
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	f380 8809 	msr	PSP, r0
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8811 	msr	BASEPRI, r0
 8004c7a:	4770      	bx	lr
 8004c7c:	f3af 8000 	nop.w

08004c80 <pxCurrentTCBConst2>:
 8004c80:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c88:	4808      	ldr	r0, [pc, #32]	; (8004cac <prvPortStartFirstTask+0x24>)
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f380 8808 	msr	MSP, r0
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8814 	msr	CONTROL, r0
 8004c9a:	b662      	cpsie	i
 8004c9c:	b661      	cpsie	f
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	df00      	svc	0
 8004ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004caa:	bf00      	nop
 8004cac:	e000ed08 	.word	0xe000ed08

08004cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cb6:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <xPortStartScheduler+0x120>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <xPortStartScheduler+0x124>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10a      	bne.n	8004cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	613b      	str	r3, [r7, #16]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cd6:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <xPortStartScheduler+0x120>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3f      	ldr	r2, [pc, #252]	; (8004dd8 <xPortStartScheduler+0x128>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10a      	bne.n	8004cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <xPortStartScheduler+0x12c>)
 8004cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	22ff      	movs	r2, #255	; 0xff
 8004d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <xPortStartScheduler+0x130>)
 8004d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d1e:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d24:	e009      	b.n	8004d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d26:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d0ef      	beq.n	8004d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1c3 0307 	rsb	r3, r3, #7
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d00a      	beq.n	8004d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60bb      	str	r3, [r7, #8]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d9e:	f000 f8dd 	bl	8004f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <xPortStartScheduler+0x13c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004da8:	f000 f8fc 	bl	8004fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dac:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <xPortStartScheduler+0x140>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <xPortStartScheduler+0x140>)
 8004db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004db8:	f7ff ff66 	bl	8004c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dbc:	f7ff f810 	bl	8003de0 <vTaskSwitchContext>
	prvTaskExitError();
 8004dc0:	f7ff ff1c 	bl	8004bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00
 8004dd4:	410fc271 	.word	0x410fc271
 8004dd8:	410fc270 	.word	0x410fc270
 8004ddc:	e000e400 	.word	0xe000e400
 8004de0:	20000fc0 	.word	0x20000fc0
 8004de4:	20000fc4 	.word	0x20000fc4
 8004de8:	e000ed20 	.word	0xe000ed20
 8004dec:	2000000c 	.word	0x2000000c
 8004df0:	e000ef34 	.word	0xe000ef34

08004df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	607b      	str	r3, [r7, #4]
}
 8004e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <vPortEnterCritical+0x58>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <vPortEnterCritical+0x58>)
 8004e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <vPortEnterCritical+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10f      	bne.n	8004e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <vPortEnterCritical+0x5c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	603b      	str	r3, [r7, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <vPortEnterCritical+0x4a>
	}
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	2000000c 	.word	0x2000000c
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <vPortExitCritical+0x24>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	607b      	str	r3, [r7, #4]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <vPortExitCritical+0x42>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f383 8811 	msr	BASEPRI, r3
}
 8004e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
	...

08004eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004eb0:	f3ef 8009 	mrs	r0, PSP
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <pxCurrentTCBConst>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f01e 0f10 	tst.w	lr, #16
 8004ec0:	bf08      	it	eq
 8004ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ed4:	f380 8811 	msr	BASEPRI, r0
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f7fe ff7e 	bl	8003de0 <vTaskSwitchContext>
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f380 8811 	msr	BASEPRI, r0
 8004eec:	bc09      	pop	{r0, r3}
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	f01e 0f10 	tst.w	lr, #16
 8004efa:	bf08      	it	eq
 8004efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f00:	f380 8809 	msr	PSP, r0
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst>:
 8004f10:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f32:	f7fe fe9d 	bl	8003c70 <xTaskIncrementTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <SysTick_Handler+0x40>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <vPortSetupTimerInterrupt+0x38>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <vPortSetupTimerInterrupt+0x3c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <vPortSetupTimerInterrupt+0x40>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <vPortSetupTimerInterrupt+0x44>)
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e010 	.word	0xe000e010
 8004f94:	e000e018 	.word	0xe000e018
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	10624dd3 	.word	0x10624dd3
 8004fa0:	e000e014 	.word	0xe000e014

08004fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fb4 <vPortEnableVFP+0x10>
 8004fa8:	6801      	ldr	r1, [r0, #0]
 8004faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fae:	6001      	str	r1, [r0, #0]
 8004fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fb2:	bf00      	nop
 8004fb4:	e000ed88 	.word	0xe000ed88

08004fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fbe:	f3ef 8305 	mrs	r3, IPSR
 8004fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d914      	bls.n	8004ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <vPortValidateInterruptPriority+0x70>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <vPortValidateInterruptPriority+0x74>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	7afa      	ldrb	r2, [r7, #11]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20a      	bcs.n	8004ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <vPortValidateInterruptPriority+0x78>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <vPortValidateInterruptPriority+0x7c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d90a      	bls.n	800501a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	603b      	str	r3, [r7, #0]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <vPortValidateInterruptPriority+0x60>
	}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	e000e3f0 	.word	0xe000e3f0
 800502c:	20000fc0 	.word	0x20000fc0
 8005030:	e000ed0c 	.word	0xe000ed0c
 8005034:	20000fc4 	.word	0x20000fc4

08005038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005044:	f7fe fd5a 	bl	8003afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <pvPortMalloc+0x180>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005050:	f000 f920 	bl	8005294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005054:	4b59      	ldr	r3, [pc, #356]	; (80051bc <pvPortMalloc+0x184>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 8093 	bne.w	8005188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005068:	2208      	movs	r2, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b00      	cmp	r3, #0
 8005078:	d014      	beq.n	80050a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <pvPortMalloc+0x6c>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	617b      	str	r3, [r7, #20]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d06e      	beq.n	8005188 <pvPortMalloc+0x150>
 80050aa:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <pvPortMalloc+0x188>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d869      	bhi.n	8005188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050b4:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <pvPortMalloc+0x18c>)
 80050b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <pvPortMalloc+0x18c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050be:	e004      	b.n	80050ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d903      	bls.n	80050dc <pvPortMalloc+0xa4>
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f1      	bne.n	80050c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <pvPortMalloc+0x180>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d050      	beq.n	8005188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2208      	movs	r2, #8
 80050ec:	4413      	add	r3, r2
 80050ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	2308      	movs	r3, #8
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	429a      	cmp	r2, r3
 8005106:	d91f      	bls.n	8005148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <pvPortMalloc+0xf8>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	613b      	str	r3, [r7, #16]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005142:	69b8      	ldr	r0, [r7, #24]
 8005144:	f000 f908 	bl	8005358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <pvPortMalloc+0x188>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <pvPortMalloc+0x188>)
 8005154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <pvPortMalloc+0x188>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <pvPortMalloc+0x190>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d203      	bcs.n	800516a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005162:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <pvPortMalloc+0x188>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <pvPortMalloc+0x190>)
 8005168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <pvPortMalloc+0x184>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	431a      	orrs	r2, r3
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <pvPortMalloc+0x194>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <pvPortMalloc+0x194>)
 8005186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005188:	f7fe fcc6 	bl	8003b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <pvPortMalloc+0x174>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60fb      	str	r3, [r7, #12]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <pvPortMalloc+0x172>
	return pvReturn;
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20008fd0 	.word	0x20008fd0
 80051bc:	20008fe4 	.word	0x20008fe4
 80051c0:	20008fd4 	.word	0x20008fd4
 80051c4:	20008fc8 	.word	0x20008fc8
 80051c8:	20008fd8 	.word	0x20008fd8
 80051cc:	20008fdc 	.word	0x20008fdc

080051d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04d      	beq.n	800527e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051e2:	2308      	movs	r3, #8
 80051e4:	425b      	negs	r3, r3
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	4b24      	ldr	r3, [pc, #144]	; (8005288 <vPortFree+0xb8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <vPortFree+0x44>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60fb      	str	r3, [r7, #12]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <vPortFree+0x62>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60bb      	str	r3, [r7, #8]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <vPortFree+0xb8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11a      	bne.n	800527e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <vPortFree+0xb8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	43db      	mvns	r3, r3
 8005252:	401a      	ands	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005258:	f7fe fc50 	bl	8003afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <vPortFree+0xbc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4413      	add	r3, r2
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <vPortFree+0xbc>)
 8005268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800526a:	6938      	ldr	r0, [r7, #16]
 800526c:	f000 f874 	bl	8005358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <vPortFree+0xc0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	4a06      	ldr	r2, [pc, #24]	; (8005290 <vPortFree+0xc0>)
 8005278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800527a:	f7fe fc4d 	bl	8003b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20008fe4 	.word	0x20008fe4
 800528c:	20008fd4 	.word	0x20008fd4
 8005290:	20008fe0 	.word	0x20008fe0

08005294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <prvHeapInit+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3307      	adds	r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0307 	bic.w	r3, r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <prvHeapInit+0xac>)
 80052c4:	4413      	add	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052cc:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <prvHeapInit+0xb0>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <prvHeapInit+0xb0>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052e0:	2208      	movs	r2, #8
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a15      	ldr	r2, [pc, #84]	; (8005348 <prvHeapInit+0xb4>)
 80052f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <prvHeapInit+0xb4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <prvHeapInit+0xb4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvHeapInit+0xb4>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <prvHeapInit+0xb8>)
 8005322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <prvHeapInit+0xbc>)
 800532a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <prvHeapInit+0xc0>)
 800532e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	20000fc8 	.word	0x20000fc8
 8005344:	20008fc8 	.word	0x20008fc8
 8005348:	20008fd0 	.word	0x20008fd0
 800534c:	20008fd8 	.word	0x20008fd8
 8005350:	20008fd4 	.word	0x20008fd4
 8005354:	20008fe4 	.word	0x20008fe4

08005358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005360:	4b28      	ldr	r3, [pc, #160]	; (8005404 <prvInsertBlockIntoFreeList+0xac>)
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e002      	b.n	800536c <prvInsertBlockIntoFreeList+0x14>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d8f7      	bhi.n	8005366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4413      	add	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d108      	bne.n	800539a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	441a      	add	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	441a      	add	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d118      	bne.n	80053e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <prvInsertBlockIntoFreeList+0xb0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d00d      	beq.n	80053d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e008      	b.n	80053e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <prvInsertBlockIntoFreeList+0xb0>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e003      	b.n	80053e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d002      	beq.n	80053f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20008fc8 	.word	0x20008fc8
 8005408:	20008fd0 	.word	0x20008fd0

0800540c <app_init>:


int app_init_done = 0;

void app_init()
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
//  lpMsg = Message::reserve(MSG_ID_START, LopTaskId);
//  lpMsg->sendMsg();
//
//  SET_BLUE_STATE_LED(LED_OFF);
//  app_init_done = 1;
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <_ZN7MessageC1Ev>:
#include <stdio.h>


MsgPool* Message::mspPool = 0;

Message::Message()
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
{

}
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <_ZN7Message4initEP7MsgPool>:

void Message::init(MsgPool* pPool)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  Message::mspPool = pPool;
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <_ZN7Message4initEP7MsgPool+0x1c>)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6013      	str	r3, [r2, #0]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20008fe8 	.word	0x20008fe8

08005450 <MsgPool_init>:
#include "os_init.h"
#include "MsgPool.h"


void MsgPool_init()
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  Message::init(MsgPool::instance());
 8005454:	f000 f86e 	bl	8005534 <_ZN7MsgPool8instanceEv>
 8005458:	4603      	mov	r3, r0
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ffe8 	bl	8005430 <_ZN7Message4initEP7MsgPool>
}
 8005460:	bf00      	nop
 8005462:	bd80      	pop	{r7, pc}

08005464 <_ZN7MsgPoolC1Ev>:

MsgPool* MsgPool::mspThis = 0;

MsgPool::MsgPool()
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	4a14      	ldr	r2, [pc, #80]	; (80054c0 <_ZN7MsgPoolC1Ev+0x5c>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	33cc      	adds	r3, #204	; 0xcc
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f872 	bl	8005560 <_ZN5MutexC1Ev>
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e015      	b.n	80054ae <_ZN7MsgPoolC1Ev+0x4a>
  {
    mPool[i].mMsg = new Message;
 8005482:	2008      	movs	r0, #8
 8005484:	f000 f8d6 	bl	8005634 <_Znwj>
 8005488:	4603      	mov	r3, r0
 800548a:	461c      	mov	r4, r3
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff ffc4 	bl	800541a <_ZN7MessageC1Ev>
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	605c      	str	r4, [r3, #4]
    mPool[i].mUsed = false;
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4413      	add	r3, r2
 80054a4:	2200      	movs	r2, #0
 80054a6:	721a      	strb	r2, [r3, #8]
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b18      	cmp	r3, #24
 80054b2:	dde6      	ble.n	8005482 <_ZN7MsgPoolC1Ev+0x1e>
  }

}
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd90      	pop	{r4, r7, pc}
 80054be:	bf00      	nop
 80054c0:	080059fc 	.word	0x080059fc

080054c4 <_ZN7MsgPoolD1Ev>:

MsgPool::~MsgPool()
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	4a10      	ldr	r2, [pc, #64]	; (8005510 <_ZN7MsgPoolD1Ev+0x4c>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e00d      	b.n	80054f4 <_ZN7MsgPoolD1Ev+0x30>
  {
    delete mPool[i].mMsg;
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4413      	add	r3, r2
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <_ZN7MsgPoolD1Ev+0x2a>
 80054e6:	2108      	movs	r1, #8
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f8ba 	bl	8005662 <_ZdlPvj>
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b18      	cmp	r3, #24
 80054f8:	ddee      	ble.n	80054d8 <_ZN7MsgPoolD1Ev+0x14>
MsgPool::~MsgPool()
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	33cc      	adds	r3, #204	; 0xcc
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f842 	bl	8005588 <_ZN5MutexD1Ev>
  }
}
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	080059fc 	.word	0x080059fc

08005514 <_ZN7MsgPoolD0Ev>:
MsgPool::~MsgPool()
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
}
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ffd1 	bl	80054c4 <_ZN7MsgPoolD1Ev>
 8005522:	21d8      	movs	r1, #216	; 0xd8
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f89c 	bl	8005662 <_ZdlPvj>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZN7MsgPool8instanceEv>:

MsgPool* MsgPool::instance()
{
 8005534:	b598      	push	{r3, r4, r7, lr}
 8005536:	af00      	add	r7, sp, #0
  if(mspThis == 0)
 8005538:	4b08      	ldr	r3, [pc, #32]	; (800555c <_ZN7MsgPool8instanceEv+0x28>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <_ZN7MsgPool8instanceEv+0x20>
  {
    mspThis = new MsgPool;
 8005540:	20d8      	movs	r0, #216	; 0xd8
 8005542:	f000 f877 	bl	8005634 <_Znwj>
 8005546:	4603      	mov	r3, r0
 8005548:	461c      	mov	r4, r3
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff ff8a 	bl	8005464 <_ZN7MsgPoolC1Ev>
 8005550:	4b02      	ldr	r3, [pc, #8]	; (800555c <_ZN7MsgPool8instanceEv+0x28>)
 8005552:	601c      	str	r4, [r3, #0]
  }
  return mspThis;
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <_ZN7MsgPool8instanceEv+0x28>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd98      	pop	{r3, r4, r7, pc}
 800555c:	20008fec 	.word	0x20008fec

08005560 <_ZN5MutexC1Ev>:
 *      Author: axel
 */

#include <Mutex.h>

Mutex::Mutex()
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	4a06      	ldr	r2, [pc, #24]	; (8005584 <_ZN5MutexC1Ev+0x24>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
{
  mMutex = xSemaphoreCreateMutex();
 800556e:	2001      	movs	r0, #1
 8005570:	f7fd fbb9 	bl	8002ce6 <xQueueCreateMutex>
 8005574:	4602      	mov	r2, r0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	605a      	str	r2, [r3, #4]
}
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	08005a0c 	.word	0x08005a0c

08005588 <_ZN5MutexD1Ev>:

Mutex::~Mutex()
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	4a06      	ldr	r2, [pc, #24]	; (80055ac <_ZN5MutexD1Ev+0x24>)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
{
  vSemaphoreDelete(mMutex);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd fe36 	bl	800320c <vQueueDelete>
}
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	08005a0c 	.word	0x08005a0c

080055b0 <_ZN5MutexD0Ev>:
Mutex::~Mutex()
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
}
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ffe5 	bl	8005588 <_ZN5MutexD1Ev>
 80055be:	210c      	movs	r1, #12
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f84e 	bl	8005662 <_ZdlPvj>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <TaskList_init>:
#include "os_init.h"
#include "TaskList.h"
#include <string.h>

void TaskList_init()
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  TaskList::instance();
 80055d4:	f000 f802 	bl	80055dc <_ZN8TaskList8instanceEv>
}
 80055d8:	bf00      	nop
 80055da:	bd80      	pop	{r7, pc}

080055dc <_ZN8TaskList8instanceEv>:
TaskList::table_struct TaskList::mTaskTable[TASK_MAX_COUNT];

TaskList* TaskList::mspThis=0;

TaskList* TaskList::instance()
{
 80055dc:	b598      	push	{r3, r4, r7, lr}
 80055de:	af00      	add	r7, sp, #0
  if(TaskList::mspThis == 0)
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <_ZN8TaskList8instanceEv+0x28>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <_ZN8TaskList8instanceEv+0x20>
  {
    TaskList::mspThis = new TaskList;
 80055e8:	200c      	movs	r0, #12
 80055ea:	f000 f823 	bl	8005634 <_Znwj>
 80055ee:	4603      	mov	r3, r0
 80055f0:	461c      	mov	r4, r3
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f808 	bl	8005608 <_ZN8TaskListC1Ev>
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <_ZN8TaskList8instanceEv+0x28>)
 80055fa:	601c      	str	r4, [r3, #0]
  }
  return TaskList::mspThis;
 80055fc:	4b01      	ldr	r3, [pc, #4]	; (8005604 <_ZN8TaskList8instanceEv+0x28>)
 80055fe:	681b      	ldr	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd98      	pop	{r3, r4, r7, pc}
 8005604:	20009270 	.word	0x20009270

08005608 <_ZN8TaskListC1Ev>:

TaskList::TaskList()
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ffa4 	bl	8005560 <_ZN5MutexC1Ev>
{
  memset(&mTaskTable, 0, sizeof(mTaskTable));
 8005618:	f44f 7220 	mov.w	r2, #640	; 0x280
 800561c:	2100      	movs	r1, #0
 800561e:	4804      	ldr	r0, [pc, #16]	; (8005630 <_ZN8TaskListC1Ev+0x28>)
 8005620:	f000 f82e 	bl	8005680 <memset>
}
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20008ff0 	.word	0x20008ff0

08005634 <_Znwj>:
#include <projdefs.h>
#include <portmacro.h>
#include <portable.h>

void * operator new( size_t size )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fcfb 	bl	8005038 <pvPortMalloc>
 8005642:	4603      	mov	r3, r0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff fdbb 	bl	80051d0 <vPortFree>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <_ZdlPvj>:
 8005662:	f7ff bff3 	b.w	800564c <_ZdlPv>
	...

08005668 <__malloc_lock>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__malloc_lock+0x8>)
 800566a:	f7fb b89e 	b.w	80007aa <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	20000824 	.word	0x20000824

08005674 <__malloc_unlock>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__malloc_unlock+0x8>)
 8005676:	f7fb b8ac 	b.w	80007d2 <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	20000824 	.word	0x20000824

08005680 <memset>:
 8005680:	4402      	add	r2, r0
 8005682:	4603      	mov	r3, r0
 8005684:	4293      	cmp	r3, r2
 8005686:	d100      	bne.n	800568a <memset+0xa>
 8005688:	4770      	bx	lr
 800568a:	f803 1b01 	strb.w	r1, [r3], #1
 800568e:	e7f9      	b.n	8005684 <memset+0x4>

08005690 <_reclaim_reent>:
 8005690:	4b29      	ldr	r3, [pc, #164]	; (8005738 <_reclaim_reent+0xa8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4283      	cmp	r3, r0
 8005696:	b570      	push	{r4, r5, r6, lr}
 8005698:	4604      	mov	r4, r0
 800569a:	d04b      	beq.n	8005734 <_reclaim_reent+0xa4>
 800569c:	69c3      	ldr	r3, [r0, #28]
 800569e:	b143      	cbz	r3, 80056b2 <_reclaim_reent+0x22>
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d144      	bne.n	8005730 <_reclaim_reent+0xa0>
 80056a6:	69e3      	ldr	r3, [r4, #28]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	b111      	cbz	r1, 80056b2 <_reclaim_reent+0x22>
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 f877 	bl	80057a0 <_free_r>
 80056b2:	6961      	ldr	r1, [r4, #20]
 80056b4:	b111      	cbz	r1, 80056bc <_reclaim_reent+0x2c>
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 f872 	bl	80057a0 <_free_r>
 80056bc:	69e1      	ldr	r1, [r4, #28]
 80056be:	b111      	cbz	r1, 80056c6 <_reclaim_reent+0x36>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 f86d 	bl	80057a0 <_free_r>
 80056c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80056c8:	b111      	cbz	r1, 80056d0 <_reclaim_reent+0x40>
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f868 	bl	80057a0 <_free_r>
 80056d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d2:	b111      	cbz	r1, 80056da <_reclaim_reent+0x4a>
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 f863 	bl	80057a0 <_free_r>
 80056da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056dc:	b111      	cbz	r1, 80056e4 <_reclaim_reent+0x54>
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 f85e 	bl	80057a0 <_free_r>
 80056e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056e6:	b111      	cbz	r1, 80056ee <_reclaim_reent+0x5e>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f859 	bl	80057a0 <_free_r>
 80056ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056f0:	b111      	cbz	r1, 80056f8 <_reclaim_reent+0x68>
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f854 	bl	80057a0 <_free_r>
 80056f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056fa:	b111      	cbz	r1, 8005702 <_reclaim_reent+0x72>
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 f84f 	bl	80057a0 <_free_r>
 8005702:	6a23      	ldr	r3, [r4, #32]
 8005704:	b1b3      	cbz	r3, 8005734 <_reclaim_reent+0xa4>
 8005706:	4620      	mov	r0, r4
 8005708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800570c:	4718      	bx	r3
 800570e:	5949      	ldr	r1, [r1, r5]
 8005710:	b941      	cbnz	r1, 8005724 <_reclaim_reent+0x94>
 8005712:	3504      	adds	r5, #4
 8005714:	69e3      	ldr	r3, [r4, #28]
 8005716:	2d80      	cmp	r5, #128	; 0x80
 8005718:	68d9      	ldr	r1, [r3, #12]
 800571a:	d1f8      	bne.n	800570e <_reclaim_reent+0x7e>
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f83f 	bl	80057a0 <_free_r>
 8005722:	e7c0      	b.n	80056a6 <_reclaim_reent+0x16>
 8005724:	680e      	ldr	r6, [r1, #0]
 8005726:	4620      	mov	r0, r4
 8005728:	f000 f83a 	bl	80057a0 <_free_r>
 800572c:	4631      	mov	r1, r6
 800572e:	e7ef      	b.n	8005710 <_reclaim_reent+0x80>
 8005730:	2500      	movs	r5, #0
 8005732:	e7ef      	b.n	8005714 <_reclaim_reent+0x84>
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	bf00      	nop
 8005738:	2000005c 	.word	0x2000005c

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4d0d      	ldr	r5, [pc, #52]	; (8005774 <__libc_init_array+0x38>)
 8005740:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	2600      	movs	r6, #0
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	4d0b      	ldr	r5, [pc, #44]	; (800577c <__libc_init_array+0x40>)
 800574e:	4c0c      	ldr	r4, [pc, #48]	; (8005780 <__libc_init_array+0x44>)
 8005750:	f000 f872 	bl	8005838 <_init>
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2600      	movs	r6, #0
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	08005a14 	.word	0x08005a14
 8005778:	08005a14 	.word	0x08005a14
 800577c:	08005a14 	.word	0x08005a14
 8005780:	08005a18 	.word	0x08005a18

08005784 <memcpy>:
 8005784:	440a      	add	r2, r1
 8005786:	4291      	cmp	r1, r2
 8005788:	f100 33ff 	add.w	r3, r0, #4294967295
 800578c:	d100      	bne.n	8005790 <memcpy+0xc>
 800578e:	4770      	bx	lr
 8005790:	b510      	push	{r4, lr}
 8005792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579a:	4291      	cmp	r1, r2
 800579c:	d1f9      	bne.n	8005792 <memcpy+0xe>
 800579e:	bd10      	pop	{r4, pc}

080057a0 <_free_r>:
 80057a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d044      	beq.n	8005830 <_free_r+0x90>
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	9001      	str	r0, [sp, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f1a1 0404 	sub.w	r4, r1, #4
 80057b2:	bfb8      	it	lt
 80057b4:	18e4      	addlt	r4, r4, r3
 80057b6:	f7ff ff57 	bl	8005668 <__malloc_lock>
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <_free_r+0x94>)
 80057bc:	9801      	ldr	r0, [sp, #4]
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	b933      	cbnz	r3, 80057d0 <_free_r+0x30>
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	6014      	str	r4, [r2, #0]
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057cc:	f7ff bf52 	b.w	8005674 <__malloc_unlock>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d908      	bls.n	80057e6 <_free_r+0x46>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf01      	itttt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	1949      	addeq	r1, r1, r5
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	e7ed      	b.n	80057c2 <_free_r+0x22>
 80057e6:	461a      	mov	r2, r3
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b10b      	cbz	r3, 80057f0 <_free_r+0x50>
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d9fa      	bls.n	80057e6 <_free_r+0x46>
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	1855      	adds	r5, r2, r1
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d10b      	bne.n	8005810 <_free_r+0x70>
 80057f8:	6824      	ldr	r4, [r4, #0]
 80057fa:	4421      	add	r1, r4
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	42a3      	cmp	r3, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	d1e0      	bne.n	80057c6 <_free_r+0x26>
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	440c      	add	r4, r1
 800580c:	6014      	str	r4, [r2, #0]
 800580e:	e7da      	b.n	80057c6 <_free_r+0x26>
 8005810:	d902      	bls.n	8005818 <_free_r+0x78>
 8005812:	230c      	movs	r3, #12
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	e7d6      	b.n	80057c6 <_free_r+0x26>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf04      	itt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	bf04      	itt	eq
 8005828:	1949      	addeq	r1, r1, r5
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	6054      	str	r4, [r2, #4]
 800582e:	e7ca      	b.n	80057c6 <_free_r+0x26>
 8005830:	b003      	add	sp, #12
 8005832:	bd30      	pop	{r4, r5, pc}
 8005834:	20009274 	.word	0x20009274

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
