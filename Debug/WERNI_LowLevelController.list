
WERNI_LowLevelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad28  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800af08  0800af08  0001af08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b208  0800b208  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b208  0800b208  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b208  0800b208  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b208  0800b208  0001b208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093c8  2000006c  0800b284  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009434  0800b284  00029434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020448  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062e9  00000000  00000000  00040527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00046810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140e  00000000  00000000  00048288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026caa  00000000  00000000  00049696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024274  00000000  00000000  00070340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc427  00000000  00000000  000945b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007590  00000000  00000000  001709dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00177f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aef0 	.word	0x0800aef0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800aef0 	.word	0x0800aef0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 f8b1 	bl	8000448 <_ZNSaIP14IinterruptableED1Ev>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f894 	bl	8000428 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implC1Ev>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4618      	mov	r0, r3
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <_ZNSt6vectorIP14IinterruptableSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800030a:	b580      	push	{r7, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffeb 	bl	80002f0 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EEC1Ev>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZN14IinterruptableC1Ev>:
#include "InterruptRouting.h"
#include "main.h"

std::vector<Iinterruptable*> Iinterruptable::outputCompareIntReceivers;

Iinterruptable::Iinterruptable()
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	4a07      	ldr	r2, [pc, #28]	; (800034c <_ZN14IinterruptableC1Ev+0x28>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601a      	str	r2, [r3, #0]
{
  outputCompareIntReceivers.push_back(this);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <_ZN14IinterruptableC1Ev+0x2c>)
 800033e:	f000 f8a8 	bl	8000492 <_ZNSt6vectorIP14IinterruptableSaIS1_EE9push_backEOS1_>
}
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	0800b144 	.word	0x0800b144
 8000350:	20000088 	.word	0x20000088

08000354 <_ZN14IinterruptableD1Ev>:

Iinterruptable::~Iinterruptable(){}
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <_ZN14IinterruptableD1Ev+0x1c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	0800b144 	.word	0x0800b144

08000374 <_ZN14IinterruptableD0Ev>:
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f7ff ffe9 	bl	8000354 <_ZN14IinterruptableD1Ev>
 8000382:	2104      	movs	r1, #4
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f009 fd34 	bl	8009df2 <_ZdlPvj>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <_ZN14Iinterruptable18OutputCompareIntCbEP17TIM_HandleTypeDef>:

void Iinterruptable::OutputCompareIntCb(TIM_HandleTypeDef* htim)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  //Implement in derived class to use.
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <HAL_TIM_OC_DelayElapsedCallback>:


//************ C-Functions below ***************

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d12b      	bne.n	8000416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
  {
    for(Iinterruptable* receiver : Iinterruptable::outputCompareIntReceivers)
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	6978      	ldr	r0, [r7, #20]
 80003c4:	f000 f876 	bl	80004b4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE5beginEv>
 80003c8:	4603      	mov	r3, r0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	6978      	ldr	r0, [r7, #20]
 80003ce:	f000 f881 	bl	80004d4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE3endEv>
 80003d2:	4603      	mov	r3, r0
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	e013      	b.n	8000400 <HAL_TIM_OC_DelayElapsedCallback+0x54>
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f8b2 	bl	8000546 <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEdeEv>
 80003e2:	4603      	mov	r3, r0
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	613b      	str	r3, [r7, #16]
    {
      receiver->OutputCompareIntCb(htim);
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3308      	adds	r3, #8
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	6938      	ldr	r0, [r7, #16]
 80003f4:	4798      	blx	r3
    for(Iinterruptable* receiver : Iinterruptable::outputCompareIntReceivers)
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f893 	bl	8000526 <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEppEv>
 8000400:	f107 0208 	add.w	r2, r7, #8
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4611      	mov	r1, r2
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f873 	bl	80004f6 <_ZN9__gnu_cxxneIPP14IinterruptableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e0      	bne.n	80003d8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    }
  }
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40012c00 	.word	0x40012c00
 8000424:	20000088 	.word	0x20000088

08000428 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 f894 	bl	800055e <_ZNSaIP14IinterruptableEC1Ev>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f89c 	bl	8000576 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_ZNSaIP14IinterruptableED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f000 f8a4 	bl	800059e <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableED1Ev>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	689a      	ldr	r2, [r3, #8]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000478:	461a      	mov	r2, r3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f000 f89a 	bl	80005b4 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j>
      }
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff28 	bl	80002d8 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE12_Vector_implD1Ev>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <_ZNSt6vectorIP14IinterruptableSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800049c:	6838      	ldr	r0, [r7, #0]
 800049e:	f000 f89c 	bl	80005da <_ZSt4moveIRP14IinterruptableEONSt16remove_referenceIT_E4typeEOS4_>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4619      	mov	r1, r3
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f000 f8a2 	bl	80005f0 <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f8c1 	bl	800064c <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	1d1a      	adds	r2, r3, #4
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f8b0 	bl	800064c <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4618      	mov	r0, r3
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_ZN9__gnu_cxxneIPP14IinterruptableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80004f6:	b590      	push	{r4, r7, lr}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f8b3 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000506:	4603      	mov	r3, r0
 8000508:	681c      	ldr	r4, [r3, #0]
 800050a:	6838      	ldr	r0, [r7, #0]
 800050c:	f000 f8ae 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000510:	4603      	mov	r3, r0
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	429c      	cmp	r4, r3
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}

08000526 <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1d1a      	adds	r2, r3, #4
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
	return *this;
 8000538:	687b      	ldr	r3, [r7, #4]
      }
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_ZNSaIP14IinterruptableEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f88b 	bl	8000682 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableEC1Ev>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	{ }
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	if (__p)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f863 	bl	8000698 <_ZNSt16allocator_traitsISaIP14IinterruptableEE10deallocateERS2_PS1_j>
      }
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZSt4moveIRP14IinterruptableEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	429a      	cmp	r2, r3
 8000604:	d011      	beq.n	800062a <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000606:	687c      	ldr	r4, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685d      	ldr	r5, [r3, #4]
 800060c:	6838      	ldr	r0, [r7, #0]
 800060e:	f000 f852 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4629      	mov	r1, r5
 8000618:	4620      	mov	r0, r4
 800061a:	f000 f857 	bl	80006cc <_ZNSt16allocator_traitsISaIP14IinterruptableEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	1d1a      	adds	r2, r3, #4
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000628:	e00c      	b.n	8000644 <_ZNSt6vectorIP14IinterruptableSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ff52 	bl	80004d4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE3endEv>
 8000630:	4604      	mov	r4, r0
 8000632:	6838      	ldr	r0, [r7, #0]
 8000634:	f000 f83f 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4621      	mov	r1, r4
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f86e 	bl	8000720 <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bdb0      	pop	{r4, r5, r7, pc}

0800064c <_ZN9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_ZNSt16allocator_traitsISaIP14IinterruptableEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f000 f8f5 	bl	8000898 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE10deallocateEPS2_j>
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <_ZNSt16allocator_traitsISaIP14IinterruptableEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffec 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 f8e7 	bl	80008b8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE9constructIS2_JS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_ZNSt6vectorIP14IinterruptableSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f805 	bl	8000708 <_ZNSt6vectorIP14IinterruptableSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80006fe:	4603      	mov	r3, r0
      }
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_ZNSt6vectorIP14IinterruptableSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000710:	2301      	movs	r3, #1
      }
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800072c:	4a59      	ldr	r2, [pc, #356]	; (8000894 <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800072e:	2101      	movs	r1, #1
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f8d7 	bl	80008e4 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc>
 8000736:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff feb5 	bl	80004b4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE5beginEv>
 800074a:	4603      	mov	r3, r0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	f107 0214 	add.w	r2, r7, #20
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f90a 	bl	8000972 <_ZN9__gnu_cxxmiIPP14IinterruptableSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800075e:	4603      	mov	r3, r0
 8000760:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f918 	bl	800099c <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj>
 800076c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000772:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	18d5      	adds	r5, r2, r3
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff9a 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4629      	mov	r1, r5
 8000788:	4620      	mov	r0, r4
 800078a:	f7ff ff9f 	bl	80006cc <_ZNSt16allocator_traitsISaIP14IinterruptableEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000792:	f7ff ffae 	bl	80006f2 <_ZNSt6vectorIP14IinterruptableSaIS1_EE15_S_use_relocateEv>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d027      	beq.n	80007ec <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff63 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 80007a6:	4603      	mov	r3, r0
 80007a8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f91d 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 80007b2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80007b4:	69ba      	ldr	r2, [r7, #24]
 80007b6:	4621      	mov	r1, r4
 80007b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007ba:	f000 f903 	bl	80009c4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80007be:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	3304      	adds	r3, #4
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff4e 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 80007d0:	4603      	mov	r3, r0
 80007d2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f908 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 80007dc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80007de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e0:	6a39      	ldr	r1, [r7, #32]
 80007e2:	4620      	mov	r0, r4
 80007e4:	f000 f8ee 	bl	80009c4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80007e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80007ea:	e026      	b.n	800083a <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff3b 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 80007f6:	4603      	mov	r3, r0
 80007f8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f8f5 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000802:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	4621      	mov	r1, r4
 8000808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800080a:	f000 f8fa 	bl	8000a02 <_ZSt34__uninitialized_move_if_noexcept_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>
 800080e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	3304      	adds	r3, #4
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff26 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000820:	4603      	mov	r3, r0
 8000822:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f8e0 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 800082c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800082e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000830:	6a39      	ldr	r1, [r7, #32]
 8000832:	4620      	mov	r0, r4
 8000834:	f000 f8e5 	bl	8000a02 <_ZSt34__uninitialized_move_if_noexcept_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000838:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800083a:	f7ff ff5a 	bl	80006f2 <_ZNSt6vectorIP14IinterruptableSaIS1_EE15_S_use_relocateEv>
 800083e:	4603      	mov	r3, r0
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d009      	beq.n	800085e <_ZNSt6vectorIP14IinterruptableSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f8cd 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	6a39      	ldr	r1, [r7, #32]
 8000858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800085a:	f000 f8eb 	bl	8000a34 <_ZSt8_DestroyIPP14IinterruptableS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800085e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800086a:	461a      	mov	r2, r3
 800086c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800086e:	f7ff fea1 	bl	80005b4 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800087c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	441a      	add	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	609a      	str	r2, [r3, #8]
    }
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bdb0      	pop	{r4, r5, r7, pc}
 8000892:	bf00      	nop
 8000894:	0800af08 	.word	0x0800af08

08000898 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4619      	mov	r1, r3
 80008aa:	68b8      	ldr	r0, [r7, #8]
 80008ac:	f009 faa1 	bl	8009df2 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fef6 	bl	80006b6 <_ZSt7forwardIP14IinterruptableEOT_RNSt16remove_referenceIS2_E4typeE>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681c      	ldr	r4, [r3, #0]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4619      	mov	r1, r3
 80008d2:	2004      	movs	r0, #4
 80008d4:	f7ff fcf4 	bl	80002c0 <_ZnwjPv>
 80008d8:	4603      	mov	r3, r0
 80008da:	601c      	str	r4, [r3, #0]
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f000 f8ad 	bl	8000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>
 80008f6:	4604      	mov	r4, r0
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f000 f8ba 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 80008fe:	4603      	mov	r3, r0
 8000900:	1ae2      	subs	r2, r4, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	429a      	cmp	r2, r3
 8000906:	bf34      	ite	cc
 8000908:	2301      	movcc	r3, #1
 800090a:	2300      	movcs	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f009 fa75 	bl	8009e02 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f000 f8aa 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 800091e:	4604      	mov	r4, r0
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f000 f8a6 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 8000926:	4603      	mov	r3, r0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	f107 0208 	add.w	r2, r7, #8
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f8ac 	bl	8000a92 <_ZSt3maxIjERKT_S2_S2_>
 800093a:	4603      	mov	r3, r0
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4423      	add	r3, r4
 8000940:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f895 	bl	8000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>
 8000948:	4602      	mov	r2, r0
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4293      	cmp	r3, r2
 800094e:	d306      	bcc.n	800095e <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f000 f87d 	bl	8000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>
 8000956:	4602      	mov	r2, r0
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	4293      	cmp	r3, r2
 800095c:	d904      	bls.n	8000968 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x84>
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 f876 	bl	8000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>
 8000964:	4603      	mov	r3, r0
 8000966:	e000      	b.n	800096a <_ZNKSt6vectorIP14IinterruptableSaIS1_EE12_M_check_lenEjPKc+0x86>
 8000968:	697b      	ldr	r3, [r7, #20]
      }
 800096a:	4618      	mov	r0, r3
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <_ZN9__gnu_cxxmiIPP14IinterruptableSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fe75 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 8000982:	4603      	mov	r3, r0
 8000984:	681c      	ldr	r4, [r3, #0]
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f7ff fe70 	bl	800066c <_ZNK9__gnu_cxx17__normal_iteratorIPP14IinterruptableSt6vectorIS2_SaIS2_EEE4baseEv>
 800098c:	4603      	mov	r3, r0
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1ae3      	subs	r3, r4, r3
 8000992:	109b      	asrs	r3, r3, #2
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}

0800099c <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj+0x1e>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f882 	bl	8000aba <_ZNSt16allocator_traitsISaIP14IinterruptableEE8allocateERS2_j>
 80009b6:	4603      	mov	r3, r0
 80009b8:	e000      	b.n	80009bc <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE11_M_allocateEj+0x20>
 80009ba:	2300      	movs	r3, #0
      }
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80009d2:	f88d 4000 	strb.w	r4, [sp]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f87b 	bl	8000ad8 <_ZNSt6vectorIP14IinterruptableSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80009e2:	4603      	mov	r3, r0
      }
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_ZSt34__uninitialized_move_if_noexcept_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000a02:	b590      	push	{r4, r7, lr}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f873 	bl	8000afc <_ZSt32__make_move_if_noexcept_iteratorIP14IinterruptableSt13move_iteratorIPS1_EET0_PT_>
 8000a16:	4604      	mov	r4, r0
 8000a18:	68b8      	ldr	r0, [r7, #8]
 8000a1a:	f000 f86f 	bl	8000afc <_ZSt32__make_move_if_noexcept_iteratorIP14IinterruptableSt13move_iteratorIPS1_EET0_PT_>
 8000a1e:	4601      	mov	r1, r0
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4620      	mov	r0, r4
 8000a26:	f000 f878 	bl	8000b1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14IinterruptableES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8000a2a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <_ZSt8_DestroyIPP14IinterruptableS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f87a 	bl	8000b3c <_ZSt8_DestroyIPP14IinterruptableEvT_S3_>
    }
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f895 	bl	8000b8a <_ZNKSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f877 	bl	8000b56 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_max_sizeERKS2_>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_ZNKSt6vectorIP14IinterruptableSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	109b      	asrs	r3, r3, #2
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d201      	bcs.n	8000aac <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	e000      	b.n	8000aae <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000aac:	687b      	ldr	r3, [r7, #4]
    }
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_ZNSt16allocator_traitsISaIP14IinterruptableEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6839      	ldr	r1, [r7, #0]
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f875 	bl	8000bb8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_ZNSt6vectorIP14IinterruptableSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f88c 	bl	8000c0a <_ZSt12__relocate_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000af2:	4603      	mov	r3, r0
      }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZSt32__make_move_if_noexcept_iteratorIP14IinterruptableSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f89a 	bl	8000c44 <_ZNSt13move_iteratorIPP14IinterruptableEC1ES2_>
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14IinterruptableES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f89b 	bl	8000c68 <_ZSt18uninitialized_copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZSt8_DestroyIPP14IinterruptableEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f89f 	bl	8000c8c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14IinterruptableEEvT_S5_>
    }
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZNSt6vectorIP14IinterruptableSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000b5e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000b62:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f89c 	bl	8000ca2 <_ZNSt16allocator_traitsISaIP14IinterruptableEE8max_sizeERKS2_>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000b6e:	f107 0208 	add.w	r2, r7, #8
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f89e 	bl	8000cba <_ZSt3minIjERKT_S2_S2_>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	681b      	ldr	r3, [r3, #0]
      }
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZNKSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000ba8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff ffeb 	bl	8000ba0 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE11_M_max_sizeEv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	bf8c      	ite	hi
 8000bd2:	2301      	movhi	r3, #1
 8000bd4:	2300      	movls	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	bf14      	ite	ne
 8000bdc:	2301      	movne	r3, #1
 8000bde:	2300      	moveq	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bec:	d301      	bcc.n	8000bf2 <_ZN9__gnu_cxx13new_allocatorIP14IinterruptableE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8000bee:	f009 f905 	bl	8009dfc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8000bf2:	f009 f900 	bl	8009df6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f009 f8e2 	bl	8009dc4 <_Znwj>
 8000c00:	4603      	mov	r3, r0
      }
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_ZSt12__relocate_aIPP14IinterruptableS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8000c0a:	b5b0      	push	{r4, r5, r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f862 	bl	8000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f000 f85e 	bl	8000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000c26:	4605      	mov	r5, r0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f85a 	bl	8000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4629      	mov	r1, r5
 8000c34:	4620      	mov	r0, r4
 8000c36:	f000 f85f 	bl	8000cf8 <_ZSt14__relocate_a_1IP14IinterruptableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8000c3a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}

08000c44 <_ZNSt13move_iteratorIPP14IinterruptableEC1ES2_>:
      move_iterator(iterator_type __i)
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f86f 	bl	8000d34 <_ZSt4moveIRPP14IinterruptableEONSt16remove_referenceIT_E4typeEOS5_>
 8000c56:	4603      	mov	r3, r0
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_ZSt18uninitialized_copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000c74:	2301      	movs	r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f000 f864 	bl	8000d4a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14IinterruptableES5_EET0_T_S8_S7_>
 8000c82:	4603      	mov	r3, r0
    }
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14IinterruptableEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_ZNSt16allocator_traitsISaIP14IinterruptableEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f85d 	bl	8000d6a <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE8max_sizeEv>
 8000cb0:	4603      	mov	r3, r0
      }
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d201      	bcs.n	8000cd4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	e000      	b.n	8000cd6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000cd4:	687b      	ldr	r3, [r7, #4]
    }
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_ZSt14__relocate_a_1IP14IinterruptableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	109b      	asrs	r3, r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd06      	ble.n	8000d24 <_ZSt14__relocate_a_1IP14IinterruptableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f009 fb36 	bl	800a390 <memmove>
      return __result + __count;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
    }
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_ZSt4moveIRPP14IinterruptableEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14IinterruptableES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f811 	bl	8000d82 <_ZSt4copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff14 	bl	8000ba0 <_ZNK9__gnu_cxx13new_allocatorIP14IinterruptableE11_M_max_sizeEv>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_ZSt4copyISt13move_iteratorIPP14IinterruptableES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000d82:	b590      	push	{r4, r7, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f000 f80f 	bl	8000db2 <_ZSt12__miter_baseIPP14IinterruptableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000d94:	4604      	mov	r4, r0
 8000d96:	68b8      	ldr	r0, [r7, #8]
 8000d98:	f000 f80b 	bl	8000db2 <_ZSt12__miter_baseIPP14IinterruptableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4620      	mov	r0, r4
 8000da4:	f000 f816 	bl	8000dd4 <_ZSt13__copy_move_aILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>
 8000da8:	4603      	mov	r3, r0
    }
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}

08000db2 <_ZSt12__miter_baseIPP14IinterruptableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f82c 	bl	8000e1a <_ZNKSt13move_iteratorIPP14IinterruptableE4baseEv>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f834 	bl	8000e32 <_ZSt12__miter_baseIPP14IinterruptableET_S3_>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZSt13__copy_move_aILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff ff7e 	bl	8000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000de6:	4604      	mov	r4, r0
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f7ff ff7a 	bl	8000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000dee:	4605      	mov	r5, r0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff75 	bl	8000ce2 <_ZSt12__niter_baseIPP14IinterruptableET_S3_>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4629      	mov	r1, r5
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f000 f822 	bl	8000e48 <_ZSt14__copy_move_a1ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>
 8000e04:	4602      	mov	r2, r0
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f82c 	bl	8000e68 <_ZSt12__niter_wrapIPP14IinterruptableET_RKS3_S3_>
 8000e10:	4603      	mov	r3, r0
    }
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}

08000e1a <_ZNKSt13move_iteratorIPP14IinterruptableE4baseEv>:
      base() const
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_ZSt12__miter_baseIPP14IinterruptableET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_ZSt14__copy_move_a1ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 f811 	bl	8000e80 <_ZSt14__copy_move_a2ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_ZSt12__niter_wrapIPP14IinterruptableET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_ZSt14__copy_move_a2ILb1EPP14IinterruptableS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68b9      	ldr	r1, [r7, #8]
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 f805 	bl	8000ea0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14IinterruptableEEPT_PKS5_S8_S6_>
 8000e96:	4603      	mov	r3, r0
    }
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14IinterruptableEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	109b      	asrs	r3, r3, #2
 8000eb4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14IinterruptableEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68f9      	ldr	r1, [r7, #12]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f009 fa63 	bl	800a390 <memmove>
	  return __result + _Num;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
	}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <_Z41__static_initialization_and_destruction_0ii>:
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d107      	bne.n	8000efc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d102      	bne.n	8000efc <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<Iinterruptable*> Iinterruptable::outputCompareIntReceivers;
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000ef8:	f7ff fa07 	bl	800030a <_ZNSt6vectorIP14IinterruptableSaIS1_EEC1Ev>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d107      	bne.n	8000f12 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d102      	bne.n	8000f12 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000f0e:	f000 f807 	bl	8000f20 <_ZNSt6vectorIP14IinterruptableSaIS1_EED1Ev>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000088 	.word	0x20000088

08000f20 <_ZNSt6vectorIP14IinterruptableSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681c      	ldr	r4, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fd5a 	bl	80009ec <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EE19_M_get_Tp_allocatorEv>
 8000f38:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff fd78 	bl	8000a34 <_ZSt8_DestroyIPP14IinterruptableS1_EvT_S3_RSaIT0_E>
      }
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fa8a 	bl	8000460 <_ZNSt12_Vector_baseIP14IinterruptableSaIS1_EED1Ev>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdb0      	pop	{r4, r5, r7, pc}

08000f56 <_GLOBAL__sub_I__ZN14Iinterruptable25outputCompareIntReceiversE>:
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff ffbc 	bl	8000edc <_Z41__static_initialization_and_destruction_0ii>
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_GLOBAL__sub_D__ZN14Iinterruptable25outputCompareIntReceiversE>:
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ffb4 	bl	8000edc <_Z41__static_initialization_and_destruction_0ii>
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <vApplicationGetIdleTaskMemory+0x30>)
 8000fc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	20000144 	.word	0x20000144

08000fe0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <vApplicationGetTimerTaskMemory+0x2c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <vApplicationGetTimerTaskMemory+0x30>)
 8000ff6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000344 	.word	0x20000344
 8001010:	200003f0 	.word	0x200003f0

08001014 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of idleTask */
  osThreadDef(idleTask, StartIdleTask, osPriorityIdle, 0, 128);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_FREERTOS_Init+0x30>)
 800101c:	1d3c      	adds	r4, r7, #4
 800101e:	461d      	mov	r5, r3
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f004 ff5e 	bl	8005ef2 <osThreadCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <MX_FREERTOS_Init+0x34>)
 800103a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	0800af30 	.word	0x0800af30
 8001048:	20000094 	.word	0x20000094

0800104c <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
    MsgPool_init();
 8001054:	f008 faf3 	bl	800963e <MsgPool_init>
    TaskList_init();
 8001058:	f008 fcd2 	bl	8009a00 <TaskList_init>
    app_init();
 800105c:	f008 f9ae 	bl	80093bc <app_init>
    vTaskDelete(NULL);
 8001060:	2000      	movs	r0, #0
 8001062:	f006 f8cb 	bl	80071fc <vTaskDelete>
    MsgPool_init();
 8001066:	e7f5      	b.n	8001054 <StartIdleTask+0x8>

08001068 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <MX_GPIO_Init+0xf8>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <MX_GPIO_Init+0xf8>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <MX_GPIO_Init+0xf8>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <MX_GPIO_Init+0xf8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <MX_GPIO_Init+0xf8>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a25      	ldr	r2, [pc, #148]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <MX_GPIO_Init+0xf8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2120      	movs	r1, #32
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 f817 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_GPIO_Init+0xfc>)
 8001102:	f000 fdb3 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001106:	230c      	movs	r3, #12
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001116:	230c      	movs	r3, #12
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fda2 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001128:	2320      	movs	r3, #32
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f000 fd93 	bl	8001c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	2028      	movs	r0, #40	; 0x28
 800114c:	f000 fd4c 	bl	8001be8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001150:	2028      	movs	r0, #40	; 0x28
 8001152:	f000 fd73 	bl	8001c3c <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	48000800 	.word	0x48000800

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fc38 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f809 	bl	8001186 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f7ff ff78 	bl	8001068 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001178:	f000 fa1c 	bl	80015b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800117c:	f7ff ff4a 	bl	8001014 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001180:	f004 feb0 	bl	8005ee4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001184:	e7fe      	b.n	8001184 <main+0x1c>

08001186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b094      	sub	sp, #80	; 0x50
 800118a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	2238      	movs	r2, #56	; 0x38
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f009 f915 	bl	800a3c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 f831 	bl	8002210 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011c8:	2355      	movs	r3, #85	; 0x55
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f8db 	bl	8002398 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011e8:	f000 f82a 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2104      	movs	r1, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fcd9 	bl	8002bbc <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001210:	f000 f816 	bl	8001240 <Error_Handler>
  }
}
 8001214:	bf00      	nop
 8001216:	3750      	adds	r7, #80	; 0x50
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122e:	f000 fbef 	bl	8001a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40001000 	.word	0x40001000

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>

0800124a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_MspInit+0x50>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_MspInit+0x50>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	; 0x60
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x50>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x50>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_MspInit+0x50>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x50>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	210f      	movs	r1, #15
 800129a:	f06f 0001 	mvn.w	r0, #1
 800129e:	f000 fca3 	bl	8001be8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012a2:	f001 f869 	bl	8002378 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_InitTick+0xc4>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <HAL_InitTick+0xc4>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6593      	str	r3, [r2, #88]	; 0x58
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <HAL_InitTick+0xc4>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 feec 	bl	80030c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012ec:	f001 fed4 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 80012f0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <HAL_InitTick+0xc8>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	3b01      	subs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_InitTick+0xcc>)
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <HAL_InitTick+0xd0>)
 8001304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_InitTick+0xcc>)
 8001308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_InitTick+0xcc>)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_InitTick+0xcc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_InitTick+0xcc>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_InitTick+0xcc>)
 8001322:	f001 ff57 	bl	80031d4 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800132c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <HAL_InitTick+0xcc>)
 8001336:	f002 f82f 	bl	8003398 <HAL_TIM_Base_Start_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001344:	2b00      	cmp	r3, #0
 8001346:	d111      	bne.n	800136c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001348:	2036      	movs	r0, #54	; 0x36
 800134a:	f000 fc77 	bl	8001c3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d808      	bhi.n	8001366 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	2036      	movs	r0, #54	; 0x36
 800135a:	f000 fc45 	bl	8001be8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_InitTick+0xd4>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e002      	b.n	800136c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800136c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001370:	4618      	mov	r0, r3
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	431bde83 	.word	0x431bde83
 8001380:	200007f0 	.word	0x200007f0
 8001384:	40001000 	.word	0x40001000
 8001388:	20000004 	.word	0x20000004

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013be:	f002 fb93 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000840 	.word	0x20000840

080013cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM1_CC_IRQHandler+0x10>)
 80013d2:	f002 fb89 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000840 	.word	0x20000840

080013e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e8:	f000 feee 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM6_DAC_IRQHandler+0x10>)
 80013f6:	f002 fb77 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200007f0 	.word	0x200007f0

08001404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800141e:	f009 f8dd 	bl	800a5dc <__errno>
 8001422:	4603      	mov	r3, r0
 8001424:	2216      	movs	r2, #22
 8001426:	601a      	str	r2, [r3, #0]
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_exit>:

void _exit (int status)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffe7 	bl	8001414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001446:	e7fe      	b.n	8001446 <_exit+0x12>

08001448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
  }

  return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
  }
  return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
  return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f009 f842 	bl	800a5dc <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2001c000 	.word	0x2001c000
 8001584:	00000400 	.word	0x00000400
 8001588:	2000083c 	.word	0x2000083c
 800158c:	20009438 	.word	0x20009438

08001590 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09c      	sub	sp, #112	; 0x70
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2234      	movs	r2, #52	; 0x34
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 fee8 	bl	800a3c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <MX_TIM1_Init+0x174>)
 80015f6:	4a4d      	ldr	r2, [pc, #308]	; (800172c <MX_TIM1_Init+0x178>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 849;
 80015fa:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <MX_TIM1_Init+0x174>)
 80015fc:	f240 3251 	movw	r2, #849	; 0x351
 8001600:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <MX_TIM1_Init+0x174>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <MX_TIM1_Init+0x174>)
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <MX_TIM1_Init+0x174>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001616:	4b44      	ldr	r3, [pc, #272]	; (8001728 <MX_TIM1_Init+0x174>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <MX_TIM1_Init+0x174>)
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001622:	4841      	ldr	r0, [pc, #260]	; (8001728 <MX_TIM1_Init+0x174>)
 8001624:	f001 fdd6 	bl	80031d4 <HAL_TIM_Base_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800162e:	f7ff fe07 	bl	8001240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001636:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001638:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800163c:	4619      	mov	r1, r3
 800163e:	483a      	ldr	r0, [pc, #232]	; (8001728 <MX_TIM1_Init+0x174>)
 8001640:	f002 fda0 	bl	8004184 <HAL_TIM_ConfigClockSource>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800164a:	f7ff fdf9 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800164e:	4836      	ldr	r0, [pc, #216]	; (8001728 <MX_TIM1_Init+0x174>)
 8001650:	f001 ff56 	bl	8003500 <HAL_TIM_OC_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800165a:	f7ff fdf1 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800166e:	4619      	mov	r1, r3
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <MX_TIM1_Init+0x174>)
 8001672:	f004 f8e1 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800167c:	f7ff fde0 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001680:	2330      	movs	r3, #48	; 0x30
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016a0:	2200      	movs	r2, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	4820      	ldr	r0, [pc, #128]	; (8001728 <MX_TIM1_Init+0x174>)
 80016a6:	f002 fb9f 	bl	8003de8 <HAL_TIM_OC_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016b0:	f7ff fdc6 	bl	8001240 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM1_Init+0x174>)
 80016f2:	f004 fa05 	bl	8005b00 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80016fc:	f7ff fda0 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <MX_TIM1_Init+0x174>)
 8001702:	f001 fe49 	bl	8003398 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65535-1000);
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_TIM1_Init+0x174>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f64f 4217 	movw	r2, #64535	; 0xfc17
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001710:	2100      	movs	r1, #0
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM1_Init+0x174>)
 8001714:	f001 ffe0 	bl	80036d8 <HAL_TIM_OC_Start_IT>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM1_Init+0x174>)
 800171a:	f000 f837 	bl	800178c <HAL_TIM_MspPostInit>

}
 800171e:	bf00      	nop
 8001720:	3770      	adds	r7, #112	; 0x70
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000840 	.word	0x20000840
 800172c:	40012c00 	.word	0x40012c00

08001730 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_TIM_Base_MspInit+0x54>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11b      	bne.n	800177a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_TIM_Base_MspInit+0x58>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_TIM_Base_MspInit+0x58>)
 8001748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_TIM_Base_MspInit+0x58>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2105      	movs	r1, #5
 800175e:	2019      	movs	r0, #25
 8001760:	f000 fa42 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001764:	2019      	movs	r0, #25
 8001766:	f000 fa69 	bl	8001c3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2105      	movs	r1, #5
 800176e:	201b      	movs	r0, #27
 8001770:	f000 fa3a 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001774:	201b      	movs	r0, #27
 8001776:	f000 fa61 	bl	8001c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40012c00 	.word	0x40012c00
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_TIM_MspPostInit+0x64>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d11b      	bne.n	80017e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_TIM_MspPostInit+0x68>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_TIM_MspPostInit+0x68>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_TIM_MspPostInit+0x68>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c6:	2301      	movs	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_TIM_MspPostInit+0x6c>)
 80017e2:	f000 fa43 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012c00 	.word	0x40012c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48000800 	.word	0x48000800

080017fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <LoopForever+0x6>)
  ldr r1, =_edata
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <LoopForever+0xe>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001818:	4c0b      	ldr	r4, [pc, #44]	; (8001848 <LoopForever+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001826:	f7ff feb3 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f008 fedd 	bl	800a5e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182e:	f7ff fc9b 	bl	8001168 <main>

08001832 <LoopForever>:

LoopForever:
    b LoopForever
 8001832:	e7fe      	b.n	8001832 <LoopForever>
  ldr   r0, =_estack
 8001834:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001840:	0800b218 	.word	0x0800b218
  ldr r2, =_sbss
 8001844:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001848:	20009434 	.word	0x20009434

0800184c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_2_IRQHandler>

0800184e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
 8001860:	f7ff fcee 	bl	8001240 <Error_Handler>
 8001864:	e7fe      	b.n	8001864 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e007      	b.n	800187c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	2100      	movs	r1, #0
 8001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d9f4      	bls.n	800186c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	721a      	strb	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d104      	bne.n	80018a8 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800189e:	b672      	cpsid	i
}
 80018a0:	bf00      	nop
 80018a2:	f7ff fccd 	bl	8001240 <Error_Handler>
 80018a6:	e7fe      	b.n	80018a6 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d904      	bls.n	80018ba <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80018b0:	b672      	cpsid	i
}
 80018b2:	bf00      	nop
 80018b4:	f7ff fcc4 	bl	8001240 <Error_Handler>
 80018b8:	e7fe      	b.n	80018b8 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	b2d1      	uxtb	r1, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	7211      	strb	r1, [r2, #8]
 80018c6:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80018c8:	f3ef 8211 	mrs	r2, BASEPRI
 80018cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d0:	f383 8811 	msr	BASEPRI, r3
 80018d4:	f3bf 8f6f 	isb	sy
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	60fa      	str	r2, [r7, #12]
 80018de:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018fe:	b672      	cpsid	i
}
 8001900:	bf00      	nop
 8001902:	f7ff fc9d 	bl	8001240 <Error_Handler>
 8001906:	e7fe      	b.n	8001906 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a1b      	ldrb	r3, [r3, #8]
 800190c:	3b01      	subs	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7a1b      	ldrb	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d904      	bls.n	8001926 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
 8001920:	f7ff fc8e 	bl	8001240 <Error_Handler>
 8001924:	e7fe      	b.n	8001924 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7a1b      	ldrb	r3, [r3, #8]
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800193a:	bf00      	nop
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001952:	f008 fe43 	bl	800a5dc <__errno>
 8001956:	4603      	mov	r3, r0
 8001958:	2216      	movs	r2, #22
 800195a:	601a      	str	r2, [r3, #0]
    return;
 800195c:	e015      	b.n	800198a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800195e:	200c      	movs	r0, #12
 8001960:	f008 fa5a 	bl	8009e18 <malloc>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff68 	bl	800184e <stm32_lock_init>
    return;
 800197e:	e004      	b.n	800198a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001984:	f7ff fc5c 	bl	8001240 <Error_Handler>
 8001988:	e7fe      	b.n	8001988 <__retarget_lock_init_recursive+0x44>
}
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800199e:	b672      	cpsid	i
}
 80019a0:	bf00      	nop
 80019a2:	f7ff fc4d 	bl	8001240 <Error_Handler>
 80019a6:	e7fe      	b.n	80019a6 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff70 	bl	8001890 <stm32_lock_acquire>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80019c6:	b672      	cpsid	i
}
 80019c8:	bf00      	nop
 80019ca:	f7ff fc39 	bl	8001240 <Error_Handler>
 80019ce:	e7fe      	b.n	80019ce <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff8c 	bl	80018f0 <stm32_lock_release>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ea:	2003      	movs	r0, #3
 80019ec:	f000 f8dc 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f0:	200f      	movs	r0, #15
 80019f2:	f7ff fc5f 	bl	80012b4 <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	e001      	b.n	8001a06 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a02:	f7ff fc2d 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a06:	79fb      	ldrb	r3, [r7, #7]

}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x1c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_IncTick+0x20>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x1c>)
 8001a20:	6013      	str	r3, [r2, #0]
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200008a4 	.word	0x200008a4
 8001a30:	20000008 	.word	0x20000008

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200008a4 	.word	0x200008a4

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d00f      	beq.n	8001bd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d00c      	beq.n	8001bd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d009      	beq.n	8001bd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d006      	beq.n	8001bd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d003      	beq.n	8001bd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001bce:	21a6      	movs	r1, #166	; 0xa6
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001bd2:	f7ff fb3a 	bl	800124a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff38 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	0800af4c 	.word	0x0800af4c

08001be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d903      	bls.n	8001c04 <HAL_NVIC_SetPriority+0x1c>
 8001bfc:	21be      	movs	r1, #190	; 0xbe
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <HAL_NVIC_SetPriority+0x50>)
 8001c00:	f7ff fb23 	bl	800124a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	d903      	bls.n	8001c12 <HAL_NVIC_SetPriority+0x2a>
 8001c0a:	21bf      	movs	r1, #191	; 0xbf
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <HAL_NVIC_SetPriority+0x50>)
 8001c0e:	f7ff fb1c 	bl	800124a <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c12:	f7ff ff3f 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f7ff ff8f 	bl	8001b40 <NVIC_EncodePriority>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff5e 	bl	8001aec <__NVIC_SetPriority>
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0800af4c 	.word	0x0800af4c

08001c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da03      	bge.n	8001c56 <HAL_NVIC_EnableIRQ+0x1a>
 8001c4e:	21d2      	movs	r1, #210	; 0xd2
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_NVIC_EnableIRQ+0x2c>)
 8001c52:	f7ff fafa 	bl	800124a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff28 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	0800af4c 	.word	0x0800af4c

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c80:	d01b      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0xfc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d017      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <HAL_GPIO_Init+0x100>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <HAL_GPIO_Init+0x104>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00f      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a35      	ldr	r2, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x108>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00b      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_GPIO_Init+0x10c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a33      	ldr	r2, [pc, #204]	; (8001d7c <HAL_GPIO_Init+0x110>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x4e>
 8001cb2:	21a9      	movs	r1, #169	; 0xa9
 8001cb4:	4832      	ldr	r0, [pc, #200]	; (8001d80 <HAL_GPIO_Init+0x114>)
 8001cb6:	f7ff fac8 	bl	800124a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x64>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x6c>
 8001cd0:	21aa      	movs	r1, #170	; 0xaa
 8001cd2:	482b      	ldr	r0, [pc, #172]	; (8001d80 <HAL_GPIO_Init+0x114>)
 8001cd4:	f7ff fab9 	bl	800124a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 820a 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	f000 8205 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b11      	cmp	r3, #17
 8001cf2:	f000 8200 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f000 81fb 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	f000 81f6 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001d12:	f000 81f0 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001d1e:	f000 81ea 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001d2a:	f000 81e4 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001d36:	f000 81de 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001d42:	f000 81d8 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001d4e:	f000 81d2 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	f000 81cd 	beq.w	80020f6 <HAL_GPIO_Init+0x48a>
 8001d5c:	21ab      	movs	r1, #171	; 0xab
 8001d5e:	4808      	ldr	r0, [pc, #32]	; (8001d80 <HAL_GPIO_Init+0x114>)
 8001d60:	f7ff fa73 	bl	800124a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d64:	e1c7      	b.n	80020f6 <HAL_GPIO_Init+0x48a>
 8001d66:	bf00      	nop
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	48000c00 	.word	0x48000c00
 8001d74:	48001000 	.word	0x48001000
 8001d78:	48001400 	.word	0x48001400
 8001d7c:	48001800 	.word	0x48001800
 8001d80:	0800af88 	.word	0x0800af88
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 81aa 	beq.w	80020f0 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d005      	beq.n	8001db4 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d144      	bne.n	8001e3e <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00f      	beq.n	8001ddc <HAL_GPIO_Init+0x170>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d00b      	beq.n	8001ddc <HAL_GPIO_Init+0x170>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x170>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x170>
 8001dd4:	21bb      	movs	r1, #187	; 0xbb
 8001dd6:	488b      	ldr	r0, [pc, #556]	; (8002004 <HAL_GPIO_Init+0x398>)
 8001dd8:	f7ff fa37 	bl	800124a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e12:	2201      	movs	r2, #1
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 0201 	and.w	r2, r3, #1
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d027      	beq.n	8001e9a <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_GPIO_Init+0x1fe>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x1fe>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x1fe>
 8001e62:	21cc      	movs	r1, #204	; 0xcc
 8001e64:	4867      	ldr	r0, [pc, #412]	; (8002004 <HAL_GPIO_Init+0x398>)
 8001e66:	f7ff f9f0 	bl	800124a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d14b      	bne.n	8001f3e <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eac:	d01b      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_GPIO_Init+0x39c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d017      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_GPIO_Init+0x3a0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a53      	ldr	r2, [pc, #332]	; (8002010 <HAL_GPIO_Init+0x3a4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00f      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_GPIO_Init+0x3a8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a51      	ldr	r2, [pc, #324]	; (8002018 <HAL_GPIO_Init+0x3ac>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a50      	ldr	r2, [pc, #320]	; (800201c <HAL_GPIO_Init+0x3b0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x27a>
 8001ede:	21d9      	movs	r1, #217	; 0xd9
 8001ee0:	4848      	ldr	r0, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x398>)
 8001ee2:	f7ff f9b2 	bl	800124a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	d903      	bls.n	8001ef6 <HAL_GPIO_Init+0x28a>
 8001eee:	21da      	movs	r1, #218	; 0xda
 8001ef0:	4844      	ldr	r0, [pc, #272]	; (8002004 <HAL_GPIO_Init+0x398>)
 8001ef2:	f7ff f9aa 	bl	800124a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	6939      	ldr	r1, [r7, #16]
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80b8 	beq.w	80020f0 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_GPIO_Init+0x3b4>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	4a26      	ldr	r2, [pc, #152]	; (8002020 <HAL_GPIO_Init+0x3b4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_GPIO_Init+0x3b4>)
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f98:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x3b8>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fc2:	d031      	beq.n	8002028 <HAL_GPIO_Init+0x3bc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_GPIO_Init+0x39c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d019      	beq.n	8002000 <HAL_GPIO_Init+0x394>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_GPIO_Init+0x3a0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x390>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_GPIO_Init+0x3a4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x38c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_GPIO_Init+0x3a8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x388>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_GPIO_Init+0x3ac>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x384>
 8001fec:	2305      	movs	r3, #5
 8001fee:	e01c      	b.n	800202a <HAL_GPIO_Init+0x3be>
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	e01a      	b.n	800202a <HAL_GPIO_Init+0x3be>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e018      	b.n	800202a <HAL_GPIO_Init+0x3be>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e016      	b.n	800202a <HAL_GPIO_Init+0x3be>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e014      	b.n	800202a <HAL_GPIO_Init+0x3be>
 8002000:	2301      	movs	r3, #1
 8002002:	e012      	b.n	800202a <HAL_GPIO_Init+0x3be>
 8002004:	0800af88 	.word	0x0800af88
 8002008:	48000400 	.word	0x48000400
 800200c:	48000800 	.word	0x48000800
 8002010:	48000c00 	.word	0x48000c00
 8002014:	48001000 	.word	0x48001000
 8002018:	48001400 	.word	0x48001400
 800201c:	48001800 	.word	0x48001800
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	2300      	movs	r3, #0
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203a:	4935      	ldr	r1, [pc, #212]	; (8002110 <HAL_GPIO_Init+0x4a4>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_GPIO_Init+0x4a8>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f ae3f 	bne.w	8001d84 <HAL_GPIO_Init+0x118>
  }
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40010000 	.word	0x40010000
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_GPIO_WritePin+0x20>
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <HAL_GPIO_WritePin+0x2a>
 8002138:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <HAL_GPIO_WritePin+0x5c>)
 800213e:	f7ff f884 	bl	800124a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002142:	787b      	ldrb	r3, [r7, #1]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_WritePin+0x40>
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d004      	beq.n	8002158 <HAL_GPIO_WritePin+0x40>
 800214e:	f240 119b 	movw	r1, #411	; 0x19b
 8002152:	4808      	ldr	r0, [pc, #32]	; (8002174 <HAL_GPIO_WritePin+0x5c>)
 8002154:	f7ff f879 	bl	800124a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002164:	e002      	b.n	800216c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800af88 	.word	0x0800af88

08002178 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_GPIO_TogglePin+0x1c>
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_GPIO_TogglePin+0x26>
 8002194:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002198:	480a      	ldr	r0, [pc, #40]	; (80021c4 <HAL_GPIO_TogglePin+0x4c>)
 800219a:	f7ff f856 	bl	800124a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	400b      	ands	r3, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	0800af88 	.word	0x0800af88

080021c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f806 	bl	80021f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x26>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002224:	d007      	beq.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x26>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d003      	beq.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x26>
 800222e:	219d      	movs	r1, #157	; 0x9d
 8002230:	484d      	ldr	r0, [pc, #308]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8002232:	f7ff f80a 	bl	800124a <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d141      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d131      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800224a:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800224c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002250:	4a46      	ldr	r2, [pc, #280]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002256:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002262:	4a42      	ldr	r2, [pc, #264]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2232      	movs	r2, #50	; 0x32
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9b      	lsrs	r3, r3, #18
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002280:	e002      	b.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b01      	subs	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002288:	4b38      	ldr	r3, [pc, #224]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d102      	bne.n	800229c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f2      	bne.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d158      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e057      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022be:	e04d      	b.n	800235c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c6:	d141      	bne.n	800234c <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d131      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80022f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2232      	movs	r2, #50	; 0x32
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9b      	lsrs	r3, r3, #18
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230c:	e002      	b.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3b01      	subs	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002320:	d102      	bne.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x118>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f2      	bne.n	800230e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	d112      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e011      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800233c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800234a:	e007      	b.n	800235c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	0800afc4 	.word	0x0800afc4
 800236c:	40007000 	.word	0x40007000
 8002370:	20000000 	.word	0x20000000
 8002374:	431bde83 	.word	0x431bde83

08002378 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002386:	6093      	str	r3, [r2, #8]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f000 bc02 	b.w	8002bb0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d022      	beq.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11c      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d116      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d110      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023f0:	f240 1145 	movw	r1, #325	; 0x145
 80023f4:	4892      	ldr	r0, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x2a8>)
 80023f6:	f7fe ff28 	bl	800124a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8089 	beq.w	800251a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <HAL_RCC_OscConfig+0x96>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d009      	beq.n	800242e <HAL_RCC_OscConfig+0x96>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002422:	d004      	beq.n	800242e <HAL_RCC_OscConfig+0x96>
 8002424:	f240 114b 	movw	r1, #331	; 0x14b
 8002428:	4885      	ldr	r0, [pc, #532]	; (8002640 <HAL_RCC_OscConfig+0x2a8>)
 800242a:	f7fe ff0e 	bl	800124a <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002438:	4b82      	ldr	r3, [pc, #520]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d102      	bne.n	800244e <HAL_RCC_OscConfig+0xb6>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d002      	beq.n	8002454 <HAL_RCC_OscConfig+0xbc>
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d10b      	bne.n	800246c <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4b7b      	ldr	r3, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x180>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d157      	bne.n	8002518 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e3a1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0xec>
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0x128>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x110>
 800248e:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6c      	ldr	r2, [pc, #432]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a69      	ldr	r2, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x128>
 80024a8:	4b66      	ldr	r3, [pc, #408]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a65      	ldr	r2, [pc, #404]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a62      	ldr	r2, [pc, #392]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fab4 	bl	8001a34 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fab0 	bl	8001a34 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e366      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x138>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff faa0 	bl	8001a34 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fa9c 	bl	8001a34 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e352      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x160>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8093 	beq.w	800264e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_RCC_OscConfig+0x1ac>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d004      	beq.n	8002544 <HAL_RCC_OscConfig+0x1ac>
 800253a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800253e:	4840      	ldr	r0, [pc, #256]	; (8002640 <HAL_RCC_OscConfig+0x2a8>)
 8002540:	f7fe fe83 	bl	800124a <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b7f      	cmp	r3, #127	; 0x7f
 800254a:	d904      	bls.n	8002556 <HAL_RCC_OscConfig+0x1be>
 800254c:	f240 1181 	movw	r1, #385	; 0x181
 8002550:	483b      	ldr	r0, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x2a8>)
 8002552:	f7fe fe7a 	bl	800124a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d102      	bne.n	8002576 <HAL_RCC_OscConfig+0x1de>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d002      	beq.n	800257c <HAL_RCC_OscConfig+0x1e4>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d11f      	bne.n	80025bc <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x1fc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e30d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	4928      	ldr	r1, [pc, #160]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x2b0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fe81 	bl	80012b4 <HAL_InitTick>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d049      	beq.n	800264c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e2f9      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d023      	beq.n	800260c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fa30 	bl	8001a34 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7ff fa2c 	bl	8001a34 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e2e2      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
 800260a:	e020      	b.n	800264e <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff fa0c 	bl	8001a34 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff fa08 	bl	8001a34 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e2be      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x288>
 800263e:	e006      	b.n	800264e <HAL_RCC_OscConfig+0x2b6>
 8002640:	0800b000 	.word	0x0800b000
 8002644:	40021000 	.word	0x40021000
 8002648:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d049      	beq.n	80026ee <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_RCC_OscConfig+0x2dc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d004      	beq.n	8002674 <HAL_RCC_OscConfig+0x2dc>
 800266a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800266e:	48a3      	ldr	r0, [pc, #652]	; (80028fc <HAL_RCC_OscConfig+0x564>)
 8002670:	f7fe fdeb 	bl	800124a <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267c:	4ba0      	ldr	r3, [pc, #640]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002682:	4a9f      	ldr	r2, [pc, #636]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7ff f9d2 	bl	8001a34 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff f9ce 	bl	8001a34 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e284      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a6:	4b96      	ldr	r3, [pc, #600]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <HAL_RCC_OscConfig+0x2fc>
 80026b4:	e01b      	b.n	80026ee <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b6:	4b92      	ldr	r3, [pc, #584]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80026b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026bc:	4a90      	ldr	r2, [pc, #576]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7ff f9b5 	bl	8001a34 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ce:	f7ff f9b1 	bl	8001a34 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e267      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e0:	4b87      	ldr	r3, [pc, #540]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ef      	bne.n	80026ce <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80b7 	beq.w	800286a <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fc:	2300      	movs	r3, #0
 80026fe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_RCC_OscConfig+0x38a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d008      	beq.n	8002722 <HAL_RCC_OscConfig+0x38a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d004      	beq.n	8002722 <HAL_RCC_OscConfig+0x38a>
 8002718:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800271c:	4877      	ldr	r0, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x564>)
 800271e:	f7fe fd94 	bl	800124a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002722:	4b77      	ldr	r3, [pc, #476]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x39a>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x39c>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a70      	ldr	r2, [pc, #448]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
 8002744:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002750:	2301      	movs	r3, #1
 8002752:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002754:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <HAL_RCC_OscConfig+0x56c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d118      	bne.n	8002792 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <HAL_RCC_OscConfig+0x56c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a67      	ldr	r2, [pc, #412]	; (8002904 <HAL_RCC_OscConfig+0x56c>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276c:	f7ff f962 	bl	8001a34 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7ff f95e 	bl	8001a34 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e214      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x56c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_RCC_OscConfig+0x414>
 800279a:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027aa:	e024      	b.n	80027f6 <HAL_RCC_OscConfig+0x45e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d110      	bne.n	80027d6 <HAL_RCC_OscConfig+0x43e>
 80027b4:	4b52      	ldr	r3, [pc, #328]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a51      	ldr	r2, [pc, #324]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c4:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d4:	e00f      	b.n	80027f6 <HAL_RCC_OscConfig+0x45e>
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a48      	ldr	r2, [pc, #288]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e6:	4b46      	ldr	r3, [pc, #280]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	4a44      	ldr	r2, [pc, #272]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7ff f919 	bl	8001a34 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7ff f915 	bl	8001a34 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1c9      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ed      	beq.n	8002806 <HAL_RCC_OscConfig+0x46e>
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7ff f902 	bl	8001a34 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7ff f8fe 	bl	8001a34 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e1b2      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ed      	bne.n	8002834 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d04f      	beq.n	8002916 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_RCC_OscConfig+0x4f8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d004      	beq.n	8002890 <HAL_RCC_OscConfig+0x4f8>
 8002886:	f240 213b 	movw	r1, #571	; 0x23b
 800288a:	481c      	ldr	r0, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0x564>)
 800288c:	f7fe fcdd 	bl	800124a <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 800289a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7ff f8c4 	bl	8001a34 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b0:	f7ff f8c0 	bl	8001a34 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e176      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80028c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCC_OscConfig+0x518>
 80028d0:	e021      	b.n	8002916 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80028d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_OscConfig+0x568>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7ff f8a7 	bl	8001a34 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028e8:	e00e      	b.n	8002908 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ea:	f7ff f8a3 	bl	8001a34 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d907      	bls.n	8002908 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e159      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
 80028fc:	0800b000 	.word	0x0800b000
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002908:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 800290a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e9      	bne.n	80028ea <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x5a0>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d008      	beq.n	8002938 <HAL_RCC_OscConfig+0x5a0>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d004      	beq.n	8002938 <HAL_RCC_OscConfig+0x5a0>
 800292e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8002932:	4880      	ldr	r0, [pc, #512]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 8002934:	f7fe fc89 	bl	800124a <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8136 	beq.w	8002bae <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002942:	4b7b      	ldr	r3, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b0c      	cmp	r3, #12
 800294c:	f000 80ea 	beq.w	8002b24 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 80bd 	bne.w	8002ad4 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_RCC_OscConfig+0x5e4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d008      	beq.n	800297c <HAL_RCC_OscConfig+0x5e4>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d004      	beq.n	800297c <HAL_RCC_OscConfig+0x5e4>
 8002972:	f240 216e 	movw	r1, #622	; 0x26e
 8002976:	486f      	ldr	r0, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 8002978:	f7fe fc67 	bl	800124a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_RCC_OscConfig+0x5f4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2b10      	cmp	r3, #16
 800298a:	d904      	bls.n	8002996 <HAL_RCC_OscConfig+0x5fe>
 800298c:	f240 216f 	movw	r1, #623	; 0x26f
 8002990:	4868      	ldr	r0, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 8002992:	f7fe fc5a 	bl	800124a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	2b07      	cmp	r3, #7
 800299c:	d903      	bls.n	80029a6 <HAL_RCC_OscConfig+0x60e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	2b7f      	cmp	r3, #127	; 0x7f
 80029a4:	d904      	bls.n	80029b0 <HAL_RCC_OscConfig+0x618>
 80029a6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80029aa:	4862      	ldr	r0, [pc, #392]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 80029ac:	f7fe fc4d 	bl	800124a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d903      	bls.n	80029c0 <HAL_RCC_OscConfig+0x628>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	2b1f      	cmp	r3, #31
 80029be:	d904      	bls.n	80029ca <HAL_RCC_OscConfig+0x632>
 80029c0:	f240 2171 	movw	r1, #625	; 0x271
 80029c4:	485b      	ldr	r0, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 80029c6:	f7fe fc40 	bl	800124a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d010      	beq.n	80029f4 <HAL_RCC_OscConfig+0x65c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d00c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x65c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d008      	beq.n	80029f4 <HAL_RCC_OscConfig+0x65c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d004      	beq.n	80029f4 <HAL_RCC_OscConfig+0x65c>
 80029ea:	f240 2172 	movw	r1, #626	; 0x272
 80029ee:	4851      	ldr	r0, [pc, #324]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 80029f0:	f7fe fc2b 	bl	800124a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_OscConfig+0x686>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x686>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_OscConfig+0x686>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d004      	beq.n	8002a1e <HAL_RCC_OscConfig+0x686>
 8002a14:	f240 2173 	movw	r1, #627	; 0x273
 8002a18:	4846      	ldr	r0, [pc, #280]	; (8002b34 <HAL_RCC_OscConfig+0x79c>)
 8002a1a:	f7fe fc16 	bl	800124a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a43      	ldr	r2, [pc, #268]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7ff f803 	bl	8001a34 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe ffff 	bl	8001a34 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0b5      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x7a0>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6a11      	ldr	r1, [r2, #32]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a6a:	0212      	lsls	r2, r2, #8
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0552      	lsls	r2, r2, #21
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7e:	0852      	lsrs	r2, r2, #1
 8002a80:	3a01      	subs	r2, #1
 8002a82:	0652      	lsls	r2, r2, #25
 8002a84:	4311      	orrs	r1, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a8a:	06d2      	lsls	r2, r2, #27
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4928      	ldr	r1, [pc, #160]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe ffc2 	bl	8001a34 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe ffbe 	bl	8001a34 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e074      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x71c>
 8002ad2:	e06c      	b.n	8002bae <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ade:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002af2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe ff9a 	bl	8001a34 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe ff96 	bl	8001a34 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e04c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_OscConfig+0x798>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x76c>
 8002b22:	e044      	b.n	8002bae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e03f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	0800b000 	.word	0x0800b000
 8002b38:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <HAL_RCC_OscConfig+0x820>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d12c      	bne.n	8002baa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d123      	bne.n	8002baa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11b      	bne.n	8002baa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d113      	bne.n	8002baa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e1e2      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x30>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 030f 	bic.w	r3, r3, #15
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x3a>
 8002bec:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8002bf0:	4869      	ldr	r0, [pc, #420]	; (8002d98 <HAL_RCC_ClockConfig+0x1dc>)
 8002bf2:	f7fe fb2a 	bl	800124a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d031      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d02e      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d02b      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d025      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d022      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d01f      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d01c      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d019      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b09      	cmp	r3, #9
 8002c30:	d016      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b0a      	cmp	r3, #10
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b0b      	cmp	r3, #11
 8002c3c:	d010      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b0d      	cmp	r3, #13
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b0e      	cmp	r3, #14
 8002c4e:	d007      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	d004      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa4>
 8002c56:	f240 310d 	movw	r1, #781	; 0x30d
 8002c5a:	484f      	ldr	r0, [pc, #316]	; (8002d98 <HAL_RCC_ClockConfig+0x1dc>)
 8002c5c:	f7fe faf5 	bl	800124a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_RCC_ClockConfig+0x1e0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <HAL_RCC_ClockConfig+0x1e0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4949      	ldr	r1, [pc, #292]	; (8002d9c <HAL_RCC_ClockConfig+0x1e0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_ClockConfig+0x1e0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e184      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 808e 	beq.w	8002dba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x104>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x104>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d004      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x104>
 8002cb6:	f44f 7149 	mov.w	r1, #804	; 0x324
 8002cba:	4837      	ldr	r0, [pc, #220]	; (8002d98 <HAL_RCC_ClockConfig+0x1dc>)
 8002cbc:	f7fe fac5 	bl	800124a <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d129      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e160      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cd8:	f000 fa36 	bl	8003148 <RCC_GetSysClockFreqFromPLLSource>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <HAL_RCC_ClockConfig+0x1e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d93f      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d033      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d12f      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0e:	4a24      	ldr	r2, [pc, #144]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e024      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e132      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d34:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e12a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d44:	f000 f93a 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_RCC_ClockConfig+0x1e8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d909      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	490b      	ldr	r1, [pc, #44]	; (8002da0 <HAL_RCC_ClockConfig+0x1e4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe fe5c 	bl	8001a34 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e013      	b.n	8002da8 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fe fe58 	bl	8001a34 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d90a      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e101      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
 8002d96:	bf00      	nop
 8002d98:	0800b000 	.word	0x0800b000
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da8:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 020c 	and.w	r2, r3, #12
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d1e2      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04c      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd2:	4b74      	ldr	r3, [pc, #464]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002dd8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ddc:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002df2:	4a6c      	ldr	r2, [pc, #432]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002df4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df8:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d024      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	d020      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b90      	cmp	r3, #144	; 0x90
 8002e10:	d01c      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2ba0      	cmp	r3, #160	; 0xa0
 8002e18:	d018      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2bb0      	cmp	r3, #176	; 0xb0
 8002e20:	d014      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2bc0      	cmp	r3, #192	; 0xc0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2bd0      	cmp	r3, #208	; 0xd0
 8002e30:	d00c      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2be0      	cmp	r3, #224	; 0xe0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2bf0      	cmp	r3, #240	; 0xf0
 8002e40:	d004      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x290>
 8002e42:	f240 317b 	movw	r1, #891	; 0x37b
 8002e46:	4858      	ldr	r0, [pc, #352]	; (8002fa8 <HAL_RCC_ClockConfig+0x3ec>)
 8002e48:	f7fe f9ff 	bl	800124a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4952      	ldr	r1, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e66:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a4e      	ldr	r2, [pc, #312]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <HAL_RCC_ClockConfig+0x3f0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d21d      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_ClockConfig+0x3f0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	4948      	ldr	r1, [pc, #288]	; (8002fac <HAL_RCC_ClockConfig+0x3f0>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fdd0 	bl	8001a34 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fdcc 	bl	8001a34 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e075      	b.n	8002f9a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_ClockConfig+0x3f0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1ed      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d025      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d018      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x346>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d013      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x346>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002ee2:	d00e      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x346>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x346>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ef6:	d004      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x346>
 8002ef8:	f240 319d 	movw	r1, #925	; 0x39d
 8002efc:	482a      	ldr	r0, [pc, #168]	; (8002fa8 <HAL_RCC_ClockConfig+0x3ec>)
 8002efe:	f7fe f9a4 	bl	800124a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4925      	ldr	r1, [pc, #148]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d026      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x39e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d013      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x39e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f3a:	d00e      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x39e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x39e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f4e:	d004      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x39e>
 8002f50:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002f54:	4814      	ldr	r0, [pc, #80]	; (8002fa8 <HAL_RCC_ClockConfig+0x3ec>)
 8002f56:	f7fe f978 	bl	800124a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f6e:	f000 f825 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x3e8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <HAL_RCC_ClockConfig+0x3f4>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x3f8>)
 8002f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x3fc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe f98e 	bl	80012b4 <HAL_InitTick>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	0800b000 	.word	0x0800b000
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	0800b150 	.word	0x0800b150
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	e047      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e03e      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fe6:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d136      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3301      	adds	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d10c      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301a:	68d2      	ldr	r2, [r2, #12]
 800301c:	0a12      	lsrs	r2, r2, #8
 800301e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	617b      	str	r3, [r7, #20]
      break;
 8003028:	e00c      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800302a:	4a13      	ldr	r2, [pc, #76]	; (8003078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	0a12      	lsrs	r2, r2, #8
 8003038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
      break;
 8003042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0e5b      	lsrs	r3, r3, #25
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e001      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003064:	693b      	ldr	r3, [r7, #16]
}
 8003066:	4618      	mov	r0, r3
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	00f42400 	.word	0x00f42400
 800307c:	016e3600 	.word	0x016e3600

08003080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800b160 	.word	0x0800b160

080030c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_RCC_GetClockConfig+0x1a>
 80030d4:	f240 41e4 	movw	r1, #1252	; 0x4e4
 80030d8:	4818      	ldr	r0, [pc, #96]	; (800313c <HAL_RCC_GetClockConfig+0x78>)
 80030da:	f7fe f8b6 	bl	800124a <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <HAL_RCC_GetClockConfig+0x2a>
 80030e4:	f240 41e5 	movw	r1, #1253	; 0x4e5
 80030e8:	4814      	ldr	r0, [pc, #80]	; (800313c <HAL_RCC_GetClockConfig+0x78>)
 80030ea:	f7fe f8ae 	bl	800124a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	220f      	movs	r2, #15
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_GetClockConfig+0x7c>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_RCC_GetClockConfig+0x7c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_RCC_GetClockConfig+0x7c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_GetClockConfig+0x7c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_RCC_GetClockConfig+0x80>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	0800b000 	.word	0x0800b000
 8003140:	40021000 	.word	0x40021000
 8003144:	40022000 	.word	0x40022000

08003148 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d10c      	bne.n	8003186 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003176:	68d2      	ldr	r2, [r2, #12]
 8003178:	0a12      	lsrs	r2, r2, #8
 800317a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
    break;
 8003184:	e00c      	b.n	80031a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003190:	68d2      	ldr	r2, [r2, #12]
 8003192:	0a12      	lsrs	r2, r2, #8
 8003194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
    break;
 800319e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0e5b      	lsrs	r3, r3, #25
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	3301      	adds	r3, #1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031ba:	687b      	ldr	r3, [r7, #4]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000
 80031cc:	016e3600 	.word	0x016e3600
 80031d0:	00f42400 	.word	0x00f42400

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0be      	b.n	8003364 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a60      	ldr	r2, [pc, #384]	; (800336c <HAL_TIM_Base_Init+0x198>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d036      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d031      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_TIM_Base_Init+0x19c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d02c      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5a      	ldr	r2, [pc, #360]	; (8003374 <HAL_TIM_Base_Init+0x1a0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d027      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a59      	ldr	r2, [pc, #356]	; (8003378 <HAL_TIM_Base_Init+0x1a4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_TIM_Base_Init+0x1a8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01d      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_TIM_Base_Init+0x1ac>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_TIM_Base_Init+0x1b0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a53      	ldr	r2, [pc, #332]	; (8003388 <HAL_TIM_Base_Init+0x1b4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_TIM_Base_Init+0x1b8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_TIM_Base_Init+0x1bc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_TIM_Base_Init+0x8a>
 8003254:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003258:	484e      	ldr	r0, [pc, #312]	; (8003394 <HAL_TIM_Base_Init+0x1c0>)
 800325a:	f7fd fff6 	bl	800124a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <HAL_TIM_Base_Init+0xbc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b10      	cmp	r3, #16
 800326c:	d010      	beq.n	8003290 <HAL_TIM_Base_Init+0xbc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b20      	cmp	r3, #32
 8003274:	d00c      	beq.n	8003290 <HAL_TIM_Base_Init+0xbc>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d008      	beq.n	8003290 <HAL_TIM_Base_Init+0xbc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b60      	cmp	r3, #96	; 0x60
 8003284:	d004      	beq.n	8003290 <HAL_TIM_Base_Init+0xbc>
 8003286:	f240 1123 	movw	r1, #291	; 0x123
 800328a:	4842      	ldr	r0, [pc, #264]	; (8003394 <HAL_TIM_Base_Init+0x1c0>)
 800328c:	f7fd ffdd 	bl	800124a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <HAL_TIM_Base_Init+0xe2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d009      	beq.n	80032b6 <HAL_TIM_Base_Init+0xe2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032aa:	d004      	beq.n	80032b6 <HAL_TIM_Base_Init+0xe2>
 80032ac:	f44f 7192 	mov.w	r1, #292	; 0x124
 80032b0:	4838      	ldr	r0, [pc, #224]	; (8003394 <HAL_TIM_Base_Init+0x1c0>)
 80032b2:	f7fd ffca 	bl	800124a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_TIM_Base_Init+0xfc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d004      	beq.n	80032d0 <HAL_TIM_Base_Init+0xfc>
 80032c6:	f240 1125 	movw	r1, #293	; 0x125
 80032ca:	4832      	ldr	r0, [pc, #200]	; (8003394 <HAL_TIM_Base_Init+0x1c0>)
 80032cc:	f7fd ffbd 	bl	800124a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fe fa23 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f001 fd1b 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40001000 	.word	0x40001000
 800337c:	40001400 	.word	0x40001400
 8003380:	40013400 	.word	0x40013400
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800
 8003390:	40015000 	.word	0x40015000
 8003394:	0800b038 	.word	0x0800b038

08003398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_TIM_Base_Start_IT+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d036      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d031      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a46      	ldr	r2, [pc, #280]	; (80034d4 <HAL_TIM_Base_Start_IT+0x13c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02c      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <HAL_TIM_Base_Start_IT+0x140>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d027      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a43      	ldr	r2, [pc, #268]	; (80034dc <HAL_TIM_Base_Start_IT+0x144>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d022      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <HAL_TIM_Base_Start_IT+0x148>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d01d      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <HAL_TIM_Base_Start_IT+0x14c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d018      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a3f      	ldr	r2, [pc, #252]	; (80034e8 <HAL_TIM_Base_Start_IT+0x150>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3d      	ldr	r2, [pc, #244]	; (80034ec <HAL_TIM_Base_Start_IT+0x154>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3c      	ldr	r2, [pc, #240]	; (80034f0 <HAL_TIM_Base_Start_IT+0x158>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3a      	ldr	r2, [pc, #232]	; (80034f4 <HAL_TIM_Base_Start_IT+0x15c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 800340e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003412:	4839      	ldr	r0, [pc, #228]	; (80034f8 <HAL_TIM_Base_Start_IT+0x160>)
 8003414:	f7fd ff19 	bl	800124a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d001      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04f      	b.n	80034c8 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_TIM_Base_Start_IT+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0xee>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d018      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0xee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_TIM_Base_Start_IT+0x13c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0xee>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_TIM_Base_Start_IT+0x140>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0xee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_TIM_Base_Start_IT+0x14c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0xee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_TIM_Base_Start_IT+0x150>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0xee>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_TIM_Base_Start_IT+0x15c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d115      	bne.n	80034b2 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_TIM_Base_Start_IT+0x164>)
 800348e:	4013      	ands	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b06      	cmp	r3, #6
 8003496:	d015      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x12c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d011      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b0:	e008      	b.n	80034c4 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40001000 	.word	0x40001000
 80034e0:	40001400 	.word	0x40001400
 80034e4:	40013400 	.word	0x40013400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800
 80034f4:	40015000 	.word	0x40015000
 80034f8:	0800b038 	.word	0x0800b038
 80034fc:	00010007 	.word	0x00010007

08003500 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0be      	b.n	8003690 <HAL_TIM_OC_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_TIM_OC_Init+0x198>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d031      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a5c      	ldr	r2, [pc, #368]	; (800369c <HAL_TIM_OC_Init+0x19c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5a      	ldr	r2, [pc, #360]	; (80036a0 <HAL_TIM_OC_Init+0x1a0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a59      	ldr	r2, [pc, #356]	; (80036a4 <HAL_TIM_OC_Init+0x1a4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a57      	ldr	r2, [pc, #348]	; (80036a8 <HAL_TIM_OC_Init+0x1a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a56      	ldr	r2, [pc, #344]	; (80036ac <HAL_TIM_OC_Init+0x1ac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <HAL_TIM_OC_Init+0x1b0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a53      	ldr	r2, [pc, #332]	; (80036b4 <HAL_TIM_OC_Init+0x1b4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a51      	ldr	r2, [pc, #324]	; (80036b8 <HAL_TIM_OC_Init+0x1b8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a50      	ldr	r2, [pc, #320]	; (80036bc <HAL_TIM_OC_Init+0x1bc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIM_OC_Init+0x8a>
 8003580:	f240 21a1 	movw	r1, #673	; 0x2a1
 8003584:	484e      	ldr	r0, [pc, #312]	; (80036c0 <HAL_TIM_OC_Init+0x1c0>)
 8003586:	f7fd fe60 	bl	800124a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d014      	beq.n	80035bc <HAL_TIM_OC_Init+0xbc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d010      	beq.n	80035bc <HAL_TIM_OC_Init+0xbc>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d00c      	beq.n	80035bc <HAL_TIM_OC_Init+0xbc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d008      	beq.n	80035bc <HAL_TIM_OC_Init+0xbc>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b60      	cmp	r3, #96	; 0x60
 80035b0:	d004      	beq.n	80035bc <HAL_TIM_OC_Init+0xbc>
 80035b2:	f240 21a2 	movw	r1, #674	; 0x2a2
 80035b6:	4842      	ldr	r0, [pc, #264]	; (80036c0 <HAL_TIM_OC_Init+0x1c0>)
 80035b8:	f7fd fe47 	bl	800124a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_TIM_OC_Init+0xe2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035cc:	d009      	beq.n	80035e2 <HAL_TIM_OC_Init+0xe2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d6:	d004      	beq.n	80035e2 <HAL_TIM_OC_Init+0xe2>
 80035d8:	f240 21a3 	movw	r1, #675	; 0x2a3
 80035dc:	4838      	ldr	r0, [pc, #224]	; (80036c0 <HAL_TIM_OC_Init+0x1c0>)
 80035de:	f7fd fe34 	bl	800124a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_TIM_OC_Init+0xfc>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_OC_Init+0xfc>
 80035f2:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 80035f6:	4832      	ldr	r0, [pc, #200]	; (80036c0 <HAL_TIM_OC_Init+0x1c0>)
 80035f8:	f7fd fe27 	bl	800124a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <HAL_TIM_OC_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f857 	bl	80036c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f001 fb85 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40001000 	.word	0x40001000
 80036a8:	40001400 	.word	0x40001400
 80036ac:	40013400 	.word	0x40013400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40015000 	.word	0x40015000
 80036c0:	0800b038 	.word	0x0800b038

080036c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a89      	ldr	r2, [pc, #548]	; (8003910 <HAL_TIM_OC_Start_IT+0x238>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d117      	bne.n	8003720 <HAL_TIM_OC_Start_IT+0x48>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8095 	beq.w	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	f000 8091 	beq.w	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b08      	cmp	r3, #8
 8003704:	f000 808d 	beq.w	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b0c      	cmp	r3, #12
 800370c:	f000 8089 	beq.w	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b10      	cmp	r3, #16
 8003714:	f000 8085 	beq.w	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b14      	cmp	r3, #20
 800371c:	f000 8081 	beq.w	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d10b      	bne.n	8003742 <HAL_TIM_OC_Start_IT+0x6a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d078      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b04      	cmp	r3, #4
 8003734:	d075      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d072      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d06f      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a73      	ldr	r2, [pc, #460]	; (8003914 <HAL_TIM_OC_Start_IT+0x23c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10b      	bne.n	8003764 <HAL_TIM_OC_Start_IT+0x8c>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d067      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d064      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d061      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d05e      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6b      	ldr	r2, [pc, #428]	; (8003918 <HAL_TIM_OC_Start_IT+0x240>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10b      	bne.n	8003786 <HAL_TIM_OC_Start_IT+0xae>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d056      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d053      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d050      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d04d      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a64      	ldr	r2, [pc, #400]	; (800391c <HAL_TIM_OC_Start_IT+0x244>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_OC_Start_IT+0xdc>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d045      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d042      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d03f      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d03c      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d039      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b14      	cmp	r3, #20
 80037b2:	d036      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a59      	ldr	r2, [pc, #356]	; (8003920 <HAL_TIM_OC_Start_IT+0x248>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d105      	bne.n	80037ca <HAL_TIM_OC_Start_IT+0xf2>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02e      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d02b      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a55      	ldr	r2, [pc, #340]	; (8003924 <HAL_TIM_OC_Start_IT+0x24c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d102      	bne.n	80037da <HAL_TIM_OC_Start_IT+0x102>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_TIM_OC_Start_IT+0x250>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d102      	bne.n	80037ea <HAL_TIM_OC_Start_IT+0x112>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01b      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4f      	ldr	r2, [pc, #316]	; (800392c <HAL_TIM_OC_Start_IT+0x254>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_TIM_OC_Start_IT+0x140>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d010      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d00d      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d00a      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b10      	cmp	r3, #16
 8003810:	d007      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b14      	cmp	r3, #20
 8003816:	d004      	beq.n	8003822 <HAL_TIM_OC_Start_IT+0x14a>
 8003818:	f240 3185 	movw	r1, #901	; 0x385
 800381c:	4844      	ldr	r0, [pc, #272]	; (8003930 <HAL_TIM_OC_Start_IT+0x258>)
 800381e:	f7fd fd14 	bl	800124a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_TIM_OC_Start_IT+0x164>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e03c      	b.n	80038b6 <HAL_TIM_OC_Start_IT+0x1de>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d109      	bne.n	8003856 <HAL_TIM_OC_Start_IT+0x17e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e02f      	b.n	80038b6 <HAL_TIM_OC_Start_IT+0x1de>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d109      	bne.n	8003870 <HAL_TIM_OC_Start_IT+0x198>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_OC_Start_IT+0x1de>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d109      	bne.n	800388a <HAL_TIM_OC_Start_IT+0x1b2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_OC_Start_IT+0x1de>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_OC_Start_IT+0x1cc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_OC_Start_IT+0x1de>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_OC_Start_IT+0x1e6>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0fe      	b.n	8003abc <HAL_TIM_OC_Start_IT+0x3e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_OC_Start_IT+0x1f6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	e036      	b.n	800393c <HAL_TIM_OC_Start_IT+0x264>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_OC_Start_IT+0x206>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	e02e      	b.n	800393c <HAL_TIM_OC_Start_IT+0x264>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_OC_Start_IT+0x216>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	e026      	b.n	800393c <HAL_TIM_OC_Start_IT+0x264>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_OC_Start_IT+0x226>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038fc:	e01e      	b.n	800393c <HAL_TIM_OC_Start_IT+0x264>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b10      	cmp	r3, #16
 8003902:	d117      	bne.n	8003934 <HAL_TIM_OC_Start_IT+0x25c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390c:	e016      	b.n	800393c <HAL_TIM_OC_Start_IT+0x264>
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40013400 	.word	0x40013400
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	40015000 	.word	0x40015000
 8003930:	0800b038 	.word	0x0800b038
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d840      	bhi.n	80039c4 <HAL_TIM_OC_Start_IT+0x2ec>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_TIM_OC_Start_IT+0x270>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800397d 	.word	0x0800397d
 800394c:	080039c5 	.word	0x080039c5
 8003950:	080039c5 	.word	0x080039c5
 8003954:	080039c5 	.word	0x080039c5
 8003958:	0800398f 	.word	0x0800398f
 800395c:	080039c5 	.word	0x080039c5
 8003960:	080039c5 	.word	0x080039c5
 8003964:	080039c5 	.word	0x080039c5
 8003968:	080039a1 	.word	0x080039a1
 800396c:	080039c5 	.word	0x080039c5
 8003970:	080039c5 	.word	0x080039c5
 8003974:	080039c5 	.word	0x080039c5
 8003978:	080039b3 	.word	0x080039b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0202 	orr.w	r2, r2, #2
 800398a:	60da      	str	r2, [r3, #12]
      break;
 800398c:	e01d      	b.n	80039ca <HAL_TIM_OC_Start_IT+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0204 	orr.w	r2, r2, #4
 800399c:	60da      	str	r2, [r3, #12]
      break;
 800399e:	e014      	b.n	80039ca <HAL_TIM_OC_Start_IT+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0208 	orr.w	r2, r2, #8
 80039ae:	60da      	str	r2, [r3, #12]
      break;
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_OC_Start_IT+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0210 	orr.w	r2, r2, #16
 80039c0:	60da      	str	r2, [r3, #12]
      break;
 80039c2:	e002      	b.n	80039ca <HAL_TIM_OC_Start_IT+0x2f2>
    }

    default:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d174      	bne.n	8003aba <HAL_TIM_OC_Start_IT+0x3e2>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2201      	movs	r2, #1
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 feb5 	bl	8005748 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_TIM_OC_Start_IT+0x3ec>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <HAL_TIM_OC_Start_IT+0x342>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a36      	ldr	r2, [pc, #216]	; (8003ac8 <HAL_TIM_OC_Start_IT+0x3f0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_TIM_OC_Start_IT+0x342>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a35      	ldr	r2, [pc, #212]	; (8003acc <HAL_TIM_OC_Start_IT+0x3f4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <HAL_TIM_OC_Start_IT+0x342>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <HAL_TIM_OC_Start_IT+0x3f8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_TIM_OC_Start_IT+0x342>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <HAL_TIM_OC_Start_IT+0x3fc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIM_OC_Start_IT+0x342>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_TIM_OC_Start_IT+0x400>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_OC_Start_IT+0x346>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_TIM_OC_Start_IT+0x348>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_TIM_OC_Start_IT+0x35c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_TIM_OC_Start_IT+0x3ec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_TIM_OC_Start_IT+0x3a2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d018      	beq.n	8003a7a <HAL_TIM_OC_Start_IT+0x3a2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	; (8003adc <HAL_TIM_OC_Start_IT+0x404>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_TIM_OC_Start_IT+0x3a2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_TIM_OC_Start_IT+0x408>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIM_OC_Start_IT+0x3a2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_OC_Start_IT+0x3f0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIM_OC_Start_IT+0x3a2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_OC_Start_IT+0x3f4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIM_OC_Start_IT+0x3a2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_TIM_OC_Start_IT+0x400>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d115      	bne.n	8003aa6 <HAL_TIM_OC_Start_IT+0x3ce>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <HAL_TIM_OC_Start_IT+0x40c>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d015      	beq.n	8003ab8 <HAL_TIM_OC_Start_IT+0x3e0>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a92:	d011      	beq.n	8003ab8 <HAL_TIM_OC_Start_IT+0x3e0>
      {
        __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	e008      	b.n	8003ab8 <HAL_TIM_OC_Start_IT+0x3e0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <HAL_TIM_OC_Start_IT+0x3e2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40013400 	.word	0x40013400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800
 8003ad8:	40015000 	.word	0x40015000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	00010007 	.word	0x00010007

08003ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0202 	mvn.w	r2, #2
 8003b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 f8e6 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc fc3a 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f001 f8e9 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0204 	mvn.w	r2, #4
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f001 f8bc 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fc10 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 f8bf 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0208 	mvn.w	r2, #8
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f001 f892 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fc fbe6 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f001 f895 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d122      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0210 	mvn.w	r2, #16
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2208      	movs	r2, #8
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f001 f868 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fc fbbc 	bl	80003ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f001 f86b 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10e      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0201 	mvn.w	r2, #1
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fad8 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d10e      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f002 f8d2 	bl	8005e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca6:	d10e      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d107      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f002 f8c5 	bl	8005e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d107      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 f819 	bl	8004d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d10e      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0220 	mvn.w	r2, #32
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f002 f885 	bl	8005e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2c:	d10f      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f002 f88b 	bl	8005e64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5c:	d10f      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f002 f87d 	bl	8005e78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8c:	d10f      	bne.n	8003dae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f002 f86f 	bl	8005e8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dbc:	d10f      	bne.n	8003dde <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dcc:	d107      	bne.n	8003dde <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f002 f861 	bl	8005ea0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d013      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d010      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d00d      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d00a      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b14      	cmp	r3, #20
 8003e1a:	d007      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b3c      	cmp	r3, #60	; 0x3c
 8003e20:	d004      	beq.n	8003e2c <HAL_TIM_OC_ConfigChannel+0x44>
 8003e22:	f241 011f 	movw	r1, #4127	; 0x101f
 8003e26:	488f      	ldr	r0, [pc, #572]	; (8004064 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8003e28:	f7fd fa0f 	bl	800124a <assert_failed>
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d027      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d023      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d01f      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d01b      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b50      	cmp	r3, #80	; 0x50
 8003e52:	d017      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7f      	ldr	r2, [pc, #508]	; (8004068 <HAL_TIM_OC_ConfigChannel+0x280>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7d      	ldr	r2, [pc, #500]	; (800406c <HAL_TIM_OC_ConfigChannel+0x284>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <HAL_TIM_OC_ConfigChannel+0x288>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10f      	bne.n	8003ea4 <HAL_TIM_OC_ConfigChannel+0xbc>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a78      	ldr	r2, [pc, #480]	; (800406c <HAL_TIM_OC_ConfigChannel+0x284>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a77      	ldr	r2, [pc, #476]	; (8004070 <HAL_TIM_OC_ConfigChannel+0x288>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10a      	bne.n	8003eae <HAL_TIM_OC_ConfigChannel+0xc6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d007      	beq.n	8003eae <HAL_TIM_OC_ConfigChannel+0xc6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	d004      	beq.n	8003eae <HAL_TIM_OC_ConfigChannel+0xc6>
 8003ea4:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003ea8:	486e      	ldr	r0, [pc, #440]	; (8004064 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8003eaa:	f7fd f9ce 	bl	800124a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8003ebe:	f241 0121 	movw	r1, #4129	; 0x1021
 8003ec2:	4868      	ldr	r0, [pc, #416]	; (8004064 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8003ec4:	f7fd f9c1 	bl	800124a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_OC_ConfigChannel+0xee>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e146      	b.n	8004164 <HAL_TIM_OC_ConfigChannel+0x37c>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b14      	cmp	r3, #20
 8003ee2:	f200 8137 	bhi.w	8004154 <HAL_TIM_OC_ConfigChannel+0x36c>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_TIM_OC_ConfigChannel+0x104>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08004155 	.word	0x08004155
 8003ef4:	08004155 	.word	0x08004155
 8003ef8:	08004155 	.word	0x08004155
 8003efc:	08003fb3 	.word	0x08003fb3
 8003f00:	08004155 	.word	0x08004155
 8003f04:	08004155 	.word	0x08004155
 8003f08:	08004155 	.word	0x08004155
 8003f0c:	08004011 	.word	0x08004011
 8003f10:	08004155 	.word	0x08004155
 8003f14:	08004155 	.word	0x08004155
 8003f18:	08004155 	.word	0x08004155
 8003f1c:	08004095 	.word	0x08004095
 8003f20:	08004155 	.word	0x08004155
 8003f24:	08004155 	.word	0x08004155
 8003f28:	08004155 	.word	0x08004155
 8003f2c:	080040e9 	.word	0x080040e9
 8003f30:	08004155 	.word	0x08004155
 8003f34:	08004155 	.word	0x08004155
 8003f38:	08004155 	.word	0x08004155
 8003f3c:	0800411f 	.word	0x0800411f
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4b      	ldr	r2, [pc, #300]	; (8004074 <HAL_TIM_OC_ConfigChannel+0x28c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d02c      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d027      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a47      	ldr	r2, [pc, #284]	; (8004078 <HAL_TIM_OC_ConfigChannel+0x290>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d022      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a46      	ldr	r2, [pc, #280]	; (800407c <HAL_TIM_OC_ConfigChannel+0x294>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d01d      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a44      	ldr	r2, [pc, #272]	; (8004080 <HAL_TIM_OC_ConfigChannel+0x298>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d018      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a43      	ldr	r2, [pc, #268]	; (8004084 <HAL_TIM_OC_ConfigChannel+0x29c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a41      	ldr	r2, [pc, #260]	; (8004088 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00e      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a40      	ldr	r2, [pc, #256]	; (800408c <HAL_TIM_OC_ConfigChannel+0x2a4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d009      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3e      	ldr	r2, [pc, #248]	; (8004090 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_TIM_OC_ConfigChannel+0x1bc>
 8003f9a:	f241 012b 	movw	r1, #4139	; 0x102b
 8003f9e:	4831      	ldr	r0, [pc, #196]	; (8004064 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8003fa0:	f7fd f953 	bl	800124a <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 ff62 	bl	8004e74 <TIM_OC1_SetConfig>
      break;
 8003fb0:	e0d3      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <HAL_TIM_OC_ConfigChannel+0x28c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d01d      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <HAL_TIM_OC_ConfigChannel+0x290>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d018      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <HAL_TIM_OC_ConfigChannel+0x294>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a28      	ldr	r2, [pc, #160]	; (8004080 <HAL_TIM_OC_ConfigChannel+0x298>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a26      	ldr	r2, [pc, #152]	; (8004084 <HAL_TIM_OC_ConfigChannel+0x29c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIM_OC_ConfigChannel+0x21a>
 8003ff8:	f241 0135 	movw	r1, #4149	; 0x1035
 8003ffc:	4819      	ldr	r0, [pc, #100]	; (8004064 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8003ffe:	f7fd f924 	bl	800124a <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fff7 	bl	8004ffc <TIM_OC2_SetConfig>
      break;
 800400e:	e0a4      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_TIM_OC_ConfigChannel+0x28c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01d      	beq.n	8004056 <HAL_TIM_OC_ConfigChannel+0x26e>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d018      	beq.n	8004056 <HAL_TIM_OC_ConfigChannel+0x26e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_TIM_OC_ConfigChannel+0x290>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_TIM_OC_ConfigChannel+0x26e>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <HAL_TIM_OC_ConfigChannel+0x294>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_TIM_OC_ConfigChannel+0x26e>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a10      	ldr	r2, [pc, #64]	; (8004080 <HAL_TIM_OC_ConfigChannel+0x298>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_TIM_OC_ConfigChannel+0x26e>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_TIM_OC_ConfigChannel+0x26e>
 800404c:	f241 013f 	movw	r1, #4159	; 0x103f
 8004050:	4804      	ldr	r0, [pc, #16]	; (8004064 <HAL_TIM_OC_ConfigChannel+0x27c>)
 8004052:	f7fd f8fa 	bl	800124a <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f001 f889 	bl	8005174 <TIM_OC3_SetConfig>
      break;
 8004062:	e07a      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0x372>
 8004064:	0800b038 	.word	0x0800b038
 8004068:	00010010 	.word	0x00010010
 800406c:	00010030 	.word	0x00010030
 8004070:	00010020 	.word	0x00010020
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40013400 	.word	0x40013400
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800
 8004090:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a34      	ldr	r2, [pc, #208]	; (800416c <HAL_TIM_OC_ConfigChannel+0x384>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_TIM_OC_ConfigChannel+0x2f2>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d018      	beq.n	80040da <HAL_TIM_OC_ConfigChannel+0x2f2>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a30      	ldr	r2, [pc, #192]	; (8004170 <HAL_TIM_OC_ConfigChannel+0x388>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_TIM_OC_ConfigChannel+0x2f2>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <HAL_TIM_OC_ConfigChannel+0x38c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_TIM_OC_ConfigChannel+0x2f2>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <HAL_TIM_OC_ConfigChannel+0x390>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_TIM_OC_ConfigChannel+0x2f2>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2c      	ldr	r2, [pc, #176]	; (800417c <HAL_TIM_OC_ConfigChannel+0x394>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_TIM_OC_ConfigChannel+0x2f2>
 80040d0:	f241 0149 	movw	r1, #4169	; 0x1049
 80040d4:	482a      	ldr	r0, [pc, #168]	; (8004180 <HAL_TIM_OC_ConfigChannel+0x398>)
 80040d6:	f7fd f8b8 	bl	800124a <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f903 	bl	80052ec <TIM_OC4_SetConfig>
      break;
 80040e6:	e038      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <HAL_TIM_OC_ConfigChannel+0x384>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <HAL_TIM_OC_ConfigChannel+0x328>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a20      	ldr	r2, [pc, #128]	; (8004178 <HAL_TIM_OC_ConfigChannel+0x390>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_TIM_OC_ConfigChannel+0x328>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1e      	ldr	r2, [pc, #120]	; (800417c <HAL_TIM_OC_ConfigChannel+0x394>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_TIM_OC_ConfigChannel+0x328>
 8004106:	f241 0153 	movw	r1, #4179	; 0x1053
 800410a:	481d      	ldr	r0, [pc, #116]	; (8004180 <HAL_TIM_OC_ConfigChannel+0x398>)
 800410c:	f7fd f89d 	bl	800124a <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f001 f9a4 	bl	8005464 <TIM_OC5_SetConfig>
      break;
 800411c:	e01d      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0x372>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a12      	ldr	r2, [pc, #72]	; (800416c <HAL_TIM_OC_ConfigChannel+0x384>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_TIM_OC_ConfigChannel+0x35e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <HAL_TIM_OC_ConfigChannel+0x390>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIM_OC_ConfigChannel+0x35e>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_TIM_OC_ConfigChannel+0x394>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIM_OC_ConfigChannel+0x35e>
 800413c:	f241 015d 	movw	r1, #4189	; 0x105d
 8004140:	480f      	ldr	r0, [pc, #60]	; (8004180 <HAL_TIM_OC_ConfigChannel+0x398>)
 8004142:	f7fd f882 	bl	800124a <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f9f3 	bl	8005538 <TIM_OC6_SetConfig>
      break;
 8004152:	e002      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0x372>
    }

    default:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
      break;
 8004158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40013400 	.word	0x40013400
 800417c:	40015000 	.word	0x40015000
 8004180:	0800b038 	.word	0x0800b038

08004184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <HAL_TIM_ConfigClockSource+0x1e>
 800419c:	2302      	movs	r3, #2
 800419e:	f000 bd98 	b.w	8004cd2 <HAL_TIM_ConfigClockSource+0xb4e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ba:	d047      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c4:	d042      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d03e      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d03a      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d036      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b30      	cmp	r3, #48	; 0x30
 80041e4:	d032      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d02e      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b50      	cmp	r3, #80	; 0x50
 80041f4:	d02a      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b60      	cmp	r3, #96	; 0x60
 80041fc:	d026      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b70      	cmp	r3, #112	; 0x70
 8004204:	d022      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800420e:	d01d      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a71      	ldr	r2, [pc, #452]	; (80043dc <HAL_TIM_ConfigClockSource+0x258>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a70      	ldr	r2, [pc, #448]	; (80043e0 <HAL_TIM_ConfigClockSource+0x25c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a6e      	ldr	r2, [pc, #440]	; (80043e4 <HAL_TIM_ConfigClockSource+0x260>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a6d      	ldr	r2, [pc, #436]	; (80043e8 <HAL_TIM_ConfigClockSource+0x264>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6b      	ldr	r2, [pc, #428]	; (80043ec <HAL_TIM_ConfigClockSource+0x268>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc8>
 8004242:	f241 51b8 	movw	r1, #5560	; 0x15b8
 8004246:	486a      	ldr	r0, [pc, #424]	; (80043f0 <HAL_TIM_ConfigClockSource+0x26c>)
 8004248:	f7fc ffff 	bl	800124a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800425a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800425e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a5d      	ldr	r2, [pc, #372]	; (80043ec <HAL_TIM_ConfigClockSource+0x268>)
 8004276:	4293      	cmp	r3, r2
 8004278:	f000 82e2 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 800427c:	4a5b      	ldr	r2, [pc, #364]	; (80043ec <HAL_TIM_ConfigClockSource+0x268>)
 800427e:	4293      	cmp	r3, r2
 8004280:	f200 851a 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 8004284:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <HAL_TIM_ConfigClockSource+0x264>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f000 82da 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 800428c:	4a56      	ldr	r2, [pc, #344]	; (80043e8 <HAL_TIM_ConfigClockSource+0x264>)
 800428e:	4293      	cmp	r3, r2
 8004290:	f200 8512 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 8004294:	4a53      	ldr	r2, [pc, #332]	; (80043e4 <HAL_TIM_ConfigClockSource+0x260>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f000 82d2 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 800429c:	4a51      	ldr	r2, [pc, #324]	; (80043e4 <HAL_TIM_ConfigClockSource+0x260>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	f200 850a 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042a4:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <HAL_TIM_ConfigClockSource+0x25c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f000 82ca 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 80042ac:	4a4c      	ldr	r2, [pc, #304]	; (80043e0 <HAL_TIM_ConfigClockSource+0x25c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f200 8502 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042b4:	4a49      	ldr	r2, [pc, #292]	; (80043dc <HAL_TIM_ConfigClockSource+0x258>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f000 82c2 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 80042bc:	4a47      	ldr	r2, [pc, #284]	; (80043dc <HAL_TIM_ConfigClockSource+0x258>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f200 84fa 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042c8:	f000 82ba 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 80042cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042d0:	f200 84f2 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	f000 8115 	beq.w	8004506 <HAL_TIM_ConfigClockSource+0x382>
 80042dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e0:	f200 84ea 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e8:	d02f      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x1c6>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	f200 84e3 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042f2:	2b70      	cmp	r3, #112	; 0x70
 80042f4:	f000 8092 	beq.w	800441c <HAL_TIM_ConfigClockSource+0x298>
 80042f8:	2b70      	cmp	r3, #112	; 0x70
 80042fa:	f200 84dd 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 80042fe:	2b60      	cmp	r3, #96	; 0x60
 8004300:	f000 81d9 	beq.w	80046b6 <HAL_TIM_ConfigClockSource+0x532>
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	f200 84d7 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 800430a:	2b50      	cmp	r3, #80	; 0x50
 800430c:	f000 8178 	beq.w	8004600 <HAL_TIM_ConfigClockSource+0x47c>
 8004310:	2b50      	cmp	r3, #80	; 0x50
 8004312:	f200 84d1 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	f000 8228 	beq.w	800476c <HAL_TIM_ConfigClockSource+0x5e8>
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	f200 84cb 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	f000 828c 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 8004328:	2b30      	cmp	r3, #48	; 0x30
 800432a:	f200 84c5 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 800432e:	2b20      	cmp	r3, #32
 8004330:	f000 8286 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 8004334:	2b20      	cmp	r3, #32
 8004336:	f200 84bf 	bhi.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8280 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 8004340:	2b10      	cmp	r3, #16
 8004342:	f000 827d 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x6bc>
 8004346:	f000 bcb7 	b.w	8004cb8 <HAL_TIM_ConfigClockSource+0xb34>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <HAL_TIM_ConfigClockSource+0x270>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f000 84b4 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	f000 84ae 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <HAL_TIM_ConfigClockSource+0x274>)
 8004368:	4293      	cmp	r3, r2
 800436a:	f000 84a8 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_TIM_ConfigClockSource+0x278>)
 8004374:	4293      	cmp	r3, r2
 8004376:	f000 84a2 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <HAL_TIM_ConfigClockSource+0x27c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	f000 849c 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <HAL_TIM_ConfigClockSource+0x280>)
 800438c:	4293      	cmp	r3, r2
 800438e:	f000 8496 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <HAL_TIM_ConfigClockSource+0x284>)
 8004398:	4293      	cmp	r3, r2
 800439a:	f000 8490 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1a      	ldr	r2, [pc, #104]	; (800440c <HAL_TIM_ConfigClockSource+0x288>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	f000 848a 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_TIM_ConfigClockSource+0x28c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f000 8484 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a16      	ldr	r2, [pc, #88]	; (8004414 <HAL_TIM_ConfigClockSource+0x290>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	f000 847e 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <HAL_TIM_ConfigClockSource+0x294>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f000 8478 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 80043ce:	f241 51c4 	movw	r1, #5572	; 0x15c4
 80043d2:	4807      	ldr	r0, [pc, #28]	; (80043f0 <HAL_TIM_ConfigClockSource+0x26c>)
 80043d4:	f7fc ff39 	bl	800124a <assert_failed>
      break;
 80043d8:	f000 bc71 	b.w	8004cbe <HAL_TIM_ConfigClockSource+0xb3a>
 80043dc:	00100020 	.word	0x00100020
 80043e0:	00100030 	.word	0x00100030
 80043e4:	00100040 	.word	0x00100040
 80043e8:	00100050 	.word	0x00100050
 80043ec:	00100070 	.word	0x00100070
 80043f0:	0800b038 	.word	0x0800b038
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40001000 	.word	0x40001000
 8004404:	40001400 	.word	0x40001400
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800
 8004418:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a71      	ldr	r2, [pc, #452]	; (80045e8 <HAL_TIM_ConfigClockSource+0x464>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01d      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x2de>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d018      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x2de>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6d      	ldr	r2, [pc, #436]	; (80045ec <HAL_TIM_ConfigClockSource+0x468>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x2de>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6c      	ldr	r2, [pc, #432]	; (80045f0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00e      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x2de>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6a      	ldr	r2, [pc, #424]	; (80045f4 <HAL_TIM_ConfigClockSource+0x470>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x2de>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a69      	ldr	r2, [pc, #420]	; (80045f8 <HAL_TIM_ConfigClockSource+0x474>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x2de>
 8004458:	f241 51cb 	movw	r1, #5579	; 0x15cb
 800445c:	4867      	ldr	r0, [pc, #412]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 800445e:	f7fc fef4 	bl	800124a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d013      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x30e>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d00e      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x30e>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447c:	d009      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x30e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004486:	d004      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x30e>
 8004488:	f241 51ce 	movw	r1, #5582	; 0x15ce
 800448c:	485b      	ldr	r0, [pc, #364]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 800448e:	f7fc fedc 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449a:	d014      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x342>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x342>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x342>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d008      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x342>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b0a      	cmp	r3, #10
 80044ba:	d004      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x342>
 80044bc:	f241 51cf 	movw	r1, #5583	; 0x15cf
 80044c0:	484e      	ldr	r0, [pc, #312]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 80044c2:	f7fc fec2 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	d904      	bls.n	80044d8 <HAL_TIM_ConfigClockSource+0x354>
 80044ce:	f241 51d0 	movw	r1, #5584	; 0x15d0
 80044d2:	484a      	ldr	r0, [pc, #296]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 80044d4:	f7fc feb9 	bl	800124a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f001 f90e 	bl	8005708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e3dc      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <HAL_TIM_ConfigClockSource+0x464>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x3c8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d018      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x3c8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a33      	ldr	r2, [pc, #204]	; (80045ec <HAL_TIM_ConfigClockSource+0x468>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x3c8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a31      	ldr	r2, [pc, #196]	; (80045f0 <HAL_TIM_ConfigClockSource+0x46c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x3c8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <HAL_TIM_ConfigClockSource+0x470>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x3c8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2e      	ldr	r2, [pc, #184]	; (80045f8 <HAL_TIM_ConfigClockSource+0x474>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x3c8>
 8004542:	f241 51e3 	movw	r1, #5603	; 0x15e3
 8004546:	482d      	ldr	r0, [pc, #180]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 8004548:	f7fc fe7f 	bl	800124a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x3f8>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455c:	d00e      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x3f8>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004566:	d009      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x3f8>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004570:	d004      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x3f8>
 8004572:	f241 51e6 	movw	r1, #5606	; 0x15e6
 8004576:	4821      	ldr	r0, [pc, #132]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 8004578:	f7fc fe67 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d014      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0x42c>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d010      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0x42c>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0x42c>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d008      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0x42c>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b0a      	cmp	r3, #10
 80045a4:	d004      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0x42c>
 80045a6:	f241 51e7 	movw	r1, #5607	; 0x15e7
 80045aa:	4814      	ldr	r0, [pc, #80]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 80045ac:	f7fc fe4d 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b0f      	cmp	r3, #15
 80045b6:	d904      	bls.n	80045c2 <HAL_TIM_ConfigClockSource+0x43e>
 80045b8:	f241 51e8 	movw	r1, #5608	; 0x15e8
 80045bc:	480f      	ldr	r0, [pc, #60]	; (80045fc <HAL_TIM_ConfigClockSource+0x478>)
 80045be:	f7fc fe44 	bl	800124a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6899      	ldr	r1, [r3, #8]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f001 f899 	bl	8005708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e4:	609a      	str	r2, [r3, #8]
      break;
 80045e6:	e36b      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40013400 	.word	0x40013400
 80045f8:	40015000 	.word	0x40015000
 80045fc:	0800b038 	.word	0x0800b038
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a87      	ldr	r2, [pc, #540]	; (8004824 <HAL_TIM_ConfigClockSource+0x6a0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d022      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d01d      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <HAL_TIM_ConfigClockSource+0x6a4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a82      	ldr	r2, [pc, #520]	; (800482c <HAL_TIM_ConfigClockSource+0x6a8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_TIM_ConfigClockSource+0x6ac>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7f      	ldr	r2, [pc, #508]	; (8004834 <HAL_TIM_ConfigClockSource+0x6b0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7d      	ldr	r2, [pc, #500]	; (8004838 <HAL_TIM_ConfigClockSource+0x6b4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x4cc>
 8004646:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800464a:	487c      	ldr	r0, [pc, #496]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 800464c:	f7fc fdfd 	bl	800124a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d014      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x500>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x500>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x500>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d008      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x500>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b0a      	cmp	r3, #10
 8004678:	d004      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x500>
 800467a:	f241 51fa 	movw	r1, #5626	; 0x15fa
 800467e:	486f      	ldr	r0, [pc, #444]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 8004680:	f7fc fde3 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d904      	bls.n	8004696 <HAL_TIM_ConfigClockSource+0x512>
 800468c:	f241 51fb 	movw	r1, #5627	; 0x15fb
 8004690:	486a      	ldr	r0, [pc, #424]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 8004692:	f7fc fdda 	bl	800124a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 ffb4 	bl	8005610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2150      	movs	r1, #80	; 0x50
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f80d 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80046b4:	e304      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a5a      	ldr	r2, [pc, #360]	; (8004824 <HAL_TIM_ConfigClockSource+0x6a0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d01d      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a56      	ldr	r2, [pc, #344]	; (8004828 <HAL_TIM_ConfigClockSource+0x6a4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a54      	ldr	r2, [pc, #336]	; (800482c <HAL_TIM_ConfigClockSource+0x6a8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a53      	ldr	r2, [pc, #332]	; (8004830 <HAL_TIM_ConfigClockSource+0x6ac>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a51      	ldr	r2, [pc, #324]	; (8004834 <HAL_TIM_ConfigClockSource+0x6b0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a50      	ldr	r2, [pc, #320]	; (8004838 <HAL_TIM_ConfigClockSource+0x6b4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x582>
 80046fc:	f241 6107 	movw	r1, #5639	; 0x1607
 8004700:	484e      	ldr	r0, [pc, #312]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 8004702:	f7fc fda2 	bl	800124a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470e:	d014      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x5b6>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x5b6>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x5b6>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d008      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x5b6>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b0a      	cmp	r3, #10
 800472e:	d004      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x5b6>
 8004730:	f241 610a 	movw	r1, #5642	; 0x160a
 8004734:	4841      	ldr	r0, [pc, #260]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 8004736:	f7fc fd88 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d904      	bls.n	800474c <HAL_TIM_ConfigClockSource+0x5c8>
 8004742:	f241 610b 	movw	r1, #5643	; 0x160b
 8004746:	483d      	ldr	r0, [pc, #244]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 8004748:	f7fc fd7f 	bl	800124a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	461a      	mov	r2, r3
 800475a:	f000 ff88 	bl	800566e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2160      	movs	r1, #96	; 0x60
 8004764:	4618      	mov	r0, r3
 8004766:	f000 ffb2 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 800476a:	e2a9      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <HAL_TIM_ConfigClockSource+0x6a0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477e:	d01d      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_TIM_ConfigClockSource+0x6a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a27      	ldr	r2, [pc, #156]	; (800482c <HAL_TIM_ConfigClockSource+0x6a8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_TIM_ConfigClockSource+0x6ac>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <HAL_TIM_ConfigClockSource+0x6b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_TIM_ConfigClockSource+0x6b4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x638>
 80047b2:	f241 6117 	movw	r1, #5655	; 0x1617
 80047b6:	4821      	ldr	r0, [pc, #132]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 80047b8:	f7fc fd47 	bl	800124a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c4:	d014      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x66c>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d010      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x66c>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x66c>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d008      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x66c>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b0a      	cmp	r3, #10
 80047e4:	d004      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x66c>
 80047e6:	f241 611a 	movw	r1, #5658	; 0x161a
 80047ea:	4814      	ldr	r0, [pc, #80]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 80047ec:	f7fc fd2d 	bl	800124a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d904      	bls.n	8004802 <HAL_TIM_ConfigClockSource+0x67e>
 80047f8:	f241 611b 	movw	r1, #5659	; 0x161b
 80047fc:	480f      	ldr	r0, [pc, #60]	; (800483c <HAL_TIM_ConfigClockSource+0x6b8>)
 80047fe:	f7fc fd24 	bl	800124a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 fefe 	bl	8005610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	4618      	mov	r0, r3
 800481c:	f000 ff57 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8004820:	e24e      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40015000 	.word	0x40015000
 800483c:	0800b038 	.word	0x0800b038
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a9d      	ldr	r2, [pc, #628]	; (8004abc <HAL_TIM_ConfigClockSource+0x938>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d14c      	bne.n	80048e4 <HAL_TIM_ConfigClockSource+0x760>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	f000 8228 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485e:	f000 8222 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b10      	cmp	r3, #16
 8004868:	f000 821d 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b20      	cmp	r3, #32
 8004872:	f000 8218 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b30      	cmp	r3, #48	; 0x30
 800487c:	f000 8213 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	f000 820e 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b50      	cmp	r3, #80	; 0x50
 8004890:	f000 8209 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b60      	cmp	r3, #96	; 0x60
 800489a:	f000 8204 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b70      	cmp	r3, #112	; 0x70
 80048a4:	f000 81ff 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048b0:	f000 81f9 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a81      	ldr	r2, [pc, #516]	; (8004ac0 <HAL_TIM_ConfigClockSource+0x93c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f000 81f3 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7f      	ldr	r2, [pc, #508]	; (8004ac4 <HAL_TIM_ConfigClockSource+0x940>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	f000 81ed 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a7d      	ldr	r2, [pc, #500]	; (8004ac8 <HAL_TIM_ConfigClockSource+0x944>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 81e7 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7b      	ldr	r2, [pc, #492]	; (8004acc <HAL_TIM_ConfigClockSource+0x948>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f000 81e1 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d152      	bne.n	8004994 <HAL_TIM_ConfigClockSource+0x810>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	f000 81d6 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004902:	f000 81d0 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 81cb 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b20      	cmp	r3, #32
 8004916:	f000 81c6 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b30      	cmp	r3, #48	; 0x30
 8004920:	f000 81c1 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	f000 81bc 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b50      	cmp	r3, #80	; 0x50
 8004934:	f000 81b7 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b60      	cmp	r3, #96	; 0x60
 800493e:	f000 81b2 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b70      	cmp	r3, #112	; 0x70
 8004948:	f000 81ad 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004954:	f000 81a7 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a58      	ldr	r2, [pc, #352]	; (8004ac0 <HAL_TIM_ConfigClockSource+0x93c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f000 81a1 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a56      	ldr	r2, [pc, #344]	; (8004ac4 <HAL_TIM_ConfigClockSource+0x940>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f000 819b 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a54      	ldr	r2, [pc, #336]	; (8004ac8 <HAL_TIM_ConfigClockSource+0x944>)
 8004976:	4293      	cmp	r3, r2
 8004978:	f000 8195 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a52      	ldr	r2, [pc, #328]	; (8004acc <HAL_TIM_ConfigClockSource+0x948>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f000 818f 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a50      	ldr	r2, [pc, #320]	; (8004ad0 <HAL_TIM_ConfigClockSource+0x94c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	f000 8189 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a4e      	ldr	r2, [pc, #312]	; (8004ad4 <HAL_TIM_ConfigClockSource+0x950>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d14c      	bne.n	8004a38 <HAL_TIM_ConfigClockSource+0x8b4>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	f000 817e 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b2:	f000 8178 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8173 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	f000 816e 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	f000 8169 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	f000 8164 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b50      	cmp	r3, #80	; 0x50
 80049e4:	f000 815f 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	f000 815a 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b70      	cmp	r3, #112	; 0x70
 80049f8:	f000 8155 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a04:	f000 814f 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <HAL_TIM_ConfigClockSource+0x93c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f000 8149 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <HAL_TIM_ConfigClockSource+0x940>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	f000 8143 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <HAL_TIM_ConfigClockSource+0x944>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f000 813d 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a26      	ldr	r2, [pc, #152]	; (8004acc <HAL_TIM_ConfigClockSource+0x948>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	f000 8137 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x954>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d15e      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x97c>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	f000 812c 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a56:	f000 8126 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8121 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	f000 811c 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	f000 8117 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	f000 8112 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b50      	cmp	r3, #80	; 0x50
 8004a88:	f000 810d 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b60      	cmp	r3, #96	; 0x60
 8004a92:	f000 8108 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b70      	cmp	r3, #112	; 0x70
 8004a9c:	f000 8103 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004aa8:	f000 80fd 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <HAL_TIM_ConfigClockSource+0x93c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	f000 80f7 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004ab8:	e010      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x958>
 8004aba:	bf00      	nop
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	00100020 	.word	0x00100020
 8004ac4:	00100030 	.word	0x00100030
 8004ac8:	00100040 	.word	0x00100040
 8004acc:	00100050 	.word	0x00100050
 8004ad0:	00100070 	.word	0x00100070
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7e      	ldr	r2, [pc, #504]	; (8004cdc <HAL_TIM_ConfigClockSource+0xb58>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	f000 80df 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a7c      	ldr	r2, [pc, #496]	; (8004ce0 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f000 80d9 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a7a      	ldr	r2, [pc, #488]	; (8004ce4 <HAL_TIM_ConfigClockSource+0xb60>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	f000 80d3 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a78      	ldr	r2, [pc, #480]	; (8004ce8 <HAL_TIM_ConfigClockSource+0xb64>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d14b      	bne.n	8004ba2 <HAL_TIM_ConfigClockSource+0xa1e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	f000 80c8 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1e:	f000 80c2 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80bd 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	f000 80b8 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	f000 80b3 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b30      	cmp	r3, #48	; 0x30
 8004b46:	f000 80ae 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	f000 80a9 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b50      	cmp	r3, #80	; 0x50
 8004b5a:	f000 80a4 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b60      	cmp	r3, #96	; 0x60
 8004b64:	f000 809f 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b70      	cmp	r3, #112	; 0x70
 8004b6e:	f000 809a 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a5d      	ldr	r2, [pc, #372]	; (8004cec <HAL_TIM_ConfigClockSource+0xb68>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f000 8094 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a56      	ldr	r2, [pc, #344]	; (8004cdc <HAL_TIM_ConfigClockSource+0xb58>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	f000 808e 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a54      	ldr	r2, [pc, #336]	; (8004ce0 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	f000 8088 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a52      	ldr	r2, [pc, #328]	; (8004ce4 <HAL_TIM_ConfigClockSource+0xb60>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	f000 8082 	beq.w	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <HAL_TIM_ConfigClockSource+0xb6c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d134      	bne.n	8004c16 <HAL_TIM_ConfigClockSource+0xa92>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d077      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d073      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d06f      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d06b      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b30      	cmp	r3, #48	; 0x30
 8004bd4:	d067      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d063      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b50      	cmp	r3, #80	; 0x50
 8004be4:	d05f      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b60      	cmp	r3, #96	; 0x60
 8004bec:	d05b      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004bf6:	d056      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <HAL_TIM_ConfigClockSource+0xb58>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d051      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a36      	ldr	r2, [pc, #216]	; (8004ce0 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d04c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a34      	ldr	r2, [pc, #208]	; (8004ce4 <HAL_TIM_ConfigClockSource+0xb60>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d047      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <HAL_TIM_ConfigClockSource+0xb70>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d13d      	bne.n	8004c9c <HAL_TIM_ConfigClockSource+0xb18>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c28:	d03d      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c32:	d038      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d034      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d030      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d02c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b30      	cmp	r3, #48	; 0x30
 8004c52:	d028      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d024      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b50      	cmp	r3, #80	; 0x50
 8004c62:	d020      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b60      	cmp	r3, #96	; 0x60
 8004c6a:	d01c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d018      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c7c:	d013      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <HAL_TIM_ConfigClockSource+0xb68>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00e      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <HAL_TIM_ConfigClockSource+0xb58>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d009      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_TIM_ConfigClockSource+0xb5c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xb22>
 8004c9c:	f241 6138 	movw	r1, #5688	; 0x1638
 8004ca0:	4815      	ldr	r0, [pc, #84]	; (8004cf8 <HAL_TIM_ConfigClockSource+0xb74>)
 8004ca2:	f7fc fad2 	bl	800124a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 fd0c 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8004cb6:	e003      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
    }

    default:
      status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      break;
 8004cbc:	e000      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0xb3c>
      break;
 8004cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	00100030 	.word	0x00100030
 8004ce0:	00100040 	.word	0x00100040
 8004ce4:	00100050 	.word	0x00100050
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	00100020 	.word	0x00100020
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40015000 	.word	0x40015000
 8004cf8:	0800b038 	.word	0x0800b038

08004cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3e      	ldr	r2, [pc, #248]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3d      	ldr	r2, [pc, #244]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a31      	ldr	r2, [pc, #196]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d01b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2e      	ldr	r2, [pc, #184]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d017      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <TIM_Base_SetConfig+0x100>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x100>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x100>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x100>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x100>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	615a      	str	r2, [r3, #20]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40013400 	.word	0x40013400
 8004e64:	40015000 	.word	0x40015000
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800

08004e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a44      	ldr	r2, [pc, #272]	; (8004fe0 <TIM_OC1_SetConfig+0x16c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <TIM_OC1_SetConfig+0x88>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a43      	ldr	r2, [pc, #268]	; (8004fe4 <TIM_OC1_SetConfig+0x170>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00f      	beq.n	8004efc <TIM_OC1_SetConfig+0x88>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a42      	ldr	r2, [pc, #264]	; (8004fe8 <TIM_OC1_SetConfig+0x174>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <TIM_OC1_SetConfig+0x88>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a41      	ldr	r2, [pc, #260]	; (8004fec <TIM_OC1_SetConfig+0x178>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_OC1_SetConfig+0x88>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <TIM_OC1_SetConfig+0x17c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC1_SetConfig+0x88>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3f      	ldr	r2, [pc, #252]	; (8004ff4 <TIM_OC1_SetConfig+0x180>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d119      	bne.n	8004f30 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <TIM_OC1_SetConfig+0xa2>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d004      	beq.n	8004f16 <TIM_OC1_SetConfig+0xa2>
 8004f0c:	f641 4111 	movw	r1, #7185	; 0x1c11
 8004f10:	4839      	ldr	r0, [pc, #228]	; (8004ff8 <TIM_OC1_SetConfig+0x184>)
 8004f12:	f7fc f99a 	bl	800124a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0308 	bic.w	r3, r3, #8
 8004f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
 8004f2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <TIM_OC1_SetConfig+0x16c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <TIM_OC1_SetConfig+0xec>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <TIM_OC1_SetConfig+0x170>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00f      	beq.n	8004f60 <TIM_OC1_SetConfig+0xec>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <TIM_OC1_SetConfig+0x174>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_OC1_SetConfig+0xec>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a28      	ldr	r2, [pc, #160]	; (8004fec <TIM_OC1_SetConfig+0x178>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <TIM_OC1_SetConfig+0xec>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <TIM_OC1_SetConfig+0x17c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC1_SetConfig+0xec>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <TIM_OC1_SetConfig+0x180>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d12d      	bne.n	8004fbc <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f68:	d008      	beq.n	8004f7c <TIM_OC1_SetConfig+0x108>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <TIM_OC1_SetConfig+0x108>
 8004f72:	f641 411e 	movw	r1, #7198	; 0x1c1e
 8004f76:	4820      	ldr	r0, [pc, #128]	; (8004ff8 <TIM_OC1_SetConfig+0x184>)
 8004f78:	f7fc f967 	bl	800124a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f84:	d008      	beq.n	8004f98 <TIM_OC1_SetConfig+0x124>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <TIM_OC1_SetConfig+0x124>
 8004f8e:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8004f92:	4819      	ldr	r0, [pc, #100]	; (8004ff8 <TIM_OC1_SetConfig+0x184>)
 8004f94:	f7fc f959 	bl	800124a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800
 8004ff4:	40015000 	.word	0x40015000
 8004ff8:	0800b038 	.word	0x0800b038

08004ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0320 	bic.w	r3, r3, #32
 800504a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3f      	ldr	r2, [pc, #252]	; (8005158 <TIM_OC2_SetConfig+0x15c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC2_SetConfig+0x74>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3e      	ldr	r2, [pc, #248]	; (800515c <TIM_OC2_SetConfig+0x160>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC2_SetConfig+0x74>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <TIM_OC2_SetConfig+0x164>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d11a      	bne.n	80050a6 <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <TIM_OC2_SetConfig+0x8e>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d004      	beq.n	800508a <TIM_OC2_SetConfig+0x8e>
 8005080:	f641 415c 	movw	r1, #7260	; 0x1c5c
 8005084:	4837      	ldr	r0, [pc, #220]	; (8005164 <TIM_OC2_SetConfig+0x168>)
 8005086:	f7fc f8e0 	bl	800124a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <TIM_OC2_SetConfig+0x15c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <TIM_OC2_SetConfig+0xda>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a2a      	ldr	r2, [pc, #168]	; (800515c <TIM_OC2_SetConfig+0x160>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00f      	beq.n	80050d6 <TIM_OC2_SetConfig+0xda>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <TIM_OC2_SetConfig+0x16c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_OC2_SetConfig+0xda>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	; (800516c <TIM_OC2_SetConfig+0x170>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d007      	beq.n	80050d6 <TIM_OC2_SetConfig+0xda>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a29      	ldr	r2, [pc, #164]	; (8005170 <TIM_OC2_SetConfig+0x174>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC2_SetConfig+0xda>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a23      	ldr	r2, [pc, #140]	; (8005160 <TIM_OC2_SetConfig+0x164>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d12f      	bne.n	8005136 <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050de:	d008      	beq.n	80050f2 <TIM_OC2_SetConfig+0xf6>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <TIM_OC2_SetConfig+0xf6>
 80050e8:	f641 416a 	movw	r1, #7274	; 0x1c6a
 80050ec:	481d      	ldr	r0, [pc, #116]	; (8005164 <TIM_OC2_SetConfig+0x168>)
 80050ee:	f7fc f8ac 	bl	800124a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fa:	d008      	beq.n	800510e <TIM_OC2_SetConfig+0x112>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <TIM_OC2_SetConfig+0x112>
 8005104:	f641 416b 	movw	r1, #7275	; 0x1c6b
 8005108:	4816      	ldr	r0, [pc, #88]	; (8005164 <TIM_OC2_SetConfig+0x168>)
 800510a:	f7fc f89e 	bl	800124a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40015000 	.word	0x40015000
 8005164:	0800b038 	.word	0x0800b038
 8005168:	40014000 	.word	0x40014000
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800

08005174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a3f      	ldr	r2, [pc, #252]	; (80052d0 <TIM_OC3_SetConfig+0x15c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_OC3_SetConfig+0x72>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a3e      	ldr	r2, [pc, #248]	; (80052d4 <TIM_OC3_SetConfig+0x160>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC3_SetConfig+0x72>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a3d      	ldr	r2, [pc, #244]	; (80052d8 <TIM_OC3_SetConfig+0x164>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d11a      	bne.n	800521c <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <TIM_OC3_SetConfig+0x8c>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d004      	beq.n	8005200 <TIM_OC3_SetConfig+0x8c>
 80051f6:	f641 41a7 	movw	r1, #7335	; 0x1ca7
 80051fa:	4838      	ldr	r0, [pc, #224]	; (80052dc <TIM_OC3_SetConfig+0x168>)
 80051fc:	f7fc f825 	bl	800124a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <TIM_OC3_SetConfig+0x15c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <TIM_OC3_SetConfig+0xd8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <TIM_OC3_SetConfig+0x160>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00f      	beq.n	800524c <TIM_OC3_SetConfig+0xd8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <TIM_OC3_SetConfig+0x16c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_OC3_SetConfig+0xd8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <TIM_OC3_SetConfig+0x170>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC3_SetConfig+0xd8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <TIM_OC3_SetConfig+0x174>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC3_SetConfig+0xd8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <TIM_OC3_SetConfig+0x164>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d12f      	bne.n	80052ac <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005254:	d008      	beq.n	8005268 <TIM_OC3_SetConfig+0xf4>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <TIM_OC3_SetConfig+0xf4>
 800525e:	f641 41b4 	movw	r1, #7348	; 0x1cb4
 8005262:	481e      	ldr	r0, [pc, #120]	; (80052dc <TIM_OC3_SetConfig+0x168>)
 8005264:	f7fb fff1 	bl	800124a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	d008      	beq.n	8005284 <TIM_OC3_SetConfig+0x110>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <TIM_OC3_SetConfig+0x110>
 800527a:	f641 41b5 	movw	r1, #7349	; 0x1cb5
 800527e:	4817      	ldr	r0, [pc, #92]	; (80052dc <TIM_OC3_SetConfig+0x168>)
 8005280:	f7fb ffe3 	bl	800124a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40013400 	.word	0x40013400
 80052d8:	40015000 	.word	0x40015000
 80052dc:	0800b038 	.word	0x0800b038
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <TIM_OC4_SetConfig+0x15c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_OC4_SetConfig+0x74>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <TIM_OC4_SetConfig+0x160>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC4_SetConfig+0x74>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <TIM_OC4_SetConfig+0x164>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d11a      	bne.n	8005396 <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <TIM_OC4_SetConfig+0x8e>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d004      	beq.n	800537a <TIM_OC4_SetConfig+0x8e>
 8005370:	f641 41f2 	movw	r1, #7410	; 0x1cf2
 8005374:	4837      	ldr	r0, [pc, #220]	; (8005454 <TIM_OC4_SetConfig+0x168>)
 8005376:	f7fb ff68 	bl	800124a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	031b      	lsls	r3, r3, #12
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <TIM_OC4_SetConfig+0x15c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <TIM_OC4_SetConfig+0xda>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <TIM_OC4_SetConfig+0x160>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_OC4_SetConfig+0xda>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <TIM_OC4_SetConfig+0x16c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_OC4_SetConfig+0xda>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <TIM_OC4_SetConfig+0x170>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_OC4_SetConfig+0xda>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <TIM_OC4_SetConfig+0x174>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC4_SetConfig+0xda>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a23      	ldr	r2, [pc, #140]	; (8005450 <TIM_OC4_SetConfig+0x164>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d12f      	bne.n	8005426 <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ce:	d008      	beq.n	80053e2 <TIM_OC4_SetConfig+0xf6>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <TIM_OC4_SetConfig+0xf6>
 80053d8:	f641 41ff 	movw	r1, #7423	; 0x1cff
 80053dc:	481d      	ldr	r0, [pc, #116]	; (8005454 <TIM_OC4_SetConfig+0x168>)
 80053de:	f7fb ff34 	bl	800124a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ea:	d008      	beq.n	80053fe <TIM_OC4_SetConfig+0x112>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <TIM_OC4_SetConfig+0x112>
 80053f4:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80053f8:	4816      	ldr	r0, [pc, #88]	; (8005454 <TIM_OC4_SetConfig+0x168>)
 80053fa:	f7fb ff26 	bl	800124a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005404:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800540c:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	019b      	lsls	r3, r3, #6
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	019b      	lsls	r3, r3, #6
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40013400 	.word	0x40013400
 8005450:	40015000 	.word	0x40015000
 8005454:	0800b038 	.word	0x0800b038
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800

08005464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <TIM_OC5_SetConfig+0xbc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_OC5_SetConfig+0x82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <TIM_OC5_SetConfig+0xc0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_OC5_SetConfig+0x82>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a17      	ldr	r2, [pc, #92]	; (8005528 <TIM_OC5_SetConfig+0xc4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_OC5_SetConfig+0x82>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a16      	ldr	r2, [pc, #88]	; (800552c <TIM_OC5_SetConfig+0xc8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_OC5_SetConfig+0x82>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <TIM_OC5_SetConfig+0xcc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC5_SetConfig+0x82>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <TIM_OC5_SetConfig+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d109      	bne.n	80054fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800
 8005534:	40015000 	.word	0x40015000

08005538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800557e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	051b      	lsls	r3, r3, #20
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <TIM_OC6_SetConfig+0xc0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_OC6_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <TIM_OC6_SetConfig+0xc4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00f      	beq.n	80055bc <TIM_OC6_SetConfig+0x84>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <TIM_OC6_SetConfig+0xc8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_OC6_SetConfig+0x84>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a17      	ldr	r2, [pc, #92]	; (8005604 <TIM_OC6_SetConfig+0xcc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_OC6_SetConfig+0x84>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a16      	ldr	r2, [pc, #88]	; (8005608 <TIM_OC6_SetConfig+0xd0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC6_SetConfig+0x84>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <TIM_OC6_SetConfig+0xd4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d109      	bne.n	80055d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	029b      	lsls	r3, r3, #10
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40013400 	.word	0x40013400
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400
 8005608:	40014800 	.word	0x40014800
 800560c:	40015000 	.word	0x40015000

08005610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 030a 	bic.w	r3, r3, #10
 800564c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0210 	bic.w	r2, r3, #16
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f043 0307 	orr.w	r3, r3, #7
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	431a      	orrs	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <TIM_CCxChannelCmd+0xcc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d024      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d020      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a2c      	ldr	r2, [pc, #176]	; (8005818 <TIM_CCxChannelCmd+0xd0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01c      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4a2b      	ldr	r2, [pc, #172]	; (800581c <TIM_CCxChannelCmd+0xd4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a2a      	ldr	r2, [pc, #168]	; (8005820 <TIM_CCxChannelCmd+0xd8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d014      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a29      	ldr	r2, [pc, #164]	; (8005824 <TIM_CCxChannelCmd+0xdc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d010      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <TIM_CCxChannelCmd+0xe0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00c      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a27      	ldr	r2, [pc, #156]	; (800582c <TIM_CCxChannelCmd+0xe4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d008      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a26      	ldr	r2, [pc, #152]	; (8005830 <TIM_CCxChannelCmd+0xe8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <TIM_CCxChannelCmd+0x5e>
 800579c:	f641 7176 	movw	r1, #8054	; 0x1f76
 80057a0:	4824      	ldr	r0, [pc, #144]	; (8005834 <TIM_CCxChannelCmd+0xec>)
 80057a2:	f7fb fd52 	bl	800124a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d016      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d013      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d010      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	d00d      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d00a      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b14      	cmp	r3, #20
 80057c8:	d007      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b3c      	cmp	r3, #60	; 0x3c
 80057ce:	d004      	beq.n	80057da <TIM_CCxChannelCmd+0x92>
 80057d0:	f641 7177 	movw	r1, #8055	; 0x1f77
 80057d4:	4817      	ldr	r0, [pc, #92]	; (8005834 <TIM_CCxChannelCmd+0xec>)
 80057d6:	f7fb fd38 	bl	800124a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2201      	movs	r2, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	401a      	ands	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	431a      	orrs	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40013400 	.word	0x40013400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800
 8005830:	40015000 	.word	0x40015000
 8005834:	0800b038 	.word	0x0800b038

08005838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a37      	ldr	r2, [pc, #220]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d02c      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d027      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a33      	ldr	r2, [pc, #204]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d022      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a31      	ldr	r2, [pc, #196]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01d      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a30      	ldr	r2, [pc, #192]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2e      	ldr	r2, [pc, #184]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800589c:	f640 0193 	movw	r1, #2195	; 0x893
 80058a0:	4828      	ldr	r0, [pc, #160]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058a2:	f7fb fcd2 	bl	800124a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d025      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d021      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d01d      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b30      	cmp	r3, #48	; 0x30
 80058c4:	d019      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d015      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b50      	cmp	r3, #80	; 0x50
 80058d4:	d011      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b60      	cmp	r3, #96	; 0x60
 80058dc:	d00d      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b70      	cmp	r3, #112	; 0x70
 80058e4:	d009      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ee:	d004      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058f0:	f640 0194 	movw	r1, #2196	; 0x894
 80058f4:	4813      	ldr	r0, [pc, #76]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058f6:	f7fb fca8 	bl	800124a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d008      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800590a:	f640 0195 	movw	r1, #2197	; 0x895
 800590e:	480d      	ldr	r0, [pc, #52]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005910:	f7fb fc9b 	bl	800124a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d114      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800591e:	2302      	movs	r3, #2
 8005920:	e0db      	b.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 8005922:	bf00      	nop
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40001000 	.word	0x40001000
 8005934:	40001400 	.word	0x40001400
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40015000 	.word	0x40015000
 8005944:	0800b070 	.word	0x0800b070
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x14e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a5c      	ldr	r2, [pc, #368]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x14e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a5a      	ldr	r2, [pc, #360]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d161      	bne.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x212>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d054      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005996:	d04f      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a0:	d04a      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059aa:	d045      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b4:	d040      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80059be:	d03b      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059c8:	d036      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059d2:	d031      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80059dc:	d02c      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059e6:	d027      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80059f0:	d022      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80059fa:	d01d      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8005a04:	d018      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a0e:	d013      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8005a18:	d00e      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8005a22:	d009      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8005a2c:	d004      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x200>
 8005a2e:	f640 01a7 	movw	r1, #2215	; 0x8a7
 8005a32:	482f      	ldr	r0, [pc, #188]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 8005a34:	f7fb fc09 	bl	800124a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01d      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d018      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a10      	ldr	r2, [pc, #64]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d10c      	bne.n	8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40015000 	.word	0x40015000
 8005af0:	0800b070 	.word	0x0800b070
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40014000 	.word	0x40014000

08005b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4c      	ldr	r2, [pc, #304]	; (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01d      	beq.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4a      	ldr	r2, [pc, #296]	; (8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a49      	ldr	r2, [pc, #292]	; (8005c4c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a47      	ldr	r2, [pc, #284]	; (8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x150>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a46      	ldr	r2, [pc, #280]	; (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a44      	ldr	r2, [pc, #272]	; (8005c58 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8005b4a:	f640 01dc 	movw	r1, #2268	; 0x8dc
 8005b4e:	4843      	ldr	r0, [pc, #268]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005b50:	f7fb fb7b 	bl	800124a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b5c:	d008      	beq.n	8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005b66:	f640 01dd 	movw	r1, #2269	; 0x8dd
 8005b6a:	483c      	ldr	r0, [pc, #240]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005b6c:	f7fb fb6d 	bl	800124a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b78:	d008      	beq.n	8005b8c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8005b82:	f640 01de 	movw	r1, #2270	; 0x8de
 8005b86:	4835      	ldr	r0, [pc, #212]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005b88:	f7fb fb5f 	bl	800124a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d013      	beq.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9c:	d00e      	beq.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba6:	d009      	beq.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005bb2:	f640 01df 	movw	r1, #2271	; 0x8df
 8005bb6:	4829      	ldr	r0, [pc, #164]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005bb8:	f7fb fb47 	bl	800124a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2bff      	cmp	r3, #255	; 0xff
 8005bc2:	d904      	bls.n	8005bce <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 8005bc4:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 8005bc8:	4824      	ldr	r0, [pc, #144]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005bca:	f7fb fb3e 	bl	800124a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d008      	beq.n	8005bea <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8005be0:	f640 01e1 	movw	r1, #2273	; 0x8e1
 8005be4:	481d      	ldr	r0, [pc, #116]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005be6:	f7fb fb30 	bl	800124a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfa:	d004      	beq.n	8005c06 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8005bfc:	f640 01e2 	movw	r1, #2274	; 0x8e2
 8005c00:	4816      	ldr	r0, [pc, #88]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c02:	f7fb fb22 	bl	800124a <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b0f      	cmp	r3, #15
 8005c0c:	d904      	bls.n	8005c18 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8005c0e:	f640 01e3 	movw	r1, #2275	; 0x8e3
 8005c12:	4812      	ldr	r0, [pc, #72]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c14:	f7fb fb19 	bl	800124a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c20:	d008      	beq.n	8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8005c2a:	f640 01e4 	movw	r1, #2276	; 0x8e4
 8005c2e:	480b      	ldr	r0, [pc, #44]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c30:	f7fb fb0b 	bl	800124a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d110      	bne.n	8005c60 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0e6      	b.n	8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0x310>
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800
 8005c58:	40015000 	.word	0x40015000
 8005c5c:	0800b070 	.word	0x0800b070
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4e      	ldr	r2, [pc, #312]	; (8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a4c      	ldr	r2, [pc, #304]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a4b      	ldr	r2, [pc, #300]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d114      	bne.n	8005d22 <HAL_TIMEx_ConfigBreakDeadTime+0x222>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d08:	d004      	beq.n	8005d14 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8005d0a:	f640 01f9 	movw	r1, #2297	; 0x8f9
 8005d0e:	4845      	ldr	r0, [pc, #276]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8005d10:	f7fb fa9b 	bl	800124a <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a3c      	ldr	r2, [pc, #240]	; (8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a3a      	ldr	r2, [pc, #232]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a39      	ldr	r2, [pc, #228]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d15e      	bne.n	8005dfe <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d48:	d008      	beq.n	8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8005d52:	f640 1102 	movw	r1, #2306	; 0x902
 8005d56:	4833      	ldr	r0, [pc, #204]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8005d58:	f7fb fa77 	bl	800124a <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8005d6e:	f640 1103 	movw	r1, #2307	; 0x903
 8005d72:	482c      	ldr	r0, [pc, #176]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8005d74:	f7fb fa69 	bl	800124a <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	2b0f      	cmp	r3, #15
 8005d7e:	d904      	bls.n	8005d8a <HAL_TIMEx_ConfigBreakDeadTime+0x28a>
 8005d80:	f640 1104 	movw	r1, #2308	; 0x904
 8005d84:	4827      	ldr	r0, [pc, #156]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8005d86:	f7fb fa60 	bl	800124a <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	051b      	lsls	r3, r3, #20
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d114      	bne.n	8005dfe <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d009      	beq.n	8005df0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d004      	beq.n	8005df0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8005de6:	f640 110e 	movw	r1, #2318	; 0x90e
 8005dea:	480e      	ldr	r0, [pc, #56]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8005dec:	f7fb fa2d 	bl	800124a <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40015000 	.word	0x40015000
 8005e24:	0800b070 	.word	0x0800b070

08005e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec6:	2b84      	cmp	r3, #132	; 0x84
 8005ec8:	d005      	beq.n	8005ed6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3303      	adds	r3, #3
 8005ed4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ee8:	f001 fa18 	bl	800731c <vTaskStartScheduler>
  
  return osOK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef4:	b089      	sub	sp, #36	; 0x24
 8005ef6:	af04      	add	r7, sp, #16
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <osThreadCreate+0x54>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01c      	beq.n	8005f46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685c      	ldr	r4, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691e      	ldr	r6, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff ffc8 	bl	8005eb4 <makeFreeRtosPriority>
 8005f24:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f2e:	9202      	str	r2, [sp, #8]
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	9100      	str	r1, [sp, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4632      	mov	r2, r6
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 ffa4 	bl	8006e88 <xTaskCreateStatic>
 8005f40:	4603      	mov	r3, r0
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e01c      	b.n	8005f80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685c      	ldr	r4, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f52:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ffaa 	bl	8005eb4 <makeFreeRtosPriority>
 8005f60:	4602      	mov	r2, r0
 8005f62:	f107 030c 	add.w	r3, r7, #12
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	9200      	str	r2, [sp, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 ffe6 	bl	8006f42 <xTaskCreate>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e000      	b.n	8005f82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0208 	add.w	r2, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f103 0208 	add.w	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d103      	bne.n	800604c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e00c      	b.n	8006066 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3308      	adds	r3, #8
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e002      	b.n	800605a <vListInsert+0x2e>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d2f6      	bcs.n	8006054 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6892      	ldr	r2, [r2, #8]
 80060b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6852      	ldr	r2, [r2, #4]
 80060be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d103      	bne.n	80060d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	1e5a      	subs	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueGenericReset+0x2a>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60bb      	str	r3, [r7, #8]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800611e:	f002 fcd1 	bl	8008ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	441a      	add	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	3b01      	subs	r3, #1
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	441a      	add	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d114      	bne.n	800619e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3310      	adds	r3, #16
 8006180:	4618      	mov	r0, r3
 8006182:	f001 fb9f 	bl	80078c4 <xTaskRemoveFromEventList>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d012      	beq.n	80061b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <xQueueGenericReset+0xcc>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	e009      	b.n	80061b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3310      	adds	r3, #16
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fef1 	bl	8005f8a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff feec 	bl	8005f8a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061b2:	f002 fcb7 	bl	8008b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061b6:	2301      	movs	r3, #1
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08e      	sub	sp, #56	; 0x38
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <xQueueGenericCreateStatic+0x52>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <xQueueGenericCreateStatic+0x56>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueGenericCreateStatic+0x58>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	623b      	str	r3, [r7, #32]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <xQueueGenericCreateStatic+0x7e>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <xQueueGenericCreateStatic+0x82>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <xQueueGenericCreateStatic+0x84>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	61fb      	str	r3, [r7, #28]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006262:	2350      	movs	r3, #80	; 0x50
 8006264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b50      	cmp	r3, #80	; 0x50
 800626a:	d00a      	beq.n	8006282 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61bb      	str	r3, [r7, #24]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006282:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006296:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f83f 	bl	8006328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3730      	adds	r7, #48	; 0x30
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericCreate+0x2a>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	613b      	str	r3, [r7, #16]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3350      	adds	r3, #80	; 0x50
 80062ec:	4618      	mov	r0, r3
 80062ee:	f002 fd0b 	bl	8008d08 <pvPortMalloc>
 80062f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d011      	beq.n	800631e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3350      	adds	r3, #80	; 0x50
 8006302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800630c:	79fa      	ldrb	r2, [r7, #7]
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f805 	bl	8006328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800631e:	69bb      	ldr	r3, [r7, #24]
	}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e002      	b.n	800634a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006356:	2101      	movs	r1, #1
 8006358:	69b8      	ldr	r0, [r7, #24]
 800635a:	f7ff fecb 	bl	80060f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800638e:	2300      	movs	r3, #0
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f81d 	bl	80063d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	4603      	mov	r3, r0
 80063aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80063ac:	2301      	movs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6939      	ldr	r1, [r7, #16]
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f7ff ff7a 	bl	80062b4 <xQueueGenericCreate>
 80063c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff ffd3 	bl	800636e <prvInitialiseMutex>

		return xNewQueue;
 80063c8:	68fb      	ldr	r3, [r7, #12]
	}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08e      	sub	sp, #56	; 0x38
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063e2:	2300      	movs	r3, #0
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <xQueueGenericSend+0x32>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <xQueueGenericSend+0x40>
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <xQueueGenericSend+0x44>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <xQueueGenericSend+0x46>
 8006418:	2300      	movs	r3, #0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <xQueueGenericSend+0x60>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d103      	bne.n	8006442 <xQueueGenericSend+0x6e>
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <xQueueGenericSend+0x72>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <xQueueGenericSend+0x74>
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xQueueGenericSend+0x8e>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	623b      	str	r3, [r7, #32]
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006462:	f001 fbff 	bl	8007c64 <xTaskGetSchedulerState>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <xQueueGenericSend+0x9e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <xQueueGenericSend+0xa2>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <xQueueGenericSend+0xa4>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <xQueueGenericSend+0xbe>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	61fb      	str	r3, [r7, #28]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006492:	f002 fb17 	bl	8008ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <xQueueGenericSend+0xd4>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d129      	bne.n	80064fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ae:	f000 fb52 	bl	8006b56 <prvCopyDataToQueue>
 80064b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d010      	beq.n	80064de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	3324      	adds	r3, #36	; 0x24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 f9ff 	bl	80078c4 <xTaskRemoveFromEventList>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064cc:	4b3f      	ldr	r3, [pc, #252]	; (80065cc <xQueueGenericSend+0x1f8>)
 80064ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	e00a      	b.n	80064f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064e4:	4b39      	ldr	r3, [pc, #228]	; (80065cc <xQueueGenericSend+0x1f8>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064f4:	f002 fb16 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e063      	b.n	80065c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006502:	f002 fb0f 	bl	8008b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006506:	2300      	movs	r3, #0
 8006508:	e05c      	b.n	80065c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4618      	mov	r0, r3
 8006516:	f001 fa37 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800651a:	2301      	movs	r3, #1
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800651e:	f002 fb01 	bl	8008b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006522:	f000 ff6d 	bl	8007400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006526:	f002 facd 	bl	8008ac4 <vPortEnterCritical>
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006530:	b25b      	sxtb	r3, r3
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d103      	bne.n	8006540 <xQueueGenericSend+0x16c>
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006546:	b25b      	sxtb	r3, r3
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d103      	bne.n	8006556 <xQueueGenericSend+0x182>
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006556:	f002 fae5 	bl	8008b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800655a:	1d3a      	adds	r2, r7, #4
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fa26 	bl	80079b4 <xTaskCheckForTimeOut>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d124      	bne.n	80065b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800656e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006570:	f000 fbe9 	bl	8006d46 <prvIsQueueFull>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d018      	beq.n	80065ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	3310      	adds	r3, #16
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f94e 	bl	8007824 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800658a:	f000 fb74 	bl	8006c76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800658e:	f000 ff45 	bl	800741c <xTaskResumeAll>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	f47f af7c 	bne.w	8006492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <xQueueGenericSend+0x1f8>)
 800659c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	e772      	b.n	8006492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ae:	f000 fb62 	bl	8006c76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b2:	f000 ff33 	bl	800741c <xTaskResumeAll>
 80065b6:	e76c      	b.n	8006492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ba:	f000 fb5c 	bl	8006c76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065be:	f000 ff2d 	bl	800741c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3738      	adds	r7, #56	; 0x38
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b090      	sub	sp, #64	; 0x40
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <xQueueGenericSendFromISR+0x3c>
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <xQueueGenericSendFromISR+0x40>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <xQueueGenericSendFromISR+0x42>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d103      	bne.n	800663a <xQueueGenericSendFromISR+0x6a>
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <xQueueGenericSendFromISR+0x6e>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <xQueueGenericSendFromISR+0x70>
 800663e:	2300      	movs	r3, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	623b      	str	r3, [r7, #32]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800665a:	f002 fb15 	bl	8008c88 <vPortValidateInterruptPriority>
	__asm volatile
 800665e:	f3ef 8211 	mrs	r2, BASEPRI
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	61fa      	str	r2, [r7, #28]
 8006674:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <xQueueGenericSendFromISR+0xbc>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d12f      	bne.n	80066ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066a2:	f000 fa58 	bl	8006b56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d112      	bne.n	80066d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d016      	beq.n	80066e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 f901 	bl	80078c4 <xTaskRemoveFromEventList>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00e      	beq.n	80066e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e007      	b.n	80066e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066da:	3301      	adds	r3, #1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	b25a      	sxtb	r2, r3
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066e6:	2301      	movs	r3, #1
 80066e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80066ea:	e001      	b.n	80066f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f383 8811 	msr	BASEPRI, r3
}
 80066fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3740      	adds	r7, #64	; 0x40
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <xQueueReceive+0x30>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	623b      	str	r3, [r7, #32]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <xQueueReceive+0x3e>
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <xQueueReceive+0x42>
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <xQueueReceive+0x44>
 800674a:	2300      	movs	r3, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xQueueReceive+0x5e>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	61fb      	str	r3, [r7, #28]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006766:	f001 fa7d 	bl	8007c64 <xTaskGetSchedulerState>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <xQueueReceive+0x6e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <xQueueReceive+0x72>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <xQueueReceive+0x74>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xQueueReceive+0x8e>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	61bb      	str	r3, [r7, #24]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006796:	f002 f995 	bl	8008ac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01f      	beq.n	80067e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067aa:	f000 fa3e 	bl	8006c2a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	1e5a      	subs	r2, r3, #1
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	3310      	adds	r3, #16
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 f87e 	bl	80078c4 <xTaskRemoveFromEventList>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067ce:	4b3d      	ldr	r3, [pc, #244]	; (80068c4 <xQueueReceive+0x1bc>)
 80067d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067de:	f002 f9a1 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e069      	b.n	80068ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ec:	f002 f99a 	bl	8008b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e062      	b.n	80068ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067fa:	f107 0310 	add.w	r3, r7, #16
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 f8c2 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006808:	f002 f98c 	bl	8008b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800680c:	f000 fdf8 	bl	8007400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006810:	f002 f958 	bl	8008ac4 <vPortEnterCritical>
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800681a:	b25b      	sxtb	r3, r3
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d103      	bne.n	800682a <xQueueReceive+0x122>
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006830:	b25b      	sxtb	r3, r3
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d103      	bne.n	8006840 <xQueueReceive+0x138>
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006840:	f002 f970 	bl	8008b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006844:	1d3a      	adds	r2, r7, #4
 8006846:	f107 0310 	add.w	r3, r7, #16
 800684a:	4611      	mov	r1, r2
 800684c:	4618      	mov	r0, r3
 800684e:	f001 f8b1 	bl	80079b4 <xTaskCheckForTimeOut>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d123      	bne.n	80068a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685a:	f000 fa5e 	bl	8006d1a <prvIsQueueEmpty>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d017      	beq.n	8006894 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	3324      	adds	r3, #36	; 0x24
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f000 ffd9 	bl	8007824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006874:	f000 f9ff 	bl	8006c76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006878:	f000 fdd0 	bl	800741c <xTaskResumeAll>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d189      	bne.n	8006796 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <xQueueReceive+0x1bc>)
 8006884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	e780      	b.n	8006796 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006896:	f000 f9ee 	bl	8006c76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800689a:	f000 fdbf 	bl	800741c <xTaskResumeAll>
 800689e:	e77a      	b.n	8006796 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068a2:	f000 f9e8 	bl	8006c76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068a6:	f000 fdb9 	bl	800741c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ac:	f000 fa35 	bl	8006d1a <prvIsQueueEmpty>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f43f af6f 	beq.w	8006796 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3730      	adds	r7, #48	; 0x30
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	e000ed04 	.word	0xe000ed04

080068c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08e      	sub	sp, #56	; 0x38
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80068da:	2300      	movs	r3, #0
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	623b      	str	r3, [r7, #32]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	61fb      	str	r3, [r7, #28]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006918:	f001 f9a4 	bl	8007c64 <xTaskGetSchedulerState>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <xQueueSemaphoreTake+0x60>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueSemaphoreTake+0x64>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueSemaphoreTake+0x66>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	61bb      	str	r3, [r7, #24]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006948:	f002 f8bc 	bl	8008ac4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	d024      	beq.n	80069a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	1e5a      	subs	r2, r3, #1
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006968:	f001 fb24 	bl	8007fb4 <pvTaskIncrementMutexHeldCount>
 800696c:	4602      	mov	r2, r0
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00f      	beq.n	800699a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	3310      	adds	r3, #16
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ffa0 	bl	80078c4 <xTaskRemoveFromEventList>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800698a:	4b54      	ldr	r3, [pc, #336]	; (8006adc <xQueueSemaphoreTake+0x214>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800699a:	f002 f8c3 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 800699e:	2301      	movs	r3, #1
 80069a0:	e097      	b.n	8006ad2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d111      	bne.n	80069cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	617b      	str	r3, [r7, #20]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80069c4:	f002 f8ae 	bl	8008b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e082      	b.n	8006ad2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 ffd6 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069e0:	f002 f8a0 	bl	8008b24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e4:	f000 fd0c 	bl	8007400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069e8:	f002 f86c 	bl	8008ac4 <vPortEnterCritical>
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <xQueueSemaphoreTake+0x13a>
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d103      	bne.n	8006a18 <xQueueSemaphoreTake+0x150>
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a18:	f002 f884 	bl	8008b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	f107 030c 	add.w	r3, r7, #12
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 ffc5 	bl	80079b4 <xTaskCheckForTimeOut>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d132      	bne.n	8006a96 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a32:	f000 f972 	bl	8006d1a <prvIsQueueEmpty>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d026      	beq.n	8006a8a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006a44:	f002 f83e 	bl	8008ac4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f927 	bl	8007ca0 <xTaskPriorityInherit>
 8006a52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006a54:	f002 f866 	bl	8008b24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	3324      	adds	r3, #36	; 0x24
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fedf 	bl	8007824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a68:	f000 f905 	bl	8006c76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a6c:	f000 fcd6 	bl	800741c <xTaskResumeAll>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f47f af68 	bne.w	8006948 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a78:	4b18      	ldr	r3, [pc, #96]	; (8006adc <xQueueSemaphoreTake+0x214>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	e75e      	b.n	8006948 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a8c:	f000 f8f3 	bl	8006c76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a90:	f000 fcc4 	bl	800741c <xTaskResumeAll>
 8006a94:	e758      	b.n	8006948 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a98:	f000 f8ed 	bl	8006c76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a9c:	f000 fcbe 	bl	800741c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aa2:	f000 f93a 	bl	8006d1a <prvIsQueueEmpty>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f43f af4d 	beq.w	8006948 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006ab4:	f002 f806 	bl	8008ac4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aba:	f000 f834 	bl	8006b26 <prvGetDisinheritPriorityAfterTimeout>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 f9e6 	bl	8007e98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006acc:	f002 f82a 	bl	8008b24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3738      	adds	r7, #56	; 0x38
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <vQueueDelete+0x28>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60bb      	str	r3, [r7, #8]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f95f 	bl	8006dcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f002 f9c1 	bl	8008ea0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d006      	beq.n	8006b44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1c3 0312 	rsb	r3, r3, #18
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e001      	b.n	8006b48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b48:	68fb      	ldr	r3, [r7, #12]
	}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10d      	bne.n	8006b90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d14d      	bne.n	8006c18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f903 	bl	8007d8c <xTaskPriorityDisinherit>
 8006b86:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
 8006b8e:	e043      	b.n	8006c18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d119      	bne.n	8006bca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6858      	ldr	r0, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	f003 fd45 	bl	800a630 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	441a      	add	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d32b      	bcc.n	8006c18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	e026      	b.n	8006c18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68d8      	ldr	r0, [r3, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	f003 fd2b 	bl	800a630 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	425b      	negs	r3, r3
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d207      	bcs.n	8006c06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	425b      	negs	r3, r3
 8006c00:	441a      	add	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d105      	bne.n	8006c18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c20:	697b      	ldr	r3, [r7, #20]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d018      	beq.n	8006c6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d303      	bcc.n	8006c5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68d9      	ldr	r1, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	461a      	mov	r2, r3
 8006c68:	6838      	ldr	r0, [r7, #0]
 8006c6a:	f003 fce1 	bl	800a630 <memcpy>
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c7e:	f001 ff21 	bl	8008ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c8a:	e011      	b.n	8006cb0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fe13 	bl	80078c4 <xTaskRemoveFromEventList>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ca4:	f000 fee8 	bl	8007a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dce9      	bgt.n	8006c8c <prvUnlockQueue+0x16>
 8006cb8:	e000      	b.n	8006cbc <prvUnlockQueue+0x46>
					break;
 8006cba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	22ff      	movs	r2, #255	; 0xff
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006cc4:	f001 ff2e 	bl	8008b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cc8:	f001 fefc 	bl	8008ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cd2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cd4:	e011      	b.n	8006cfa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d012      	beq.n	8006d04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3310      	adds	r3, #16
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fdee 	bl	80078c4 <xTaskRemoveFromEventList>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cee:	f000 fec3 	bl	8007a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	dce9      	bgt.n	8006cd6 <prvUnlockQueue+0x60>
 8006d02:	e000      	b.n	8006d06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d0e:	f001 ff09 	bl	8008b24 <vPortExitCritical>
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d22:	f001 fecf 	bl	8008ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e001      	b.n	8006d38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d38:	f001 fef4 	bl	8008b24 <vPortExitCritical>

	return xReturn;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d4e:	f001 feb9 	bl	8008ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d102      	bne.n	8006d64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e001      	b.n	8006d68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d68:	f001 fedc 	bl	8008b24 <vPortExitCritical>

	return xReturn;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e014      	b.n	8006db2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d88:	4a0f      	ldr	r2, [pc, #60]	; (8006dc8 <vQueueAddToRegistry+0x50>)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d94:	490c      	ldr	r1, [pc, #48]	; (8006dc8 <vQueueAddToRegistry+0x50>)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <vQueueAddToRegistry+0x50>)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4413      	add	r3, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006daa:	e006      	b.n	8006dba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d9e7      	bls.n	8006d88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	200008a8 	.word	0x200008a8

08006dcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	e016      	b.n	8006e08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <vQueueUnregisterQueue+0x50>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d10b      	bne.n	8006e02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <vQueueUnregisterQueue+0x50>)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2100      	movs	r1, #0
 8006df0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006df4:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <vQueueUnregisterQueue+0x50>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	605a      	str	r2, [r3, #4]
				break;
 8006e00:	e006      	b.n	8006e10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	d9e5      	bls.n	8006dda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	200008a8 	.word	0x200008a8

08006e20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e30:	f001 fe48 	bl	8008ac4 <vPortEnterCritical>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e3a:	b25b      	sxtb	r3, r3
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d103      	bne.n	8006e4a <vQueueWaitForMessageRestricted+0x2a>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d103      	bne.n	8006e60 <vQueueWaitForMessageRestricted+0x40>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e60:	f001 fe60 	bl	8008b24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3324      	adds	r3, #36	; 0x24
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fcf9 	bl	800786c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e7a:	6978      	ldr	r0, [r7, #20]
 8006e7c:	f7ff fefb 	bl	8006c76 <prvUnlockQueue>
	}
 8006e80:	bf00      	nop
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	; 0x38
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	623b      	str	r3, [r7, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <xTaskCreateStatic+0x46>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	61fb      	str	r3, [r7, #28]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ece:	23ac      	movs	r3, #172	; 0xac
 8006ed0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2bac      	cmp	r3, #172	; 0xac
 8006ed6:	d00a      	beq.n	8006eee <xTaskCreateStatic+0x66>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	61bb      	str	r3, [r7, #24]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006eee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01e      	beq.n	8006f34 <xTaskCreateStatic+0xac>
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01b      	beq.n	8006f34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9303      	str	r3, [sp, #12]
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	9302      	str	r3, [sp, #8]
 8006f16:	f107 0314 	add.w	r3, r7, #20
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f850 	bl	8006fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f2e:	f000 f8f7 	bl	8007120 <prvAddNewTaskToReadyList>
 8006f32:	e001      	b.n	8006f38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f38:	697b      	ldr	r3, [r7, #20]
	}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3728      	adds	r7, #40	; 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b08c      	sub	sp, #48	; 0x30
 8006f46:	af04      	add	r7, sp, #16
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fed6 	bl	8008d08 <pvPortMalloc>
 8006f5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f64:	20ac      	movs	r0, #172	; 0xac
 8006f66:	f001 fecf 	bl	8008d08 <pvPortMalloc>
 8006f6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
 8006f78:	e005      	b.n	8006f86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f7a:	6978      	ldr	r0, [r7, #20]
 8006f7c:	f001 ff90 	bl	8008ea0 <vPortFree>
 8006f80:	e001      	b.n	8006f86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d017      	beq.n	8006fbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	2300      	movs	r3, #0
 8006f98:	9303      	str	r3, [sp, #12]
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	9302      	str	r3, [sp, #8]
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f80e 	bl	8006fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fb0:	69f8      	ldr	r0, [r7, #28]
 8006fb2:	f000 f8b5 	bl	8007120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	e002      	b.n	8006fc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	21a5      	movs	r1, #165	; 0xa5
 8006fe6:	f003 f9ed 	bl	800a3c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f023 0307 	bic.w	r3, r3, #7
 8007002:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <prvInitialiseNewTask+0x58>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	617b      	str	r3, [r7, #20]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01f      	beq.n	800706a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
 800702e:	e012      	b.n	8007056 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	7819      	ldrb	r1, [r3, #0]
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	3334      	adds	r3, #52	; 0x34
 8007040:	460a      	mov	r2, r1
 8007042:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3301      	adds	r3, #1
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	2b0f      	cmp	r3, #15
 800705a:	d9e9      	bls.n	8007030 <prvInitialiseNewTask+0x64>
 800705c:	e000      	b.n	8007060 <prvInitialiseNewTask+0x94>
			{
				break;
 800705e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007068:	e003      	b.n	8007072 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	2b11      	cmp	r3, #17
 8007076:	d901      	bls.n	800707c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007078:	2311      	movs	r3, #17
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007086:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	2200      	movs	r2, #0
 800708c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	3304      	adds	r3, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe ff99 	bl	8005fca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	3318      	adds	r3, #24
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe ff94 	bl	8005fca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	f1c3 0212 	rsb	r2, r3, #18
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	2200      	movs	r2, #0
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	2200      	movs	r2, #0
 80070c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	3358      	adds	r3, #88	; 0x58
 80070d2:	224c      	movs	r2, #76	; 0x4c
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f003 f974 	bl	800a3c4 <memset>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <prvInitialiseNewTask+0x148>)
 80070e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	4a0c      	ldr	r2, [pc, #48]	; (8007118 <prvInitialiseNewTask+0x14c>)
 80070e6:	661a      	str	r2, [r3, #96]	; 0x60
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	4a0c      	ldr	r2, [pc, #48]	; (800711c <prvInitialiseNewTask+0x150>)
 80070ec:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	69b8      	ldr	r0, [r7, #24]
 80070f4:	f001 fbba 	bl	800886c <pxPortInitialiseStack>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800710a:	bf00      	nop
 800710c:	3720      	adds	r7, #32
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200092f4 	.word	0x200092f4
 8007118:	2000935c 	.word	0x2000935c
 800711c:	200093c4 	.word	0x200093c4

08007120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007128:	f001 fccc 	bl	8008ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800712c:	4b2c      	ldr	r3, [pc, #176]	; (80071e0 <prvAddNewTaskToReadyList+0xc0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <prvAddNewTaskToReadyList+0xc0>)
 8007134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007136:	4b2b      	ldr	r3, [pc, #172]	; (80071e4 <prvAddNewTaskToReadyList+0xc4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800713e:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <prvAddNewTaskToReadyList+0xc4>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007144:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <prvAddNewTaskToReadyList+0xc0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d110      	bne.n	800716e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800714c:	f000 fcb8 	bl	8007ac0 <prvInitialiseTaskLists>
 8007150:	e00d      	b.n	800716e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007152:	4b25      	ldr	r3, [pc, #148]	; (80071e8 <prvAddNewTaskToReadyList+0xc8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800715a:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <prvAddNewTaskToReadyList+0xc4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	429a      	cmp	r2, r3
 8007166:	d802      	bhi.n	800716e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007168:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <prvAddNewTaskToReadyList+0xc4>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800716e:	4b1f      	ldr	r3, [pc, #124]	; (80071ec <prvAddNewTaskToReadyList+0xcc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <prvAddNewTaskToReadyList+0xcc>)
 8007176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007178:	4b1c      	ldr	r3, [pc, #112]	; (80071ec <prvAddNewTaskToReadyList+0xcc>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	2201      	movs	r2, #1
 8007186:	409a      	lsls	r2, r3
 8007188:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <prvAddNewTaskToReadyList+0xd0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4313      	orrs	r3, r2
 800718e:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <prvAddNewTaskToReadyList+0xd0>)
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <prvAddNewTaskToReadyList+0xd4>)
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4610      	mov	r0, r2
 80071aa:	f7fe ff1b 	bl	8005fe4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ae:	f001 fcb9 	bl	8008b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <prvAddNewTaskToReadyList+0xc8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00e      	beq.n	80071d8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <prvAddNewTaskToReadyList+0xc4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d207      	bcs.n	80071d8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <prvAddNewTaskToReadyList+0xd8>)
 80071ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20000ac4 	.word	0x20000ac4
 80071e4:	200008e8 	.word	0x200008e8
 80071e8:	20000ad0 	.word	0x20000ad0
 80071ec:	20000ae0 	.word	0x20000ae0
 80071f0:	20000acc 	.word	0x20000acc
 80071f4:	200008ec 	.word	0x200008ec
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007204:	f001 fc5e 	bl	8008ac4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <vTaskDelete+0x18>
 800720e:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <vTaskDelete+0xf8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	e000      	b.n	8007216 <vTaskDelete+0x1a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe ff3e 	bl	800609e <uxListRemove>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4932      	ldr	r1, [pc, #200]	; (80072f8 <vTaskDelete+0xfc>)
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <vTaskDelete+0x58>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	2201      	movs	r2, #1
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	43da      	mvns	r2, r3
 800724a:	4b2c      	ldr	r3, [pc, #176]	; (80072fc <vTaskDelete+0x100>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4013      	ands	r3, r2
 8007250:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <vTaskDelete+0x100>)
 8007252:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3318      	adds	r3, #24
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe ff1c 	bl	800609e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007266:	4b26      	ldr	r3, [pc, #152]	; (8007300 <vTaskDelete+0x104>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3301      	adds	r3, #1
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <vTaskDelete+0x104>)
 800726e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007270:	4b20      	ldr	r3, [pc, #128]	; (80072f4 <vTaskDelete+0xf8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d10b      	bne.n	8007292 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3304      	adds	r3, #4
 800727e:	4619      	mov	r1, r3
 8007280:	4820      	ldr	r0, [pc, #128]	; (8007304 <vTaskDelete+0x108>)
 8007282:	f7fe feaf 	bl	8005fe4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007286:	4b20      	ldr	r3, [pc, #128]	; (8007308 <vTaskDelete+0x10c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	4a1e      	ldr	r2, [pc, #120]	; (8007308 <vTaskDelete+0x10c>)
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	e009      	b.n	80072a6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007292:	4b1e      	ldr	r3, [pc, #120]	; (800730c <vTaskDelete+0x110>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3b01      	subs	r3, #1
 8007298:	4a1c      	ldr	r2, [pc, #112]	; (800730c <vTaskDelete+0x110>)
 800729a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fc7d 	bl	8007b9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80072a2:	f000 fcaf 	bl	8007c04 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80072a6:	f001 fc3d 	bl	8008b24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80072aa:	4b19      	ldr	r3, [pc, #100]	; (8007310 <vTaskDelete+0x114>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01b      	beq.n	80072ea <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <vTaskDelete+0xf8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d116      	bne.n	80072ea <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80072bc:	4b15      	ldr	r3, [pc, #84]	; (8007314 <vTaskDelete+0x118>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <vTaskDelete+0xde>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	60bb      	str	r3, [r7, #8]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80072da:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <vTaskDelete+0x11c>)
 80072dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200008e8 	.word	0x200008e8
 80072f8:	200008ec 	.word	0x200008ec
 80072fc:	20000acc 	.word	0x20000acc
 8007300:	20000ae0 	.word	0x20000ae0
 8007304:	20000a98 	.word	0x20000a98
 8007308:	20000aac 	.word	0x20000aac
 800730c:	20000ac4 	.word	0x20000ac4
 8007310:	20000ad0 	.word	0x20000ad0
 8007314:	20000aec 	.word	0x20000aec
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800732a:	463a      	mov	r2, r7
 800732c:	1d39      	adds	r1, r7, #4
 800732e:	f107 0308 	add.w	r3, r7, #8
 8007332:	4618      	mov	r0, r3
 8007334:	f7f9 fe3a 	bl	8000fac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	9202      	str	r2, [sp, #8]
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	2300      	movs	r3, #0
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	2300      	movs	r3, #0
 8007348:	460a      	mov	r2, r1
 800734a:	4925      	ldr	r1, [pc, #148]	; (80073e0 <vTaskStartScheduler+0xc4>)
 800734c:	4825      	ldr	r0, [pc, #148]	; (80073e4 <vTaskStartScheduler+0xc8>)
 800734e:	f7ff fd9b 	bl	8006e88 <xTaskCreateStatic>
 8007352:	4603      	mov	r3, r0
 8007354:	4a24      	ldr	r2, [pc, #144]	; (80073e8 <vTaskStartScheduler+0xcc>)
 8007356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007358:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <vTaskStartScheduler+0xcc>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007360:	2301      	movs	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e001      	b.n	800736a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d102      	bne.n	8007376 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007370:	f000 fe9a 	bl	80080a8 <xTimerCreateTimerTask>
 8007374:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d11d      	bne.n	80073b8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	613b      	str	r3, [r7, #16]
}
 800738e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007390:	4b16      	ldr	r3, [pc, #88]	; (80073ec <vTaskStartScheduler+0xd0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3358      	adds	r3, #88	; 0x58
 8007396:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <vTaskStartScheduler+0xd4>)
 8007398:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800739a:	4b16      	ldr	r3, [pc, #88]	; (80073f4 <vTaskStartScheduler+0xd8>)
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <vTaskStartScheduler+0xdc>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073a8:	4b14      	ldr	r3, [pc, #80]	; (80073fc <vTaskStartScheduler+0xe0>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80073ae:	f7f9 fde2 	bl	8000f76 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073b2:	f001 fae5 	bl	8008980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073b6:	e00e      	b.n	80073d6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d10a      	bne.n	80073d6 <vTaskStartScheduler+0xba>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <vTaskStartScheduler+0xb8>
}
 80073d6:	bf00      	nop
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	0800b0ac 	.word	0x0800b0ac
 80073e4:	08007a91 	.word	0x08007a91
 80073e8:	20000ae8 	.word	0x20000ae8
 80073ec:	200008e8 	.word	0x200008e8
 80073f0:	20000068 	.word	0x20000068
 80073f4:	20000ae4 	.word	0x20000ae4
 80073f8:	20000ad0 	.word	0x20000ad0
 80073fc:	20000ac8 	.word	0x20000ac8

08007400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <vTaskSuspendAll+0x18>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	4a03      	ldr	r2, [pc, #12]	; (8007418 <vTaskSuspendAll+0x18>)
 800740c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800740e:	bf00      	nop
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000aec 	.word	0x20000aec

0800741c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800742a:	4b41      	ldr	r3, [pc, #260]	; (8007530 <xTaskResumeAll+0x114>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <xTaskResumeAll+0x2c>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	603b      	str	r3, [r7, #0]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007448:	f001 fb3c 	bl	8008ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800744c:	4b38      	ldr	r3, [pc, #224]	; (8007530 <xTaskResumeAll+0x114>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3b01      	subs	r3, #1
 8007452:	4a37      	ldr	r2, [pc, #220]	; (8007530 <xTaskResumeAll+0x114>)
 8007454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007456:	4b36      	ldr	r3, [pc, #216]	; (8007530 <xTaskResumeAll+0x114>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d161      	bne.n	8007522 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800745e:	4b35      	ldr	r3, [pc, #212]	; (8007534 <xTaskResumeAll+0x118>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d05d      	beq.n	8007522 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007466:	e02e      	b.n	80074c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007468:	4b33      	ldr	r3, [pc, #204]	; (8007538 <xTaskResumeAll+0x11c>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3318      	adds	r3, #24
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fe12 	bl	800609e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3304      	adds	r3, #4
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fe0d 	bl	800609e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	2201      	movs	r2, #1
 800748a:	409a      	lsls	r2, r3
 800748c:	4b2b      	ldr	r3, [pc, #172]	; (800753c <xTaskResumeAll+0x120>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4313      	orrs	r3, r2
 8007492:	4a2a      	ldr	r2, [pc, #168]	; (800753c <xTaskResumeAll+0x120>)
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4a27      	ldr	r2, [pc, #156]	; (8007540 <xTaskResumeAll+0x124>)
 80074a4:	441a      	add	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fe fd99 	bl	8005fe4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <xTaskResumeAll+0x128>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80074c0:	4b21      	ldr	r3, [pc, #132]	; (8007548 <xTaskResumeAll+0x12c>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074c6:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <xTaskResumeAll+0x11c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1cc      	bne.n	8007468 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074d4:	f000 fb96 	bl	8007c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <xTaskResumeAll+0x130>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d010      	beq.n	8007506 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074e4:	f000 f858 	bl	8007598 <xTaskIncrementTick>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80074ee:	4b16      	ldr	r3, [pc, #88]	; (8007548 <xTaskResumeAll+0x12c>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f1      	bne.n	80074e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007500:	4b12      	ldr	r3, [pc, #72]	; (800754c <xTaskResumeAll+0x130>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007506:	4b10      	ldr	r3, [pc, #64]	; (8007548 <xTaskResumeAll+0x12c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800750e:	2301      	movs	r3, #1
 8007510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <xTaskResumeAll+0x134>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007522:	f001 faff 	bl	8008b24 <vPortExitCritical>

	return xAlreadyYielded;
 8007526:	68bb      	ldr	r3, [r7, #8]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000aec 	.word	0x20000aec
 8007534:	20000ac4 	.word	0x20000ac4
 8007538:	20000a84 	.word	0x20000a84
 800753c:	20000acc 	.word	0x20000acc
 8007540:	200008ec 	.word	0x200008ec
 8007544:	200008e8 	.word	0x200008e8
 8007548:	20000ad8 	.word	0x20000ad8
 800754c:	20000ad4 	.word	0x20000ad4
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <xTaskGetTickCount+0x1c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007560:	687b      	ldr	r3, [r7, #4]
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000ac8 	.word	0x20000ac8

08007574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757a:	f001 fb85 	bl	8008c88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007582:	4b04      	ldr	r3, [pc, #16]	; (8007594 <xTaskGetTickCountFromISR+0x20>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007588:	683b      	ldr	r3, [r7, #0]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000ac8 	.word	0x20000ac8

08007598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a2:	4b4e      	ldr	r3, [pc, #312]	; (80076dc <xTaskIncrementTick+0x144>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 808e 	bne.w	80076c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075ac:	4b4c      	ldr	r3, [pc, #304]	; (80076e0 <xTaskIncrementTick+0x148>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075b4:	4a4a      	ldr	r2, [pc, #296]	; (80076e0 <xTaskIncrementTick+0x148>)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d120      	bne.n	8007602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075c0:	4b48      	ldr	r3, [pc, #288]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <xTaskIncrementTick+0x46>
 80075e0:	4b40      	ldr	r3, [pc, #256]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	4b40      	ldr	r3, [pc, #256]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a3e      	ldr	r2, [pc, #248]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	4a3e      	ldr	r2, [pc, #248]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	4b3d      	ldr	r3, [pc, #244]	; (80076ec <xTaskIncrementTick+0x154>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	4a3c      	ldr	r2, [pc, #240]	; (80076ec <xTaskIncrementTick+0x154>)
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	f000 fb01 	bl	8007c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007602:	4b3b      	ldr	r3, [pc, #236]	; (80076f0 <xTaskIncrementTick+0x158>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d348      	bcc.n	800769e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800760c:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <xTaskIncrementTick+0x14c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <xTaskIncrementTick+0x158>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	601a      	str	r2, [r3, #0]
					break;
 800761e:	e03e      	b.n	800769e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007620:	4b30      	ldr	r3, [pc, #192]	; (80076e4 <xTaskIncrementTick+0x14c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d203      	bcs.n	8007640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007638:	4a2d      	ldr	r2, [pc, #180]	; (80076f0 <xTaskIncrementTick+0x158>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800763e:	e02e      	b.n	800769e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3304      	adds	r3, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fd2a 	bl	800609e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3318      	adds	r3, #24
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fd21 	bl	800609e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	2201      	movs	r2, #1
 8007662:	409a      	lsls	r2, r3
 8007664:	4b23      	ldr	r3, [pc, #140]	; (80076f4 <xTaskIncrementTick+0x15c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4313      	orrs	r3, r2
 800766a:	4a22      	ldr	r2, [pc, #136]	; (80076f4 <xTaskIncrementTick+0x15c>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4a1f      	ldr	r2, [pc, #124]	; (80076f8 <xTaskIncrementTick+0x160>)
 800767c:	441a      	add	r2, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	3304      	adds	r3, #4
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f7fe fcad 	bl	8005fe4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768e:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <xTaskIncrementTick+0x164>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	429a      	cmp	r2, r3
 8007696:	d3b9      	bcc.n	800760c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769c:	e7b6      	b.n	800760c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800769e:	4b17      	ldr	r3, [pc, #92]	; (80076fc <xTaskIncrementTick+0x164>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	4914      	ldr	r1, [pc, #80]	; (80076f8 <xTaskIncrementTick+0x160>)
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d901      	bls.n	80076ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <xTaskIncrementTick+0x168>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e004      	b.n	80076d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076c8:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <xTaskIncrementTick+0x16c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3301      	adds	r3, #1
 80076ce:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <xTaskIncrementTick+0x16c>)
 80076d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076d2:	697b      	ldr	r3, [r7, #20]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000aec 	.word	0x20000aec
 80076e0:	20000ac8 	.word	0x20000ac8
 80076e4:	20000a7c 	.word	0x20000a7c
 80076e8:	20000a80 	.word	0x20000a80
 80076ec:	20000adc 	.word	0x20000adc
 80076f0:	20000ae4 	.word	0x20000ae4
 80076f4:	20000acc 	.word	0x20000acc
 80076f8:	200008ec 	.word	0x200008ec
 80076fc:	200008e8 	.word	0x200008e8
 8007700:	20000ad8 	.word	0x20000ad8
 8007704:	20000ad4 	.word	0x20000ad4

08007708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800770e:	4b3d      	ldr	r3, [pc, #244]	; (8007804 <vTaskSwitchContext+0xfc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007716:	4b3c      	ldr	r3, [pc, #240]	; (8007808 <vTaskSwitchContext+0x100>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800771c:	e06e      	b.n	80077fc <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800771e:	4b3a      	ldr	r3, [pc, #232]	; (8007808 <vTaskSwitchContext+0x100>)
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007724:	f7f9 fc2e 	bl	8000f84 <getRunTimeCounterValue>
 8007728:	4603      	mov	r3, r0
 800772a:	4a38      	ldr	r2, [pc, #224]	; (800780c <vTaskSwitchContext+0x104>)
 800772c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800772e:	4b37      	ldr	r3, [pc, #220]	; (800780c <vTaskSwitchContext+0x104>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b37      	ldr	r3, [pc, #220]	; (8007810 <vTaskSwitchContext+0x108>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d909      	bls.n	800774e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800773a:	4b36      	ldr	r3, [pc, #216]	; (8007814 <vTaskSwitchContext+0x10c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007740:	4a32      	ldr	r2, [pc, #200]	; (800780c <vTaskSwitchContext+0x104>)
 8007742:	6810      	ldr	r0, [r2, #0]
 8007744:	4a32      	ldr	r2, [pc, #200]	; (8007810 <vTaskSwitchContext+0x108>)
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	1a82      	subs	r2, r0, r2
 800774a:	440a      	add	r2, r1
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800774e:	4b2f      	ldr	r3, [pc, #188]	; (800780c <vTaskSwitchContext+0x104>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a2f      	ldr	r2, [pc, #188]	; (8007810 <vTaskSwitchContext+0x108>)
 8007754:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007756:	4b2f      	ldr	r3, [pc, #188]	; (8007814 <vTaskSwitchContext+0x10c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b2d      	ldr	r3, [pc, #180]	; (8007814 <vTaskSwitchContext+0x10c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	429a      	cmp	r2, r3
 8007764:	d808      	bhi.n	8007778 <vTaskSwitchContext+0x70>
 8007766:	4b2b      	ldr	r3, [pc, #172]	; (8007814 <vTaskSwitchContext+0x10c>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <vTaskSwitchContext+0x10c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3334      	adds	r3, #52	; 0x34
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7f9 fc0e 	bl	8000f94 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b27      	ldr	r3, [pc, #156]	; (8007818 <vTaskSwitchContext+0x110>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	fab3 f383 	clz	r3, r3
 8007784:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	f1c3 031f 	rsb	r3, r3, #31
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	4923      	ldr	r1, [pc, #140]	; (800781c <vTaskSwitchContext+0x114>)
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <vTaskSwitchContext+0xb0>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	607b      	str	r3, [r7, #4]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <vTaskSwitchContext+0xae>
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a16      	ldr	r2, [pc, #88]	; (800781c <vTaskSwitchContext+0x114>)
 80077c4:	4413      	add	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	3308      	adds	r3, #8
 80077da:	429a      	cmp	r2, r3
 80077dc:	d104      	bne.n	80077e8 <vTaskSwitchContext+0xe0>
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	605a      	str	r2, [r3, #4]
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	4a09      	ldr	r2, [pc, #36]	; (8007814 <vTaskSwitchContext+0x10c>)
 80077f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077f2:	4b08      	ldr	r3, [pc, #32]	; (8007814 <vTaskSwitchContext+0x10c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3358      	adds	r3, #88	; 0x58
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <vTaskSwitchContext+0x118>)
 80077fa:	6013      	str	r3, [r2, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000aec 	.word	0x20000aec
 8007808:	20000ad8 	.word	0x20000ad8
 800780c:	20000af4 	.word	0x20000af4
 8007810:	20000af0 	.word	0x20000af0
 8007814:	200008e8 	.word	0x200008e8
 8007818:	20000acc 	.word	0x20000acc
 800781c:	200008ec 	.word	0x200008ec
 8007820:	20000068 	.word	0x20000068

08007824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	60fb      	str	r3, [r7, #12]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <vTaskPlaceOnEventList+0x44>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3318      	adds	r3, #24
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fe fbea 	bl	800602c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007858:	2101      	movs	r1, #1
 800785a:	6838      	ldr	r0, [r7, #0]
 800785c:	f000 fbbe 	bl	8007fdc <prvAddCurrentTaskToDelayedList>
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	200008e8 	.word	0x200008e8

0800786c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	617b      	str	r3, [r7, #20]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3318      	adds	r3, #24
 800789a:	4619      	mov	r1, r3
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7fe fba1 	bl	8005fe4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	68b8      	ldr	r0, [r7, #8]
 80078b2:	f000 fb93 	bl	8007fdc <prvAddCurrentTaskToDelayedList>
	}
 80078b6:	bf00      	nop
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200008e8 	.word	0x200008e8

080078c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60fb      	str	r3, [r7, #12]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3318      	adds	r3, #24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fbd2 	bl	800609e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <xTaskRemoveFromEventList+0xac>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11c      	bne.n	800793c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3304      	adds	r3, #4
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fbc9 	bl	800609e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	2201      	movs	r2, #1
 8007912:	409a      	lsls	r2, r3
 8007914:	4b17      	ldr	r3, [pc, #92]	; (8007974 <xTaskRemoveFromEventList+0xb0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4313      	orrs	r3, r2
 800791a:	4a16      	ldr	r2, [pc, #88]	; (8007974 <xTaskRemoveFromEventList+0xb0>)
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <xTaskRemoveFromEventList+0xb4>)
 800792c:	441a      	add	r2, r3
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f7fe fb55 	bl	8005fe4 <vListInsertEnd>
 800793a:	e005      	b.n	8007948 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	3318      	adds	r3, #24
 8007940:	4619      	mov	r1, r3
 8007942:	480e      	ldr	r0, [pc, #56]	; (800797c <xTaskRemoveFromEventList+0xb8>)
 8007944:	f7fe fb4e 	bl	8005fe4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <xTaskRemoveFromEventList+0xbc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	429a      	cmp	r2, r3
 8007954:	d905      	bls.n	8007962 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007956:	2301      	movs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800795a:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <xTaskRemoveFromEventList+0xc0>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e001      	b.n	8007966 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007966:	697b      	ldr	r3, [r7, #20]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000aec 	.word	0x20000aec
 8007974:	20000acc 	.word	0x20000acc
 8007978:	200008ec 	.word	0x200008ec
 800797c:	20000a84 	.word	0x20000a84
 8007980:	200008e8 	.word	0x200008e8
 8007984:	20000ad8 	.word	0x20000ad8

08007988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <vTaskInternalSetTimeOutState+0x24>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <vTaskInternalSetTimeOutState+0x28>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000adc 	.word	0x20000adc
 80079b0:	20000ac8 	.word	0x20000ac8

080079b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	613b      	str	r3, [r7, #16]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079f6:	f001 f865 	bl	8008ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <xTaskCheckForTimeOut+0xbc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d102      	bne.n	8007a1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e023      	b.n	8007a62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <xTaskCheckForTimeOut+0xc0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d007      	beq.n	8007a36 <xTaskCheckForTimeOut+0x82>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e015      	b.n	8007a62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d20b      	bcs.n	8007a58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ff9b 	bl	8007988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e004      	b.n	8007a62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a62:	f001 f85f 	bl	8008b24 <vPortExitCritical>

	return xReturn;
 8007a66:	69fb      	ldr	r3, [r7, #28]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000ac8 	.word	0x20000ac8
 8007a74:	20000adc 	.word	0x20000adc

08007a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <vTaskMissedYield+0x14>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000ad8 	.word	0x20000ad8

08007a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a98:	f000 f852 	bl	8007b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <prvIdleTask+0x28>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d9f9      	bls.n	8007a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <prvIdleTask+0x2c>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ab4:	e7f0      	b.n	8007a98 <prvIdleTask+0x8>
 8007ab6:	bf00      	nop
 8007ab8:	200008ec 	.word	0x200008ec
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	e00c      	b.n	8007ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <prvInitialiseTaskLists+0x60>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fa55 	bl	8005f8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b11      	cmp	r3, #17
 8007aea:	d9ef      	bls.n	8007acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aec:	480d      	ldr	r0, [pc, #52]	; (8007b24 <prvInitialiseTaskLists+0x64>)
 8007aee:	f7fe fa4c 	bl	8005f8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007af2:	480d      	ldr	r0, [pc, #52]	; (8007b28 <prvInitialiseTaskLists+0x68>)
 8007af4:	f7fe fa49 	bl	8005f8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007af8:	480c      	ldr	r0, [pc, #48]	; (8007b2c <prvInitialiseTaskLists+0x6c>)
 8007afa:	f7fe fa46 	bl	8005f8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007afe:	480c      	ldr	r0, [pc, #48]	; (8007b30 <prvInitialiseTaskLists+0x70>)
 8007b00:	f7fe fa43 	bl	8005f8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b04:	480b      	ldr	r0, [pc, #44]	; (8007b34 <prvInitialiseTaskLists+0x74>)
 8007b06:	f7fe fa40 	bl	8005f8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <prvInitialiseTaskLists+0x78>)
 8007b0c:	4a05      	ldr	r2, [pc, #20]	; (8007b24 <prvInitialiseTaskLists+0x64>)
 8007b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <prvInitialiseTaskLists+0x7c>)
 8007b12:	4a05      	ldr	r2, [pc, #20]	; (8007b28 <prvInitialiseTaskLists+0x68>)
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	200008ec 	.word	0x200008ec
 8007b24:	20000a54 	.word	0x20000a54
 8007b28:	20000a68 	.word	0x20000a68
 8007b2c:	20000a84 	.word	0x20000a84
 8007b30:	20000a98 	.word	0x20000a98
 8007b34:	20000ab0 	.word	0x20000ab0
 8007b38:	20000a7c 	.word	0x20000a7c
 8007b3c:	20000a80 	.word	0x20000a80

08007b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b46:	e019      	b.n	8007b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b48:	f000 ffbc 	bl	8008ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4c:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <prvCheckTasksWaitingTermination+0x50>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe faa0 	bl	800609e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a0b      	ldr	r2, [pc, #44]	; (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b72:	f000 ffd7 	bl	8008b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f810 	bl	8007b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e1      	bne.n	8007b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000a98 	.word	0x20000a98
 8007b94:	20000ac4 	.word	0x20000ac4
 8007b98:	20000aac 	.word	0x20000aac

08007b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3358      	adds	r3, #88	; 0x58
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f002 fc67 	bl	800a47c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f96f 	bl	8008ea0 <vPortFree>
				vPortFree( pxTCB );
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 f96c 	bl	8008ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bc8:	e018      	b.n	8007bfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d103      	bne.n	8007bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f963 	bl	8008ea0 <vPortFree>
	}
 8007bda:	e00f      	b.n	8007bfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d00a      	beq.n	8007bfc <prvDeleteTCB+0x60>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <prvDeleteTCB+0x5e>
	}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <prvResetNextTaskUnblockTime+0x38>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <prvResetNextTaskUnblockTime+0x3c>)
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c1c:	e008      	b.n	8007c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <prvResetNextTaskUnblockTime+0x38>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <prvResetNextTaskUnblockTime+0x3c>)
 8007c2e:	6013      	str	r3, [r2, #0]
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	20000a7c 	.word	0x20000a7c
 8007c40:	20000ae4 	.word	0x20000ae4

08007c44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <xTaskGetCurrentTaskHandle+0x1c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007c50:	687b      	ldr	r3, [r7, #4]
	}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	200008e8 	.word	0x200008e8

08007c64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <xTaskGetSchedulerState+0x34>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c72:	2301      	movs	r3, #1
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	e008      	b.n	8007c8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <xTaskGetSchedulerState+0x38>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c80:	2302      	movs	r3, #2
 8007c82:	607b      	str	r3, [r7, #4]
 8007c84:	e001      	b.n	8007c8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c86:	2300      	movs	r3, #0
 8007c88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c8a:	687b      	ldr	r3, [r7, #4]
	}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	20000ad0 	.word	0x20000ad0
 8007c9c:	20000aec 	.word	0x20000aec

08007ca0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d05e      	beq.n	8007d74 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <xTaskPriorityInherit+0xe0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d24e      	bcs.n	8007d62 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	db06      	blt.n	8007cda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ccc:	4b2c      	ldr	r3, [pc, #176]	; (8007d80 <xTaskPriorityInherit+0xe0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f1c3 0212 	rsb	r2, r3, #18
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6959      	ldr	r1, [r3, #20]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <xTaskPriorityInherit+0xe4>)
 8007cec:	4413      	add	r3, r2
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	d12f      	bne.n	8007d52 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe f9d1 	bl	800609e <uxListRemove>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	2201      	movs	r2, #1
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	43da      	mvns	r2, r3
 8007d0e:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <xTaskPriorityInherit+0xe8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4013      	ands	r3, r2
 8007d14:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <xTaskPriorityInherit+0xe8>)
 8007d16:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d18:	4b19      	ldr	r3, [pc, #100]	; (8007d80 <xTaskPriorityInherit+0xe0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	2201      	movs	r2, #1
 8007d28:	409a      	lsls	r2, r3
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <xTaskPriorityInherit+0xe8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <xTaskPriorityInherit+0xe8>)
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4a10      	ldr	r2, [pc, #64]	; (8007d84 <xTaskPriorityInherit+0xe4>)
 8007d42:	441a      	add	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f7fe f94a 	bl	8005fe4 <vListInsertEnd>
 8007d50:	e004      	b.n	8007d5c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d52:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <xTaskPriorityInherit+0xe0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e008      	b.n	8007d74 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <xTaskPriorityInherit+0xe0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d201      	bcs.n	8007d74 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d74:	68fb      	ldr	r3, [r7, #12]
	}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200008e8 	.word	0x200008e8
 8007d84:	200008ec 	.word	0x200008ec
 8007d88:	20000acc 	.word	0x20000acc

08007d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d06e      	beq.n	8007e80 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007da2:	4b3a      	ldr	r3, [pc, #232]	; (8007e8c <xTaskPriorityDisinherit+0x100>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d00a      	beq.n	8007dc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60fb      	str	r3, [r7, #12]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	60bb      	str	r3, [r7, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d044      	beq.n	8007e80 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d140      	bne.n	8007e80 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f94b 	bl	800609e <uxListRemove>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d115      	bne.n	8007e3a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e12:	491f      	ldr	r1, [pc, #124]	; (8007e90 <xTaskPriorityDisinherit+0x104>)
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xTaskPriorityDisinherit+0xae>
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	2201      	movs	r2, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	43da      	mvns	r2, r3
 8007e30:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <xTaskPriorityDisinherit+0x108>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4013      	ands	r3, r2
 8007e36:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <xTaskPriorityDisinherit+0x108>)
 8007e38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	f1c3 0212 	rsb	r2, r3, #18
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	2201      	movs	r2, #1
 8007e54:	409a      	lsls	r2, r3
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <xTaskPriorityDisinherit+0x108>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <xTaskPriorityDisinherit+0x108>)
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <xTaskPriorityDisinherit+0x104>)
 8007e6e:	441a      	add	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe f8b4 	bl	8005fe4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e80:	697b      	ldr	r3, [r7, #20]
	}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	200008e8 	.word	0x200008e8
 8007e90:	200008ec 	.word	0x200008ec
 8007e94:	20000acc 	.word	0x20000acc

08007e98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d077      	beq.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d902      	bls.n	8007ede <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e002      	b.n	8007ee4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d058      	beq.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d153      	bne.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ef8:	4b2b      	ldr	r3, [pc, #172]	; (8007fa8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d10a      	bne.n	8007f18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60bb      	str	r3, [r7, #8]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db04      	blt.n	8007f36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f1c3 0212 	rsb	r2, r3, #18
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	6959      	ldr	r1, [r3, #20]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4a19      	ldr	r2, [pc, #100]	; (8007fac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f46:	4413      	add	r3, r2
 8007f48:	4299      	cmp	r1, r3
 8007f4a:	d129      	bne.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe f8a4 	bl	800609e <uxListRemove>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	2201      	movs	r2, #1
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43da      	mvns	r2, r3
 8007f68:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	4a10      	ldr	r2, [pc, #64]	; (8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	2201      	movs	r2, #1
 8007f78:	409a      	lsls	r2, r3
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	4a0b      	ldr	r2, [pc, #44]	; (8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4a06      	ldr	r2, [pc, #24]	; (8007fac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f92:	441a      	add	r2, r3
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe f822 	bl	8005fe4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fa0:	bf00      	nop
 8007fa2:	3720      	adds	r7, #32
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	200008e8 	.word	0x200008e8
 8007fac:	200008ec 	.word	0x200008ec
 8007fb0:	20000acc 	.word	0x20000acc

08007fb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fb8:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fc6:	3201      	adds	r2, #1
 8007fc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
	}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	200008e8 	.word	0x200008e8

08007fdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fe6:	4b29      	ldr	r3, [pc, #164]	; (800808c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fec:	4b28      	ldr	r3, [pc, #160]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe f853 	bl	800609e <uxListRemove>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ffe:	4b24      	ldr	r3, [pc, #144]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	2201      	movs	r2, #1
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	43da      	mvns	r2, r3
 800800c:	4b21      	ldr	r3, [pc, #132]	; (8008094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4013      	ands	r3, r2
 8008012:	4a20      	ldr	r2, [pc, #128]	; (8008094 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008014:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d10a      	bne.n	8008034 <prvAddCurrentTaskToDelayedList+0x58>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008024:	4b1a      	ldr	r3, [pc, #104]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3304      	adds	r3, #4
 800802a:	4619      	mov	r1, r3
 800802c:	481a      	ldr	r0, [pc, #104]	; (8008098 <prvAddCurrentTaskToDelayedList+0xbc>)
 800802e:	f7fd ffd9 	bl	8005fe4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008032:	e026      	b.n	8008082 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4413      	add	r3, r2
 800803a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800803c:	4b14      	ldr	r3, [pc, #80]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	429a      	cmp	r2, r3
 800804a:	d209      	bcs.n	8008060 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800804c:	4b13      	ldr	r3, [pc, #76]	; (800809c <prvAddCurrentTaskToDelayedList+0xc0>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f7fd ffe7 	bl	800602c <vListInsert>
}
 800805e:	e010      	b.n	8008082 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3304      	adds	r3, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f7fd ffdd 	bl	800602c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	d202      	bcs.n	8008082 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800807c:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	6013      	str	r3, [r2, #0]
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000ac8 	.word	0x20000ac8
 8008090:	200008e8 	.word	0x200008e8
 8008094:	20000acc 	.word	0x20000acc
 8008098:	20000ab0 	.word	0x20000ab0
 800809c:	20000a80 	.word	0x20000a80
 80080a0:	20000a7c 	.word	0x20000a7c
 80080a4:	20000ae4 	.word	0x20000ae4

080080a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	; 0x28
 80080ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080b2:	f000 fb7b 	bl	80087ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080b6:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <xTimerCreateTimerTask+0x80>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d021      	beq.n	8008102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080c6:	1d3a      	adds	r2, r7, #4
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	f107 030c 	add.w	r3, r7, #12
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 ff85 	bl	8000fe0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	2302      	movs	r3, #2
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	2300      	movs	r3, #0
 80080e6:	460a      	mov	r2, r1
 80080e8:	4910      	ldr	r1, [pc, #64]	; (800812c <xTimerCreateTimerTask+0x84>)
 80080ea:	4811      	ldr	r0, [pc, #68]	; (8008130 <xTimerCreateTimerTask+0x88>)
 80080ec:	f7fe fecc 	bl	8006e88 <xTaskCreateStatic>
 80080f0:	4603      	mov	r3, r0
 80080f2:	4a10      	ldr	r2, [pc, #64]	; (8008134 <xTimerCreateTimerTask+0x8c>)
 80080f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080f6:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <xTimerCreateTimerTask+0x8c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080fe:	2301      	movs	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	613b      	str	r3, [r7, #16]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800811e:	697b      	ldr	r3, [r7, #20]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000b28 	.word	0x20000b28
 800812c:	0800b0dc 	.word	0x0800b0dc
 8008130:	0800838d 	.word	0x0800838d
 8008134:	20000b2c 	.word	0x20000b2c

08008138 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008146:	202c      	movs	r0, #44	; 0x2c
 8008148:	f000 fdde 	bl	8008d08 <pvPortMalloc>
 800814c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f805 	bl	800817a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008170:	697b      	ldr	r3, [r7, #20]
	}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
 8008186:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	617b      	str	r3, [r7, #20]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01e      	beq.n	80081e8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80081aa:	f000 faff 	bl	80087ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	6a3a      	ldr	r2, [r7, #32]
 80081c4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd fefd 	bl	8005fca <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d008      	beq.n	80081e8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081dc:	f043 0304 	orr.w	r3, r3, #4
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80081e8:	bf00      	nop
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	; 0x28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081fe:	2300      	movs	r3, #0
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	623b      	str	r3, [r7, #32]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800821e:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <xTimerGenericCommand+0x98>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d02a      	beq.n	800827c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b05      	cmp	r3, #5
 8008236:	dc18      	bgt.n	800826a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008238:	f7ff fd14 	bl	8007c64 <xTaskGetSchedulerState>
 800823c:	4603      	mov	r3, r0
 800823e:	2b02      	cmp	r3, #2
 8008240:	d109      	bne.n	8008256 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008242:	4b11      	ldr	r3, [pc, #68]	; (8008288 <xTimerGenericCommand+0x98>)
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f107 0114 	add.w	r1, r7, #20
 800824a:	2300      	movs	r3, #0
 800824c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824e:	f7fe f8c1 	bl	80063d4 <xQueueGenericSend>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24
 8008254:	e012      	b.n	800827c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <xTimerGenericCommand+0x98>)
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	f107 0114 	add.w	r1, r7, #20
 800825e:	2300      	movs	r3, #0
 8008260:	2200      	movs	r2, #0
 8008262:	f7fe f8b7 	bl	80063d4 <xQueueGenericSend>
 8008266:	6278      	str	r0, [r7, #36]	; 0x24
 8008268:	e008      	b.n	800827c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <xTimerGenericCommand+0x98>)
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	f107 0114 	add.w	r1, r7, #20
 8008272:	2300      	movs	r3, #0
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	f7fe f9ab 	bl	80065d0 <xQueueGenericSendFromISR>
 800827a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800827e:	4618      	mov	r0, r3
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000b28 	.word	0x20000b28

0800828c <vTimerSetReloadMode>:
	return pxTimer->xTimerPeriodInTicks;
}
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
Timer_t * pxTimer =  xTimer;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <vTimerSetReloadMode+0x2a>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	60bb      	str	r3, [r7, #8]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <vTimerSetReloadMode+0x28>
	taskENTER_CRITICAL();
 80082b6:	f000 fc05 	bl	8008ac4 <vPortEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <vTimerSetReloadMode+0x48>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c6:	f043 0304 	orr.w	r3, r3, #4
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80082d2:	e008      	b.n	80082e6 <vTimerSetReloadMode+0x5a>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082da:	f023 0304 	bic.w	r3, r3, #4
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	taskEXIT_CRITICAL();
 80082e6:	f000 fc1d 	bl	8008b24 <vPortExitCritical>
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fe:	4b22      	ldr	r3, [pc, #136]	; (8008388 <prvProcessExpiredTimer+0x94>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd fec6 	bl	800609e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d022      	beq.n	8008366 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	18d1      	adds	r1, r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	6978      	ldr	r0, [r7, #20]
 800832e:	f000 f8d1 	bl	80084d4 <prvInsertTimerInActiveList>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01f      	beq.n	8008378 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008338:	2300      	movs	r3, #0
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	2300      	movs	r3, #0
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	2100      	movs	r1, #0
 8008342:	6978      	ldr	r0, [r7, #20]
 8008344:	f7ff ff54 	bl	80081f0 <xTimerGenericCommand>
 8008348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d113      	bne.n	8008378 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	60fb      	str	r3, [r7, #12]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800836c:	f023 0301 	bic.w	r3, r3, #1
 8008370:	b2da      	uxtb	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	6978      	ldr	r0, [r7, #20]
 800837e:	4798      	blx	r3
}
 8008380:	bf00      	nop
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20000b20 	.word	0x20000b20

0800838c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f857 	bl	800844c <prvGetNextExpireTime>
 800839e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4619      	mov	r1, r3
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f803 	bl	80083b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083aa:	f000 f8d5 	bl	8008558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083ae:	e7f1      	b.n	8008394 <prvTimerTask+0x8>

080083b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083ba:	f7ff f821 	bl	8007400 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083be:	f107 0308 	add.w	r3, r7, #8
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f866 	bl	8008494 <prvSampleTimeNow>
 80083c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d130      	bne.n	8008432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <prvProcessTimerOrBlockTask+0x3c>
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d806      	bhi.n	80083ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083de:	f7ff f81d 	bl	800741c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff ff85 	bl	80082f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083ea:	e024      	b.n	8008436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d008      	beq.n	8008404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083f2:	4b13      	ldr	r3, [pc, #76]	; (8008440 <prvProcessTimerOrBlockTask+0x90>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <prvProcessTimerOrBlockTask+0x50>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <prvProcessTimerOrBlockTask+0x52>
 8008400:	2300      	movs	r3, #0
 8008402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008404:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <prvProcessTimerOrBlockTask+0x94>)
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4619      	mov	r1, r3
 8008412:	f7fe fd05 	bl	8006e20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008416:	f7ff f801 	bl	800741c <xTaskResumeAll>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <prvProcessTimerOrBlockTask+0x98>)
 8008422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
}
 8008430:	e001      	b.n	8008436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008432:	f7fe fff3 	bl	800741c <xTaskResumeAll>
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000b24 	.word	0x20000b24
 8008444:	20000b28 	.word	0x20000b28
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <prvGetNextExpireTime+0x44>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <prvGetNextExpireTime+0x16>
 800845e:	2201      	movs	r2, #1
 8008460:	e000      	b.n	8008464 <prvGetNextExpireTime+0x18>
 8008462:	2200      	movs	r2, #0
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <prvGetNextExpireTime+0x44>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e001      	b.n	8008480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008480:	68fb      	ldr	r3, [r7, #12]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000b20 	.word	0x20000b20

08008494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800849c:	f7ff f85a 	bl	8007554 <xTaskGetTickCount>
 80084a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <prvSampleTimeNow+0x3c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d205      	bcs.n	80084b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084ac:	f000 f91a 	bl	80086e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	e002      	b.n	80084be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084be:	4a04      	ldr	r2, [pc, #16]	; (80084d0 <prvSampleTimeNow+0x3c>)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084c4:	68fb      	ldr	r3, [r7, #12]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000b30 	.word	0x20000b30

080084d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d812      	bhi.n	8008520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	429a      	cmp	r2, r3
 8008506:	d302      	bcc.n	800850e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008508:	2301      	movs	r3, #1
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e01b      	b.n	8008546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800850e:	4b10      	ldr	r3, [pc, #64]	; (8008550 <prvInsertTimerInActiveList+0x7c>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3304      	adds	r3, #4
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fd fd87 	bl	800602c <vListInsert>
 800851e:	e012      	b.n	8008546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d206      	bcs.n	8008536 <prvInsertTimerInActiveList+0x62>
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d302      	bcc.n	8008536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008530:	2301      	movs	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e007      	b.n	8008546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <prvInsertTimerInActiveList+0x80>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7fd fd73 	bl	800602c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008546:	697b      	ldr	r3, [r7, #20]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20000b24 	.word	0x20000b24
 8008554:	20000b20 	.word	0x20000b20

08008558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08c      	sub	sp, #48	; 0x30
 800855c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800855e:	e0ae      	b.n	80086be <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f2c0 80ab 	blt.w	80086be <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	3304      	adds	r3, #4
 8008578:	4618      	mov	r0, r3
 800857a:	f7fd fd90 	bl	800609e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff ff87 	bl	8008494 <prvSampleTimeNow>
 8008586:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b09      	cmp	r3, #9
 800858c:	f200 8096 	bhi.w	80086bc <prvProcessReceivedCommands+0x164>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <prvProcessReceivedCommands+0x40>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085c1 	.word	0x080085c1
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008649 	.word	0x08008649
 80085ac:	08008693 	.word	0x08008693
 80085b0:	080085c1 	.word	0x080085c1
 80085b4:	080085c1 	.word	0x080085c1
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008649 	.word	0x08008649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	18d1      	adds	r1, r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a3a      	ldr	r2, [r7, #32]
 80085de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085e0:	f7ff ff78 	bl	80084d4 <prvInsertTimerInActiveList>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d069      	beq.n	80086be <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05e      	beq.n	80086be <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	441a      	add	r2, r3
 8008608:	2300      	movs	r3, #0
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	2300      	movs	r3, #0
 800860e:	2100      	movs	r1, #0
 8008610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008612:	f7ff fded 	bl	80081f0 <xTimerGenericCommand>
 8008616:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d14f      	bne.n	80086be <prvProcessReceivedCommands+0x166>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61bb      	str	r3, [r7, #24]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	b2da      	uxtb	r2, r3
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008646:	e03a      	b.n	80086be <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	617b      	str	r3, [r7, #20]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	18d1      	adds	r1, r2, r3
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	6a3a      	ldr	r2, [r7, #32]
 800868a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800868c:	f7ff ff22 	bl	80084d4 <prvInsertTimerInActiveList>
					break;
 8008690:	e015      	b.n	80086be <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80086a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086a2:	f000 fbfd 	bl	8008ea0 <vPortFree>
 80086a6:	e00a      	b.n	80086be <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086ba:	e000      	b.n	80086be <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80086bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <prvProcessReceivedCommands+0x188>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f107 0108 	add.w	r1, r7, #8
 80086c6:	2200      	movs	r2, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe f81d 	bl	8006708 <xQueueReceive>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f47f af45 	bne.w	8008560 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	3728      	adds	r7, #40	; 0x28
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20000b28 	.word	0x20000b28

080086e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ea:	e048      	b.n	800877e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f6:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3304      	adds	r3, #4
 8008704:	4618      	mov	r0, r3
 8008706:	f7fd fcca 	bl	800609e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	d02e      	beq.n	800877e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4413      	add	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	429a      	cmp	r2, r3
 8008730:	d90e      	bls.n	8008750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800873e:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fd fc6f 	bl	800602c <vListInsert>
 800874e:	e016      	b.n	800877e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008750:	2300      	movs	r3, #0
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	2300      	movs	r3, #0
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	2100      	movs	r1, #0
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fd48 	bl	80081f0 <xTimerGenericCommand>
 8008760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	603b      	str	r3, [r7, #0]
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1b1      	bne.n	80086ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800878e:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <prvSwitchTimerLists+0xc4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a04      	ldr	r2, [pc, #16]	; (80087a4 <prvSwitchTimerLists+0xc0>)
 8008794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <prvSwitchTimerLists+0xc4>)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000b20 	.word	0x20000b20
 80087a8:	20000b24 	.word	0x20000b24

080087ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087b2:	f000 f987 	bl	8008ac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087b6:	4b15      	ldr	r3, [pc, #84]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d120      	bne.n	8008800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087be:	4814      	ldr	r0, [pc, #80]	; (8008810 <prvCheckForValidListAndQueue+0x64>)
 80087c0:	f7fd fbe3 	bl	8005f8a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087c4:	4813      	ldr	r0, [pc, #76]	; (8008814 <prvCheckForValidListAndQueue+0x68>)
 80087c6:	f7fd fbe0 	bl	8005f8a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087ca:	4b13      	ldr	r3, [pc, #76]	; (8008818 <prvCheckForValidListAndQueue+0x6c>)
 80087cc:	4a10      	ldr	r2, [pc, #64]	; (8008810 <prvCheckForValidListAndQueue+0x64>)
 80087ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087d0:	4b12      	ldr	r3, [pc, #72]	; (800881c <prvCheckForValidListAndQueue+0x70>)
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <prvCheckForValidListAndQueue+0x68>)
 80087d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087d6:	2300      	movs	r3, #0
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <prvCheckForValidListAndQueue+0x74>)
 80087dc:	4a11      	ldr	r2, [pc, #68]	; (8008824 <prvCheckForValidListAndQueue+0x78>)
 80087de:	210c      	movs	r1, #12
 80087e0:	2064      	movs	r0, #100	; 0x64
 80087e2:	f7fd fcef 	bl	80061c4 <xQueueGenericCreateStatic>
 80087e6:	4603      	mov	r3, r0
 80087e8:	4a08      	ldr	r2, [pc, #32]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <prvCheckForValidListAndQueue+0x60>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	490b      	ldr	r1, [pc, #44]	; (8008828 <prvCheckForValidListAndQueue+0x7c>)
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fabc 	bl	8006d78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008800:	f000 f990 	bl	8008b24 <vPortExitCritical>
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000b28 	.word	0x20000b28
 8008810:	20000af8 	.word	0x20000af8
 8008814:	20000b0c 	.word	0x20000b0c
 8008818:	20000b20 	.word	0x20000b20
 800881c:	20000b24 	.word	0x20000b24
 8008820:	20000fe4 	.word	0x20000fe4
 8008824:	20000b34 	.word	0x20000b34
 8008828:	0800b0e4 	.word	0x0800b0e4

0800882c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <pvTimerGetTimerID+0x28>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008854:	f000 f936 	bl	8008ac4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800885e:	f000 f961 	bl	8008b24 <vPortExitCritical>

	return pvReturn;
 8008862:	693b      	ldr	r3, [r7, #16]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3b04      	subs	r3, #4
 800887c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3b04      	subs	r3, #4
 800888a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f023 0201 	bic.w	r2, r3, #1
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3b04      	subs	r3, #4
 800889a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800889c:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <pxPortInitialiseStack+0x64>)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b14      	subs	r3, #20
 80088a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f06f 0202 	mvn.w	r2, #2
 80088ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3b20      	subs	r3, #32
 80088c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088c2:	68fb      	ldr	r3, [r7, #12]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	080088d5 	.word	0x080088d5

080088d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088de:	4b12      	ldr	r3, [pc, #72]	; (8008928 <prvTaskExitError+0x54>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d00a      	beq.n	80088fe <prvTaskExitError+0x2a>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	60fb      	str	r3, [r7, #12]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <prvTaskExitError+0x28>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	60bb      	str	r3, [r7, #8]
}
 8008910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008912:	bf00      	nop
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0fc      	beq.n	8008914 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	2000000c 	.word	0x2000000c
 800892c:	00000000 	.word	0x00000000

08008930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <pxCurrentTCBConst2>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	f380 8809 	msr	PSP, r0
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	4770      	bx	lr
 800894c:	f3af 8000 	nop.w

08008950 <pxCurrentTCBConst2>:
 8008950:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008958:	4808      	ldr	r0, [pc, #32]	; (800897c <prvPortStartFirstTask+0x24>)
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f380 8808 	msr	MSP, r0
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8814 	msr	CONTROL, r0
 800896a:	b662      	cpsie	i
 800896c:	b661      	cpsie	f
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	df00      	svc	0
 8008978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800897a:	bf00      	nop
 800897c:	e000ed08 	.word	0xe000ed08

08008980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008986:	4b46      	ldr	r3, [pc, #280]	; (8008aa0 <xPortStartScheduler+0x120>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a46      	ldr	r2, [pc, #280]	; (8008aa4 <xPortStartScheduler+0x124>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d10a      	bne.n	80089a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089a6:	4b3e      	ldr	r3, [pc, #248]	; (8008aa0 <xPortStartScheduler+0x120>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a3f      	ldr	r2, [pc, #252]	; (8008aa8 <xPortStartScheduler+0x128>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10a      	bne.n	80089c6 <xPortStartScheduler+0x46>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089c6:	4b39      	ldr	r3, [pc, #228]	; (8008aac <xPortStartScheduler+0x12c>)
 80089c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	4b31      	ldr	r3, [pc, #196]	; (8008ab0 <xPortStartScheduler+0x130>)
 80089ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ee:	4b31      	ldr	r3, [pc, #196]	; (8008ab4 <xPortStartScheduler+0x134>)
 80089f0:	2207      	movs	r2, #7
 80089f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089f4:	e009      	b.n	8008a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80089f6:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <xPortStartScheduler+0x134>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	4a2d      	ldr	r2, [pc, #180]	; (8008ab4 <xPortStartScheduler+0x134>)
 80089fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a12:	2b80      	cmp	r3, #128	; 0x80
 8008a14:	d0ef      	beq.n	80089f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a16:	4b27      	ldr	r3, [pc, #156]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f1c3 0307 	rsb	r3, r3, #7
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d00a      	beq.n	8008a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	60bb      	str	r3, [r7, #8]
}
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a42:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a4a:	4a1a      	ldr	r2, [pc, #104]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a56:	4b18      	ldr	r3, [pc, #96]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a62:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a6e:	f000 f8dd 	bl	8008c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <xPortStartScheduler+0x13c>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a78:	f000 f8fc 	bl	8008c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <xPortStartScheduler+0x140>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a0f      	ldr	r2, [pc, #60]	; (8008ac0 <xPortStartScheduler+0x140>)
 8008a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a88:	f7ff ff66 	bl	8008958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a8c:	f7fe fe3c 	bl	8007708 <vTaskSwitchContext>
	prvTaskExitError();
 8008a90:	f7ff ff20 	bl	80088d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	e000ed00 	.word	0xe000ed00
 8008aa4:	410fc271 	.word	0x410fc271
 8008aa8:	410fc270 	.word	0x410fc270
 8008aac:	e000e400 	.word	0xe000e400
 8008ab0:	20001034 	.word	0x20001034
 8008ab4:	20001038 	.word	0x20001038
 8008ab8:	e000ed20 	.word	0xe000ed20
 8008abc:	2000000c 	.word	0x2000000c
 8008ac0:	e000ef34 	.word	0xe000ef34

08008ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	607b      	str	r3, [r7, #4]
}
 8008adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <vPortEnterCritical+0x58>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <vPortEnterCritical+0x58>)
 8008ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <vPortEnterCritical+0x58>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d10f      	bne.n	8008b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <vPortEnterCritical+0x5c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	603b      	str	r3, [r7, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <vPortEnterCritical+0x4a>
	}
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	2000000c 	.word	0x2000000c
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b2a:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <vPortExitCritical+0x50>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <vPortExitCritical+0x24>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	607b      	str	r3, [r7, #4]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b48:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <vPortExitCritical+0x50>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	4a09      	ldr	r2, [pc, #36]	; (8008b74 <vPortExitCritical+0x50>)
 8008b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b52:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <vPortExitCritical+0x50>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <vPortExitCritical+0x42>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	f383 8811 	msr	BASEPRI, r3
}
 8008b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2000000c 	.word	0x2000000c
	...

08008b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b80:	f3ef 8009 	mrs	r0, PSP
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <pxCurrentTCBConst>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	f01e 0f10 	tst.w	lr, #16
 8008b90:	bf08      	it	eq
 8008b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9a:	6010      	str	r0, [r2, #0]
 8008b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ba4:	f380 8811 	msr	BASEPRI, r0
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f7fe fdaa 	bl	8007708 <vTaskSwitchContext>
 8008bb4:	f04f 0000 	mov.w	r0, #0
 8008bb8:	f380 8811 	msr	BASEPRI, r0
 8008bbc:	bc09      	pop	{r0, r3}
 8008bbe:	6819      	ldr	r1, [r3, #0]
 8008bc0:	6808      	ldr	r0, [r1, #0]
 8008bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc6:	f01e 0f10 	tst.w	lr, #16
 8008bca:	bf08      	it	eq
 8008bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bd0:	f380 8809 	msr	PSP, r0
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	f3af 8000 	nop.w

08008be0 <pxCurrentTCBConst>:
 8008be0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c02:	f7fe fcc9 	bl	8007598 <xTaskIncrementTick>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <SysTick_Handler+0x40>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f383 8811 	msr	BASEPRI, r3
}
 8008c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <vPortSetupTimerInterrupt+0x34>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <vPortSetupTimerInterrupt+0x38>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <vPortSetupTimerInterrupt+0x3c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <vPortSetupTimerInterrupt+0x40>)
 8008c42:	fba2 2303 	umull	r2, r3, r2, r3
 8008c46:	099b      	lsrs	r3, r3, #6
 8008c48:	4a09      	ldr	r2, [pc, #36]	; (8008c70 <vPortSetupTimerInterrupt+0x44>)
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c4e:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <vPortSetupTimerInterrupt+0x34>)
 8008c50:	2207      	movs	r2, #7
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	e000e010 	.word	0xe000e010
 8008c64:	e000e018 	.word	0xe000e018
 8008c68:	20000000 	.word	0x20000000
 8008c6c:	10624dd3 	.word	0x10624dd3
 8008c70:	e000e014 	.word	0xe000e014

08008c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c84 <vPortEnableVFP+0x10>
 8008c78:	6801      	ldr	r1, [r0, #0]
 8008c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c7e:	6001      	str	r1, [r0, #0]
 8008c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c82:	bf00      	nop
 8008c84:	e000ed88 	.word	0xe000ed88

08008c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c8e:	f3ef 8305 	mrs	r3, IPSR
 8008c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b0f      	cmp	r3, #15
 8008c98:	d914      	bls.n	8008cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c9a:	4a17      	ldr	r2, [pc, #92]	; (8008cf8 <vPortValidateInterruptPriority+0x70>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ca4:	4b15      	ldr	r3, [pc, #84]	; (8008cfc <vPortValidateInterruptPriority+0x74>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	7afa      	ldrb	r2, [r7, #11]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d20a      	bcs.n	8008cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	607b      	str	r3, [r7, #4]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <vPortValidateInterruptPriority+0x78>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <vPortValidateInterruptPriority+0x7c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d90a      	bls.n	8008cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	603b      	str	r3, [r7, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <vPortValidateInterruptPriority+0x60>
	}
 8008cea:	bf00      	nop
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	e000e3f0 	.word	0xe000e3f0
 8008cfc:	20001034 	.word	0x20001034
 8008d00:	e000ed0c 	.word	0xe000ed0c
 8008d04:	20001038 	.word	0x20001038

08008d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d14:	f7fe fb74 	bl	8007400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d18:	4b5b      	ldr	r3, [pc, #364]	; (8008e88 <pvPortMalloc+0x180>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d20:	f000 f920 	bl	8008f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d24:	4b59      	ldr	r3, [pc, #356]	; (8008e8c <pvPortMalloc+0x184>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 8093 	bne.w	8008e58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01d      	beq.n	8008d74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d38:	2208      	movs	r2, #8
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d014      	beq.n	8008d74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	3308      	adds	r3, #8
 8008d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <pvPortMalloc+0x6c>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	617b      	str	r3, [r7, #20]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d06e      	beq.n	8008e58 <pvPortMalloc+0x150>
 8008d7a:	4b45      	ldr	r3, [pc, #276]	; (8008e90 <pvPortMalloc+0x188>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d869      	bhi.n	8008e58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d84:	4b43      	ldr	r3, [pc, #268]	; (8008e94 <pvPortMalloc+0x18c>)
 8008d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d88:	4b42      	ldr	r3, [pc, #264]	; (8008e94 <pvPortMalloc+0x18c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d8e:	e004      	b.n	8008d9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d903      	bls.n	8008dac <pvPortMalloc+0xa4>
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f1      	bne.n	8008d90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <pvPortMalloc+0x180>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d050      	beq.n	8008e58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2208      	movs	r2, #8
 8008dbc:	4413      	add	r3, r2
 8008dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d91f      	bls.n	8008e18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <pvPortMalloc+0xf8>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	613b      	str	r3, [r7, #16]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	1ad2      	subs	r2, r2, r3
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e12:	69b8      	ldr	r0, [r7, #24]
 8008e14:	f000 f908 	bl	8009028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <pvPortMalloc+0x188>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	4a1b      	ldr	r2, [pc, #108]	; (8008e90 <pvPortMalloc+0x188>)
 8008e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e26:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <pvPortMalloc+0x188>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <pvPortMalloc+0x190>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d203      	bcs.n	8008e3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e32:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <pvPortMalloc+0x188>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <pvPortMalloc+0x190>)
 8008e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <pvPortMalloc+0x184>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <pvPortMalloc+0x194>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3301      	adds	r3, #1
 8008e54:	4a11      	ldr	r2, [pc, #68]	; (8008e9c <pvPortMalloc+0x194>)
 8008e56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e58:	f7fe fae0 	bl	800741c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <pvPortMalloc+0x174>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <pvPortMalloc+0x172>
	return pvReturn;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3728      	adds	r7, #40	; 0x28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20009044 	.word	0x20009044
 8008e8c:	20009058 	.word	0x20009058
 8008e90:	20009048 	.word	0x20009048
 8008e94:	2000903c 	.word	0x2000903c
 8008e98:	2000904c 	.word	0x2000904c
 8008e9c:	20009050 	.word	0x20009050

08008ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d04d      	beq.n	8008f4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	425b      	negs	r3, r3
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	4b24      	ldr	r3, [pc, #144]	; (8008f58 <vPortFree+0xb8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <vPortFree+0x44>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	60fb      	str	r3, [r7, #12]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <vPortFree+0x62>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	60bb      	str	r3, [r7, #8]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <vPortFree+0xb8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01e      	beq.n	8008f4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11a      	bne.n	8008f4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <vPortFree+0xb8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	401a      	ands	r2, r3
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f28:	f7fe fa6a 	bl	8007400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <vPortFree+0xbc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4413      	add	r3, r2
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <vPortFree+0xbc>)
 8008f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f000 f874 	bl	8009028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <vPortFree+0xc0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	4a06      	ldr	r2, [pc, #24]	; (8008f60 <vPortFree+0xc0>)
 8008f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f4a:	f7fe fa67 	bl	800741c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f4e:	bf00      	nop
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20009058 	.word	0x20009058
 8008f5c:	20009048 	.word	0x20009048
 8008f60:	20009054 	.word	0x20009054

08008f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <prvHeapInit+0xac>)
 8008f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3307      	adds	r3, #7
 8008f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <prvHeapInit+0xac>)
 8008f94:	4413      	add	r3, r2
 8008f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f9c:	4a1d      	ldr	r2, [pc, #116]	; (8009014 <prvHeapInit+0xb0>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fa2:	4b1c      	ldr	r3, [pc, #112]	; (8009014 <prvHeapInit+0xb0>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a15      	ldr	r2, [pc, #84]	; (8009018 <prvHeapInit+0xb4>)
 8008fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fc6:	4b14      	ldr	r3, [pc, #80]	; (8009018 <prvHeapInit+0xb4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <prvHeapInit+0xb4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <prvHeapInit+0xb4>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	4a0a      	ldr	r2, [pc, #40]	; (800901c <prvHeapInit+0xb8>)
 8008ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	4a09      	ldr	r2, [pc, #36]	; (8009020 <prvHeapInit+0xbc>)
 8008ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ffc:	4b09      	ldr	r3, [pc, #36]	; (8009024 <prvHeapInit+0xc0>)
 8008ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009002:	601a      	str	r2, [r3, #0]
}
 8009004:	bf00      	nop
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	2000103c 	.word	0x2000103c
 8009014:	2000903c 	.word	0x2000903c
 8009018:	20009044 	.word	0x20009044
 800901c:	2000904c 	.word	0x2000904c
 8009020:	20009048 	.word	0x20009048
 8009024:	20009058 	.word	0x20009058

08009028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009030:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <prvInsertBlockIntoFreeList+0xac>)
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e002      	b.n	800903c <prvInsertBlockIntoFreeList+0x14>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d8f7      	bhi.n	8009036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	4413      	add	r3, r2
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d108      	bne.n	800906a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	441a      	add	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	441a      	add	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d118      	bne.n	80090b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d00d      	beq.n	80090a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	e008      	b.n	80090b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <prvInsertBlockIntoFreeList+0xb0>)
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	e003      	b.n	80090b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d002      	beq.n	80090c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	2000903c 	.word	0x2000903c
 80090d8:	20009044 	.word	0x20009044

080090dc <_ZN14ComHandlerTaskC1E6TaskIdPKc>:
#include "ComHandlerTask.h"
#include "main.h"

ComHandlerTask* ComHandlerTask::mspThis = 0;

ComHandlerTask::ComHandlerTask(TaskId id, const char* name): Task(id, name)
 80090dc:	b590      	push	{r4, r7, lr}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	460b      	mov	r3, r1
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	72fb      	strb	r3, [r7, #11]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	7af9      	ldrb	r1, [r7, #11]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fc01 	bl	80098f8 <_ZN4TaskC1E6TaskIdPKc>
 80090f6:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <_ZN14ComHandlerTaskC1E6TaskIdPKc+0x98>)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]
{
  mpIsrEventMsg = Message::reserveIsr(MSG_ID_TEMPLATETASK_EVENT, ComHandlerTaskId, 0);
 80090fc:	2200      	movs	r2, #0
 80090fe:	2102      	movs	r1, #2
 8009100:	2003      	movs	r0, #3
 8009102:	f000 f9b3 	bl	800946c <_ZN7Message10reserveIsrEhhm>
 8009106:	4602      	mov	r2, r0
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	629a      	str	r2, [r3, #40]	; 0x28
  mpTimerLed = new Timer(ComHandlerTaskId, TimerComLed);
 800910c:	200c      	movs	r0, #12
 800910e:	f000 fe59 	bl	8009dc4 <_Znwj>
 8009112:	4603      	mov	r3, r0
 8009114:	461c      	mov	r4, r3
 8009116:	2201      	movs	r2, #1
 8009118:	2102      	movs	r1, #2
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fd4a 	bl	8009bb4 <_ZN5TimerC1E6TaskId7TimerId>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	625c      	str	r4, [r3, #36]	; 0x24
  mpTimerLed->setInterval(500);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fdbf 	bl	8009cb0 <_ZN5Timer11setIntervalEi>
  mpTimerLed->setSingleShot(false);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fdd7 	bl	8009cec <_ZN5Timer13setSingleShotEb>
  mpTimerLed->start();
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fde6 	bl	8009d14 <_ZN5Timer5startEv>

  mpStepper = new Stepper(TIM_CHANNEL_1);
 8009148:	2014      	movs	r0, #20
 800914a:	f000 fe3b 	bl	8009dc4 <_Znwj>
 800914e:	4603      	mov	r3, r0
 8009150:	461c      	mov	r4, r3
 8009152:	2100      	movs	r1, #0
 8009154:	4620      	mov	r0, r4
 8009156:	f000 f86f 	bl	8009238 <_ZN7StepperC1Em>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	62dc      	str	r4, [r3, #44]	; 0x2c
  mpStepper->StartRotation(100);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009162:	2164      	movs	r1, #100	; 0x64
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f889 	bl	800927c <_ZN7Stepper13StartRotationEl>

}
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	bd90      	pop	{r4, r7, pc}
 8009174:	0800b170 	.word	0x0800b170

08009178 <_ZN14ComHandlerTask8instanceEv>:

ComHandlerTask* ComHandlerTask::instance()
{
 8009178:	b598      	push	{r3, r4, r7, lr}
 800917a:	af00      	add	r7, sp, #0
  if(ComHandlerTask::mspThis == 0)
 800917c:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <_ZN14ComHandlerTask8instanceEv+0x2c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10b      	bne.n	800919c <_ZN14ComHandlerTask8instanceEv+0x24>
  {
    mspThis = new ComHandlerTask(ComHandlerTaskId, "ComHandlerTask\0");
 8009184:	2030      	movs	r0, #48	; 0x30
 8009186:	f000 fe1d 	bl	8009dc4 <_Znwj>
 800918a:	4603      	mov	r3, r0
 800918c:	461c      	mov	r4, r3
 800918e:	4a06      	ldr	r2, [pc, #24]	; (80091a8 <_ZN14ComHandlerTask8instanceEv+0x30>)
 8009190:	2102      	movs	r1, #2
 8009192:	4620      	mov	r0, r4
 8009194:	f7ff ffa2 	bl	80090dc <_ZN14ComHandlerTaskC1E6TaskIdPKc>
 8009198:	4b02      	ldr	r3, [pc, #8]	; (80091a4 <_ZN14ComHandlerTask8instanceEv+0x2c>)
 800919a:	601c      	str	r4, [r3, #0]
  }
  return ComHandlerTask::mspThis;
 800919c:	4b01      	ldr	r3, [pc, #4]	; (80091a4 <_ZN14ComHandlerTask8instanceEv+0x2c>)
 800919e:	681b      	ldr	r3, [r3, #0]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	bd98      	pop	{r3, r4, r7, pc}
 80091a4:	2000905c 	.word	0x2000905c
 80091a8:	0800b0ec 	.word	0x0800b0ec

080091ac <_ZN14ComHandlerTask13handleMessageEP7Message>:
  mspThis->mpIsrEventMsg->setValue(123);
  mspThis->mpIsrEventMsg->sendMsg();
}

void ComHandlerTask::handleMessage(Message* message)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  switch(message->id())
 80091b6:	6838      	ldr	r0, [r7, #0]
 80091b8:	f000 fa03 	bl	80095c2 <_ZN7Message2idEv>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d012      	beq.n	80091e8 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3c>
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d000      	beq.n	80091c8 <_ZN14ComHandlerTask13handleMessageEP7Message+0x1c>
          break;
      }
      break;
    }
    default:
      break;
 80091c6:	e010      	b.n	80091ea <_ZN14ComHandlerTask13handleMessageEP7Message+0x3e>
      switch(message->data().longword)
 80091c8:	6838      	ldr	r0, [r7, #0]
 80091ca:	f000 fa12 	bl	80095f2 <_ZN7Message4dataEv>
 80091ce:	4603      	mov	r3, r0
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d105      	bne.n	80091e4 <_ZN14ComHandlerTask13handleMessageEP7Message+0x38>
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80091d8:	2120      	movs	r1, #32
 80091da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091de:	f7f8 ffcb 	bl	8002178 <HAL_GPIO_TogglePin>
          break;
 80091e2:	e000      	b.n	80091e6 <_ZN14ComHandlerTask13handleMessageEP7Message+0x3a>
          break;
 80091e4:	bf00      	nop
      break;
 80091e6:	e000      	b.n	80091ea <_ZN14ComHandlerTask13handleMessageEP7Message+0x3e>
      break;
 80091e8:	bf00      	nop
  }

}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <_ZN14ComHandlerTaskD1Ev>:
#include "Timer.h"

#include "Stepper.h"


class ComHandlerTask: public Task
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	4a05      	ldr	r2, [pc, #20]	; (8009214 <_ZN14ComHandlerTaskD1Ev+0x20>)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fbc3 	bl	8009990 <_ZN4TaskD1Ev>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	0800b170 	.word	0x0800b170

08009218 <_ZN14ComHandlerTaskD0Ev>:
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff ffe7 	bl	80091f4 <_ZN14ComHandlerTaskD1Ev>
 8009226:	2130      	movs	r1, #48	; 0x30
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fde2 	bl	8009df2 <_ZdlPvj>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4618      	mov	r0, r3
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <_ZN7StepperC1Em>:
#include "main.h"
#include "paradef.h"



Stepper::Stepper(uint32_t timerChannel) : Iinterruptable()
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	f7f7 f86d 	bl	8000324 <_ZN14IinterruptableC1Ev>
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <_ZN7StepperC1Em+0x3c>)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	601a      	str	r2, [r3, #0]
{
  mTimerChannel = timerChannel;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	609a      	str	r2, [r3, #8]
  mpTimerHandle = STEPPER_STEP_TIMER_HANDLE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a07      	ldr	r2, [pc, #28]	; (8009278 <_ZN7StepperC1Em+0x40>)
 800925a:	605a      	str	r2, [r3, #4]

  mStepperState = OFF;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	731a      	strb	r2, [r3, #12]
  mDegreesToRotate = 0;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	611a      	str	r2, [r3, #16]
}
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	0800b184 	.word	0x0800b184
 8009278:	20000840 	.word	0x20000840

0800927c <_ZN7Stepper13StartRotationEl>:

void Stepper::StartRotation(int32_t degrees)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  if(mStepperState != ROTATING)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	7b1b      	ldrb	r3, [r3, #12]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d053      	beq.n	8009336 <_ZN7Stepper13StartRotationEl+0xba>
  {
    mStepperState = ROTATING;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2202      	movs	r2, #2
 8009292:	731a      	strb	r2, [r3, #12]
    uint32_t timerCount = __HAL_TIM_GET_COUNTER(mpTimerHandle);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929c:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(mpTimerHandle, mTimerChannel, timerCount + 1000);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d107      	bne.n	80092b6 <_ZN7Stepper13StartRotationEl+0x3a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80092b2:	635a      	str	r2, [r3, #52]	; 0x34
 80092b4:	e036      	b.n	8009324 <_ZN7Stepper13StartRotationEl+0xa8>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d107      	bne.n	80092ce <_ZN7Stepper13StartRotationEl+0x52>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
 80092cc:	e02a      	b.n	8009324 <_ZN7Stepper13StartRotationEl+0xa8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d107      	bne.n	80092e6 <_ZN7Stepper13StartRotationEl+0x6a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80092e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80092e4:	e01e      	b.n	8009324 <_ZN7Stepper13StartRotationEl+0xa8>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	2b0c      	cmp	r3, #12
 80092ec:	d107      	bne.n	80092fe <_ZN7Stepper13StartRotationEl+0x82>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80092fa:	641a      	str	r2, [r3, #64]	; 0x40
 80092fc:	e012      	b.n	8009324 <_ZN7Stepper13StartRotationEl+0xa8>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	2b10      	cmp	r3, #16
 8009304:	d107      	bne.n	8009316 <_ZN7Stepper13StartRotationEl+0x9a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8009312:	649a      	str	r2, [r3, #72]	; 0x48
 8009314:	e006      	b.n	8009324 <_ZN7Stepper13StartRotationEl+0xa8>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8009322:	64da      	str	r2, [r3, #76]	; 0x4c
    HAL_TIM_OC_Start_IT(mpTimerHandle, mTimerChannel);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fa f9d2 	bl	80036d8 <HAL_TIM_OC_Start_IT>
  }
  else
  {
    assert_param(false);
  }
}
 8009334:	e003      	b.n	800933e <_ZN7Stepper13StartRotationEl+0xc2>
    assert_param(false);
 8009336:	2123      	movs	r1, #35	; 0x23
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <_ZN7Stepper13StartRotationEl+0xcc>)
 800933a:	f7f7 ff86 	bl	800124a <assert_failed>
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	0800b0fc 	.word	0x0800b0fc

0800934c <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef>:

void Stepper::OutputCompareIntCb(TIM_HandleTypeDef* htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t comp = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8009356:	4b07      	ldr	r3, [pc, #28]	; (8009374 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x28>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935c:	60fb      	str	r3, [r7, #12]
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, comp + 100);
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <_ZN7Stepper18OutputCompareIntCbEP17TIM_HandleTypeDef+0x28>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	3264      	adds	r2, #100	; 0x64
 8009366:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	20000840 	.word	0x20000840

08009378 <_ZN7StepperD1Ev>:
    OFF,
    HOLDING,
    ROTATING
};

class Stepper : public Iinterruptable
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	4a05      	ldr	r2, [pc, #20]	; (8009398 <_ZN7StepperD1Ev+0x20>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4618      	mov	r0, r3
 800938a:	f7f6 ffe3 	bl	8000354 <_ZN14IinterruptableD1Ev>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	0800b184 	.word	0x0800b184

0800939c <_ZN7StepperD0Ev>:
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff ffe7 	bl	8009378 <_ZN7StepperD1Ev>
 80093aa:	2114      	movs	r1, #20
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fd20 	bl	8009df2 <_ZdlPvj>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <app_init>:
#include "ComHandlerTask.h"

int app_init_done = 0;

void app_init()
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  /////////////////    create tasks

  ComHandlerTask::instance();
 80093c0:	f7ff feda 	bl	8009178 <_ZN14ComHandlerTask8instanceEv>
//  lpMsg = Message::reserve(MSG_ID_START, LopTaskId);
//  lpMsg->sendMsg();
//
//  SET_BLUE_STATE_LED(LED_OFF);
//  app_init_done = 1;
}
 80093c4:	bf00      	nop
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <_ZN7MessageC1Ev>:
#include <stdio.h>


MsgPool* Message::mspPool = 0;

Message::Message()
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
{

}
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
	...

080093e0 <_ZN7Message4initEP7MsgPool>:

void Message::init(MsgPool* pPool)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  Message::mspPool = pPool;
 80093e8:	4a04      	ldr	r2, [pc, #16]	; (80093fc <_ZN7Message4initEP7MsgPool+0x1c>)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6013      	str	r3, [r2, #0]
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20009060 	.word	0x20009060

08009400 <_ZN7Message7reserveEhh9DataUnion>:
  configASSERT(pMsg && lpSharedMem);
  return pMsg;
}

Message* Message::reserve(uint8_t id, uint8_t destination, DataUnion data)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	603a      	str	r2, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
 800940c:	460b      	mov	r3, r1
 800940e:	71bb      	strb	r3, [r7, #6]
  Message* pMsg = Message::mspPool->resMsg();
 8009410:	f000 f99e 	bl	8009750 <_ZN7MsgPool6resMsgEv>
 8009414:	60f8      	str	r0, [r7, #12]
  pMsg->mMsg.DataMsg.Id = id;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	79fa      	ldrb	r2, [r7, #7]
 800941a:	701a      	strb	r2, [r3, #0]
  pMsg->mMsg.DataMsg.Type = MsgData;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	705a      	strb	r2, [r3, #1]
  pMsg->mMsg.DataMsg.DestAddr = destination;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	79ba      	ldrb	r2, [r7, #6]
 8009426:	709a      	strb	r2, [r3, #2]
  pMsg->mMsg.DataMsg.SrcAddr = TaskList::getTaskId(xTaskGetCurrentTaskHandle());
 8009428:	f7fe fc0c 	bl	8007c44 <xTaskGetCurrentTaskHandle>
 800942c:	4603      	mov	r3, r0
 800942e:	4618      	mov	r0, r3
 8009430:	f000 fb6e 	bl	8009b10 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	70da      	strb	r2, [r3, #3]
  pMsg->mMsg.DataMsg.Data = data;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3304      	adds	r3, #4
 8009440:	463a      	mov	r2, r7
 8009442:	6810      	ldr	r0, [r2, #0]
 8009444:	6018      	str	r0, [r3, #0]
  configASSERT(pMsg);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <_ZN7Message7reserveEhh9DataUnion+0x62>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60bb      	str	r3, [r7, #8]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <_ZN7Message7reserveEhh9DataUnion+0x60>
  return pMsg;
 8009462:	68fb      	ldr	r3, [r7, #12]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <_ZN7Message10reserveIsrEhhm>:

Message* Message::reserveIsr(uint8_t id, uint8_t destination, uint32_t isr_value)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	603a      	str	r2, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
 8009478:	460b      	mov	r3, r1
 800947a:	71bb      	strb	r3, [r7, #6]
  Message* pMsg = Message::mspPool->resMsg();
 800947c:	f000 f968 	bl	8009750 <_ZN7MsgPool6resMsgEv>
 8009480:	60f8      	str	r0, [r7, #12]
  pMsg->mMsg.IsrMsg.Id = id;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	79fa      	ldrb	r2, [r7, #7]
 8009486:	701a      	strb	r2, [r3, #0]
  pMsg->mMsg.IsrMsg.Type = MsgIsr;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2203      	movs	r2, #3
 800948c:	705a      	strb	r2, [r3, #1]
  pMsg->mMsg.IsrMsg.DestAddr = destination;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	79ba      	ldrb	r2, [r7, #6]
 8009492:	709a      	strb	r2, [r3, #2]
  pMsg->mMsg.IsrMsg.Value = isr_value;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	f8c3 2003 	str.w	r2, [r3, #3]
  configASSERT(pMsg);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <_ZN7Message10reserveIsrEhhm+0x4c>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	60bb      	str	r3, [r7, #8]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <_ZN7Message10reserveIsrEhhm+0x4a>
  return pMsg;
 80094b8:	68fb      	ldr	r3, [r7, #12]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <_ZN7Message7sendMsgEv>:

void Message::sendMsg()
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b088      	sub	sp, #32
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  QueueHandle_t lDestQueue = TaskList::getQueue((TaskId)mMsg.NoneMsg.DestAddr);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	789b      	ldrb	r3, [r3, #2]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fb46 	bl	8009b60 <_ZN8TaskList8getQueueE6TaskId>
 80094d4:	61b8      	str	r0, [r7, #24]
  Message* lpMessage = this;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	613b      	str	r3, [r7, #16]
  if(lDestQueue)
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d02d      	beq.n	800953c <_ZN7Message7sendMsgEv+0x7a>
  {
    BaseType_t lRes;
    if(lpMessage->type() == MsgIsr)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f879 	bl	80095da <_ZN7Message4typeEv>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	bf0c      	ite	eq
 80094ee:	2301      	moveq	r3, #1
 80094f0:	2300      	movne	r3, #0
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <_ZN7Message7sendMsgEv+0x4e>
    {
      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
      lRes = xQueueSendFromISR(lDestQueue, &lpMessage, &xHigherPriorityTaskWoken);
 80094fc:	f107 020c 	add.w	r2, r7, #12
 8009500:	f107 0110 	add.w	r1, r7, #16
 8009504:	2300      	movs	r3, #0
 8009506:	69b8      	ldr	r0, [r7, #24]
 8009508:	f7fd f862 	bl	80065d0 <xQueueGenericSendFromISR>
 800950c:	61f8      	str	r0, [r7, #28]
 800950e:	e007      	b.n	8009520 <_ZN7Message7sendMsgEv+0x5e>
    }
    else
    {
      lRes = xQueueSend(lDestQueue, &lpMessage, (TickType_t) 0);
 8009510:	f107 0110 	add.w	r1, r7, #16
 8009514:	2300      	movs	r3, #0
 8009516:	2200      	movs	r2, #0
 8009518:	69b8      	ldr	r0, [r7, #24]
 800951a:	f7fc ff5b 	bl	80063d4 <xQueueGenericSend>
 800951e:	61f8      	str	r0, [r7, #28]
    }
    configASSERT(lRes == 1);
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d00d      	beq.n	8009542 <_ZN7Message7sendMsgEv+0x80>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	617b      	str	r3, [r7, #20]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <_ZN7Message7sendMsgEv+0x78>
  }
  else
  {
    freeMsg();
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f804 	bl	800954a <_ZN7Message7freeMsgEv>
  }
}
 8009542:	bf00      	nop
 8009544:	3720      	adds	r7, #32
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <_ZN7Message7freeMsgEv>:


void Message::freeMsg()
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  switch(type())
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f841 	bl	80095da <_ZN7Message4typeEv>
 8009558:	4603      	mov	r3, r0
 800955a:	2b01      	cmp	r3, #1
 800955c:	d01d      	beq.n	800959a <_ZN7Message7freeMsgEv+0x50>
 800955e:	2b02      	cmp	r3, #2
 8009560:	d125      	bne.n	80095ae <_ZN7Message7freeMsgEv+0x64>
  {
    case MsgMem:
    {
      if(mMsg.MemMsg.Memory)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d023      	beq.n	80095b2 <_ZN7Message7freeMsgEv+0x68>
      {
        vPortFree(mMsg.MemMsg.Memory->memory);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff fc95 	bl	8008ea0 <vPortFree>
        delete mMsg.MemMsg.Memory;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <_ZN7Message7freeMsgEv+0x3c>
 800957e:	2108      	movs	r1, #8
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fc36 	bl	8009df2 <_ZdlPvj>
        mMsg.MemMsg.Memory = 0;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	711a      	strb	r2, [r3, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	715a      	strb	r2, [r3, #5]
 8009590:	2200      	movs	r2, #0
 8009592:	719a      	strb	r2, [r3, #6]
 8009594:	2200      	movs	r2, #0
 8009596:	71da      	strb	r2, [r3, #7]
      }
      break;
 8009598:	e00b      	b.n	80095b2 <_ZN7Message7freeMsgEv+0x68>
    }
    case MsgData:
    {
      mMsg.DataMsg.Data.longword = 0;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	711a      	strb	r2, [r3, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	715a      	strb	r2, [r3, #5]
 80095a4:	2200      	movs	r2, #0
 80095a6:	719a      	strb	r2, [r3, #6]
 80095a8:	2200      	movs	r2, #0
 80095aa:	71da      	strb	r2, [r3, #7]
      break;
 80095ac:	e002      	b.n	80095b4 <_ZN7Message7freeMsgEv+0x6a>
    }
    default:
      break;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <_ZN7Message7freeMsgEv+0x6a>
      break;
 80095b2:	bf00      	nop
  }

  Message::mspPool->freeMsg(this);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f905 	bl	80097c4 <_ZN7MsgPool7freeMsgEP7Message>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <_ZN7Message2idEv>:

uint8_t Message::id()
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Id;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	781b      	ldrb	r3, [r3, #0]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <_ZN7Message4typeEv>:
{
  return mMsg.NoneMsg.DestAddr;
}

uint8_t Message::type()
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Type;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	785b      	ldrb	r3, [r3, #1]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <_ZN7Message4dataEv>:

DataUnion Message::data()
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  DataUnion lRetval;
  lRetval.longword = (uint32_t)(-1);
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	60bb      	str	r3, [r7, #8]
  if(mMsg.DataMsg.Type == MsgData)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	785b      	ldrb	r3, [r3, #1]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d105      	bne.n	8009614 <_ZN7Message4dataEv+0x22>
  {
    lRetval = mMsg.DataMsg.Data;
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	f107 0308 	add.w	r3, r7, #8
 800960e:	3204      	adds	r2, #4
 8009610:	6810      	ldr	r0, [r2, #0]
 8009612:	6018      	str	r0, [r3, #0]
  }
  return lRetval;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	2300      	movs	r3, #0
 800961a:	7b3a      	ldrb	r2, [r7, #12]
 800961c:	f362 0307 	bfi	r3, r2, #0, #8
 8009620:	7b7a      	ldrb	r2, [r7, #13]
 8009622:	f362 230f 	bfi	r3, r2, #8, #8
 8009626:	7bba      	ldrb	r2, [r7, #14]
 8009628:	f362 4317 	bfi	r3, r2, #16, #8
 800962c:	7bfa      	ldrb	r2, [r7, #15]
 800962e:	f362 631f 	bfi	r3, r2, #24, #8
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <MsgPool_init>:
#include "os_init.h"
#include "MsgPool.h"


void MsgPool_init()
{
 800963e:	b580      	push	{r7, lr}
 8009640:	af00      	add	r7, sp, #0
  Message::init(MsgPool::instance());
 8009642:	f000 f86f 	bl	8009724 <_ZN7MsgPool8instanceEv>
 8009646:	4603      	mov	r3, r0
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fec9 	bl	80093e0 <_ZN7Message4initEP7MsgPool>
}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <_ZN7MsgPoolC1Ev>:

MsgPool* MsgPool::mspThis = 0;

MsgPool::MsgPool()
 8009654:	b590      	push	{r4, r7, lr}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	4a14      	ldr	r2, [pc, #80]	; (80096b0 <_ZN7MsgPoolC1Ev+0x5c>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	33cc      	adds	r3, #204	; 0xcc
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f8e8 	bl	800983c <_ZN5MutexC1Ev>
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	e015      	b.n	800969e <_ZN7MsgPoolC1Ev+0x4a>
  {
    mPool[i].mMsg = new Message;
 8009672:	2008      	movs	r0, #8
 8009674:	f000 fba6 	bl	8009dc4 <_Znwj>
 8009678:	4603      	mov	r3, r0
 800967a:	461c      	mov	r4, r3
 800967c:	4620      	mov	r0, r4
 800967e:	f7ff fea3 	bl	80093c8 <_ZN7MessageC1Ev>
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	4413      	add	r3, r2
 800968a:	605c      	str	r4, [r3, #4]
    mPool[i].mUsed = false;
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	4413      	add	r3, r2
 8009694:	2200      	movs	r2, #0
 8009696:	721a      	strb	r2, [r3, #8]
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b18      	cmp	r3, #24
 80096a2:	dde6      	ble.n	8009672 <_ZN7MsgPoolC1Ev+0x1e>
  }

}
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd90      	pop	{r4, r7, pc}
 80096ae:	bf00      	nop
 80096b0:	0800b198 	.word	0x0800b198

080096b4 <_ZN7MsgPoolD1Ev>:

MsgPool::~MsgPool()
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	4a10      	ldr	r2, [pc, #64]	; (8009700 <_ZN7MsgPoolD1Ev+0x4c>)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	601a      	str	r2, [r3, #0]
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	e00d      	b.n	80096e4 <_ZN7MsgPoolD1Ev+0x30>
  {
    delete mPool[i].mMsg;
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	4413      	add	r3, r2
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <_ZN7MsgPoolD1Ev+0x2a>
 80096d6:	2108      	movs	r1, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fb8a 	bl	8009df2 <_ZdlPvj>
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b18      	cmp	r3, #24
 80096e8:	ddee      	ble.n	80096c8 <_ZN7MsgPoolD1Ev+0x14>
MsgPool::~MsgPool()
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	33cc      	adds	r3, #204	; 0xcc
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f8b8 	bl	8009864 <_ZN5MutexD1Ev>
  }
}
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	0800b198 	.word	0x0800b198

08009704 <_ZN7MsgPoolD0Ev>:
MsgPool::~MsgPool()
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
}
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7ff ffd1 	bl	80096b4 <_ZN7MsgPoolD1Ev>
 8009712:	21d8      	movs	r1, #216	; 0xd8
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fb6c 	bl	8009df2 <_ZdlPvj>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <_ZN7MsgPool8instanceEv>:

MsgPool* MsgPool::instance()
{
 8009724:	b598      	push	{r3, r4, r7, lr}
 8009726:	af00      	add	r7, sp, #0
  if(mspThis == 0)
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <_ZN7MsgPool8instanceEv+0x28>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d109      	bne.n	8009744 <_ZN7MsgPool8instanceEv+0x20>
  {
    mspThis = new MsgPool;
 8009730:	20d8      	movs	r0, #216	; 0xd8
 8009732:	f000 fb47 	bl	8009dc4 <_Znwj>
 8009736:	4603      	mov	r3, r0
 8009738:	461c      	mov	r4, r3
 800973a:	4620      	mov	r0, r4
 800973c:	f7ff ff8a 	bl	8009654 <_ZN7MsgPoolC1Ev>
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <_ZN7MsgPool8instanceEv+0x28>)
 8009742:	601c      	str	r4, [r3, #0]
  }
  return mspThis;
 8009744:	4b01      	ldr	r3, [pc, #4]	; (800974c <_ZN7MsgPool8instanceEv+0x28>)
 8009746:	681b      	ldr	r3, [r3, #0]
}
 8009748:	4618      	mov	r0, r3
 800974a:	bd98      	pop	{r3, r4, r7, pc}
 800974c:	20009064 	.word	0x20009064

08009750 <_ZN7MsgPool6resMsgEv>:

Message* MsgPool::resMsg()
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
  Message* lpRetVal = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	607b      	str	r3, [r7, #4]
  mspThis->mMutex.lock();
 800975a:	4b19      	ldr	r3, [pc, #100]	; (80097c0 <_ZN7MsgPool6resMsgEv+0x70>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	33cc      	adds	r3, #204	; 0xcc
 8009760:	2101      	movs	r1, #1
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f8a2 	bl	80098ac <_ZN5Mutex4lockEh>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8009768:	2300      	movs	r3, #0
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	e019      	b.n	80097a2 <_ZN7MsgPool6resMsgEv+0x52>
  {
    if(mspThis->mPool[i].mUsed == false)
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <_ZN7MsgPool6resMsgEv+0x70>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	4413      	add	r3, r2
 8009778:	7a1b      	ldrb	r3, [r3, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10e      	bne.n	800979c <_ZN7MsgPool6resMsgEv+0x4c>
    {
      mspThis->mPool[i].mUsed = true;
 800977e:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <_ZN7MsgPool6resMsgEv+0x70>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	4413      	add	r3, r2
 8009788:	2201      	movs	r2, #1
 800978a:	721a      	strb	r2, [r3, #8]
      lpRetVal = mspThis->mPool[i].mMsg;
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <_ZN7MsgPool6resMsgEv+0x70>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	4413      	add	r3, r2
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	607b      	str	r3, [r7, #4]
      break;
 800979a:	e005      	b.n	80097a8 <_ZN7MsgPool6resMsgEv+0x58>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	603b      	str	r3, [r7, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b18      	cmp	r3, #24
 80097a6:	dde2      	ble.n	800976e <_ZN7MsgPool6resMsgEv+0x1e>
    }
  }
  mspThis->mMutex.unlock();
 80097a8:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <_ZN7MsgPool6resMsgEv+0x70>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	33cc      	adds	r3, #204	; 0xcc
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f890 	bl	80098d4 <_ZN5Mutex6unlockEv>
  return lpRetVal;
 80097b4:	687b      	ldr	r3, [r7, #4]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20009064 	.word	0x20009064

080097c4 <_ZN7MsgPool7freeMsgEP7Message>:

void MsgPool::freeMsg(Message* p_msg)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  if(p_msg->type() != MsgIsr)
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff04 	bl	80095da <_ZN7Message4typeEv>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	bf14      	ite	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	2300      	moveq	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d026      	beq.n	8009830 <_ZN7MsgPool7freeMsgEP7Message+0x6c>
  {
    mspThis->mMutex.lock();
 80097e2:	4b15      	ldr	r3, [pc, #84]	; (8009838 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	33cc      	adds	r3, #204	; 0xcc
 80097e8:	2101      	movs	r1, #1
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f85e 	bl	80098ac <_ZN5Mutex4lockEh>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e013      	b.n	800981e <_ZN7MsgPool7freeMsgEP7Message+0x5a>
    {
      if(mspThis->mPool[i].mMsg == p_msg)
 80097f6:	4b10      	ldr	r3, [pc, #64]	; (8009838 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	4413      	add	r3, r2
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d107      	bne.n	8009818 <_ZN7MsgPool7freeMsgEP7Message+0x54>
      {
        mspThis->mPool[i].mUsed = false;
 8009808:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	721a      	strb	r2, [r3, #8]
        break;
 8009816:	e005      	b.n	8009824 <_ZN7MsgPool7freeMsgEP7Message+0x60>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b18      	cmp	r3, #24
 8009822:	dde8      	ble.n	80097f6 <_ZN7MsgPool7freeMsgEP7Message+0x32>
      }
    }
    mspThis->mMutex.unlock();
 8009824:	4b04      	ldr	r3, [pc, #16]	; (8009838 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	33cc      	adds	r3, #204	; 0xcc
 800982a:	4618      	mov	r0, r3
 800982c:	f000 f852 	bl	80098d4 <_ZN5Mutex6unlockEv>
  }
}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20009064 	.word	0x20009064

0800983c <_ZN5MutexC1Ev>:
 *      Author: axel
 */

#include <Mutex.h>

Mutex::Mutex()
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	4a06      	ldr	r2, [pc, #24]	; (8009860 <_ZN5MutexC1Ev+0x24>)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
{
  mMutex = xSemaphoreCreateMutex();
 800984a:	2001      	movs	r0, #1
 800984c:	f7fc fda9 	bl	80063a2 <xQueueCreateMutex>
 8009850:	4602      	mov	r2, r0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	605a      	str	r2, [r3, #4]
}
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	0800b1a8 	.word	0x0800b1a8

08009864 <_ZN5MutexD1Ev>:

Mutex::~Mutex()
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	4a06      	ldr	r2, [pc, #24]	; (8009888 <_ZN5MutexD1Ev+0x24>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
{
  vSemaphoreDelete(mMutex);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	4618      	mov	r0, r3
 8009878:	f7fd f932 	bl	8006ae0 <vQueueDelete>
}
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	0800b1a8 	.word	0x0800b1a8

0800988c <_ZN5MutexD0Ev>:
Mutex::~Mutex()
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
}
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff ffe5 	bl	8009864 <_ZN5MutexD1Ev>
 800989a:	210c      	movs	r1, #12
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 faa8 	bl	8009df2 <_ZdlPvj>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_ZN5Mutex4lockEh>:

void Mutex::lock(uint8_t causedLockId)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  xSemaphoreTake(mMutex, portMAX_DELAY);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f04f 31ff 	mov.w	r1, #4294967295
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd f801 	bl	80068c8 <xQueueSemaphoreTake>
  mCausedLockId = causedLockId;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	721a      	strb	r2, [r3, #8]
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <_ZN5Mutex6unlockEv>:

void Mutex::unlock()
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  xSemaphoreGive(mMutex);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6858      	ldr	r0, [r3, #4]
 80098e0:	2300      	movs	r3, #0
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	f7fc fd75 	bl	80063d4 <xQueueGenericSend>
  mCausedLockId = 0;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	721a      	strb	r2, [r3, #8]
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZN4TaskC1E6TaskIdPKc>:
#include <string.h>
#include "TaskClass.h"



Task::Task(TaskId id, const char* name)
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	460b      	mov	r3, r1
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	72fb      	strb	r3, [r7, #11]
 8009906:	4a20      	ldr	r2, [pc, #128]	; (8009988 <_ZN4TaskC1E6TaskIdPKc+0x90>)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]
{
  mId = id;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	7afa      	ldrb	r2, [r7, #11]
 8009910:	711a      	strb	r2, [r3, #4]
  strncpy(mName,name, TASK_NAME_LEN);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3305      	adds	r3, #5
 8009916:	2214      	movs	r2, #20
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fd5a 	bl	800a3d4 <strncpy>
  mQueue = xQueueCreate(MSG_QUEUE_SIZE, sizeof(Message*));
 8009920:	2200      	movs	r2, #0
 8009922:	2104      	movs	r1, #4
 8009924:	200a      	movs	r0, #10
 8009926:	f7fc fcc5 	bl	80062b4 <xQueueGenericCreate>
 800992a:	4602      	mov	r2, r0
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	621a      	str	r2, [r3, #32]
  xTaskCreate(Task::mainLoop, mName,  TASK_STACK_SIZE , this, tskIDLE_PRIORITY, &mHandle);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	1d59      	adds	r1, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	331c      	adds	r3, #28
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	2300      	movs	r3, #0
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009944:	4811      	ldr	r0, [pc, #68]	; (800998c <_ZN4TaskC1E6TaskIdPKc+0x94>)
 8009946:	f7fd fafc 	bl	8006f42 <xTaskCreate>
  configASSERT(mHandle != 0);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <_ZN4TaskC1E6TaskIdPKc+0x70>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	617b      	str	r3, [r7, #20]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <_ZN4TaskC1E6TaskIdPKc+0x6e>
  TaskList::createEntry(mId, mName, mHandle, mQueue);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	7918      	ldrb	r0, [r3, #4]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	1d59      	adds	r1, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	69da      	ldr	r2, [r3, #28]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	f000 f874 	bl	8009a64 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>
}
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	0800b1b8 	.word	0x0800b1b8
 800998c:	080099b1 	.word	0x080099b1

08009990 <_ZN4TaskD1Ev>:

Task::~Task()
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	4a04      	ldr	r2, [pc, #16]	; (80099ac <_ZN4TaskD1Ev+0x1c>)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	0800b1b8 	.word	0x0800b1b8

080099b0 <_ZN4Task8mainLoopEPv>:

void Task::mainLoop(void* args)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  Task* lpThis = (Task*)args;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	617b      	str	r3, [r7, #20]
  Message* lpReceiveMsg = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    BaseType_t lResult = xQueueReceive(lpThis->mQueue, &lpReceiveMsg, portMAX_DELAY);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	f107 010c 	add.w	r1, r7, #12
 80099c8:	f04f 32ff 	mov.w	r2, #4294967295
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fc fe9b 	bl	8006708 <xQueueReceive>
 80099d2:	6138      	str	r0, [r7, #16]
    if(lResult == true)
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d10c      	bne.n	80099f4 <_ZN4Task8mainLoopEPv+0x44>
    {
      //printf("queue message received %d\n",lpThis->mId);
      lpThis->handleMessage(lpReceiveMsg);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3308      	adds	r3, #8
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4611      	mov	r1, r2
 80099e6:	6978      	ldr	r0, [r7, #20]
 80099e8:	4798      	blx	r3
      lpReceiveMsg->freeMsg();
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fdac 	bl	800954a <_ZN7Message7freeMsgEv>
 80099f2:	e7e5      	b.n	80099c0 <_ZN4Task8mainLoopEPv+0x10>
    }
    else
    {
    	printf("deqeuing failed");
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <_ZN4Task8mainLoopEPv+0x4c>)
 80099f6:	f000 fb85 	bl	800a104 <iprintf>
    }
  }
 80099fa:	e7e1      	b.n	80099c0 <_ZN4Task8mainLoopEPv+0x10>
 80099fc:	0800b110 	.word	0x0800b110

08009a00 <TaskList_init>:
#include "os_init.h"
#include "TaskList.h"
#include <string.h>

void TaskList_init()
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
  TaskList::instance();
 8009a04:	f000 f802 	bl	8009a0c <_ZN8TaskList8instanceEv>
}
 8009a08:	bf00      	nop
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <_ZN8TaskList8instanceEv>:
TaskList::table_struct TaskList::mTaskTable[TASK_MAX_COUNT];

TaskList* TaskList::mspThis=0;

TaskList* TaskList::instance()
{
 8009a0c:	b598      	push	{r3, r4, r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  if(TaskList::mspThis == 0)
 8009a10:	4b08      	ldr	r3, [pc, #32]	; (8009a34 <_ZN8TaskList8instanceEv+0x28>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <_ZN8TaskList8instanceEv+0x20>
  {
    TaskList::mspThis = new TaskList;
 8009a18:	200c      	movs	r0, #12
 8009a1a:	f000 f9d3 	bl	8009dc4 <_Znwj>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	461c      	mov	r4, r3
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 f808 	bl	8009a38 <_ZN8TaskListC1Ev>
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <_ZN8TaskList8instanceEv+0x28>)
 8009a2a:	601c      	str	r4, [r3, #0]
  }
  return TaskList::mspThis;
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <_ZN8TaskList8instanceEv+0x28>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	bd98      	pop	{r3, r4, r7, pc}
 8009a34:	200092e8 	.word	0x200092e8

08009a38 <_ZN8TaskListC1Ev>:

TaskList::TaskList()
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fefa 	bl	800983c <_ZN5MutexC1Ev>
{
  memset(&mTaskTable, 0, sizeof(mTaskTable));
 8009a48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4804      	ldr	r0, [pc, #16]	; (8009a60 <_ZN8TaskListC1Ev+0x28>)
 8009a50:	f000 fcb8 	bl	800a3c4 <memset>
}
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20009068 	.word	0x20009068

08009a64 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>:

void TaskList::createEntry(TaskId id, char* name, TaskHandle_t task, QueueHandle_t address)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]
  TaskList::getMutex()->lock();
 8009a74:	f000 f840 	bl	8009af8 <_ZN8TaskList8getMutexEv>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff ff15 	bl	80098ac <_ZN5Mutex4lockEh>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
 8009a86:	e028      	b.n	8009ada <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x76>
  {
    if(TaskList::mTaskTable[i].id == NoTask)
 8009a88:	4a1a      	ldr	r2, [pc, #104]	; (8009af4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	015b      	lsls	r3, r3, #5
 8009a8e:	4413      	add	r3, r2
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d11e      	bne.n	8009ad4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x70>
    {
      TaskList::mTaskTable[i].id = id;
 8009a96:	4a17      	ldr	r2, [pc, #92]	; (8009af4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	015b      	lsls	r3, r3, #5
 8009a9c:	4413      	add	r3, r2
 8009a9e:	7bfa      	ldrb	r2, [r7, #15]
 8009aa0:	701a      	strb	r2, [r3, #0]
      strncpy(TaskList::mTaskTable[i].name, name, TASK_NAME_LEN);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	015b      	lsls	r3, r3, #5
 8009aa6:	4a13      	ldr	r2, [pc, #76]	; (8009af4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3301      	adds	r3, #1
 8009aac:	2214      	movs	r2, #20
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fc8f 	bl	800a3d4 <strncpy>
      TaskList::mTaskTable[i].hTask = task;
 8009ab6:	4a0f      	ldr	r2, [pc, #60]	; (8009af4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	015b      	lsls	r3, r3, #5
 8009abc:	4413      	add	r3, r2
 8009abe:	3318      	adds	r3, #24
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	601a      	str	r2, [r3, #0]
      TaskList::mTaskTable[i].hQueue = address;
 8009ac4:	4a0b      	ldr	r2, [pc, #44]	; (8009af4 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	015b      	lsls	r3, r3, #5
 8009aca:	4413      	add	r3, r2
 8009acc:	331c      	adds	r3, #28
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
      break;
 8009ad2:	e005      	b.n	8009ae0 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x7c>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b13      	cmp	r3, #19
 8009ade:	ddd3      	ble.n	8009a88 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x24>
    }
  }
  TaskList::getMutex()->unlock();
 8009ae0:	f000 f80a 	bl	8009af8 <_ZN8TaskList8getMutexEv>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fef4 	bl	80098d4 <_ZN5Mutex6unlockEv>
}
 8009aec:	bf00      	nop
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20009068 	.word	0x20009068

08009af8 <_ZN8TaskList8getMutexEv>:

Mutex* TaskList::getMutex()
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return &TaskList::mspThis->mMutex;
 8009afc:	4b03      	ldr	r3, [pc, #12]	; (8009b0c <_ZN8TaskList8getMutexEv+0x14>)
 8009afe:	681b      	ldr	r3, [r3, #0]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	200092e8 	.word	0x200092e8

08009b10 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock>:
  }
  return lRetVal;
}

TaskId TaskList::getTaskId(TaskHandle_t handle)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  TaskId lRetVal = NoTask;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60bb      	str	r3, [r7, #8]
 8009b20:	e012      	b.n	8009b48 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x38>
  {
    if(handle == TaskList::mTaskTable[i].hTask)
 8009b22:	4a0e      	ldr	r2, [pc, #56]	; (8009b5c <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x4c>)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	015b      	lsls	r3, r3, #5
 8009b28:	4413      	add	r3, r2
 8009b2a:	3318      	adds	r3, #24
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d106      	bne.n	8009b42 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x32>
    {
      lRetVal = TaskList::mTaskTable[i].id; //atomic
 8009b34:	4a09      	ldr	r2, [pc, #36]	; (8009b5c <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x4c>)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	015b      	lsls	r3, r3, #5
 8009b3a:	4413      	add	r3, r2
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b40:	e005      	b.n	8009b4e <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x3e>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60bb      	str	r3, [r7, #8]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b13      	cmp	r3, #19
 8009b4c:	dde9      	ble.n	8009b22 <_ZN8TaskList9getTaskIdEP19tskTaskControlBlock+0x12>
    }
  }
  return lRetVal;
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	20009068 	.word	0x20009068

08009b60 <_ZN8TaskList8getQueueE6TaskId>:

QueueHandle_t TaskList::getQueue(TaskId id)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t lRetVal = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60bb      	str	r3, [r7, #8]
 8009b72:	e012      	b.n	8009b9a <_ZN8TaskList8getQueueE6TaskId+0x3a>
  {
    if(id == TaskList::mTaskTable[i].id)
 8009b74:	4a0e      	ldr	r2, [pc, #56]	; (8009bb0 <_ZN8TaskList8getQueueE6TaskId+0x50>)
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	015b      	lsls	r3, r3, #5
 8009b7a:	4413      	add	r3, r2
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	79fa      	ldrb	r2, [r7, #7]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d107      	bne.n	8009b94 <_ZN8TaskList8getQueueE6TaskId+0x34>
    {
      lRetVal = TaskList::mTaskTable[i].hQueue; //atomic
 8009b84:	4a0a      	ldr	r2, [pc, #40]	; (8009bb0 <_ZN8TaskList8getQueueE6TaskId+0x50>)
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	015b      	lsls	r3, r3, #5
 8009b8a:	4413      	add	r3, r2
 8009b8c:	331c      	adds	r3, #28
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60fb      	str	r3, [r7, #12]
      break;
 8009b92:	e005      	b.n	8009ba0 <_ZN8TaskList8getQueueE6TaskId+0x40>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	3301      	adds	r3, #1
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b13      	cmp	r3, #19
 8009b9e:	dde9      	ble.n	8009b74 <_ZN8TaskList8getQueueE6TaskId+0x14>
    }
  }
  return lRetVal;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20009068 	.word	0x20009068

08009bb4 <_ZN5TimerC1E6TaskId7TimerId>:
#include <stdio.h>
#include <stm32g491xx.h>

#define BLOCK_TIME   1000

Timer::Timer(TaskId addressee, TimerId timer)
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	70bb      	strb	r3, [r7, #2]
 8009bc4:	4a16      	ldr	r2, [pc, #88]	; (8009c20 <_ZN5TimerC1E6TaskId7TimerId+0x6c>)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	601a      	str	r2, [r3, #0]
{
  mTimerData.addressee = addressee;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	78fa      	ldrb	r2, [r7, #3]
 8009bce:	711a      	strb	r2, [r3, #4]
  mTimerData.timer = timer;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	78ba      	ldrb	r2, [r7, #2]
 8009bd4:	715a      	strb	r2, [r3, #5]
  const int cDefaultPeriod = 1000;
 8009bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bda:	60fb      	str	r3, [r7, #12]
  mHTimer = xTimerCreate("Timer\0", pdMS_TO_TICKS(cDefaultPeriod), pdFALSE, &mTimerData, CallbackFunction);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4a10      	ldr	r2, [pc, #64]	; (8009c24 <_ZN5TimerC1E6TaskId7TimerId+0x70>)
 8009be2:	9200      	str	r2, [sp, #0]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009bea:	480f      	ldr	r0, [pc, #60]	; (8009c28 <_ZN5TimerC1E6TaskId7TimerId+0x74>)
 8009bec:	f7fe faa4 	bl	8008138 <xTimerCreate>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	609a      	str	r2, [r3, #8]
  configASSERT(mHTimer != 0);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <_ZN5TimerC1E6TaskId7TimerId+0x60>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60bb      	str	r3, [r7, #8]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <_ZN5TimerC1E6TaskId7TimerId+0x5e>
}
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	0800b1cc 	.word	0x0800b1cc
 8009c24:	08009c7d 	.word	0x08009c7d
 8009c28:	0800b120 	.word	0x0800b120

08009c2c <_ZN5TimerD1Ev>:

Timer::~Timer()
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <_ZN5TimerD1Ev+0x2c>)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]
{
  xTimerDelete(mHTimer, BLOCK_TIME);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6898      	ldr	r0, [r3, #8]
 8009c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	2200      	movs	r2, #0
 8009c48:	2105      	movs	r1, #5
 8009c4a:	f7fe fad1 	bl	80081f0 <xTimerGenericCommand>
}
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	0800b1cc 	.word	0x0800b1cc

08009c5c <_ZN5TimerD0Ev>:
Timer::~Timer()
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
}
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff ffe1 	bl	8009c2c <_ZN5TimerD1Ev>
 8009c6a:	210c      	movs	r1, #12
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f8c0 	bl	8009df2 <_ZdlPvj>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4618      	mov	r0, r3
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <_ZN5Timer16CallbackFunctionEP15tmrTimerControl>:

void Timer::CallbackFunction( TimerHandle_t xTimer )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  timerDataStruct* lpTimerData = (timerDataStruct*)pvTimerGetTimerID(xTimer);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7fe fdd1 	bl	800882c <pvTimerGetTimerID>
 8009c8a:	6178      	str	r0, [r7, #20]
  DataUnion lTimerId;
  lTimerId.longword = lpTimerData->timer;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	60fb      	str	r3, [r7, #12]
  Message* lpMsg = Message::reserve(MSG_ID_TIMEOUT, lpTimerData->addressee, lTimerId);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	2002      	movs	r0, #2
 8009c9c:	f7ff fbb0 	bl	8009400 <_ZN7Message7reserveEhh9DataUnion>
 8009ca0:	6138      	str	r0, [r7, #16]
  lpMsg->sendMsg();
 8009ca2:	6938      	ldr	r0, [r7, #16]
 8009ca4:	f7ff fc0d 	bl	80094c2 <_ZN7Message7sendMsgEv>
}
 8009ca8:	bf00      	nop
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <_ZN5Timer11setIntervalEi>:

void Timer::setInterval(int period)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  xTimerChangePeriod( mHTimer, pdMS_TO_TICKS(period), BLOCK_TIME);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6898      	ldr	r0, [r3, #8]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cc4:	fb02 f303 	mul.w	r3, r2, r3
 8009cc8:	4a07      	ldr	r2, [pc, #28]	; (8009ce8 <_ZN5Timer11setIntervalEi+0x38>)
 8009cca:	fba2 2303 	umull	r2, r3, r2, r3
 8009cce:	099a      	lsrs	r2, r3, #6
 8009cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2104      	movs	r1, #4
 8009cda:	f7fe fa89 	bl	80081f0 <xTimerGenericCommand>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	10624dd3 	.word	0x10624dd3

08009cec <_ZN5Timer13setSingleShotEb>:

void Timer::setSingleShot(bool once)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  vTimerSetReloadMode(mHTimer, !once);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	f083 0301 	eor.w	r3, r3, #1
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f7fe fac0 	bl	800828c <vTimerSetReloadMode>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <_ZN5Timer5startEv>:

void Timer::start()
{
 8009d14:	b590      	push	{r4, r7, lr}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	6078      	str	r0, [r7, #4]
  bool lResult = pdFAIL;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60bb      	str	r3, [r7, #8]
  if(isInterrupt())
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f837 	bl	8009d98 <_ZN5Timer11isInterruptEv>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d013      	beq.n	8009d58 <_ZN5Timer5startEv+0x44>
  {
    lResult = xTimerStartFromISR(mHTimer, &xHigherPriorityTaskWoken);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689c      	ldr	r4, [r3, #8]
 8009d34:	f7fd fc1e 	bl	8007574 <xTaskGetTickCountFromISR>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	2100      	movs	r1, #0
 8009d40:	9100      	str	r1, [sp, #0]
 8009d42:	2106      	movs	r1, #6
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7fe fa53 	bl	80081f0 <xTimerGenericCommand>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bf14      	ite	ne
 8009d50:	2301      	movne	r3, #1
 8009d52:	2300      	moveq	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]
 8009d56:	e012      	b.n	8009d7e <_ZN5Timer5startEv+0x6a>
  }
  else
  {
    lResult = xTimerStart(mHTimer, BLOCK_TIME);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689c      	ldr	r4, [r3, #8]
 8009d5c:	f7fd fbfa 	bl	8007554 <xTaskGetTickCount>
 8009d60:	4602      	mov	r2, r0
 8009d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7fe fa3f 	bl	80081f0 <xTimerGenericCommand>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bf14      	ite	ne
 8009d78:	2301      	movne	r3, #1
 8009d7a:	2300      	moveq	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]
  }
  if(lResult == pdFAIL)
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <_ZN5Timer5startEv+0x76>
  {
    printf("start timer failed\n");
 8009d84:	4803      	ldr	r0, [pc, #12]	; (8009d94 <_ZN5Timer5startEv+0x80>)
 8009d86:	f000 fa23 	bl	800a1d0 <puts>
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd90      	pop	{r4, r7, pc}
 8009d92:	bf00      	nop
 8009d94:	0800b128 	.word	0x0800b128

08009d98 <_ZN5Timer11isInterruptEv>:
{
  xTimerStop(mHTimer, BLOCK_TIME);
}

bool Timer::isInterrupt()
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0 ;
 8009da0:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <_ZN5Timer11isInterruptEv+0x28>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bf14      	ite	ne
 8009dac:	2301      	movne	r3, #1
 8009dae:	2300      	moveq	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	e000ed00 	.word	0xe000ed00

08009dc4 <_Znwj>:
#include <projdefs.h>
#include <portmacro.h>
#include <portable.h>

void * operator new( size_t size )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7fe ff9b 	bl	8008d08 <pvPortMalloc>
 8009dd2:	4603      	mov	r3, r0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff f85b 	bl	8008ea0 <vPortFree>
}
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <_ZdlPvj>:
 8009df2:	f7ff bff3 	b.w	8009ddc <_ZdlPv>

08009df6 <_ZSt17__throw_bad_allocv>:
 8009df6:	b508      	push	{r3, lr}
 8009df8:	f000 f806 	bl	8009e08 <abort>

08009dfc <_ZSt28__throw_bad_array_new_lengthv>:
 8009dfc:	b508      	push	{r3, lr}
 8009dfe:	f000 f803 	bl	8009e08 <abort>

08009e02 <_ZSt20__throw_length_errorPKc>:
 8009e02:	b508      	push	{r3, lr}
 8009e04:	f000 f800 	bl	8009e08 <abort>

08009e08 <abort>:
 8009e08:	b508      	push	{r3, lr}
 8009e0a:	2006      	movs	r0, #6
 8009e0c:	f000 fb1e 	bl	800a44c <raise>
 8009e10:	2001      	movs	r0, #1
 8009e12:	f7f7 fb0f 	bl	8001434 <_exit>
	...

08009e18 <malloc>:
 8009e18:	4b02      	ldr	r3, [pc, #8]	; (8009e24 <malloc+0xc>)
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	f000 b823 	b.w	8009e68 <_malloc_r>
 8009e22:	bf00      	nop
 8009e24:	20000068 	.word	0x20000068

08009e28 <sbrk_aligned>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4e0e      	ldr	r6, [pc, #56]	; (8009e64 <sbrk_aligned+0x3c>)
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	4605      	mov	r5, r0
 8009e32:	b911      	cbnz	r1, 8009e3a <sbrk_aligned+0x12>
 8009e34:	f000 fbb0 	bl	800a598 <_sbrk_r>
 8009e38:	6030      	str	r0, [r6, #0]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f000 fbab 	bl	800a598 <_sbrk_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d00a      	beq.n	8009e5c <sbrk_aligned+0x34>
 8009e46:	1cc4      	adds	r4, r0, #3
 8009e48:	f024 0403 	bic.w	r4, r4, #3
 8009e4c:	42a0      	cmp	r0, r4
 8009e4e:	d007      	beq.n	8009e60 <sbrk_aligned+0x38>
 8009e50:	1a21      	subs	r1, r4, r0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 fba0 	bl	800a598 <_sbrk_r>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d101      	bne.n	8009e60 <sbrk_aligned+0x38>
 8009e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e60:	4620      	mov	r0, r4
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	200092f0 	.word	0x200092f0

08009e68 <_malloc_r>:
 8009e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e6c:	1ccd      	adds	r5, r1, #3
 8009e6e:	f025 0503 	bic.w	r5, r5, #3
 8009e72:	3508      	adds	r5, #8
 8009e74:	2d0c      	cmp	r5, #12
 8009e76:	bf38      	it	cc
 8009e78:	250c      	movcc	r5, #12
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	db01      	blt.n	8009e84 <_malloc_r+0x1c>
 8009e80:	42a9      	cmp	r1, r5
 8009e82:	d905      	bls.n	8009e90 <_malloc_r+0x28>
 8009e84:	230c      	movs	r3, #12
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	2600      	movs	r6, #0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f64 <_malloc_r+0xfc>
 8009e94:	f000 f868 	bl	8009f68 <__malloc_lock>
 8009e98:	f8d8 3000 	ldr.w	r3, [r8]
 8009e9c:	461c      	mov	r4, r3
 8009e9e:	bb5c      	cbnz	r4, 8009ef8 <_malloc_r+0x90>
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f7ff ffc0 	bl	8009e28 <sbrk_aligned>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	4604      	mov	r4, r0
 8009eac:	d155      	bne.n	8009f5a <_malloc_r+0xf2>
 8009eae:	f8d8 4000 	ldr.w	r4, [r8]
 8009eb2:	4626      	mov	r6, r4
 8009eb4:	2e00      	cmp	r6, #0
 8009eb6:	d145      	bne.n	8009f44 <_malloc_r+0xdc>
 8009eb8:	2c00      	cmp	r4, #0
 8009eba:	d048      	beq.n	8009f4e <_malloc_r+0xe6>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	eb04 0903 	add.w	r9, r4, r3
 8009ec6:	f000 fb67 	bl	800a598 <_sbrk_r>
 8009eca:	4581      	cmp	r9, r0
 8009ecc:	d13f      	bne.n	8009f4e <_malloc_r+0xe6>
 8009ece:	6821      	ldr	r1, [r4, #0]
 8009ed0:	1a6d      	subs	r5, r5, r1
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7ff ffa7 	bl	8009e28 <sbrk_aligned>
 8009eda:	3001      	adds	r0, #1
 8009edc:	d037      	beq.n	8009f4e <_malloc_r+0xe6>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	442b      	add	r3, r5
 8009ee2:	6023      	str	r3, [r4, #0]
 8009ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d038      	beq.n	8009f5e <_malloc_r+0xf6>
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	42a2      	cmp	r2, r4
 8009ef0:	d12b      	bne.n	8009f4a <_malloc_r+0xe2>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	605a      	str	r2, [r3, #4]
 8009ef6:	e00f      	b.n	8009f18 <_malloc_r+0xb0>
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	1b52      	subs	r2, r2, r5
 8009efc:	d41f      	bmi.n	8009f3e <_malloc_r+0xd6>
 8009efe:	2a0b      	cmp	r2, #11
 8009f00:	d917      	bls.n	8009f32 <_malloc_r+0xca>
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	6025      	str	r5, [r4, #0]
 8009f08:	bf18      	it	ne
 8009f0a:	6059      	strne	r1, [r3, #4]
 8009f0c:	6863      	ldr	r3, [r4, #4]
 8009f0e:	bf08      	it	eq
 8009f10:	f8c8 1000 	streq.w	r1, [r8]
 8009f14:	5162      	str	r2, [r4, r5]
 8009f16:	604b      	str	r3, [r1, #4]
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f104 060b 	add.w	r6, r4, #11
 8009f1e:	f000 f829 	bl	8009f74 <__malloc_unlock>
 8009f22:	f026 0607 	bic.w	r6, r6, #7
 8009f26:	1d23      	adds	r3, r4, #4
 8009f28:	1af2      	subs	r2, r6, r3
 8009f2a:	d0ae      	beq.n	8009e8a <_malloc_r+0x22>
 8009f2c:	1b9b      	subs	r3, r3, r6
 8009f2e:	50a3      	str	r3, [r4, r2]
 8009f30:	e7ab      	b.n	8009e8a <_malloc_r+0x22>
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	6862      	ldr	r2, [r4, #4]
 8009f36:	d1dd      	bne.n	8009ef4 <_malloc_r+0x8c>
 8009f38:	f8c8 2000 	str.w	r2, [r8]
 8009f3c:	e7ec      	b.n	8009f18 <_malloc_r+0xb0>
 8009f3e:	4623      	mov	r3, r4
 8009f40:	6864      	ldr	r4, [r4, #4]
 8009f42:	e7ac      	b.n	8009e9e <_malloc_r+0x36>
 8009f44:	4634      	mov	r4, r6
 8009f46:	6876      	ldr	r6, [r6, #4]
 8009f48:	e7b4      	b.n	8009eb4 <_malloc_r+0x4c>
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	e7cc      	b.n	8009ee8 <_malloc_r+0x80>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	603b      	str	r3, [r7, #0]
 8009f52:	4638      	mov	r0, r7
 8009f54:	f000 f80e 	bl	8009f74 <__malloc_unlock>
 8009f58:	e797      	b.n	8009e8a <_malloc_r+0x22>
 8009f5a:	6025      	str	r5, [r4, #0]
 8009f5c:	e7dc      	b.n	8009f18 <_malloc_r+0xb0>
 8009f5e:	605b      	str	r3, [r3, #4]
 8009f60:	deff      	udf	#255	; 0xff
 8009f62:	bf00      	nop
 8009f64:	200092ec 	.word	0x200092ec

08009f68 <__malloc_lock>:
 8009f68:	4801      	ldr	r0, [pc, #4]	; (8009f70 <__malloc_lock+0x8>)
 8009f6a:	f7f7 bd11 	b.w	8001990 <__retarget_lock_acquire_recursive>
 8009f6e:	bf00      	nop
 8009f70:	20000898 	.word	0x20000898

08009f74 <__malloc_unlock>:
 8009f74:	4801      	ldr	r0, [pc, #4]	; (8009f7c <__malloc_unlock+0x8>)
 8009f76:	f7f7 bd1f 	b.w	80019b8 <__retarget_lock_release_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	20000898 	.word	0x20000898

08009f80 <std>:
 8009f80:	2300      	movs	r3, #0
 8009f82:	b510      	push	{r4, lr}
 8009f84:	4604      	mov	r4, r0
 8009f86:	e9c0 3300 	strd	r3, r3, [r0]
 8009f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f8e:	6083      	str	r3, [r0, #8]
 8009f90:	8181      	strh	r1, [r0, #12]
 8009f92:	6643      	str	r3, [r0, #100]	; 0x64
 8009f94:	81c2      	strh	r2, [r0, #14]
 8009f96:	6183      	str	r3, [r0, #24]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	305c      	adds	r0, #92	; 0x5c
 8009f9e:	f000 fa11 	bl	800a3c4 <memset>
 8009fa2:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <std+0x58>)
 8009fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <std+0x5c>)
 8009fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009faa:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <std+0x60>)
 8009fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fae:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <std+0x64>)
 8009fb0:	6323      	str	r3, [r4, #48]	; 0x30
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <std+0x68>)
 8009fb4:	6224      	str	r4, [r4, #32]
 8009fb6:	429c      	cmp	r4, r3
 8009fb8:	d006      	beq.n	8009fc8 <std+0x48>
 8009fba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009fbe:	4294      	cmp	r4, r2
 8009fc0:	d002      	beq.n	8009fc8 <std+0x48>
 8009fc2:	33d0      	adds	r3, #208	; 0xd0
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	d105      	bne.n	8009fd4 <std+0x54>
 8009fc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd0:	f7f7 bcb8 	b.w	8001944 <__retarget_lock_init_recursive>
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	bf00      	nop
 8009fd8:	0800a1e1 	.word	0x0800a1e1
 8009fdc:	0800a203 	.word	0x0800a203
 8009fe0:	0800a23b 	.word	0x0800a23b
 8009fe4:	0800a25f 	.word	0x0800a25f
 8009fe8:	200092f4 	.word	0x200092f4

08009fec <stdio_exit_handler>:
 8009fec:	4a02      	ldr	r2, [pc, #8]	; (8009ff8 <stdio_exit_handler+0xc>)
 8009fee:	4903      	ldr	r1, [pc, #12]	; (8009ffc <stdio_exit_handler+0x10>)
 8009ff0:	4803      	ldr	r0, [pc, #12]	; (800a000 <stdio_exit_handler+0x14>)
 8009ff2:	f000 b869 	b.w	800a0c8 <_fwalk_sglue>
 8009ff6:	bf00      	nop
 8009ff8:	20000010 	.word	0x20000010
 8009ffc:	0800ad99 	.word	0x0800ad99
 800a000:	2000001c 	.word	0x2000001c

0800a004 <cleanup_stdio>:
 800a004:	6841      	ldr	r1, [r0, #4]
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <cleanup_stdio+0x34>)
 800a008:	4299      	cmp	r1, r3
 800a00a:	b510      	push	{r4, lr}
 800a00c:	4604      	mov	r4, r0
 800a00e:	d001      	beq.n	800a014 <cleanup_stdio+0x10>
 800a010:	f000 fec2 	bl	800ad98 <_fflush_r>
 800a014:	68a1      	ldr	r1, [r4, #8]
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <cleanup_stdio+0x38>)
 800a018:	4299      	cmp	r1, r3
 800a01a:	d002      	beq.n	800a022 <cleanup_stdio+0x1e>
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 febb 	bl	800ad98 <_fflush_r>
 800a022:	68e1      	ldr	r1, [r4, #12]
 800a024:	4b06      	ldr	r3, [pc, #24]	; (800a040 <cleanup_stdio+0x3c>)
 800a026:	4299      	cmp	r1, r3
 800a028:	d004      	beq.n	800a034 <cleanup_stdio+0x30>
 800a02a:	4620      	mov	r0, r4
 800a02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a030:	f000 beb2 	b.w	800ad98 <_fflush_r>
 800a034:	bd10      	pop	{r4, pc}
 800a036:	bf00      	nop
 800a038:	200092f4 	.word	0x200092f4
 800a03c:	2000935c 	.word	0x2000935c
 800a040:	200093c4 	.word	0x200093c4

0800a044 <global_stdio_init.part.0>:
 800a044:	b510      	push	{r4, lr}
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <global_stdio_init.part.0+0x30>)
 800a048:	4c0b      	ldr	r4, [pc, #44]	; (800a078 <global_stdio_init.part.0+0x34>)
 800a04a:	4a0c      	ldr	r2, [pc, #48]	; (800a07c <global_stdio_init.part.0+0x38>)
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	4620      	mov	r0, r4
 800a050:	2200      	movs	r2, #0
 800a052:	2104      	movs	r1, #4
 800a054:	f7ff ff94 	bl	8009f80 <std>
 800a058:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a05c:	2201      	movs	r2, #1
 800a05e:	2109      	movs	r1, #9
 800a060:	f7ff ff8e 	bl	8009f80 <std>
 800a064:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a068:	2202      	movs	r2, #2
 800a06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a06e:	2112      	movs	r1, #18
 800a070:	f7ff bf86 	b.w	8009f80 <std>
 800a074:	2000942c 	.word	0x2000942c
 800a078:	200092f4 	.word	0x200092f4
 800a07c:	08009fed 	.word	0x08009fed

0800a080 <__sfp_lock_acquire>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__sfp_lock_acquire+0x8>)
 800a082:	f7f7 bc85 	b.w	8001990 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	2000088c 	.word	0x2000088c

0800a08c <__sfp_lock_release>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__sfp_lock_release+0x8>)
 800a08e:	f7f7 bc93 	b.w	80019b8 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	2000088c 	.word	0x2000088c

0800a098 <__sinit>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	f7ff fff0 	bl	800a080 <__sfp_lock_acquire>
 800a0a0:	6a23      	ldr	r3, [r4, #32]
 800a0a2:	b11b      	cbz	r3, 800a0ac <__sinit+0x14>
 800a0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a8:	f7ff bff0 	b.w	800a08c <__sfp_lock_release>
 800a0ac:	4b04      	ldr	r3, [pc, #16]	; (800a0c0 <__sinit+0x28>)
 800a0ae:	6223      	str	r3, [r4, #32]
 800a0b0:	4b04      	ldr	r3, [pc, #16]	; (800a0c4 <__sinit+0x2c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f5      	bne.n	800a0a4 <__sinit+0xc>
 800a0b8:	f7ff ffc4 	bl	800a044 <global_stdio_init.part.0>
 800a0bc:	e7f2      	b.n	800a0a4 <__sinit+0xc>
 800a0be:	bf00      	nop
 800a0c0:	0800a005 	.word	0x0800a005
 800a0c4:	2000942c 	.word	0x2000942c

0800a0c8 <_fwalk_sglue>:
 800a0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	4688      	mov	r8, r1
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	2600      	movs	r6, #0
 800a0d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0d8:	f1b9 0901 	subs.w	r9, r9, #1
 800a0dc:	d505      	bpl.n	800a0ea <_fwalk_sglue+0x22>
 800a0de:	6824      	ldr	r4, [r4, #0]
 800a0e0:	2c00      	cmp	r4, #0
 800a0e2:	d1f7      	bne.n	800a0d4 <_fwalk_sglue+0xc>
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d907      	bls.n	800a100 <_fwalk_sglue+0x38>
 800a0f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	d003      	beq.n	800a100 <_fwalk_sglue+0x38>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	47c0      	blx	r8
 800a0fe:	4306      	orrs	r6, r0
 800a100:	3568      	adds	r5, #104	; 0x68
 800a102:	e7e9      	b.n	800a0d8 <_fwalk_sglue+0x10>

0800a104 <iprintf>:
 800a104:	b40f      	push	{r0, r1, r2, r3}
 800a106:	b507      	push	{r0, r1, r2, lr}
 800a108:	4906      	ldr	r1, [pc, #24]	; (800a124 <iprintf+0x20>)
 800a10a:	ab04      	add	r3, sp, #16
 800a10c:	6808      	ldr	r0, [r1, #0]
 800a10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a112:	6881      	ldr	r1, [r0, #8]
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	f000 fb0f 	bl	800a738 <_vfiprintf_r>
 800a11a:	b003      	add	sp, #12
 800a11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a120:	b004      	add	sp, #16
 800a122:	4770      	bx	lr
 800a124:	20000068 	.word	0x20000068

0800a128 <_puts_r>:
 800a128:	6a03      	ldr	r3, [r0, #32]
 800a12a:	b570      	push	{r4, r5, r6, lr}
 800a12c:	6884      	ldr	r4, [r0, #8]
 800a12e:	4605      	mov	r5, r0
 800a130:	460e      	mov	r6, r1
 800a132:	b90b      	cbnz	r3, 800a138 <_puts_r+0x10>
 800a134:	f7ff ffb0 	bl	800a098 <__sinit>
 800a138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a13a:	07db      	lsls	r3, r3, #31
 800a13c:	d405      	bmi.n	800a14a <_puts_r+0x22>
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	0598      	lsls	r0, r3, #22
 800a142:	d402      	bmi.n	800a14a <_puts_r+0x22>
 800a144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a146:	f7f7 fc23 	bl	8001990 <__retarget_lock_acquire_recursive>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	0719      	lsls	r1, r3, #28
 800a14e:	d513      	bpl.n	800a178 <_puts_r+0x50>
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	b18b      	cbz	r3, 800a178 <_puts_r+0x50>
 800a154:	3e01      	subs	r6, #1
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a15c:	3b01      	subs	r3, #1
 800a15e:	60a3      	str	r3, [r4, #8]
 800a160:	b9e9      	cbnz	r1, 800a19e <_puts_r+0x76>
 800a162:	2b00      	cmp	r3, #0
 800a164:	da2e      	bge.n	800a1c4 <_puts_r+0x9c>
 800a166:	4622      	mov	r2, r4
 800a168:	210a      	movs	r1, #10
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 f87b 	bl	800a266 <__swbuf_r>
 800a170:	3001      	adds	r0, #1
 800a172:	d007      	beq.n	800a184 <_puts_r+0x5c>
 800a174:	250a      	movs	r5, #10
 800a176:	e007      	b.n	800a188 <_puts_r+0x60>
 800a178:	4621      	mov	r1, r4
 800a17a:	4628      	mov	r0, r5
 800a17c:	f000 f8b0 	bl	800a2e0 <__swsetup_r>
 800a180:	2800      	cmp	r0, #0
 800a182:	d0e7      	beq.n	800a154 <_puts_r+0x2c>
 800a184:	f04f 35ff 	mov.w	r5, #4294967295
 800a188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18a:	07da      	lsls	r2, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_puts_r+0x72>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	059b      	lsls	r3, r3, #22
 800a192:	d402      	bmi.n	800a19a <_puts_r+0x72>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f7f7 fc0f 	bl	80019b8 <__retarget_lock_release_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	da04      	bge.n	800a1ac <_puts_r+0x84>
 800a1a2:	69a2      	ldr	r2, [r4, #24]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	dc06      	bgt.n	800a1b6 <_puts_r+0x8e>
 800a1a8:	290a      	cmp	r1, #10
 800a1aa:	d004      	beq.n	800a1b6 <_puts_r+0x8e>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	6022      	str	r2, [r4, #0]
 800a1b2:	7019      	strb	r1, [r3, #0]
 800a1b4:	e7cf      	b.n	800a156 <_puts_r+0x2e>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f000 f854 	bl	800a266 <__swbuf_r>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d1c9      	bne.n	800a156 <_puts_r+0x2e>
 800a1c2:	e7df      	b.n	800a184 <_puts_r+0x5c>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	250a      	movs	r5, #10
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	701d      	strb	r5, [r3, #0]
 800a1ce:	e7db      	b.n	800a188 <_puts_r+0x60>

0800a1d0 <puts>:
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <puts+0xc>)
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	6818      	ldr	r0, [r3, #0]
 800a1d6:	f7ff bfa7 	b.w	800a128 <_puts_r>
 800a1da:	bf00      	nop
 800a1dc:	20000068 	.word	0x20000068

0800a1e0 <__sread>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e8:	f000 f9b0 	bl	800a54c <_read_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	bfab      	itete	ge
 800a1f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1f4:	181b      	addge	r3, r3, r0
 800a1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1fa:	bfac      	ite	ge
 800a1fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1fe:	81a3      	strhlt	r3, [r4, #12]
 800a200:	bd10      	pop	{r4, pc}

0800a202 <__swrite>:
 800a202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a206:	461f      	mov	r7, r3
 800a208:	898b      	ldrh	r3, [r1, #12]
 800a20a:	05db      	lsls	r3, r3, #23
 800a20c:	4605      	mov	r5, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	4616      	mov	r6, r2
 800a212:	d505      	bpl.n	800a220 <__swrite+0x1e>
 800a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a218:	2302      	movs	r3, #2
 800a21a:	2200      	movs	r2, #0
 800a21c:	f000 f984 	bl	800a528 <_lseek_r>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	4632      	mov	r2, r6
 800a22e:	463b      	mov	r3, r7
 800a230:	4628      	mov	r0, r5
 800a232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a236:	f000 b9bf 	b.w	800a5b8 <_write_r>

0800a23a <__sseek>:
 800a23a:	b510      	push	{r4, lr}
 800a23c:	460c      	mov	r4, r1
 800a23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a242:	f000 f971 	bl	800a528 <_lseek_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	bf15      	itete	ne
 800a24c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a256:	81a3      	strheq	r3, [r4, #12]
 800a258:	bf18      	it	ne
 800a25a:	81a3      	strhne	r3, [r4, #12]
 800a25c:	bd10      	pop	{r4, pc}

0800a25e <__sclose>:
 800a25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a262:	f000 b8fb 	b.w	800a45c <_close_r>

0800a266 <__swbuf_r>:
 800a266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a268:	460e      	mov	r6, r1
 800a26a:	4614      	mov	r4, r2
 800a26c:	4605      	mov	r5, r0
 800a26e:	b118      	cbz	r0, 800a278 <__swbuf_r+0x12>
 800a270:	6a03      	ldr	r3, [r0, #32]
 800a272:	b90b      	cbnz	r3, 800a278 <__swbuf_r+0x12>
 800a274:	f7ff ff10 	bl	800a098 <__sinit>
 800a278:	69a3      	ldr	r3, [r4, #24]
 800a27a:	60a3      	str	r3, [r4, #8]
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	071a      	lsls	r2, r3, #28
 800a280:	d525      	bpl.n	800a2ce <__swbuf_r+0x68>
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	b31b      	cbz	r3, 800a2ce <__swbuf_r+0x68>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	1a98      	subs	r0, r3, r2
 800a28c:	6963      	ldr	r3, [r4, #20]
 800a28e:	b2f6      	uxtb	r6, r6
 800a290:	4283      	cmp	r3, r0
 800a292:	4637      	mov	r7, r6
 800a294:	dc04      	bgt.n	800a2a0 <__swbuf_r+0x3a>
 800a296:	4621      	mov	r1, r4
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 fd7d 	bl	800ad98 <_fflush_r>
 800a29e:	b9e0      	cbnz	r0, 800a2da <__swbuf_r+0x74>
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	60a3      	str	r3, [r4, #8]
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	6022      	str	r2, [r4, #0]
 800a2ac:	701e      	strb	r6, [r3, #0]
 800a2ae:	6962      	ldr	r2, [r4, #20]
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d004      	beq.n	800a2c0 <__swbuf_r+0x5a>
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	07db      	lsls	r3, r3, #31
 800a2ba:	d506      	bpl.n	800a2ca <__swbuf_r+0x64>
 800a2bc:	2e0a      	cmp	r6, #10
 800a2be:	d104      	bne.n	800a2ca <__swbuf_r+0x64>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 fd68 	bl	800ad98 <_fflush_r>
 800a2c8:	b938      	cbnz	r0, 800a2da <__swbuf_r+0x74>
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f000 f805 	bl	800a2e0 <__swsetup_r>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d0d5      	beq.n	800a286 <__swbuf_r+0x20>
 800a2da:	f04f 37ff 	mov.w	r7, #4294967295
 800a2de:	e7f4      	b.n	800a2ca <__swbuf_r+0x64>

0800a2e0 <__swsetup_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4b2a      	ldr	r3, [pc, #168]	; (800a38c <__swsetup_r+0xac>)
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	6818      	ldr	r0, [r3, #0]
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	b118      	cbz	r0, 800a2f4 <__swsetup_r+0x14>
 800a2ec:	6a03      	ldr	r3, [r0, #32]
 800a2ee:	b90b      	cbnz	r3, 800a2f4 <__swsetup_r+0x14>
 800a2f0:	f7ff fed2 	bl	800a098 <__sinit>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2fa:	0718      	lsls	r0, r3, #28
 800a2fc:	d422      	bmi.n	800a344 <__swsetup_r+0x64>
 800a2fe:	06d9      	lsls	r1, r3, #27
 800a300:	d407      	bmi.n	800a312 <__swsetup_r+0x32>
 800a302:	2309      	movs	r3, #9
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	e034      	b.n	800a37c <__swsetup_r+0x9c>
 800a312:	0758      	lsls	r0, r3, #29
 800a314:	d512      	bpl.n	800a33c <__swsetup_r+0x5c>
 800a316:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a318:	b141      	cbz	r1, 800a32c <__swsetup_r+0x4c>
 800a31a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a31e:	4299      	cmp	r1, r3
 800a320:	d002      	beq.n	800a328 <__swsetup_r+0x48>
 800a322:	4628      	mov	r0, r5
 800a324:	f000 f992 	bl	800a64c <_free_r>
 800a328:	2300      	movs	r3, #0
 800a32a:	6363      	str	r3, [r4, #52]	; 0x34
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	2300      	movs	r3, #0
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f043 0308 	orr.w	r3, r3, #8
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	b94b      	cbnz	r3, 800a35c <__swsetup_r+0x7c>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a34e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a352:	d003      	beq.n	800a35c <__swsetup_r+0x7c>
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f000 fd6c 	bl	800ae34 <__smakebuf_r>
 800a35c:	89a0      	ldrh	r0, [r4, #12]
 800a35e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a362:	f010 0301 	ands.w	r3, r0, #1
 800a366:	d00a      	beq.n	800a37e <__swsetup_r+0x9e>
 800a368:	2300      	movs	r3, #0
 800a36a:	60a3      	str	r3, [r4, #8]
 800a36c:	6963      	ldr	r3, [r4, #20]
 800a36e:	425b      	negs	r3, r3
 800a370:	61a3      	str	r3, [r4, #24]
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	b943      	cbnz	r3, 800a388 <__swsetup_r+0xa8>
 800a376:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a37a:	d1c4      	bne.n	800a306 <__swsetup_r+0x26>
 800a37c:	bd38      	pop	{r3, r4, r5, pc}
 800a37e:	0781      	lsls	r1, r0, #30
 800a380:	bf58      	it	pl
 800a382:	6963      	ldrpl	r3, [r4, #20]
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	e7f4      	b.n	800a372 <__swsetup_r+0x92>
 800a388:	2000      	movs	r0, #0
 800a38a:	e7f7      	b.n	800a37c <__swsetup_r+0x9c>
 800a38c:	20000068 	.word	0x20000068

0800a390 <memmove>:
 800a390:	4288      	cmp	r0, r1
 800a392:	b510      	push	{r4, lr}
 800a394:	eb01 0402 	add.w	r4, r1, r2
 800a398:	d902      	bls.n	800a3a0 <memmove+0x10>
 800a39a:	4284      	cmp	r4, r0
 800a39c:	4623      	mov	r3, r4
 800a39e:	d807      	bhi.n	800a3b0 <memmove+0x20>
 800a3a0:	1e43      	subs	r3, r0, #1
 800a3a2:	42a1      	cmp	r1, r4
 800a3a4:	d008      	beq.n	800a3b8 <memmove+0x28>
 800a3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ae:	e7f8      	b.n	800a3a2 <memmove+0x12>
 800a3b0:	4402      	add	r2, r0
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d100      	bne.n	800a3ba <memmove+0x2a>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3c2:	e7f7      	b.n	800a3b4 <memmove+0x24>

0800a3c4 <memset>:
 800a3c4:	4402      	add	r2, r0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d100      	bne.n	800a3ce <memset+0xa>
 800a3cc:	4770      	bx	lr
 800a3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a3d2:	e7f9      	b.n	800a3c8 <memset+0x4>

0800a3d4 <strncpy>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	3901      	subs	r1, #1
 800a3d8:	4603      	mov	r3, r0
 800a3da:	b132      	cbz	r2, 800a3ea <strncpy+0x16>
 800a3dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a3e0:	f803 4b01 	strb.w	r4, [r3], #1
 800a3e4:	3a01      	subs	r2, #1
 800a3e6:	2c00      	cmp	r4, #0
 800a3e8:	d1f7      	bne.n	800a3da <strncpy+0x6>
 800a3ea:	441a      	add	r2, r3
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d100      	bne.n	800a3f4 <strncpy+0x20>
 800a3f2:	bd10      	pop	{r4, pc}
 800a3f4:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f8:	e7f9      	b.n	800a3ee <strncpy+0x1a>

0800a3fa <_raise_r>:
 800a3fa:	291f      	cmp	r1, #31
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4604      	mov	r4, r0
 800a400:	460d      	mov	r5, r1
 800a402:	d904      	bls.n	800a40e <_raise_r+0x14>
 800a404:	2316      	movs	r3, #22
 800a406:	6003      	str	r3, [r0, #0]
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	bd38      	pop	{r3, r4, r5, pc}
 800a40e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a410:	b112      	cbz	r2, 800a418 <_raise_r+0x1e>
 800a412:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a416:	b94b      	cbnz	r3, 800a42c <_raise_r+0x32>
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 f8bb 	bl	800a594 <_getpid_r>
 800a41e:	462a      	mov	r2, r5
 800a420:	4601      	mov	r1, r0
 800a422:	4620      	mov	r0, r4
 800a424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a428:	f000 b8a2 	b.w	800a570 <_kill_r>
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d00a      	beq.n	800a446 <_raise_r+0x4c>
 800a430:	1c59      	adds	r1, r3, #1
 800a432:	d103      	bne.n	800a43c <_raise_r+0x42>
 800a434:	2316      	movs	r3, #22
 800a436:	6003      	str	r3, [r0, #0]
 800a438:	2001      	movs	r0, #1
 800a43a:	e7e7      	b.n	800a40c <_raise_r+0x12>
 800a43c:	2400      	movs	r4, #0
 800a43e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a442:	4628      	mov	r0, r5
 800a444:	4798      	blx	r3
 800a446:	2000      	movs	r0, #0
 800a448:	e7e0      	b.n	800a40c <_raise_r+0x12>
	...

0800a44c <raise>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	; (800a458 <raise+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7ff bfd2 	b.w	800a3fa <_raise_r>
 800a456:	bf00      	nop
 800a458:	20000068 	.word	0x20000068

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_close_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 f827 	bl	80014ba <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20009430 	.word	0x20009430

0800a47c <_reclaim_reent>:
 800a47c:	4b29      	ldr	r3, [pc, #164]	; (800a524 <_reclaim_reent+0xa8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4283      	cmp	r3, r0
 800a482:	b570      	push	{r4, r5, r6, lr}
 800a484:	4604      	mov	r4, r0
 800a486:	d04b      	beq.n	800a520 <_reclaim_reent+0xa4>
 800a488:	69c3      	ldr	r3, [r0, #28]
 800a48a:	b143      	cbz	r3, 800a49e <_reclaim_reent+0x22>
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d144      	bne.n	800a51c <_reclaim_reent+0xa0>
 800a492:	69e3      	ldr	r3, [r4, #28]
 800a494:	6819      	ldr	r1, [r3, #0]
 800a496:	b111      	cbz	r1, 800a49e <_reclaim_reent+0x22>
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 f8d7 	bl	800a64c <_free_r>
 800a49e:	6961      	ldr	r1, [r4, #20]
 800a4a0:	b111      	cbz	r1, 800a4a8 <_reclaim_reent+0x2c>
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 f8d2 	bl	800a64c <_free_r>
 800a4a8:	69e1      	ldr	r1, [r4, #28]
 800a4aa:	b111      	cbz	r1, 800a4b2 <_reclaim_reent+0x36>
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 f8cd 	bl	800a64c <_free_r>
 800a4b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4b4:	b111      	cbz	r1, 800a4bc <_reclaim_reent+0x40>
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 f8c8 	bl	800a64c <_free_r>
 800a4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4be:	b111      	cbz	r1, 800a4c6 <_reclaim_reent+0x4a>
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 f8c3 	bl	800a64c <_free_r>
 800a4c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4c8:	b111      	cbz	r1, 800a4d0 <_reclaim_reent+0x54>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f8be 	bl	800a64c <_free_r>
 800a4d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4d2:	b111      	cbz	r1, 800a4da <_reclaim_reent+0x5e>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 f8b9 	bl	800a64c <_free_r>
 800a4da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a4dc:	b111      	cbz	r1, 800a4e4 <_reclaim_reent+0x68>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f8b4 	bl	800a64c <_free_r>
 800a4e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4e6:	b111      	cbz	r1, 800a4ee <_reclaim_reent+0x72>
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 f8af 	bl	800a64c <_free_r>
 800a4ee:	6a23      	ldr	r3, [r4, #32]
 800a4f0:	b1b3      	cbz	r3, 800a520 <_reclaim_reent+0xa4>
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4f8:	4718      	bx	r3
 800a4fa:	5949      	ldr	r1, [r1, r5]
 800a4fc:	b941      	cbnz	r1, 800a510 <_reclaim_reent+0x94>
 800a4fe:	3504      	adds	r5, #4
 800a500:	69e3      	ldr	r3, [r4, #28]
 800a502:	2d80      	cmp	r5, #128	; 0x80
 800a504:	68d9      	ldr	r1, [r3, #12]
 800a506:	d1f8      	bne.n	800a4fa <_reclaim_reent+0x7e>
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 f89f 	bl	800a64c <_free_r>
 800a50e:	e7c0      	b.n	800a492 <_reclaim_reent+0x16>
 800a510:	680e      	ldr	r6, [r1, #0]
 800a512:	4620      	mov	r0, r4
 800a514:	f000 f89a 	bl	800a64c <_free_r>
 800a518:	4631      	mov	r1, r6
 800a51a:	e7ef      	b.n	800a4fc <_reclaim_reent+0x80>
 800a51c:	2500      	movs	r5, #0
 800a51e:	e7ef      	b.n	800a500 <_reclaim_reent+0x84>
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	bf00      	nop
 800a524:	20000068 	.word	0x20000068

0800a528 <_lseek_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d07      	ldr	r5, [pc, #28]	; (800a548 <_lseek_r+0x20>)
 800a52c:	4604      	mov	r4, r0
 800a52e:	4608      	mov	r0, r1
 800a530:	4611      	mov	r1, r2
 800a532:	2200      	movs	r2, #0
 800a534:	602a      	str	r2, [r5, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	f7f6 ffe6 	bl	8001508 <_lseek>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_lseek_r+0x1e>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	b103      	cbz	r3, 800a546 <_lseek_r+0x1e>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	20009430 	.word	0x20009430

0800a54c <_read_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d07      	ldr	r5, [pc, #28]	; (800a56c <_read_r+0x20>)
 800a550:	4604      	mov	r4, r0
 800a552:	4608      	mov	r0, r1
 800a554:	4611      	mov	r1, r2
 800a556:	2200      	movs	r2, #0
 800a558:	602a      	str	r2, [r5, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	f7f6 ff74 	bl	8001448 <_read>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_read_r+0x1e>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_read_r+0x1e>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20009430 	.word	0x20009430

0800a570 <_kill_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d07      	ldr	r5, [pc, #28]	; (800a590 <_kill_r+0x20>)
 800a574:	2300      	movs	r3, #0
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	4611      	mov	r1, r2
 800a57c:	602b      	str	r3, [r5, #0]
 800a57e:	f7f6 ff49 	bl	8001414 <_kill>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d102      	bne.n	800a58c <_kill_r+0x1c>
 800a586:	682b      	ldr	r3, [r5, #0]
 800a588:	b103      	cbz	r3, 800a58c <_kill_r+0x1c>
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	bd38      	pop	{r3, r4, r5, pc}
 800a58e:	bf00      	nop
 800a590:	20009430 	.word	0x20009430

0800a594 <_getpid_r>:
 800a594:	f7f6 bf36 	b.w	8001404 <_getpid>

0800a598 <_sbrk_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d06      	ldr	r5, [pc, #24]	; (800a5b4 <_sbrk_r+0x1c>)
 800a59c:	2300      	movs	r3, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f6 ffbe 	bl	8001524 <_sbrk>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_sbrk_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_sbrk_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	20009430 	.word	0x20009430

0800a5b8 <_write_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	4d07      	ldr	r5, [pc, #28]	; (800a5d8 <_write_r+0x20>)
 800a5bc:	4604      	mov	r4, r0
 800a5be:	4608      	mov	r0, r1
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f7f6 ff5b 	bl	8001482 <_write>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_write_r+0x1e>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_write_r+0x1e>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	20009430 	.word	0x20009430

0800a5dc <__errno>:
 800a5dc:	4b01      	ldr	r3, [pc, #4]	; (800a5e4 <__errno+0x8>)
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000068 	.word	0x20000068

0800a5e8 <__libc_init_array>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	4d0d      	ldr	r5, [pc, #52]	; (800a620 <__libc_init_array+0x38>)
 800a5ec:	4c0d      	ldr	r4, [pc, #52]	; (800a624 <__libc_init_array+0x3c>)
 800a5ee:	1b64      	subs	r4, r4, r5
 800a5f0:	10a4      	asrs	r4, r4, #2
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	42a6      	cmp	r6, r4
 800a5f6:	d109      	bne.n	800a60c <__libc_init_array+0x24>
 800a5f8:	4d0b      	ldr	r5, [pc, #44]	; (800a628 <__libc_init_array+0x40>)
 800a5fa:	4c0c      	ldr	r4, [pc, #48]	; (800a62c <__libc_init_array+0x44>)
 800a5fc:	f000 fc78 	bl	800aef0 <_init>
 800a600:	1b64      	subs	r4, r4, r5
 800a602:	10a4      	asrs	r4, r4, #2
 800a604:	2600      	movs	r6, #0
 800a606:	42a6      	cmp	r6, r4
 800a608:	d105      	bne.n	800a616 <__libc_init_array+0x2e>
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a610:	4798      	blx	r3
 800a612:	3601      	adds	r6, #1
 800a614:	e7ee      	b.n	800a5f4 <__libc_init_array+0xc>
 800a616:	f855 3b04 	ldr.w	r3, [r5], #4
 800a61a:	4798      	blx	r3
 800a61c:	3601      	adds	r6, #1
 800a61e:	e7f2      	b.n	800a606 <__libc_init_array+0x1e>
 800a620:	0800b208 	.word	0x0800b208
 800a624:	0800b208 	.word	0x0800b208
 800a628:	0800b208 	.word	0x0800b208
 800a62c:	0800b210 	.word	0x0800b210

0800a630 <memcpy>:
 800a630:	440a      	add	r2, r1
 800a632:	4291      	cmp	r1, r2
 800a634:	f100 33ff 	add.w	r3, r0, #4294967295
 800a638:	d100      	bne.n	800a63c <memcpy+0xc>
 800a63a:	4770      	bx	lr
 800a63c:	b510      	push	{r4, lr}
 800a63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a642:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a646:	4291      	cmp	r1, r2
 800a648:	d1f9      	bne.n	800a63e <memcpy+0xe>
 800a64a:	bd10      	pop	{r4, pc}

0800a64c <_free_r>:
 800a64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a64e:	2900      	cmp	r1, #0
 800a650:	d044      	beq.n	800a6dc <_free_r+0x90>
 800a652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a656:	9001      	str	r0, [sp, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f1a1 0404 	sub.w	r4, r1, #4
 800a65e:	bfb8      	it	lt
 800a660:	18e4      	addlt	r4, r4, r3
 800a662:	f7ff fc81 	bl	8009f68 <__malloc_lock>
 800a666:	4a1e      	ldr	r2, [pc, #120]	; (800a6e0 <_free_r+0x94>)
 800a668:	9801      	ldr	r0, [sp, #4]
 800a66a:	6813      	ldr	r3, [r2, #0]
 800a66c:	b933      	cbnz	r3, 800a67c <_free_r+0x30>
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	6014      	str	r4, [r2, #0]
 800a672:	b003      	add	sp, #12
 800a674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a678:	f7ff bc7c 	b.w	8009f74 <__malloc_unlock>
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	d908      	bls.n	800a692 <_free_r+0x46>
 800a680:	6825      	ldr	r5, [r4, #0]
 800a682:	1961      	adds	r1, r4, r5
 800a684:	428b      	cmp	r3, r1
 800a686:	bf01      	itttt	eq
 800a688:	6819      	ldreq	r1, [r3, #0]
 800a68a:	685b      	ldreq	r3, [r3, #4]
 800a68c:	1949      	addeq	r1, r1, r5
 800a68e:	6021      	streq	r1, [r4, #0]
 800a690:	e7ed      	b.n	800a66e <_free_r+0x22>
 800a692:	461a      	mov	r2, r3
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	b10b      	cbz	r3, 800a69c <_free_r+0x50>
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d9fa      	bls.n	800a692 <_free_r+0x46>
 800a69c:	6811      	ldr	r1, [r2, #0]
 800a69e:	1855      	adds	r5, r2, r1
 800a6a0:	42a5      	cmp	r5, r4
 800a6a2:	d10b      	bne.n	800a6bc <_free_r+0x70>
 800a6a4:	6824      	ldr	r4, [r4, #0]
 800a6a6:	4421      	add	r1, r4
 800a6a8:	1854      	adds	r4, r2, r1
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	6011      	str	r1, [r2, #0]
 800a6ae:	d1e0      	bne.n	800a672 <_free_r+0x26>
 800a6b0:	681c      	ldr	r4, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	6053      	str	r3, [r2, #4]
 800a6b6:	440c      	add	r4, r1
 800a6b8:	6014      	str	r4, [r2, #0]
 800a6ba:	e7da      	b.n	800a672 <_free_r+0x26>
 800a6bc:	d902      	bls.n	800a6c4 <_free_r+0x78>
 800a6be:	230c      	movs	r3, #12
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	e7d6      	b.n	800a672 <_free_r+0x26>
 800a6c4:	6825      	ldr	r5, [r4, #0]
 800a6c6:	1961      	adds	r1, r4, r5
 800a6c8:	428b      	cmp	r3, r1
 800a6ca:	bf04      	itt	eq
 800a6cc:	6819      	ldreq	r1, [r3, #0]
 800a6ce:	685b      	ldreq	r3, [r3, #4]
 800a6d0:	6063      	str	r3, [r4, #4]
 800a6d2:	bf04      	itt	eq
 800a6d4:	1949      	addeq	r1, r1, r5
 800a6d6:	6021      	streq	r1, [r4, #0]
 800a6d8:	6054      	str	r4, [r2, #4]
 800a6da:	e7ca      	b.n	800a672 <_free_r+0x26>
 800a6dc:	b003      	add	sp, #12
 800a6de:	bd30      	pop	{r4, r5, pc}
 800a6e0:	200092ec 	.word	0x200092ec

0800a6e4 <__sfputc_r>:
 800a6e4:	6893      	ldr	r3, [r2, #8]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	b410      	push	{r4}
 800a6ec:	6093      	str	r3, [r2, #8]
 800a6ee:	da08      	bge.n	800a702 <__sfputc_r+0x1e>
 800a6f0:	6994      	ldr	r4, [r2, #24]
 800a6f2:	42a3      	cmp	r3, r4
 800a6f4:	db01      	blt.n	800a6fa <__sfputc_r+0x16>
 800a6f6:	290a      	cmp	r1, #10
 800a6f8:	d103      	bne.n	800a702 <__sfputc_r+0x1e>
 800a6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fe:	f7ff bdb2 	b.w	800a266 <__swbuf_r>
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	1c58      	adds	r0, r3, #1
 800a706:	6010      	str	r0, [r2, #0]
 800a708:	7019      	strb	r1, [r3, #0]
 800a70a:	4608      	mov	r0, r1
 800a70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <__sfputs_r>:
 800a712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a714:	4606      	mov	r6, r0
 800a716:	460f      	mov	r7, r1
 800a718:	4614      	mov	r4, r2
 800a71a:	18d5      	adds	r5, r2, r3
 800a71c:	42ac      	cmp	r4, r5
 800a71e:	d101      	bne.n	800a724 <__sfputs_r+0x12>
 800a720:	2000      	movs	r0, #0
 800a722:	e007      	b.n	800a734 <__sfputs_r+0x22>
 800a724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a728:	463a      	mov	r2, r7
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ffda 	bl	800a6e4 <__sfputc_r>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d1f3      	bne.n	800a71c <__sfputs_r+0xa>
 800a734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a738 <_vfiprintf_r>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	460d      	mov	r5, r1
 800a73e:	b09d      	sub	sp, #116	; 0x74
 800a740:	4614      	mov	r4, r2
 800a742:	4698      	mov	r8, r3
 800a744:	4606      	mov	r6, r0
 800a746:	b118      	cbz	r0, 800a750 <_vfiprintf_r+0x18>
 800a748:	6a03      	ldr	r3, [r0, #32]
 800a74a:	b90b      	cbnz	r3, 800a750 <_vfiprintf_r+0x18>
 800a74c:	f7ff fca4 	bl	800a098 <__sinit>
 800a750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d405      	bmi.n	800a762 <_vfiprintf_r+0x2a>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_vfiprintf_r+0x2a>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f7f7 f917 	bl	8001990 <__retarget_lock_acquire_recursive>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	071b      	lsls	r3, r3, #28
 800a766:	d501      	bpl.n	800a76c <_vfiprintf_r+0x34>
 800a768:	692b      	ldr	r3, [r5, #16]
 800a76a:	b99b      	cbnz	r3, 800a794 <_vfiprintf_r+0x5c>
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff fdb6 	bl	800a2e0 <__swsetup_r>
 800a774:	b170      	cbz	r0, 800a794 <_vfiprintf_r+0x5c>
 800a776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a778:	07dc      	lsls	r4, r3, #31
 800a77a:	d504      	bpl.n	800a786 <_vfiprintf_r+0x4e>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	b01d      	add	sp, #116	; 0x74
 800a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	0598      	lsls	r0, r3, #22
 800a78a:	d4f7      	bmi.n	800a77c <_vfiprintf_r+0x44>
 800a78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a78e:	f7f7 f913 	bl	80019b8 <__retarget_lock_release_recursive>
 800a792:	e7f3      	b.n	800a77c <_vfiprintf_r+0x44>
 800a794:	2300      	movs	r3, #0
 800a796:	9309      	str	r3, [sp, #36]	; 0x24
 800a798:	2320      	movs	r3, #32
 800a79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7a2:	2330      	movs	r3, #48	; 0x30
 800a7a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a958 <_vfiprintf_r+0x220>
 800a7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ac:	f04f 0901 	mov.w	r9, #1
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	469a      	mov	sl, r3
 800a7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b8:	b10a      	cbz	r2, 800a7be <_vfiprintf_r+0x86>
 800a7ba:	2a25      	cmp	r2, #37	; 0x25
 800a7bc:	d1f9      	bne.n	800a7b2 <_vfiprintf_r+0x7a>
 800a7be:	ebba 0b04 	subs.w	fp, sl, r4
 800a7c2:	d00b      	beq.n	800a7dc <_vfiprintf_r+0xa4>
 800a7c4:	465b      	mov	r3, fp
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff ffa1 	bl	800a712 <__sfputs_r>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f000 80a9 	beq.w	800a928 <_vfiprintf_r+0x1f0>
 800a7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d8:	445a      	add	r2, fp
 800a7da:	9209      	str	r2, [sp, #36]	; 0x24
 800a7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 80a1 	beq.w	800a928 <_vfiprintf_r+0x1f0>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f0:	f10a 0a01 	add.w	sl, sl, #1
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7fe:	4654      	mov	r4, sl
 800a800:	2205      	movs	r2, #5
 800a802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a806:	4854      	ldr	r0, [pc, #336]	; (800a958 <_vfiprintf_r+0x220>)
 800a808:	f7f5 fd0a 	bl	8000220 <memchr>
 800a80c:	9a04      	ldr	r2, [sp, #16]
 800a80e:	b9d8      	cbnz	r0, 800a848 <_vfiprintf_r+0x110>
 800a810:	06d1      	lsls	r1, r2, #27
 800a812:	bf44      	itt	mi
 800a814:	2320      	movmi	r3, #32
 800a816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a81a:	0713      	lsls	r3, r2, #28
 800a81c:	bf44      	itt	mi
 800a81e:	232b      	movmi	r3, #43	; 0x2b
 800a820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a824:	f89a 3000 	ldrb.w	r3, [sl]
 800a828:	2b2a      	cmp	r3, #42	; 0x2a
 800a82a:	d015      	beq.n	800a858 <_vfiprintf_r+0x120>
 800a82c:	9a07      	ldr	r2, [sp, #28]
 800a82e:	4654      	mov	r4, sl
 800a830:	2000      	movs	r0, #0
 800a832:	f04f 0c0a 	mov.w	ip, #10
 800a836:	4621      	mov	r1, r4
 800a838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a83c:	3b30      	subs	r3, #48	; 0x30
 800a83e:	2b09      	cmp	r3, #9
 800a840:	d94d      	bls.n	800a8de <_vfiprintf_r+0x1a6>
 800a842:	b1b0      	cbz	r0, 800a872 <_vfiprintf_r+0x13a>
 800a844:	9207      	str	r2, [sp, #28]
 800a846:	e014      	b.n	800a872 <_vfiprintf_r+0x13a>
 800a848:	eba0 0308 	sub.w	r3, r0, r8
 800a84c:	fa09 f303 	lsl.w	r3, r9, r3
 800a850:	4313      	orrs	r3, r2
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	46a2      	mov	sl, r4
 800a856:	e7d2      	b.n	800a7fe <_vfiprintf_r+0xc6>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	1d19      	adds	r1, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	9103      	str	r1, [sp, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfbb      	ittet	lt
 800a864:	425b      	neglt	r3, r3
 800a866:	f042 0202 	orrlt.w	r2, r2, #2
 800a86a:	9307      	strge	r3, [sp, #28]
 800a86c:	9307      	strlt	r3, [sp, #28]
 800a86e:	bfb8      	it	lt
 800a870:	9204      	strlt	r2, [sp, #16]
 800a872:	7823      	ldrb	r3, [r4, #0]
 800a874:	2b2e      	cmp	r3, #46	; 0x2e
 800a876:	d10c      	bne.n	800a892 <_vfiprintf_r+0x15a>
 800a878:	7863      	ldrb	r3, [r4, #1]
 800a87a:	2b2a      	cmp	r3, #42	; 0x2a
 800a87c:	d134      	bne.n	800a8e8 <_vfiprintf_r+0x1b0>
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	1d1a      	adds	r2, r3, #4
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	9203      	str	r2, [sp, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfb8      	it	lt
 800a88a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a88e:	3402      	adds	r4, #2
 800a890:	9305      	str	r3, [sp, #20]
 800a892:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a968 <_vfiprintf_r+0x230>
 800a896:	7821      	ldrb	r1, [r4, #0]
 800a898:	2203      	movs	r2, #3
 800a89a:	4650      	mov	r0, sl
 800a89c:	f7f5 fcc0 	bl	8000220 <memchr>
 800a8a0:	b138      	cbz	r0, 800a8b2 <_vfiprintf_r+0x17a>
 800a8a2:	9b04      	ldr	r3, [sp, #16]
 800a8a4:	eba0 000a 	sub.w	r0, r0, sl
 800a8a8:	2240      	movs	r2, #64	; 0x40
 800a8aa:	4082      	lsls	r2, r0
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	3401      	adds	r4, #1
 800a8b0:	9304      	str	r3, [sp, #16]
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	4829      	ldr	r0, [pc, #164]	; (800a95c <_vfiprintf_r+0x224>)
 800a8b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8bc:	2206      	movs	r2, #6
 800a8be:	f7f5 fcaf 	bl	8000220 <memchr>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d03f      	beq.n	800a946 <_vfiprintf_r+0x20e>
 800a8c6:	4b26      	ldr	r3, [pc, #152]	; (800a960 <_vfiprintf_r+0x228>)
 800a8c8:	bb1b      	cbnz	r3, 800a912 <_vfiprintf_r+0x1da>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	3307      	adds	r3, #7
 800a8ce:	f023 0307 	bic.w	r3, r3, #7
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	9303      	str	r3, [sp, #12]
 800a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d8:	443b      	add	r3, r7
 800a8da:	9309      	str	r3, [sp, #36]	; 0x24
 800a8dc:	e768      	b.n	800a7b0 <_vfiprintf_r+0x78>
 800a8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	e7a6      	b.n	800a836 <_vfiprintf_r+0xfe>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	3401      	adds	r4, #1
 800a8ec:	9305      	str	r3, [sp, #20]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	f04f 0c0a 	mov.w	ip, #10
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8fa:	3a30      	subs	r2, #48	; 0x30
 800a8fc:	2a09      	cmp	r2, #9
 800a8fe:	d903      	bls.n	800a908 <_vfiprintf_r+0x1d0>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0c6      	beq.n	800a892 <_vfiprintf_r+0x15a>
 800a904:	9105      	str	r1, [sp, #20]
 800a906:	e7c4      	b.n	800a892 <_vfiprintf_r+0x15a>
 800a908:	fb0c 2101 	mla	r1, ip, r1, r2
 800a90c:	4604      	mov	r4, r0
 800a90e:	2301      	movs	r3, #1
 800a910:	e7f0      	b.n	800a8f4 <_vfiprintf_r+0x1bc>
 800a912:	ab03      	add	r3, sp, #12
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	462a      	mov	r2, r5
 800a918:	4b12      	ldr	r3, [pc, #72]	; (800a964 <_vfiprintf_r+0x22c>)
 800a91a:	a904      	add	r1, sp, #16
 800a91c:	4630      	mov	r0, r6
 800a91e:	f3af 8000 	nop.w
 800a922:	4607      	mov	r7, r0
 800a924:	1c78      	adds	r0, r7, #1
 800a926:	d1d6      	bne.n	800a8d6 <_vfiprintf_r+0x19e>
 800a928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a92a:	07d9      	lsls	r1, r3, #31
 800a92c:	d405      	bmi.n	800a93a <_vfiprintf_r+0x202>
 800a92e:	89ab      	ldrh	r3, [r5, #12]
 800a930:	059a      	lsls	r2, r3, #22
 800a932:	d402      	bmi.n	800a93a <_vfiprintf_r+0x202>
 800a934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a936:	f7f7 f83f 	bl	80019b8 <__retarget_lock_release_recursive>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	065b      	lsls	r3, r3, #25
 800a93e:	f53f af1d 	bmi.w	800a77c <_vfiprintf_r+0x44>
 800a942:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a944:	e71c      	b.n	800a780 <_vfiprintf_r+0x48>
 800a946:	ab03      	add	r3, sp, #12
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	462a      	mov	r2, r5
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <_vfiprintf_r+0x22c>)
 800a94e:	a904      	add	r1, sp, #16
 800a950:	4630      	mov	r0, r6
 800a952:	f000 f879 	bl	800aa48 <_printf_i>
 800a956:	e7e4      	b.n	800a922 <_vfiprintf_r+0x1ea>
 800a958:	0800b1d4 	.word	0x0800b1d4
 800a95c:	0800b1de 	.word	0x0800b1de
 800a960:	00000000 	.word	0x00000000
 800a964:	0800a713 	.word	0x0800a713
 800a968:	0800b1da 	.word	0x0800b1da

0800a96c <_printf_common>:
 800a96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	4616      	mov	r6, r2
 800a972:	4699      	mov	r9, r3
 800a974:	688a      	ldr	r2, [r1, #8]
 800a976:	690b      	ldr	r3, [r1, #16]
 800a978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	bfb8      	it	lt
 800a980:	4613      	movlt	r3, r2
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a988:	4607      	mov	r7, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	b10a      	cbz	r2, 800a992 <_printf_common+0x26>
 800a98e:	3301      	adds	r3, #1
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	0699      	lsls	r1, r3, #26
 800a996:	bf42      	ittt	mi
 800a998:	6833      	ldrmi	r3, [r6, #0]
 800a99a:	3302      	addmi	r3, #2
 800a99c:	6033      	strmi	r3, [r6, #0]
 800a99e:	6825      	ldr	r5, [r4, #0]
 800a9a0:	f015 0506 	ands.w	r5, r5, #6
 800a9a4:	d106      	bne.n	800a9b4 <_printf_common+0x48>
 800a9a6:	f104 0a19 	add.w	sl, r4, #25
 800a9aa:	68e3      	ldr	r3, [r4, #12]
 800a9ac:	6832      	ldr	r2, [r6, #0]
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	dc26      	bgt.n	800aa02 <_printf_common+0x96>
 800a9b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9b8:	1e13      	subs	r3, r2, #0
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	bf18      	it	ne
 800a9be:	2301      	movne	r3, #1
 800a9c0:	0692      	lsls	r2, r2, #26
 800a9c2:	d42b      	bmi.n	800aa1c <_printf_common+0xb0>
 800a9c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c0      	blx	r8
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d01e      	beq.n	800aa10 <_printf_common+0xa4>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	6922      	ldr	r2, [r4, #16]
 800a9d6:	f003 0306 	and.w	r3, r3, #6
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	bf02      	ittt	eq
 800a9de:	68e5      	ldreq	r5, [r4, #12]
 800a9e0:	6833      	ldreq	r3, [r6, #0]
 800a9e2:	1aed      	subeq	r5, r5, r3
 800a9e4:	68a3      	ldr	r3, [r4, #8]
 800a9e6:	bf0c      	ite	eq
 800a9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9ec:	2500      	movne	r5, #0
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	bfc4      	itt	gt
 800a9f2:	1a9b      	subgt	r3, r3, r2
 800a9f4:	18ed      	addgt	r5, r5, r3
 800a9f6:	2600      	movs	r6, #0
 800a9f8:	341a      	adds	r4, #26
 800a9fa:	42b5      	cmp	r5, r6
 800a9fc:	d11a      	bne.n	800aa34 <_printf_common+0xc8>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	e008      	b.n	800aa14 <_printf_common+0xa8>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4652      	mov	r2, sl
 800aa06:	4649      	mov	r1, r9
 800aa08:	4638      	mov	r0, r7
 800aa0a:	47c0      	blx	r8
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d103      	bne.n	800aa18 <_printf_common+0xac>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa18:	3501      	adds	r5, #1
 800aa1a:	e7c6      	b.n	800a9aa <_printf_common+0x3e>
 800aa1c:	18e1      	adds	r1, r4, r3
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	2030      	movs	r0, #48	; 0x30
 800aa22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa26:	4422      	add	r2, r4
 800aa28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa30:	3302      	adds	r3, #2
 800aa32:	e7c7      	b.n	800a9c4 <_printf_common+0x58>
 800aa34:	2301      	movs	r3, #1
 800aa36:	4622      	mov	r2, r4
 800aa38:	4649      	mov	r1, r9
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	47c0      	blx	r8
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d0e6      	beq.n	800aa10 <_printf_common+0xa4>
 800aa42:	3601      	adds	r6, #1
 800aa44:	e7d9      	b.n	800a9fa <_printf_common+0x8e>
	...

0800aa48 <_printf_i>:
 800aa48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	7e0f      	ldrb	r7, [r1, #24]
 800aa4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa50:	2f78      	cmp	r7, #120	; 0x78
 800aa52:	4691      	mov	r9, r2
 800aa54:	4680      	mov	r8, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	469a      	mov	sl, r3
 800aa5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa5e:	d807      	bhi.n	800aa70 <_printf_i+0x28>
 800aa60:	2f62      	cmp	r7, #98	; 0x62
 800aa62:	d80a      	bhi.n	800aa7a <_printf_i+0x32>
 800aa64:	2f00      	cmp	r7, #0
 800aa66:	f000 80d4 	beq.w	800ac12 <_printf_i+0x1ca>
 800aa6a:	2f58      	cmp	r7, #88	; 0x58
 800aa6c:	f000 80c0 	beq.w	800abf0 <_printf_i+0x1a8>
 800aa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa78:	e03a      	b.n	800aaf0 <_printf_i+0xa8>
 800aa7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa7e:	2b15      	cmp	r3, #21
 800aa80:	d8f6      	bhi.n	800aa70 <_printf_i+0x28>
 800aa82:	a101      	add	r1, pc, #4	; (adr r1, 800aa88 <_printf_i+0x40>)
 800aa84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa88:	0800aae1 	.word	0x0800aae1
 800aa8c:	0800aaf5 	.word	0x0800aaf5
 800aa90:	0800aa71 	.word	0x0800aa71
 800aa94:	0800aa71 	.word	0x0800aa71
 800aa98:	0800aa71 	.word	0x0800aa71
 800aa9c:	0800aa71 	.word	0x0800aa71
 800aaa0:	0800aaf5 	.word	0x0800aaf5
 800aaa4:	0800aa71 	.word	0x0800aa71
 800aaa8:	0800aa71 	.word	0x0800aa71
 800aaac:	0800aa71 	.word	0x0800aa71
 800aab0:	0800aa71 	.word	0x0800aa71
 800aab4:	0800abf9 	.word	0x0800abf9
 800aab8:	0800ab21 	.word	0x0800ab21
 800aabc:	0800abb3 	.word	0x0800abb3
 800aac0:	0800aa71 	.word	0x0800aa71
 800aac4:	0800aa71 	.word	0x0800aa71
 800aac8:	0800ac1b 	.word	0x0800ac1b
 800aacc:	0800aa71 	.word	0x0800aa71
 800aad0:	0800ab21 	.word	0x0800ab21
 800aad4:	0800aa71 	.word	0x0800aa71
 800aad8:	0800aa71 	.word	0x0800aa71
 800aadc:	0800abbb 	.word	0x0800abbb
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	1d1a      	adds	r2, r3, #4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	602a      	str	r2, [r5, #0]
 800aae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e09f      	b.n	800ac34 <_printf_i+0x1ec>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	682b      	ldr	r3, [r5, #0]
 800aaf8:	0607      	lsls	r7, r0, #24
 800aafa:	f103 0104 	add.w	r1, r3, #4
 800aafe:	6029      	str	r1, [r5, #0]
 800ab00:	d501      	bpl.n	800ab06 <_printf_i+0xbe>
 800ab02:	681e      	ldr	r6, [r3, #0]
 800ab04:	e003      	b.n	800ab0e <_printf_i+0xc6>
 800ab06:	0646      	lsls	r6, r0, #25
 800ab08:	d5fb      	bpl.n	800ab02 <_printf_i+0xba>
 800ab0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab0e:	2e00      	cmp	r6, #0
 800ab10:	da03      	bge.n	800ab1a <_printf_i+0xd2>
 800ab12:	232d      	movs	r3, #45	; 0x2d
 800ab14:	4276      	negs	r6, r6
 800ab16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1a:	485a      	ldr	r0, [pc, #360]	; (800ac84 <_printf_i+0x23c>)
 800ab1c:	230a      	movs	r3, #10
 800ab1e:	e012      	b.n	800ab46 <_printf_i+0xfe>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	6820      	ldr	r0, [r4, #0]
 800ab24:	1d19      	adds	r1, r3, #4
 800ab26:	6029      	str	r1, [r5, #0]
 800ab28:	0605      	lsls	r5, r0, #24
 800ab2a:	d501      	bpl.n	800ab30 <_printf_i+0xe8>
 800ab2c:	681e      	ldr	r6, [r3, #0]
 800ab2e:	e002      	b.n	800ab36 <_printf_i+0xee>
 800ab30:	0641      	lsls	r1, r0, #25
 800ab32:	d5fb      	bpl.n	800ab2c <_printf_i+0xe4>
 800ab34:	881e      	ldrh	r6, [r3, #0]
 800ab36:	4853      	ldr	r0, [pc, #332]	; (800ac84 <_printf_i+0x23c>)
 800ab38:	2f6f      	cmp	r7, #111	; 0x6f
 800ab3a:	bf0c      	ite	eq
 800ab3c:	2308      	moveq	r3, #8
 800ab3e:	230a      	movne	r3, #10
 800ab40:	2100      	movs	r1, #0
 800ab42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab46:	6865      	ldr	r5, [r4, #4]
 800ab48:	60a5      	str	r5, [r4, #8]
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	bfa2      	ittt	ge
 800ab4e:	6821      	ldrge	r1, [r4, #0]
 800ab50:	f021 0104 	bicge.w	r1, r1, #4
 800ab54:	6021      	strge	r1, [r4, #0]
 800ab56:	b90e      	cbnz	r6, 800ab5c <_printf_i+0x114>
 800ab58:	2d00      	cmp	r5, #0
 800ab5a:	d04b      	beq.n	800abf4 <_printf_i+0x1ac>
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab62:	fb03 6711 	mls	r7, r3, r1, r6
 800ab66:	5dc7      	ldrb	r7, [r0, r7]
 800ab68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab6c:	4637      	mov	r7, r6
 800ab6e:	42bb      	cmp	r3, r7
 800ab70:	460e      	mov	r6, r1
 800ab72:	d9f4      	bls.n	800ab5e <_printf_i+0x116>
 800ab74:	2b08      	cmp	r3, #8
 800ab76:	d10b      	bne.n	800ab90 <_printf_i+0x148>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07de      	lsls	r6, r3, #31
 800ab7c:	d508      	bpl.n	800ab90 <_printf_i+0x148>
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	6861      	ldr	r1, [r4, #4]
 800ab82:	4299      	cmp	r1, r3
 800ab84:	bfde      	ittt	le
 800ab86:	2330      	movle	r3, #48	; 0x30
 800ab88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab90:	1b52      	subs	r2, r2, r5
 800ab92:	6122      	str	r2, [r4, #16]
 800ab94:	f8cd a000 	str.w	sl, [sp]
 800ab98:	464b      	mov	r3, r9
 800ab9a:	aa03      	add	r2, sp, #12
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4640      	mov	r0, r8
 800aba0:	f7ff fee4 	bl	800a96c <_printf_common>
 800aba4:	3001      	adds	r0, #1
 800aba6:	d14a      	bne.n	800ac3e <_printf_i+0x1f6>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	b004      	add	sp, #16
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	f043 0320 	orr.w	r3, r3, #32
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	4833      	ldr	r0, [pc, #204]	; (800ac88 <_printf_i+0x240>)
 800abbc:	2778      	movs	r7, #120	; 0x78
 800abbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	6829      	ldr	r1, [r5, #0]
 800abc6:	061f      	lsls	r7, r3, #24
 800abc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800abcc:	d402      	bmi.n	800abd4 <_printf_i+0x18c>
 800abce:	065f      	lsls	r7, r3, #25
 800abd0:	bf48      	it	mi
 800abd2:	b2b6      	uxthmi	r6, r6
 800abd4:	07df      	lsls	r7, r3, #31
 800abd6:	bf48      	it	mi
 800abd8:	f043 0320 	orrmi.w	r3, r3, #32
 800abdc:	6029      	str	r1, [r5, #0]
 800abde:	bf48      	it	mi
 800abe0:	6023      	strmi	r3, [r4, #0]
 800abe2:	b91e      	cbnz	r6, 800abec <_printf_i+0x1a4>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	f023 0320 	bic.w	r3, r3, #32
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	2310      	movs	r3, #16
 800abee:	e7a7      	b.n	800ab40 <_printf_i+0xf8>
 800abf0:	4824      	ldr	r0, [pc, #144]	; (800ac84 <_printf_i+0x23c>)
 800abf2:	e7e4      	b.n	800abbe <_printf_i+0x176>
 800abf4:	4615      	mov	r5, r2
 800abf6:	e7bd      	b.n	800ab74 <_printf_i+0x12c>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	6826      	ldr	r6, [r4, #0]
 800abfc:	6961      	ldr	r1, [r4, #20]
 800abfe:	1d18      	adds	r0, r3, #4
 800ac00:	6028      	str	r0, [r5, #0]
 800ac02:	0635      	lsls	r5, r6, #24
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	d501      	bpl.n	800ac0c <_printf_i+0x1c4>
 800ac08:	6019      	str	r1, [r3, #0]
 800ac0a:	e002      	b.n	800ac12 <_printf_i+0x1ca>
 800ac0c:	0670      	lsls	r0, r6, #25
 800ac0e:	d5fb      	bpl.n	800ac08 <_printf_i+0x1c0>
 800ac10:	8019      	strh	r1, [r3, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	4615      	mov	r5, r2
 800ac18:	e7bc      	b.n	800ab94 <_printf_i+0x14c>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	1d1a      	adds	r2, r3, #4
 800ac1e:	602a      	str	r2, [r5, #0]
 800ac20:	681d      	ldr	r5, [r3, #0]
 800ac22:	6862      	ldr	r2, [r4, #4]
 800ac24:	2100      	movs	r1, #0
 800ac26:	4628      	mov	r0, r5
 800ac28:	f7f5 fafa 	bl	8000220 <memchr>
 800ac2c:	b108      	cbz	r0, 800ac32 <_printf_i+0x1ea>
 800ac2e:	1b40      	subs	r0, r0, r5
 800ac30:	6060      	str	r0, [r4, #4]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	2300      	movs	r3, #0
 800ac38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac3c:	e7aa      	b.n	800ab94 <_printf_i+0x14c>
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	462a      	mov	r2, r5
 800ac42:	4649      	mov	r1, r9
 800ac44:	4640      	mov	r0, r8
 800ac46:	47d0      	blx	sl
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d0ad      	beq.n	800aba8 <_printf_i+0x160>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	079b      	lsls	r3, r3, #30
 800ac50:	d413      	bmi.n	800ac7a <_printf_i+0x232>
 800ac52:	68e0      	ldr	r0, [r4, #12]
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	4298      	cmp	r0, r3
 800ac58:	bfb8      	it	lt
 800ac5a:	4618      	movlt	r0, r3
 800ac5c:	e7a6      	b.n	800abac <_printf_i+0x164>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4632      	mov	r2, r6
 800ac62:	4649      	mov	r1, r9
 800ac64:	4640      	mov	r0, r8
 800ac66:	47d0      	blx	sl
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d09d      	beq.n	800aba8 <_printf_i+0x160>
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	9903      	ldr	r1, [sp, #12]
 800ac72:	1a5b      	subs	r3, r3, r1
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	dcf2      	bgt.n	800ac5e <_printf_i+0x216>
 800ac78:	e7eb      	b.n	800ac52 <_printf_i+0x20a>
 800ac7a:	2500      	movs	r5, #0
 800ac7c:	f104 0619 	add.w	r6, r4, #25
 800ac80:	e7f5      	b.n	800ac6e <_printf_i+0x226>
 800ac82:	bf00      	nop
 800ac84:	0800b1e5 	.word	0x0800b1e5
 800ac88:	0800b1f6 	.word	0x0800b1f6

0800ac8c <__sflush_r>:
 800ac8c:	898a      	ldrh	r2, [r1, #12]
 800ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	4605      	mov	r5, r0
 800ac94:	0710      	lsls	r0, r2, #28
 800ac96:	460c      	mov	r4, r1
 800ac98:	d458      	bmi.n	800ad4c <__sflush_r+0xc0>
 800ac9a:	684b      	ldr	r3, [r1, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dc05      	bgt.n	800acac <__sflush_r+0x20>
 800aca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc02      	bgt.n	800acac <__sflush_r+0x20>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acae:	2e00      	cmp	r6, #0
 800acb0:	d0f9      	beq.n	800aca6 <__sflush_r+0x1a>
 800acb2:	2300      	movs	r3, #0
 800acb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb8:	682f      	ldr	r7, [r5, #0]
 800acba:	6a21      	ldr	r1, [r4, #32]
 800acbc:	602b      	str	r3, [r5, #0]
 800acbe:	d032      	beq.n	800ad26 <__sflush_r+0x9a>
 800acc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	075a      	lsls	r2, r3, #29
 800acc6:	d505      	bpl.n	800acd4 <__sflush_r+0x48>
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	1ac0      	subs	r0, r0, r3
 800accc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acce:	b10b      	cbz	r3, 800acd4 <__sflush_r+0x48>
 800acd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acd2:	1ac0      	subs	r0, r0, r3
 800acd4:	2300      	movs	r3, #0
 800acd6:	4602      	mov	r2, r0
 800acd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acda:	6a21      	ldr	r1, [r4, #32]
 800acdc:	4628      	mov	r0, r5
 800acde:	47b0      	blx	r6
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	d106      	bne.n	800acf4 <__sflush_r+0x68>
 800ace6:	6829      	ldr	r1, [r5, #0]
 800ace8:	291d      	cmp	r1, #29
 800acea:	d82b      	bhi.n	800ad44 <__sflush_r+0xb8>
 800acec:	4a29      	ldr	r2, [pc, #164]	; (800ad94 <__sflush_r+0x108>)
 800acee:	410a      	asrs	r2, r1
 800acf0:	07d6      	lsls	r6, r2, #31
 800acf2:	d427      	bmi.n	800ad44 <__sflush_r+0xb8>
 800acf4:	2200      	movs	r2, #0
 800acf6:	6062      	str	r2, [r4, #4]
 800acf8:	04d9      	lsls	r1, r3, #19
 800acfa:	6922      	ldr	r2, [r4, #16]
 800acfc:	6022      	str	r2, [r4, #0]
 800acfe:	d504      	bpl.n	800ad0a <__sflush_r+0x7e>
 800ad00:	1c42      	adds	r2, r0, #1
 800ad02:	d101      	bne.n	800ad08 <__sflush_r+0x7c>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b903      	cbnz	r3, 800ad0a <__sflush_r+0x7e>
 800ad08:	6560      	str	r0, [r4, #84]	; 0x54
 800ad0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad0c:	602f      	str	r7, [r5, #0]
 800ad0e:	2900      	cmp	r1, #0
 800ad10:	d0c9      	beq.n	800aca6 <__sflush_r+0x1a>
 800ad12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad16:	4299      	cmp	r1, r3
 800ad18:	d002      	beq.n	800ad20 <__sflush_r+0x94>
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f7ff fc96 	bl	800a64c <_free_r>
 800ad20:	2000      	movs	r0, #0
 800ad22:	6360      	str	r0, [r4, #52]	; 0x34
 800ad24:	e7c0      	b.n	800aca8 <__sflush_r+0x1c>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b0      	blx	r6
 800ad2c:	1c41      	adds	r1, r0, #1
 800ad2e:	d1c8      	bne.n	800acc2 <__sflush_r+0x36>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0c5      	beq.n	800acc2 <__sflush_r+0x36>
 800ad36:	2b1d      	cmp	r3, #29
 800ad38:	d001      	beq.n	800ad3e <__sflush_r+0xb2>
 800ad3a:	2b16      	cmp	r3, #22
 800ad3c:	d101      	bne.n	800ad42 <__sflush_r+0xb6>
 800ad3e:	602f      	str	r7, [r5, #0]
 800ad40:	e7b1      	b.n	800aca6 <__sflush_r+0x1a>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	e7ad      	b.n	800aca8 <__sflush_r+0x1c>
 800ad4c:	690f      	ldr	r7, [r1, #16]
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	d0a9      	beq.n	800aca6 <__sflush_r+0x1a>
 800ad52:	0793      	lsls	r3, r2, #30
 800ad54:	680e      	ldr	r6, [r1, #0]
 800ad56:	bf08      	it	eq
 800ad58:	694b      	ldreq	r3, [r1, #20]
 800ad5a:	600f      	str	r7, [r1, #0]
 800ad5c:	bf18      	it	ne
 800ad5e:	2300      	movne	r3, #0
 800ad60:	eba6 0807 	sub.w	r8, r6, r7
 800ad64:	608b      	str	r3, [r1, #8]
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	dd9c      	ble.n	800aca6 <__sflush_r+0x1a>
 800ad6c:	6a21      	ldr	r1, [r4, #32]
 800ad6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad70:	4643      	mov	r3, r8
 800ad72:	463a      	mov	r2, r7
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b0      	blx	r6
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	dc06      	bgt.n	800ad8a <__sflush_r+0xfe>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	e78e      	b.n	800aca8 <__sflush_r+0x1c>
 800ad8a:	4407      	add	r7, r0
 800ad8c:	eba8 0800 	sub.w	r8, r8, r0
 800ad90:	e7e9      	b.n	800ad66 <__sflush_r+0xda>
 800ad92:	bf00      	nop
 800ad94:	dfbffffe 	.word	0xdfbffffe

0800ad98 <_fflush_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	690b      	ldr	r3, [r1, #16]
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b913      	cbnz	r3, 800ada8 <_fflush_r+0x10>
 800ada2:	2500      	movs	r5, #0
 800ada4:	4628      	mov	r0, r5
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	b118      	cbz	r0, 800adb2 <_fflush_r+0x1a>
 800adaa:	6a03      	ldr	r3, [r0, #32]
 800adac:	b90b      	cbnz	r3, 800adb2 <_fflush_r+0x1a>
 800adae:	f7ff f973 	bl	800a098 <__sinit>
 800adb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f3      	beq.n	800ada2 <_fflush_r+0xa>
 800adba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adbc:	07d0      	lsls	r0, r2, #31
 800adbe:	d404      	bmi.n	800adca <_fflush_r+0x32>
 800adc0:	0599      	lsls	r1, r3, #22
 800adc2:	d402      	bmi.n	800adca <_fflush_r+0x32>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f7f6 fde3 	bl	8001990 <__retarget_lock_acquire_recursive>
 800adca:	4628      	mov	r0, r5
 800adcc:	4621      	mov	r1, r4
 800adce:	f7ff ff5d 	bl	800ac8c <__sflush_r>
 800add2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add4:	07da      	lsls	r2, r3, #31
 800add6:	4605      	mov	r5, r0
 800add8:	d4e4      	bmi.n	800ada4 <_fflush_r+0xc>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	059b      	lsls	r3, r3, #22
 800adde:	d4e1      	bmi.n	800ada4 <_fflush_r+0xc>
 800ade0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade2:	f7f6 fde9 	bl	80019b8 <__retarget_lock_release_recursive>
 800ade6:	e7dd      	b.n	800ada4 <_fflush_r+0xc>

0800ade8 <__swhatbuf_r>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	460c      	mov	r4, r1
 800adec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	b096      	sub	sp, #88	; 0x58
 800adf4:	4615      	mov	r5, r2
 800adf6:	461e      	mov	r6, r3
 800adf8:	da0d      	bge.n	800ae16 <__swhatbuf_r+0x2e>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae00:	f04f 0100 	mov.w	r1, #0
 800ae04:	bf0c      	ite	eq
 800ae06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae0a:	2340      	movne	r3, #64	; 0x40
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	6031      	str	r1, [r6, #0]
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	b016      	add	sp, #88	; 0x58
 800ae14:	bd70      	pop	{r4, r5, r6, pc}
 800ae16:	466a      	mov	r2, sp
 800ae18:	f000 f848 	bl	800aeac <_fstat_r>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	dbec      	blt.n	800adfa <__swhatbuf_r+0x12>
 800ae20:	9901      	ldr	r1, [sp, #4]
 800ae22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae2a:	4259      	negs	r1, r3
 800ae2c:	4159      	adcs	r1, r3
 800ae2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae32:	e7eb      	b.n	800ae0c <__swhatbuf_r+0x24>

0800ae34 <__smakebuf_r>:
 800ae34:	898b      	ldrh	r3, [r1, #12]
 800ae36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae38:	079d      	lsls	r5, r3, #30
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	d507      	bpl.n	800ae50 <__smakebuf_r+0x1c>
 800ae40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	6123      	str	r3, [r4, #16]
 800ae48:	2301      	movs	r3, #1
 800ae4a:	6163      	str	r3, [r4, #20]
 800ae4c:	b002      	add	sp, #8
 800ae4e:	bd70      	pop	{r4, r5, r6, pc}
 800ae50:	ab01      	add	r3, sp, #4
 800ae52:	466a      	mov	r2, sp
 800ae54:	f7ff ffc8 	bl	800ade8 <__swhatbuf_r>
 800ae58:	9900      	ldr	r1, [sp, #0]
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff f803 	bl	8009e68 <_malloc_r>
 800ae62:	b948      	cbnz	r0, 800ae78 <__smakebuf_r+0x44>
 800ae64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae68:	059a      	lsls	r2, r3, #22
 800ae6a:	d4ef      	bmi.n	800ae4c <__smakebuf_r+0x18>
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	f043 0302 	orr.w	r3, r3, #2
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	e7e3      	b.n	800ae40 <__smakebuf_r+0xc>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	6020      	str	r0, [r4, #0]
 800ae7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae80:	81a3      	strh	r3, [r4, #12]
 800ae82:	9b00      	ldr	r3, [sp, #0]
 800ae84:	6163      	str	r3, [r4, #20]
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	6120      	str	r0, [r4, #16]
 800ae8a:	b15b      	cbz	r3, 800aea4 <__smakebuf_r+0x70>
 800ae8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 f81d 	bl	800aed0 <_isatty_r>
 800ae96:	b128      	cbz	r0, 800aea4 <__smakebuf_r+0x70>
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	431d      	orrs	r5, r3
 800aea8:	81a5      	strh	r5, [r4, #12]
 800aeaa:	e7cf      	b.n	800ae4c <__smakebuf_r+0x18>

0800aeac <_fstat_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	; (800aecc <_fstat_r+0x20>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	f7f6 fb0a 	bl	80014d2 <_fstat>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	d102      	bne.n	800aec8 <_fstat_r+0x1c>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	b103      	cbz	r3, 800aec8 <_fstat_r+0x1c>
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	20009430 	.word	0x20009430

0800aed0 <_isatty_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d06      	ldr	r5, [pc, #24]	; (800aeec <_isatty_r+0x1c>)
 800aed4:	2300      	movs	r3, #0
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f6 fb09 	bl	80014f2 <_isatty>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_isatty_r+0x1a>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_isatty_r+0x1a>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20009430 	.word	0x20009430

0800aef0 <_init>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr

0800aefc <_fini>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr
