
WERNI_LowLevelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a0  080073a0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080073a0  080073a0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073a0  080073a0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080073a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009370  2000006c  08007414  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200093dc  08007414  000293dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001954f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e12  00000000  00000000  0003962e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001188  00000000  00000000  0003fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002465f  00000000  00000000  00040cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecda  00000000  00000000  0006532f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6582  00000000  00000000  00084009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063ec  00000000  00000000  0015a58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00160978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007148 	.word	0x08007148

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08007148 	.word	0x08007148

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
return 0;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <vApplicationGetIdleTaskMemory+0x2c>)
 8000304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	4a06      	ldr	r2, [pc, #24]	; (8000324 <vApplicationGetIdleTaskMemory+0x30>)
 800030a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	2000008c 	.word	0x2000008c
 8000324:	20000138 	.word	0x20000138

08000328 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <vApplicationGetTimerTaskMemory+0x2c>)
 8000338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <vApplicationGetTimerTaskMemory+0x30>)
 800033e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000346:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	20000338 	.word	0x20000338
 8000358:	200003e4 	.word	0x200003e4

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b5b0      	push	{r4, r5, r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of idleTask */
  osThreadDef(idleTask, StartIdleTask, osPriorityIdle, 0, 128);
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <MX_FREERTOS_Init+0x30>)
 8000364:	1d3c      	adds	r4, r7, #4
 8000366:	461d      	mov	r5, r3
 8000368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fb96 	bl	8002aaa <osThreadCreate>
 800037e:	4603      	mov	r3, r0
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <MX_FREERTOS_Init+0x34>)
 8000382:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000384:	bf00      	nop
 8000386:	3720      	adds	r7, #32
 8000388:	46bd      	mov	sp, r7
 800038a:	bdb0      	pop	{r4, r5, r7, pc}
 800038c:	0800716c 	.word	0x0800716c
 8000390:	20000088 	.word	0x20000088

08000394 <StartIdleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIdleTask */
  /* Infinite loop */
  for(;;)
  {
    MsgPool_init();
 800039c:	f005 fc9f 	bl	8005cde <MsgPool_init>
    TaskList_init();
 80003a0:	f005 fe7e 	bl	80060a0 <TaskList_init>
    app_init();
 80003a4:	f005 fc06 	bl	8005bb4 <app_init>
    vTaskDelete(NULL);
 80003a8:	2000      	movs	r0, #0
 80003aa:	f003 fd03 	bl	8003db4 <vTaskDelete>
    MsgPool_init();
 80003ae:	e7f5      	b.n	800039c <StartIdleTask+0x8>

080003b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003de:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003e4:	f043 0320 	orr.w	r3, r3, #32
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0320 	and.w	r3, r3, #32
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <MX_GPIO_Init+0xf8>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4a25      	ldr	r2, [pc, #148]	; (80004a8 <MX_GPIO_Init+0xf8>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_GPIO_Init+0xf8>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f000 febb 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000438:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	4818      	ldr	r0, [pc, #96]	; (80004ac <MX_GPIO_Init+0xfc>)
 800044a:	f000 fc57 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800044e:	230c      	movs	r3, #12
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000452:	2302      	movs	r3, #2
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2300      	movs	r3, #0
 800045c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800045e:	230c      	movs	r3, #12
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f000 fc46 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000470:	2320      	movs	r3, #32
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fc37 	bl	8000cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2105      	movs	r1, #5
 8000492:	2028      	movs	r0, #40	; 0x28
 8000494:	f000 fbf0 	bl	8000c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000498:	2028      	movs	r0, #40	; 0x28
 800049a:	f000 fc17 	bl	8000ccc <HAL_NVIC_EnableIRQ>

}
 800049e:	bf00      	nop
 80004a0:	3728      	adds	r7, #40	; 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000800 	.word	0x48000800

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fadc 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f807 	bl	80004ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f7ff ff78 	bl	80003b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80004c0:	f7ff ff4c 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004c4:	f002 faea 	bl	8002a9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0x18>

080004ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b094      	sub	sp, #80	; 0x50
 80004ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	2238      	movs	r2, #56	; 0x38
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f006 f8e3 	bl	80066a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 feaf 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000508:	2304      	movs	r3, #4
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800050c:	2355      	movs	r3, #85	; 0x55
 800050e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000510:	2302      	movs	r3, #2
 8000512:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000514:	2302      	movs	r3, #2
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000518:	2302      	movs	r3, #2
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4618      	mov	r0, r3
 8000522:	f000 ff59 	bl	80013d8 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800052c:	f000 f82a 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	2303      	movs	r3, #3
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2104      	movs	r1, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fb57 	bl	8001bfc <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000554:	f000 f816 	bl	8000584 <Error_Handler>
  }
}
 8000558:	bf00      	nop
 800055a:	3750      	adds	r7, #80	; 0x50
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d101      	bne.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000572:	f000 fa95 	bl	8000aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40001000 	.word	0x40001000

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>

0800058e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_MspInit+0x50>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <HAL_MspInit+0x50>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6613      	str	r3, [r2, #96]	; 0x60
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x50>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x50>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_MspInit+0x50>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6593      	str	r3, [r2, #88]	; 0x58
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x50>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	210f      	movs	r1, #15
 80005de:	f06f 0001 	mvn.w	r0, #1
 80005e2:	f000 fb49 	bl	8000c78 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005e6:	f000 fee7 	bl	80013b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <HAL_InitTick+0xc4>)
 800060a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <HAL_InitTick+0xc4>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6593      	str	r3, [r2, #88]	; 0x58
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <HAL_InitTick+0xc4>)
 8000616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000620:	f107 020c 	add.w	r2, r7, #12
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd6a 	bl	8002104 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000630:	f001 fd52 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8000634:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <HAL_InitTick+0xc8>)
 800063a:	fba2 2303 	umull	r2, r3, r2, r3
 800063e:	0c9b      	lsrs	r3, r3, #18
 8000640:	3b01      	subs	r3, #1
 8000642:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <HAL_InitTick+0xcc>)
 8000646:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <HAL_InitTick+0xd0>)
 8000648:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_InitTick+0xcc>)
 800064c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000650:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <HAL_InitTick+0xcc>)
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <HAL_InitTick+0xcc>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_InitTick+0xcc>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <HAL_InitTick+0xcc>)
 8000666:	f001 fdd5 	bl	8002214 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000674:	2b00      	cmp	r3, #0
 8000676:	d11b      	bne.n	80006b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <HAL_InitTick+0xcc>)
 800067a:	f001 feb7 	bl	80023ec <HAL_TIM_Base_Start_IT>
 800067e:	4603      	mov	r3, r0
 8000680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000688:	2b00      	cmp	r3, #0
 800068a:	d111      	bne.n	80006b0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800068c:	2036      	movs	r0, #54	; 0x36
 800068e:	f000 fb1d 	bl	8000ccc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d808      	bhi.n	80006aa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	2036      	movs	r0, #54	; 0x36
 800069e:	f000 faeb 	bl	8000c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <HAL_InitTick+0xd4>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	e002      	b.n	80006b0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3730      	adds	r7, #48	; 0x30
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	431bde83 	.word	0x431bde83
 80006c4:	200007e4 	.word	0x200007e4
 80006c8:	40001000 	.word	0x40001000
 80006cc:	20000004 	.word	0x20000004

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000700:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000704:	f000 fd80 	bl	8001208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM6_DAC_IRQHandler+0x10>)
 8000712:	f001 ff1f 	bl	8002554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200007e4 	.word	0x200007e4

08000720 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00a      	b.n	8000748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000732:	f3af 8000 	nop.w
 8000736:	4601      	mov	r1, r0
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	b2ca      	uxtb	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf0      	blt.n	8000732 <_read+0x12>
  }

  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e009      	b.n	8000780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf1      	blt.n	800076c <_write+0x12>
  }
  return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_close>:

int _close(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ba:	605a      	str	r2, [r3, #4]
  return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <_isatty>:

int _isatty(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f006 f802 	bl	8006834 <__errno>
 8000830:	4603      	mov	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2001c000 	.word	0x2001c000
 800085c:	00000400 	.word	0x00000400
 8000860:	20000830 	.word	0x20000830
 8000864:	200093e0 	.word	0x200093e0

08000868 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0b      	ldr	r4, [pc, #44]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b6:	f7ff ffd7 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f005 ffc1 	bl	8006840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff fdf7 	bl	80004b0 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008d0:	080073a8 	.word	0x080073a8
  ldr r2, =_sbss
 80008d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008d8:	200093dc 	.word	0x200093dc

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>

080008de <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
 80008f0:	f7ff fe48 	bl	8000584 <Error_Handler>
 80008f4:	e7fe      	b.n	80008f4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e007      	b.n	800090c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	2100      	movs	r1, #0
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d9f4      	bls.n	80008fc <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	721a      	strb	r2, [r3, #8]
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d104      	bne.n	8000938 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
 8000932:	f7ff fe27 	bl	8000584 <Error_Handler>
 8000936:	e7fe      	b.n	8000936 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a1b      	ldrb	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d904      	bls.n	800094a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
 8000944:	f7ff fe1e 	bl	8000584 <Error_Handler>
 8000948:	e7fe      	b.n	8000948 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7a1b      	ldrb	r3, [r3, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	b2d1      	uxtb	r1, r2
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	7211      	strb	r1, [r2, #8]
 8000956:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000958:	f3ef 8211 	mrs	r2, BASEPRI
 800095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000960:	f383 8811 	msr	BASEPRI, r3
 8000964:	f3bf 8f6f 	isb	sy
 8000968:	f3bf 8f4f 	dsb	sy
 800096c:	60fa      	str	r2, [r7, #12]
 800096e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800098e:	b672      	cpsid	i
}
 8000990:	bf00      	nop
 8000992:	f7ff fdf7 	bl	8000584 <Error_Handler>
 8000996:	e7fe      	b.n	8000996 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	3b01      	subs	r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a1b      	ldrb	r3, [r3, #8]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d904      	bls.n	80009b6 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
 80009b0:	f7ff fde8 	bl	8000584 <Error_Handler>
 80009b4:	e7fe      	b.n	80009b4 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7a1b      	ldrb	r3, [r3, #8]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80009ca:	bf00      	nop
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80009e2:	f005 ff27 	bl	8006834 <__errno>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2216      	movs	r2, #22
 80009ea:	601a      	str	r2, [r3, #0]
    return;
 80009ec:	e015      	b.n	8000a1a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80009ee:	200c      	movs	r0, #12
 80009f0:	f005 fbf8 	bl	80061e4 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff68 	bl	80008de <stm32_lock_init>
    return;
 8000a0e:	e004      	b.n	8000a1a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8000a14:	f7ff fdb6 	bl	8000584 <Error_Handler>
 8000a18:	e7fe      	b.n	8000a18 <__retarget_lock_init_recursive+0x44>
}
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	bf00      	nop
 8000a32:	f7ff fda7 	bl	8000584 <Error_Handler>
 8000a36:	e7fe      	b.n	8000a36 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff70 	bl	8000920 <stm32_lock_acquire>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d104      	bne.n	8000a60 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a56:	b672      	cpsid	i
}
 8000a58:	bf00      	nop
 8000a5a:	f7ff fd93 	bl	8000584 <Error_Handler>
 8000a5e:	e7fe      	b.n	8000a5e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff8c 	bl	8000980 <stm32_lock_release>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f8dc 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff fdb9 	bl	80005f8 <HAL_InitTick>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	e001      	b.n	8000a96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a92:	f7ff fd87 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a96:	79fb      	ldrb	r3, [r7, #7]

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x1c>)
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000084c 	.word	0x2000084c
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000084c 	.word	0x2000084c

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d00f      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d00c      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d009      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d006      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d003      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c5e:	21a6      	movs	r1, #166	; 0xa6
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c62:	f7ff fc94 	bl	800058e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff38 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08007188 	.word	0x08007188

08000c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d903      	bls.n	8000c94 <HAL_NVIC_SetPriority+0x1c>
 8000c8c:	21be      	movs	r1, #190	; 0xbe
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_NVIC_SetPriority+0x50>)
 8000c90:	f7ff fc7d 	bl	800058e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d903      	bls.n	8000ca2 <HAL_NVIC_SetPriority+0x2a>
 8000c9a:	21bf      	movs	r1, #191	; 0xbf
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <HAL_NVIC_SetPriority+0x50>)
 8000c9e:	f7ff fc76 	bl	800058e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca2:	f7ff ff3f 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000ca6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f7ff ff8f 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff5e 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	08007188 	.word	0x08007188

08000ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	da03      	bge.n	8000ce6 <HAL_NVIC_EnableIRQ+0x1a>
 8000cde:	21d2      	movs	r1, #210	; 0xd2
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000ce2:	f7ff fc54 	bl	800058e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff28 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08007188 	.word	0x08007188

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d10:	d01b      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <HAL_GPIO_Init+0xfc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d017      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a37      	ldr	r2, [pc, #220]	; (8000dfc <HAL_GPIO_Init+0x100>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <HAL_GPIO_Init+0x104>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00f      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <HAL_GPIO_Init+0x108>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00b      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <HAL_GPIO_Init+0x10c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <HAL_GPIO_Init+0x110>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x4e>
 8000d42:	21a9      	movs	r1, #169	; 0xa9
 8000d44:	4832      	ldr	r0, [pc, #200]	; (8000e10 <HAL_GPIO_Init+0x114>)
 8000d46:	f7ff fc22 	bl	800058e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x64>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x6c>
 8000d60:	21aa      	movs	r1, #170	; 0xaa
 8000d62:	482b      	ldr	r0, [pc, #172]	; (8000e10 <HAL_GPIO_Init+0x114>)
 8000d64:	f7ff fc13 	bl	800058e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 820a 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	f000 8205 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b11      	cmp	r3, #17
 8000d82:	f000 8200 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	f000 81fb 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b12      	cmp	r3, #18
 8000d96:	f000 81f6 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000da2:	f000 81f0 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000dae:	f000 81ea 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000dba:	f000 81e4 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000dc6:	f000 81de 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000dd2:	f000 81d8 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000dde:	f000 81d2 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	f000 81cd 	beq.w	8001186 <HAL_GPIO_Init+0x48a>
 8000dec:	21ab      	movs	r1, #171	; 0xab
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_GPIO_Init+0x114>)
 8000df0:	f7ff fbcd 	bl	800058e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000df4:	e1c7      	b.n	8001186 <HAL_GPIO_Init+0x48a>
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	48000c00 	.word	0x48000c00
 8000e04:	48001000 	.word	0x48001000
 8000e08:	48001400 	.word	0x48001400
 8000e0c:	48001800 	.word	0x48001800
 8000e10:	080071c4 	.word	0x080071c4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 81aa 	beq.w	8001180 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d144      	bne.n	8000ece <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00f      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d00b      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x170>
 8000e64:	21bb      	movs	r1, #187	; 0xbb
 8000e66:	488b      	ldr	r0, [pc, #556]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000e68:	f7ff fb91 	bl	800058e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d027      	beq.n	8000f2a <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000ef2:	21cc      	movs	r1, #204	; 0xcc
 8000ef4:	4867      	ldr	r0, [pc, #412]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000ef6:	f7ff fb4a 	bl	800058e <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d14b      	bne.n	8000fce <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f3c:	d01b      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_GPIO_Init+0x39c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d017      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_GPIO_Init+0x3a0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a53      	ldr	r2, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x3a4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00f      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00b      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_GPIO_Init+0x3ac>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <HAL_GPIO_Init+0x3b0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x27a>
 8000f6e:	21d9      	movs	r1, #217	; 0xd9
 8000f70:	4848      	ldr	r0, [pc, #288]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000f72:	f7ff fb0c 	bl	800058e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d903      	bls.n	8000f86 <HAL_GPIO_Init+0x28a>
 8000f7e:	21da      	movs	r1, #218	; 0xda
 8000f80:	4844      	ldr	r0, [pc, #272]	; (8001094 <HAL_GPIO_Init+0x398>)
 8000f82:	f7ff fb04 	bl	800058e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b8 	beq.w	8001180 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_GPIO_Init+0x3b4>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_GPIO_Init+0x3b4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x3b4>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x3b8>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001052:	d031      	beq.n	80010b8 <HAL_GPIO_Init+0x3bc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_GPIO_Init+0x39c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d019      	beq.n	8001090 <HAL_GPIO_Init+0x394>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x3a0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x390>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_GPIO_Init+0x3a4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x38c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_GPIO_Init+0x3a8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x388>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_GPIO_Init+0x3ac>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x384>
 800107c:	2305      	movs	r3, #5
 800107e:	e01c      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001080:	2306      	movs	r3, #6
 8001082:	e01a      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001084:	2304      	movs	r3, #4
 8001086:	e018      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001088:	2303      	movs	r3, #3
 800108a:	e016      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 800108c:	2302      	movs	r3, #2
 800108e:	e014      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001090:	2301      	movs	r3, #1
 8001092:	e012      	b.n	80010ba <HAL_GPIO_Init+0x3be>
 8001094:	080071c4 	.word	0x080071c4
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48001000 	.word	0x48001000
 80010a8:	48001400 	.word	0x48001400
 80010ac:	48001800 	.word	0x48001800
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	2300      	movs	r3, #0
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ca:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x4a4>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fc:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_GPIO_Init+0x4a8>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	f47f ae3f 	bne.w	8000e14 <HAL_GPIO_Init+0x118>
  }
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <HAL_GPIO_WritePin+0x20>
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_GPIO_WritePin+0x2a>
 80011c8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <HAL_GPIO_WritePin+0x5c>)
 80011ce:	f7ff f9de 	bl	800058e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_WritePin+0x40>
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d004      	beq.n	80011e8 <HAL_GPIO_WritePin+0x40>
 80011de:	f240 119b 	movw	r1, #411	; 0x19b
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <HAL_GPIO_WritePin+0x5c>)
 80011e4:	f7ff f9d3 	bl	800058e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	080071c4 	.word	0x080071c4

08001208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f806 	bl	8001238 <HAL_GPIO_EXTI_Callback>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x26>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001264:	d007      	beq.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x26>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126c:	d003      	beq.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x26>
 800126e:	219d      	movs	r1, #157	; 0x9d
 8001270:	484d      	ldr	r0, [pc, #308]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8001272:	f7ff f98c 	bl	800058e <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d141      	bne.n	8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001288:	d131      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800128a:	4b48      	ldr	r3, [pc, #288]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800128c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001296:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a2:	4a42      	ldr	r2, [pc, #264]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2232      	movs	r2, #50	; 0x32
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a3f      	ldr	r2, [pc, #252]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c0:	e002      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d4:	d102      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f2      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	d158      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e057      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80012f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012fe:	e04d      	b.n	800139c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001306:	d141      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001314:	d131      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2232      	movs	r2, #50	; 0x32
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	e002      	b.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3b01      	subs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d102      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x118>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f2      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d112      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e011      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800137c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800138a:	e007      	b.n	800139c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08007200 	.word	0x08007200
 80013ac:	40007000 	.word	0x40007000
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c6:	6093      	str	r3, [r2, #8]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f000 bc02 	b.w	8001bf0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d022      	beq.n	800143a <HAL_RCC_OscConfig+0x62>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d11c      	bne.n	800143a <HAL_RCC_OscConfig+0x62>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d116      	bne.n	800143a <HAL_RCC_OscConfig+0x62>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d110      	bne.n	800143a <HAL_RCC_OscConfig+0x62>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10a      	bne.n	800143a <HAL_RCC_OscConfig+0x62>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d104      	bne.n	800143a <HAL_RCC_OscConfig+0x62>
 8001430:	f240 1145 	movw	r1, #325	; 0x145
 8001434:	4892      	ldr	r0, [pc, #584]	; (8001680 <HAL_RCC_OscConfig+0x2a8>)
 8001436:	f7ff f8aa 	bl	800058e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8089 	beq.w	800155a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00e      	beq.n	800146e <HAL_RCC_OscConfig+0x96>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d009      	beq.n	800146e <HAL_RCC_OscConfig+0x96>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001462:	d004      	beq.n	800146e <HAL_RCC_OscConfig+0x96>
 8001464:	f240 114b 	movw	r1, #331	; 0x14b
 8001468:	4885      	ldr	r0, [pc, #532]	; (8001680 <HAL_RCC_OscConfig+0x2a8>)
 800146a:	f7ff f890 	bl	800058e <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001478:	4b82      	ldr	r3, [pc, #520]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d102      	bne.n	800148e <HAL_RCC_OscConfig+0xb6>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d002      	beq.n	8001494 <HAL_RCC_OscConfig+0xbc>
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d05b      	beq.n	8001558 <HAL_RCC_OscConfig+0x180>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d157      	bne.n	8001558 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e3a1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0xec>
 80014b6:	4b73      	ldr	r3, [pc, #460]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a72      	ldr	r2, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0x128>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x110>
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6c      	ldr	r2, [pc, #432]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x128>
 80014e8:	4b66      	ldr	r3, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a65      	ldr	r2, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a62      	ldr	r2, [pc, #392]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fadc 	bl	8000ac4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fad8 	bl	8000ac4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e366      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x138>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fac8 	bl	8000ac4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fac4 	bl	8000ac4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e352      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x160>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8093 	beq.w	800168e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <HAL_RCC_OscConfig+0x1ac>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001578:	d004      	beq.n	8001584 <HAL_RCC_OscConfig+0x1ac>
 800157a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800157e:	4840      	ldr	r0, [pc, #256]	; (8001680 <HAL_RCC_OscConfig+0x2a8>)
 8001580:	f7ff f805 	bl	800058e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b7f      	cmp	r3, #127	; 0x7f
 800158a:	d904      	bls.n	8001596 <HAL_RCC_OscConfig+0x1be>
 800158c:	f240 1181 	movw	r1, #385	; 0x181
 8001590:	483b      	ldr	r0, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x2a8>)
 8001592:	f7fe fffc 	bl	800058e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1de>
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_OscConfig+0x1e4>
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d11f      	bne.n	80015fc <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e30d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	4928      	ldr	r1, [pc, #160]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x2b0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f803 	bl	80005f8 <HAL_InitTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d049      	beq.n	800168c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e2f9      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d023      	beq.n	800164c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa58 	bl	8000ac4 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fa54 	bl	8000ac4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e2e2      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	061b      	lsls	r3, r3, #24
 8001644:	490f      	ldr	r1, [pc, #60]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
 800164a:	e020      	b.n	800168e <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fa34 	bl	8000ac4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fa30 	bl	8000ac4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2be      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x288>
 800167e:	e006      	b.n	800168e <HAL_RCC_OscConfig+0x2b6>
 8001680:	0800723c 	.word	0x0800723c
 8001684:	40021000 	.word	0x40021000
 8001688:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d049      	beq.n	800172e <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2dc>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d004      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2dc>
 80016aa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80016ae:	48a3      	ldr	r0, [pc, #652]	; (800193c <HAL_RCC_OscConfig+0x564>)
 80016b0:	f7fe ff6d 	bl	800058e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4ba0      	ldr	r3, [pc, #640]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	4a9f      	ldr	r2, [pc, #636]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff f9fa 	bl	8000ac4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff f9f6 	bl	8000ac4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e284      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e6:	4b96      	ldr	r3, [pc, #600]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2fc>
 80016f4:	e01b      	b.n	800172e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b92      	ldr	r3, [pc, #584]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	4a90      	ldr	r2, [pc, #576]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff f9dd 	bl	8000ac4 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff f9d9 	bl	8000ac4 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e267      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	4b87      	ldr	r3, [pc, #540]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80b7 	beq.w	80018aa <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00c      	beq.n	8001762 <HAL_RCC_OscConfig+0x38a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d008      	beq.n	8001762 <HAL_RCC_OscConfig+0x38a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d004      	beq.n	8001762 <HAL_RCC_OscConfig+0x38a>
 8001758:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800175c:	4877      	ldr	r0, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x564>)
 800175e:	f7fe ff16 	bl	800058e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x39a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x39c>
 8001772:	2300      	movs	r3, #0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00d      	beq.n	8001794 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b71      	ldr	r3, [pc, #452]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	4a70      	ldr	r2, [pc, #448]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	; 0x58
 8001784:	4b6e      	ldr	r3, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001790:	2301      	movs	r3, #1
 8001792:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x56c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d118      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x56c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a67      	ldr	r2, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x56c>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ac:	f7ff f98a 	bl	8000ac4 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b4:	f7ff f986 	bl	8000ac4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e214      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x56c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_RCC_OscConfig+0x414>
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e0:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ea:	e024      	b.n	8001836 <HAL_RCC_OscConfig+0x45e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d110      	bne.n	8001816 <HAL_RCC_OscConfig+0x43e>
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001814:	e00f      	b.n	8001836 <HAL_RCC_OscConfig+0x45e>
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	4a44      	ldr	r2, [pc, #272]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800182e:	f023 0304 	bic.w	r3, r3, #4
 8001832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d016      	beq.n	800186c <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff f941 	bl	8000ac4 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f93d 	bl	8000ac4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1c9      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0ed      	beq.n	8001846 <HAL_RCC_OscConfig+0x46e>
 800186a:	e015      	b.n	8001898 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff f92a 	bl	8000ac4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff f926 	bl	8000ac4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1b2      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ed      	bne.n	8001874 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d105      	bne.n	80018aa <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	4a27      	ldr	r2, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80018a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d04f      	beq.n	8001956 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d008      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d004      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
 80018c6:	f240 213b 	movw	r1, #571	; 0x23b
 80018ca:	481c      	ldr	r0, [pc, #112]	; (800193c <HAL_RCC_OscConfig+0x564>)
 80018cc:	f7fe fe5f 	bl	800058e <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01c      	beq.n	8001912 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80018da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff f8ec 	bl	8000ac4 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f0:	f7ff f8e8 	bl	8000ac4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e176      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ef      	beq.n	80018f0 <HAL_RCC_OscConfig+0x518>
 8001910:	e021      	b.n	8001956 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 8001914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001918:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_OscConfig+0x568>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff f8cf 	bl	8000ac4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001928:	e00e      	b.n	8001948 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192a:	f7ff f8cb 	bl	8000ac4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d907      	bls.n	8001948 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e159      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
 800193c:	0800723c 	.word	0x0800723c
 8001940:	40021000 	.word	0x40021000
 8001944:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e9      	bne.n	800192a <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00c      	beq.n	8001978 <HAL_RCC_OscConfig+0x5a0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d008      	beq.n	8001978 <HAL_RCC_OscConfig+0x5a0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d004      	beq.n	8001978 <HAL_RCC_OscConfig+0x5a0>
 800196e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001972:	4880      	ldr	r0, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 8001974:	f7fe fe0b 	bl	800058e <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8136 	beq.w	8001bee <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b0c      	cmp	r3, #12
 800198c:	f000 80ea 	beq.w	8001b64 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b02      	cmp	r3, #2
 8001996:	f040 80bd 	bne.w	8001b14 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_RCC_OscConfig+0x5e4>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d008      	beq.n	80019bc <HAL_RCC_OscConfig+0x5e4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d004      	beq.n	80019bc <HAL_RCC_OscConfig+0x5e4>
 80019b2:	f240 216e 	movw	r1, #622	; 0x26e
 80019b6:	486f      	ldr	r0, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 80019b8:	f7fe fde9 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_RCC_OscConfig+0x5f4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d904      	bls.n	80019d6 <HAL_RCC_OscConfig+0x5fe>
 80019cc:	f240 216f 	movw	r1, #623	; 0x26f
 80019d0:	4868      	ldr	r0, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 80019d2:	f7fe fddc 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d903      	bls.n	80019e6 <HAL_RCC_OscConfig+0x60e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	2b7f      	cmp	r3, #127	; 0x7f
 80019e4:	d904      	bls.n	80019f0 <HAL_RCC_OscConfig+0x618>
 80019e6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80019ea:	4862      	ldr	r0, [pc, #392]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 80019ec:	f7fe fdcf 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d903      	bls.n	8001a00 <HAL_RCC_OscConfig+0x628>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2b1f      	cmp	r3, #31
 80019fe:	d904      	bls.n	8001a0a <HAL_RCC_OscConfig+0x632>
 8001a00:	f240 2171 	movw	r1, #625	; 0x271
 8001a04:	485b      	ldr	r0, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 8001a06:	f7fe fdc2 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d010      	beq.n	8001a34 <HAL_RCC_OscConfig+0x65c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x65c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d008      	beq.n	8001a34 <HAL_RCC_OscConfig+0x65c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d004      	beq.n	8001a34 <HAL_RCC_OscConfig+0x65c>
 8001a2a:	f240 2172 	movw	r1, #626	; 0x272
 8001a2e:	4851      	ldr	r0, [pc, #324]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 8001a30:	f7fe fdad 	bl	800058e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_OscConfig+0x686>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x686>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCC_OscConfig+0x686>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d004      	beq.n	8001a5e <HAL_RCC_OscConfig+0x686>
 8001a54:	f240 2173 	movw	r1, #627	; 0x273
 8001a58:	4846      	ldr	r0, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x79c>)
 8001a5a:	f7fe fd98 	bl	800058e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f82b 	bl	8000ac4 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f827 	bl	8000ac4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0b5      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_RCC_OscConfig+0x7a0>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6a11      	ldr	r1, [r2, #32]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab2:	0852      	lsrs	r2, r2, #1
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0552      	lsls	r2, r2, #21
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001abe:	0852      	lsrs	r2, r2, #1
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0652      	lsls	r2, r2, #25
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aca:	06d2      	lsls	r2, r2, #27
 8001acc:	430a      	orrs	r2, r1
 8001ace:	4928      	ldr	r1, [pc, #160]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7fe ffea 	bl	8000ac4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe ffe6 	bl	8000ac4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e074      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x71c>
 8001b12:	e06c      	b.n	8001bee <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7fe ffc2 	bl	8000ac4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe ffbe 	bl	8000ac4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e04c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_RCC_OscConfig+0x798>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x76c>
 8001b62:	e044      	b.n	8001bee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e03f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
 8001b70:	40021000 	.word	0x40021000
 8001b74:	0800723c 	.word	0x0800723c
 8001b78:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_RCC_OscConfig+0x820>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d12c      	bne.n	8001bea <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d123      	bne.n	8001bea <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11b      	bne.n	8001bea <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d113      	bne.n	8001bea <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e1e2      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x30>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 030f 	bic.w	r3, r3, #15
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x3a>
 8001c2c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001c30:	4869      	ldr	r0, [pc, #420]	; (8001dd8 <HAL_RCC_ClockConfig+0x1dc>)
 8001c32:	f7fe fcac 	bl	800058e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d031      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d02e      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d02b      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d028      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d025      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d022      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d01f      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b07      	cmp	r3, #7
 8001c64:	d01c      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d019      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b0a      	cmp	r3, #10
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b0b      	cmp	r3, #11
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b0d      	cmp	r3, #13
 8001c88:	d00a      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b0e      	cmp	r3, #14
 8001c8e:	d007      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	d004      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
 8001c96:	f240 310d 	movw	r1, #781	; 0x30d
 8001c9a:	484f      	ldr	r0, [pc, #316]	; (8001dd8 <HAL_RCC_ClockConfig+0x1dc>)
 8001c9c:	f7fe fc77 	bl	800058e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_RCC_ClockConfig+0x1e0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d910      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_ClockConfig+0x1e0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 020f 	bic.w	r2, r3, #15
 8001cb6:	4949      	ldr	r1, [pc, #292]	; (8001ddc <HAL_RCC_ClockConfig+0x1e0>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1e0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e184      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 808e 	beq.w	8001dfa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d00c      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x104>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d008      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x104>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x104>
 8001cf6:	f44f 7149 	mov.w	r1, #804	; 0x324
 8001cfa:	4837      	ldr	r0, [pc, #220]	; (8001dd8 <HAL_RCC_ClockConfig+0x1dc>)
 8001cfc:	f7fe fc47 	bl	800058e <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d129      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e160      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d18:	f000 fa36 	bl	8002188 <RCC_GetSysClockFreqFromPLLSource>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <HAL_RCC_ClockConfig+0x1e8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d93f      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d033      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d12f      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e024      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e132      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e12a      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d84:	f000 f93a 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <HAL_RCC_ClockConfig+0x1e8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d909      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9a:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	490b      	ldr	r1, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1e4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db8:	f7fe fe84 	bl	8000ac4 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7fe fe80 	bl	8000ac4 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d90a      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e101      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
 8001dd6:	bf00      	nop
 8001dd8:	0800723c 	.word	0x0800723c
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de8:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 020c 	and.w	r2, r3, #12
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d1e2      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d04c      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e12:	4b74      	ldr	r3, [pc, #464]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a73      	ldr	r2, [pc, #460]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001e18:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1c:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e32:	4a6c      	ldr	r2, [pc, #432]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001e34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e38:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d020      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b90      	cmp	r3, #144	; 0x90
 8001e50:	d01c      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2ba0      	cmp	r3, #160	; 0xa0
 8001e58:	d018      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2bb0      	cmp	r3, #176	; 0xb0
 8001e60:	d014      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2bc0      	cmp	r3, #192	; 0xc0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2bd0      	cmp	r3, #208	; 0xd0
 8001e70:	d00c      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2be0      	cmp	r3, #224	; 0xe0
 8001e78:	d008      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2bf0      	cmp	r3, #240	; 0xf0
 8001e80:	d004      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x290>
 8001e82:	f240 317b 	movw	r1, #891	; 0x37b
 8001e86:	4858      	ldr	r0, [pc, #352]	; (8001fe8 <HAL_RCC_ClockConfig+0x3ec>)
 8001e88:	f7fe fb81 	bl	800058e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4952      	ldr	r1, [pc, #328]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b80      	cmp	r3, #128	; 0x80
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4a4e      	ldr	r2, [pc, #312]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCC_ClockConfig+0x3f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d21d      	bcs.n	8001efc <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <HAL_RCC_ClockConfig+0x3f0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 020f 	bic.w	r2, r3, #15
 8001ec8:	4948      	ldr	r1, [pc, #288]	; (8001fec <HAL_RCC_ClockConfig+0x3f0>)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fdf8 	bl	8000ac4 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7fe fdf4 	bl	8000ac4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e075      	b.n	8001fda <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_ClockConfig+0x3f0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1ed      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d025      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d018      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x346>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f18:	d013      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x346>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f22:	d00e      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x346>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x346>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f36:	d004      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x346>
 8001f38:	f240 319d 	movw	r1, #925	; 0x39d
 8001f3c:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <HAL_RCC_ClockConfig+0x3ec>)
 8001f3e:	f7fe fb26 	bl	800058e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d026      	beq.n	8001fae <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d018      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x39e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f70:	d013      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x39e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f7a:	d00e      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x39e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x39e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f8e:	d004      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x39e>
 8001f90:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001f94:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <HAL_RCC_ClockConfig+0x3ec>)
 8001f96:	f7fe fafa 	bl	800058e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fae:	f000 f825 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x3e8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <HAL_RCC_ClockConfig+0x3f4>)
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x3f8>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x3fc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fb10 	bl	80005f8 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	0800723c 	.word	0x0800723c
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	0800730c 	.word	0x0800730c
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d102      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e047      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d102      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	e03e      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d136      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3301      	adds	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d10c      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	68d2      	ldr	r2, [r2, #12]
 800205c:	0a12      	lsrs	r2, r2, #8
 800205e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
      break;
 8002068:	e00c      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	0a12      	lsrs	r2, r2, #8
 8002078:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800207c:	fb02 f303 	mul.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
      break;
 8002082:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0e5b      	lsrs	r3, r3, #25
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e001      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020a4:	693b      	ldr	r3, [r7, #16]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	016e3600 	.word	0x016e3600

080020c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	0800731c 	.word	0x0800731c

08002104 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <HAL_RCC_GetClockConfig+0x1a>
 8002114:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8002118:	4818      	ldr	r0, [pc, #96]	; (800217c <HAL_RCC_GetClockConfig+0x78>)
 800211a:	f7fe fa38 	bl	800058e <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <HAL_RCC_GetClockConfig+0x2a>
 8002124:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <HAL_RCC_GetClockConfig+0x78>)
 800212a:	f7fe fa30 	bl	800058e <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	220f      	movs	r2, #15
 8002132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_GetClockConfig+0x7c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_RCC_GetClockConfig+0x7c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_GetClockConfig+0x7c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_GetClockConfig+0x7c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCC_GetClockConfig+0x80>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 020f 	and.w	r2, r3, #15
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	0800723c 	.word	0x0800723c
 8002180:	40021000 	.word	0x40021000
 8002184:	40022000 	.word	0x40022000

08002188 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d10c      	bne.n	80021c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021b6:	68d2      	ldr	r2, [r2, #12]
 80021b8:	0a12      	lsrs	r2, r2, #8
 80021ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
    break;
 80021c4:	e00c      	b.n	80021e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021d0:	68d2      	ldr	r2, [r2, #12]
 80021d2:	0a12      	lsrs	r2, r2, #8
 80021d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    break;
 80021de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0e5b      	lsrs	r3, r3, #25
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40021000 	.word	0x40021000
 800220c:	016e3600 	.word	0x016e3600
 8002210:	00f42400 	.word	0x00f42400

08002214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0be      	b.n	80023a4 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a60      	ldr	r2, [pc, #384]	; (80023ac <HAL_TIM_Base_Init+0x198>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d036      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d031      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <HAL_TIM_Base_Init+0x19c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d02c      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5a      	ldr	r2, [pc, #360]	; (80023b4 <HAL_TIM_Base_Init+0x1a0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d027      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a59      	ldr	r2, [pc, #356]	; (80023b8 <HAL_TIM_Base_Init+0x1a4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a57      	ldr	r2, [pc, #348]	; (80023bc <HAL_TIM_Base_Init+0x1a8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01d      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_TIM_Base_Init+0x1ac>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d018      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_TIM_Base_Init+0x1b0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a53      	ldr	r2, [pc, #332]	; (80023c8 <HAL_TIM_Base_Init+0x1b4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00e      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a51      	ldr	r2, [pc, #324]	; (80023cc <HAL_TIM_Base_Init+0x1b8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_TIM_Base_Init+0x1bc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_TIM_Base_Init+0x8a>
 8002294:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002298:	484e      	ldr	r0, [pc, #312]	; (80023d4 <HAL_TIM_Base_Init+0x1c0>)
 800229a:	f7fe f978 	bl	800058e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d014      	beq.n	80022d0 <HAL_TIM_Base_Init+0xbc>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d010      	beq.n	80022d0 <HAL_TIM_Base_Init+0xbc>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d00c      	beq.n	80022d0 <HAL_TIM_Base_Init+0xbc>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d008      	beq.n	80022d0 <HAL_TIM_Base_Init+0xbc>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b60      	cmp	r3, #96	; 0x60
 80022c4:	d004      	beq.n	80022d0 <HAL_TIM_Base_Init+0xbc>
 80022c6:	f240 1123 	movw	r1, #291	; 0x123
 80022ca:	4842      	ldr	r0, [pc, #264]	; (80023d4 <HAL_TIM_Base_Init+0x1c0>)
 80022cc:	f7fe f95f 	bl	800058e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00e      	beq.n	80022f6 <HAL_TIM_Base_Init+0xe2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e0:	d009      	beq.n	80022f6 <HAL_TIM_Base_Init+0xe2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ea:	d004      	beq.n	80022f6 <HAL_TIM_Base_Init+0xe2>
 80022ec:	f44f 7192 	mov.w	r1, #292	; 0x124
 80022f0:	4838      	ldr	r0, [pc, #224]	; (80023d4 <HAL_TIM_Base_Init+0x1c0>)
 80022f2:	f7fe f94c 	bl	800058e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_TIM_Base_Init+0xfc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d004      	beq.n	8002310 <HAL_TIM_Base_Init+0xfc>
 8002306:	f240 1125 	movw	r1, #293	; 0x125
 800230a:	4832      	ldr	r0, [pc, #200]	; (80023d4 <HAL_TIM_Base_Init+0x1c0>)
 800230c:	f7fe f93f 	bl	800058e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f857 	bl	80023d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f000 fab1 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40001000 	.word	0x40001000
 80023bc:	40001400 	.word	0x40001400
 80023c0:	40013400 	.word	0x40013400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400
 80023cc:	40014800 	.word	0x40014800
 80023d0:	40015000 	.word	0x40015000
 80023d4:	08007274 	.word	0x08007274

080023d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <HAL_TIM_Base_Start_IT+0x138>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d036      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d031      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_TIM_Base_Start_IT+0x13c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d02c      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_TIM_Base_Start_IT+0x140>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d027      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a43      	ldr	r2, [pc, #268]	; (8002530 <HAL_TIM_Base_Start_IT+0x144>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d022      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_TIM_Base_Start_IT+0x148>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d01d      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a40      	ldr	r2, [pc, #256]	; (8002538 <HAL_TIM_Base_Start_IT+0x14c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_TIM_Base_Start_IT+0x150>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <HAL_TIM_Base_Start_IT+0x154>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a3c      	ldr	r2, [pc, #240]	; (8002544 <HAL_TIM_Base_Start_IT+0x158>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3a      	ldr	r2, [pc, #232]	; (8002548 <HAL_TIM_Base_Start_IT+0x15c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002462:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002466:	4839      	ldr	r0, [pc, #228]	; (800254c <HAL_TIM_Base_Start_IT+0x160>)
 8002468:	f7fe f891 	bl	800058e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e04f      	b.n	800251c <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a22      	ldr	r2, [pc, #136]	; (8002524 <HAL_TIM_Base_Start_IT+0x138>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01d      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xee>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d018      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xee>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_TIM_Base_Start_IT+0x13c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xee>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_TIM_Base_Start_IT+0x140>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xee>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_TIM_Base_Start_IT+0x14c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xee>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_TIM_Base_Start_IT+0x150>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xee>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_TIM_Base_Start_IT+0x15c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d115      	bne.n	8002506 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_TIM_Base_Start_IT+0x164>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d015      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x12c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	d011      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	e008      	b.n	8002518 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e000      	b.n	800251a <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40001000 	.word	0x40001000
 8002534:	40001400 	.word	0x40001400
 8002538:	40013400 	.word	0x40013400
 800253c:	40014000 	.word	0x40014000
 8002540:	40014400 	.word	0x40014400
 8002544:	40014800 	.word	0x40014800
 8002548:	40015000 	.word	0x40015000
 800254c:	08007274 	.word	0x08007274
 8002550:	00010007 	.word	0x00010007

08002554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0202 	mvn.w	r2, #2
 8002580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f965 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f957 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f968 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0204 	mvn.w	r2, #4
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f93b 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f92d 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f93e 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b08      	cmp	r3, #8
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b08      	cmp	r3, #8
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0208 	mvn.w	r2, #8
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f911 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f903 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f914 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0210 	mvn.w	r2, #16
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2208      	movs	r2, #8
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8e7 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8d9 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8ea 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0201 	mvn.w	r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fd ff44 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f978 	bl	80029f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002712:	d10e      	bne.n	8002732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d107      	bne.n	8002732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800272a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f96b 	bl	8002a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d10e      	bne.n	800275e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d107      	bne.n	800275e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f898 	bl	800288e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b20      	cmp	r3, #32
 800276a:	d10e      	bne.n	800278a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b20      	cmp	r3, #32
 8002778:	d107      	bne.n	800278a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f06f 0220 	mvn.w	r2, #32
 8002782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f92b 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002798:	d10f      	bne.n	80027ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a8:	d107      	bne.n	80027ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80027b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f931 	bl	8002a1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027c8:	d10f      	bne.n	80027ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d8:	d107      	bne.n	80027ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80027e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f923 	bl	8002a30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f8:	d10f      	bne.n	800281a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002808:	d107      	bne.n	800281a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f915 	bl	8002a44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002828:	d10f      	bne.n	800284a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002838:	d107      	bne.n	800284a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f907 	bl	8002a58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <TIM_Base_SetConfig+0x11c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d00f      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3f      	ldr	r2, [pc, #252]	; (80029c4 <TIM_Base_SetConfig+0x120>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <TIM_Base_SetConfig+0x124>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3d      	ldr	r2, [pc, #244]	; (80029cc <TIM_Base_SetConfig+0x128>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <TIM_Base_SetConfig+0x12c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <TIM_Base_SetConfig+0x11c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d01b      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <TIM_Base_SetConfig+0x120>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d017      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <TIM_Base_SetConfig+0x124>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <TIM_Base_SetConfig+0x128>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00f      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <TIM_Base_SetConfig+0x130>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00b      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <TIM_Base_SetConfig+0x134>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <TIM_Base_SetConfig+0x138>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d003      	beq.n	800293e <TIM_Base_SetConfig+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_Base_SetConfig+0x12c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d108      	bne.n	8002950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <TIM_Base_SetConfig+0x11c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <TIM_Base_SetConfig+0x100>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <TIM_Base_SetConfig+0x128>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00f      	beq.n	80029a4 <TIM_Base_SetConfig+0x100>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <TIM_Base_SetConfig+0x130>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00b      	beq.n	80029a4 <TIM_Base_SetConfig+0x100>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <TIM_Base_SetConfig+0x134>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x100>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <TIM_Base_SetConfig+0x138>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x100>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <TIM_Base_SetConfig+0x12c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40013400 	.word	0x40013400
 80029d0:	40015000 	.word	0x40015000
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7e:	2b84      	cmp	r3, #132	; 0x84
 8002a80:	d005      	beq.n	8002a8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3303      	adds	r3, #3
 8002a8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002aa0:	f001 fa18 	bl	8003ed4 <vTaskStartScheduler>
  
  return osOK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aac:	b089      	sub	sp, #36	; 0x24
 8002aae:	af04      	add	r7, sp, #16
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <osThreadCreate+0x54>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01c      	beq.n	8002afe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685c      	ldr	r4, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691e      	ldr	r6, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ffc8 	bl	8002a6c <makeFreeRtosPriority>
 8002adc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	9100      	str	r1, [sp, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4632      	mov	r2, r6
 8002af0:	4629      	mov	r1, r5
 8002af2:	4620      	mov	r0, r4
 8002af4:	f000 ffa4 	bl	8003a40 <xTaskCreateStatic>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e01c      	b.n	8002b38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685c      	ldr	r4, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b0a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ffaa 	bl	8002a6c <makeFreeRtosPriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	4632      	mov	r2, r6
 8002b26:	4629      	mov	r1, r5
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 ffe6 	bl	8003afa <xTaskCreate>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b38:	68fb      	ldr	r3, [r7, #12]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f103 0208 	add.w	r2, r3, #8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f103 0208 	add.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 0208 	add.w	r2, r3, #8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d103      	bne.n	8002c04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e00c      	b.n	8002c1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3308      	adds	r3, #8
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e002      	b.n	8002c12 <vListInsert+0x2e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d2f6      	bcs.n	8002c0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6852      	ldr	r2, [r2, #4]
 8002c76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d103      	bne.n	8002c8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericReset+0x2a>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	60bb      	str	r3, [r7, #8]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cd6:	f002 fbfd 	bl	80054d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	3b01      	subs	r3, #1
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	441a      	add	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d114      	bne.n	8002d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fb8d 	bl	8004458 <xTaskRemoveFromEventList>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <xQueueGenericReset+0xcc>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	e009      	b.n	8002d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3310      	adds	r3, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fef1 	bl	8002b42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feec 	bl	8002b42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f002 fbe3 	bl	8005534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <xQueueGenericCreateStatic+0x52>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <xQueueGenericCreateStatic+0x56>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <xQueueGenericCreateStatic+0x58>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	623b      	str	r3, [r7, #32]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <xQueueGenericCreateStatic+0x7e>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericCreateStatic+0x82>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericCreateStatic+0x84>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61fb      	str	r3, [r7, #28]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e1a:	2350      	movs	r3, #80	; 0x50
 8002e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d00a      	beq.n	8002e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	61bb      	str	r3, [r7, #24]
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f83f 	bl	8002ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	613b      	str	r3, [r7, #16]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3350      	adds	r3, #80	; 0x50
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 fc37 	bl	8005718 <pvPortMalloc>
 8002eaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3350      	adds	r3, #80	; 0x50
 8002eba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f805 	bl	8002ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e002      	b.n	8002f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f0e:	2101      	movs	r1, #1
 8002f10:	69b8      	ldr	r0, [r7, #24]
 8002f12:	f7ff fecb 	bl	8002cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f46:	2300      	movs	r3, #0
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f81d 	bl	8002f8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f64:	2301      	movs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6939      	ldr	r1, [r7, #16]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff7a 	bl	8002e6c <xQueueGenericCreate>
 8002f78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ffd3 	bl	8002f26 <prvInitialiseMutex>

		return xNewQueue;
 8002f80:	68fb      	ldr	r3, [r7, #12]
	}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericSend+0x32>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <xQueueGenericSend+0x40>
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <xQueueGenericSend+0x44>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <xQueueGenericSend+0x46>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <xQueueGenericSend+0x60>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d103      	bne.n	8002ffa <xQueueGenericSend+0x6e>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <xQueueGenericSend+0x72>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <xQueueGenericSend+0x74>
 8002ffe:	2300      	movs	r3, #0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <xQueueGenericSend+0x8e>
	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	623b      	str	r3, [r7, #32]
}
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800301a:	f001 fbdd 	bl	80047d8 <xTaskGetSchedulerState>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <xQueueGenericSend+0x9e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueGenericSend+0xa2>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericSend+0xa4>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xQueueGenericSend+0xbe>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	61fb      	str	r3, [r7, #28]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800304a:	f002 fa43 	bl	80054d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <xQueueGenericSend+0xd4>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d129      	bne.n	80030b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003066:	f000 fb52 	bl	800370e <prvCopyDataToQueue>
 800306a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f001 f9ed 	bl	8004458 <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <xQueueGenericSend+0x1f8>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	e00a      	b.n	80030ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <xQueueGenericSend+0x1f8>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030ac:	f002 fa42 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e063      	b.n	800317c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ba:	f002 fa3b 	bl	8005534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	e05c      	b.n	800317c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fa25 	bl	800451c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d2:	2301      	movs	r3, #1
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d6:	f002 fa2d 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030da:	f000 ff6d 	bl	8003fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030de:	f002 f9f9 	bl	80054d4 <vPortEnterCritical>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d103      	bne.n	80030f8 <xQueueGenericSend+0x16c>
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d103      	bne.n	800310e <xQueueGenericSend+0x182>
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310e:	f002 fa11 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003112:	1d3a      	adds	r2, r7, #4
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fa14 	bl	8004548 <xTaskCheckForTimeOut>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d124      	bne.n	8003170 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003128:	f000 fbe9 	bl	80038fe <prvIsQueueFull>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d018      	beq.n	8003164 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	3310      	adds	r3, #16
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f001 f93c 	bl	80043b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003142:	f000 fb74 	bl	800382e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003146:	f000 ff45 	bl	8003fd4 <xTaskResumeAll>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f af7c 	bne.w	800304a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <xQueueGenericSend+0x1f8>)
 8003154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	e772      	b.n	800304a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003166:	f000 fb62 	bl	800382e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800316a:	f000 ff33 	bl	8003fd4 <xTaskResumeAll>
 800316e:	e76c      	b.n	800304a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003172:	f000 fb5c 	bl	800382e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003176:	f000 ff2d 	bl	8003fd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800317a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800317c:	4618      	mov	r0, r3
 800317e:	3738      	adds	r7, #56	; 0x38
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b090      	sub	sp, #64	; 0x40
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <xQueueGenericSendFromISR+0x3c>
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueGenericSendFromISR+0x40>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueGenericSendFromISR+0x42>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d103      	bne.n	80031f2 <xQueueGenericSendFromISR+0x6a>
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <xQueueGenericSendFromISR+0x6e>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <xQueueGenericSendFromISR+0x70>
 80031f6:	2300      	movs	r3, #0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	623b      	str	r3, [r7, #32]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003212:	f002 fa41 	bl	8005698 <vPortValidateInterruptPriority>
	__asm volatile
 8003216:	f3ef 8211 	mrs	r2, BASEPRI
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	61fa      	str	r2, [r7, #28]
 800322c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800322e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <xQueueGenericSendFromISR+0xbc>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d12f      	bne.n	80032a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800324a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800325a:	f000 fa58 	bl	800370e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800325e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d112      	bne.n	800328e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f8ef 	bl	8004458 <xTaskRemoveFromEventList>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e007      	b.n	800329e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800328e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003292:	3301      	adds	r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	b25a      	sxtb	r2, r3
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800329e:	2301      	movs	r3, #1
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032a2:	e001      	b.n	80032a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	617b      	str	r3, [r7, #20]
	__asm volatile
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f383 8811 	msr	BASEPRI, r3
}
 80032b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3740      	adds	r7, #64	; 0x40
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <xQueueReceive+0x30>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	623b      	str	r3, [r7, #32]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <xQueueReceive+0x3e>
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <xQueueReceive+0x42>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueReceive+0x44>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <xQueueReceive+0x5e>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	61fb      	str	r3, [r7, #28]
}
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800331e:	f001 fa5b 	bl	80047d8 <xTaskGetSchedulerState>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <xQueueReceive+0x6e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <xQueueReceive+0x72>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueReceive+0x74>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueReceive+0x8e>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61bb      	str	r3, [r7, #24]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800334e:	f002 f8c1 	bl	80054d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01f      	beq.n	800339e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f000 fa3e 	bl	80037e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00f      	beq.n	8003396 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	3310      	adds	r3, #16
 800337a:	4618      	mov	r0, r3
 800337c:	f001 f86c 	bl	8004458 <xTaskRemoveFromEventList>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <xQueueReceive+0x1bc>)
 8003388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003396:	f002 f8cd 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 800339a:	2301      	movs	r3, #1
 800339c:	e069      	b.n	8003472 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033a4:	f002 f8c6 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e062      	b.n	8003472 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 f8b0 	bl	800451c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033bc:	2301      	movs	r3, #1
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033c0:	f002 f8b8 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033c4:	f000 fdf8 	bl	8003fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033c8:	f002 f884 	bl	80054d4 <vPortEnterCritical>
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d103      	bne.n	80033e2 <xQueueReceive+0x122>
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d103      	bne.n	80033f8 <xQueueReceive+0x138>
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033f8:	f002 f89c 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033fc:	1d3a      	adds	r2, r7, #4
 80033fe:	f107 0310 	add.w	r3, r7, #16
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f89f 	bl	8004548 <xTaskCheckForTimeOut>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d123      	bne.n	8003458 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003412:	f000 fa5e 	bl	80038d2 <prvIsQueueEmpty>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	3324      	adds	r3, #36	; 0x24
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 ffc7 	bl	80043b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800342a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342c:	f000 f9ff 	bl	800382e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003430:	f000 fdd0 	bl	8003fd4 <xTaskResumeAll>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d189      	bne.n	800334e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <xQueueReceive+0x1bc>)
 800343c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	e780      	b.n	800334e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800344c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344e:	f000 f9ee 	bl	800382e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003452:	f000 fdbf 	bl	8003fd4 <xTaskResumeAll>
 8003456:	e77a      	b.n	800334e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800345a:	f000 f9e8 	bl	800382e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800345e:	f000 fdb9 	bl	8003fd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003464:	f000 fa35 	bl	80038d2 <prvIsQueueEmpty>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	f43f af6f 	beq.w	800334e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003472:	4618      	mov	r0, r3
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61fb      	str	r3, [r7, #28]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d0:	f001 f982 	bl	80047d8 <xTaskGetSchedulerState>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <xQueueSemaphoreTake+0x60>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <xQueueSemaphoreTake+0x64>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <xQueueSemaphoreTake+0x66>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	61bb      	str	r3, [r7, #24]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003500:	f001 ffe8 	bl	80054d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d024      	beq.n	800355a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003520:	f001 fb02 	bl	8004b28 <pvTaskIncrementMutexHeldCount>
 8003524:	4602      	mov	r2, r0
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00f      	beq.n	8003552 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	3310      	adds	r3, #16
 8003536:	4618      	mov	r0, r3
 8003538:	f000 ff8e 	bl	8004458 <xTaskRemoveFromEventList>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <xQueueSemaphoreTake+0x214>)
 8003544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003552:	f001 ffef 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 8003556:	2301      	movs	r3, #1
 8003558:	e097      	b.n	800368a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	617b      	str	r3, [r7, #20]
}
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800357c:	f001 ffda 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003580:	2300      	movs	r3, #0
 8003582:	e082      	b.n	800368a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4618      	mov	r0, r3
 8003590:	f000 ffc4 	bl	800451c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003598:	f001 ffcc 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359c:	f000 fd0c 	bl	8003fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035a0:	f001 ff98 	bl	80054d4 <vPortEnterCritical>
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d103      	bne.n	80035ba <xQueueSemaphoreTake+0x13a>
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d103      	bne.n	80035d0 <xQueueSemaphoreTake+0x150>
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d0:	f001 ffb0 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d4:	463a      	mov	r2, r7
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 ffb3 	bl	8004548 <xTaskCheckForTimeOut>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d132      	bne.n	800364e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ea:	f000 f972 	bl	80038d2 <prvIsQueueEmpty>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d026      	beq.n	8003642 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035fc:	f001 ff6a 	bl	80054d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f905 	bl	8004814 <xTaskPriorityInherit>
 800360a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800360c:	f001 ff92 	bl	8005534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	3324      	adds	r3, #36	; 0x24
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fecd 	bl	80043b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800361e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003620:	f000 f905 	bl	800382e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003624:	f000 fcd6 	bl	8003fd4 <xTaskResumeAll>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	f47f af68 	bne.w	8003500 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <xQueueSemaphoreTake+0x214>)
 8003632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	e75e      	b.n	8003500 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003644:	f000 f8f3 	bl	800382e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003648:	f000 fcc4 	bl	8003fd4 <xTaskResumeAll>
 800364c:	e758      	b.n	8003500 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800364e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003650:	f000 f8ed 	bl	800382e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003654:	f000 fcbe 	bl	8003fd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800365a:	f000 f93a 	bl	80038d2 <prvIsQueueEmpty>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f43f af4d 	beq.w	8003500 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800366c:	f001 ff32 	bl	80054d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003672:	f000 f834 	bl	80036de <prvGetDisinheritPriorityAfterTimeout>
 8003676:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367e:	4618      	mov	r0, r3
 8003680:	f001 f9c4 	bl	8004a0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003684:	f001 ff56 	bl	8005534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800368a:	4618      	mov	r0, r3
 800368c:	3738      	adds	r7, #56	; 0x38
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <vQueueDelete+0x28>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60bb      	str	r3, [r7, #8]
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f95f 	bl	8003984 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f002 f8ed 	bl	80058b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1c3 0312 	rsb	r3, r3, #18
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e001      	b.n	8003700 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003700:	68fb      	ldr	r3, [r7, #12]
	}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d14d      	bne.n	80037d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 f8e1 	bl	8004900 <xTaskPriorityDisinherit>
 800373e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	e043      	b.n	80037d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6858      	ldr	r0, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	461a      	mov	r2, r3
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	f003 f895 	bl	8006888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	441a      	add	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d32b      	bcc.n	80037d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	e026      	b.n	80037d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68d8      	ldr	r0, [r3, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	461a      	mov	r2, r3
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	f003 f87b 	bl	8006888 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	425b      	negs	r3, r3
 800379c:	441a      	add	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d207      	bcs.n	80037be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	425b      	negs	r3, r3
 80037b8:	441a      	add	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d105      	bne.n	80037d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037d8:	697b      	ldr	r3, [r7, #20]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d018      	beq.n	8003826 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d303      	bcc.n	8003816 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68d9      	ldr	r1, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	461a      	mov	r2, r3
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	f003 f831 	bl	8006888 <memcpy>
	}
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003836:	f001 fe4d 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003840:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003842:	e011      	b.n	8003868 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d012      	beq.n	8003872 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3324      	adds	r3, #36	; 0x24
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fe01 	bl	8004458 <xTaskRemoveFromEventList>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800385c:	f000 fed6 	bl	800460c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	3b01      	subs	r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	dce9      	bgt.n	8003844 <prvUnlockQueue+0x16>
 8003870:	e000      	b.n	8003874 <prvUnlockQueue+0x46>
					break;
 8003872:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800387c:	f001 fe5a 	bl	8005534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003880:	f001 fe28 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800388a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800388c:	e011      	b.n	80038b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d012      	beq.n	80038bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3310      	adds	r3, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fddc 	bl	8004458 <xTaskRemoveFromEventList>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038a6:	f000 feb1 	bl	800460c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	dce9      	bgt.n	800388e <prvUnlockQueue+0x60>
 80038ba:	e000      	b.n	80038be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038c6:	f001 fe35 	bl	8005534 <vPortExitCritical>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038da:	f001 fdfb 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e001      	b.n	80038f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038f0:	f001 fe20 	bl	8005534 <vPortExitCritical>

	return xReturn;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003906:	f001 fde5 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	429a      	cmp	r2, r3
 8003914:	d102      	bne.n	800391c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e001      	b.n	8003920 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003920:	f001 fe08 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e014      	b.n	800396a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003940:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <vQueueAddToRegistry+0x50>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800394c:	490c      	ldr	r1, [pc, #48]	; (8003980 <vQueueAddToRegistry+0x50>)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <vQueueAddToRegistry+0x50>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003962:	e006      	b.n	8003972 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3301      	adds	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b07      	cmp	r3, #7
 800396e:	d9e7      	bls.n	8003940 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000850 	.word	0x20000850

08003984 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e016      	b.n	80039c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <vQueueUnregisterQueue+0x50>)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10b      	bne.n	80039ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <vQueueUnregisterQueue+0x50>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2100      	movs	r1, #0
 80039a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <vQueueUnregisterQueue+0x50>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	2200      	movs	r2, #0
 80039b6:	605a      	str	r2, [r3, #4]
				break;
 80039b8:	e006      	b.n	80039c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	d9e5      	bls.n	8003992 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20000850 	.word	0x20000850

080039d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039e8:	f001 fd74 	bl	80054d4 <vPortEnterCritical>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d103      	bne.n	8003a02 <vQueueWaitForMessageRestricted+0x2a>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d103      	bne.n	8003a18 <vQueueWaitForMessageRestricted+0x40>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a18:	f001 fd8c 	bl	8005534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3324      	adds	r3, #36	; 0x24
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fce7 	bl	8004400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f7ff fefb 	bl	800382e <prvUnlockQueue>
	}
 8003a38:	bf00      	nop
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08e      	sub	sp, #56	; 0x38
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61fb      	str	r3, [r7, #28]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a86:	23ac      	movs	r3, #172	; 0xac
 8003a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2bac      	cmp	r3, #172	; 0xac
 8003a8e:	d00a      	beq.n	8003aa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	61bb      	str	r3, [r7, #24]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003aa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01e      	beq.n	8003aec <xTaskCreateStatic+0xac>
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01b      	beq.n	8003aec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9303      	str	r3, [sp, #12]
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	9302      	str	r3, [sp, #8]
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f850 	bl	8003b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ae6:	f000 f8f7 	bl	8003cd8 <prvAddNewTaskToReadyList>
 8003aea:	e001      	b.n	8003af0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003af0:	697b      	ldr	r3, [r7, #20]
	}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08c      	sub	sp, #48	; 0x30
 8003afe:	af04      	add	r7, sp, #16
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fe02 	bl	8005718 <pvPortMalloc>
 8003b14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1c:	20ac      	movs	r0, #172	; 0xac
 8003b1e:	f001 fdfb 	bl	8005718 <pvPortMalloc>
 8003b22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b30:	e005      	b.n	8003b3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b32:	6978      	ldr	r0, [r7, #20]
 8003b34:	f001 febc 	bl	80058b0 <vPortFree>
 8003b38:	e001      	b.n	8003b3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	9302      	str	r3, [sp, #8]
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f80e 	bl	8003b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b68:	69f8      	ldr	r0, [r7, #28]
 8003b6a:	f000 f8b5 	bl	8003cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e002      	b.n	8003b7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
 8003b78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	21a5      	movs	r1, #165	; 0xa5
 8003b9e:	f002 fd81 	bl	80066a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bac:	3b01      	subs	r3, #1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	617b      	str	r3, [r7, #20]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01f      	beq.n	8003c22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e012      	b.n	8003c0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	7819      	ldrb	r1, [r3, #0]
 8003bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3334      	adds	r3, #52	; 0x34
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d006      	beq.n	8003c16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b0f      	cmp	r3, #15
 8003c12:	d9e9      	bls.n	8003be8 <prvInitialiseNewTask+0x64>
 8003c14:	e000      	b.n	8003c18 <prvInitialiseNewTask+0x94>
			{
				break;
 8003c16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c20:	e003      	b.n	8003c2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	2b11      	cmp	r3, #17
 8003c2e:	d901      	bls.n	8003c34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c30:	2311      	movs	r3, #17
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	2200      	movs	r2, #0
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe ff99 	bl	8002b82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	3318      	adds	r3, #24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe ff94 	bl	8002b82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	f1c3 0212 	rsb	r2, r3, #18
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	3358      	adds	r3, #88	; 0x58
 8003c8a:	224c      	movs	r2, #76	; 0x4c
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fd08 	bl	80066a4 <memset>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <prvInitialiseNewTask+0x148>)
 8003c98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <prvInitialiseNewTask+0x14c>)
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <prvInitialiseNewTask+0x150>)
 8003ca4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f001 fae8 	bl	8005280 <pxPortInitialiseStack>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cc2:	bf00      	nop
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000929c 	.word	0x2000929c
 8003cd0:	20009304 	.word	0x20009304
 8003cd4:	2000936c 	.word	0x2000936c

08003cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ce0:	f001 fbf8 	bl	80054d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ce4:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <prvAddNewTaskToReadyList+0xc0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <prvAddNewTaskToReadyList+0xc0>)
 8003cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cee:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cf6:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cfc:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <prvAddNewTaskToReadyList+0xc0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d110      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d04:	f000 fca6 	bl	8004654 <prvInitialiseTaskLists>
 8003d08:	e00d      	b.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d0a:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d12:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d802      	bhi.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d20:	4a1e      	ldr	r2, [pc, #120]	; (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d30:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4a15      	ldr	r2, [pc, #84]	; (8003dac <prvAddNewTaskToReadyList+0xd4>)
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f7fe ff1b 	bl	8002b9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d66:	f001 fbe5 	bl	8005534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00e      	beq.n	8003d90 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d207      	bcs.n	8003d90 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <prvAddNewTaskToReadyList+0xd8>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000a6c 	.word	0x20000a6c
 8003d9c:	20000890 	.word	0x20000890
 8003da0:	20000a78 	.word	0x20000a78
 8003da4:	20000a88 	.word	0x20000a88
 8003da8:	20000a74 	.word	0x20000a74
 8003dac:	20000894 	.word	0x20000894
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003dbc:	f001 fb8a 	bl	80054d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <vTaskDelete+0x18>
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <vTaskDelete+0xf8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e000      	b.n	8003dce <vTaskDelete+0x1a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe ff3e 	bl	8002c56 <uxListRemove>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d115      	bne.n	8003e0c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4932      	ldr	r1, [pc, #200]	; (8003eb0 <vTaskDelete+0xfc>)
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <vTaskDelete+0x58>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43da      	mvns	r2, r3
 8003e02:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <vTaskDelete+0x100>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4013      	ands	r3, r2
 8003e08:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <vTaskDelete+0x100>)
 8003e0a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe ff1c 	bl	8002c56 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003e1e:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <vTaskDelete+0x104>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <vTaskDelete+0x104>)
 8003e26:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <vTaskDelete+0xf8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d10b      	bne.n	8003e4a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4820      	ldr	r0, [pc, #128]	; (8003ebc <vTaskDelete+0x108>)
 8003e3a:	f7fe feaf 	bl	8002b9c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <vTaskDelete+0x10c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <vTaskDelete+0x10c>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e009      	b.n	8003e5e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <vTaskDelete+0x110>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <vTaskDelete+0x110>)
 8003e52:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fc6b 	bl	8004730 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003e5a:	f000 fc9d 	bl	8004798 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003e5e:	f001 fb69 	bl	8005534 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003e62:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <vTaskDelete+0x114>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01b      	beq.n	8003ea2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <vTaskDelete+0xf8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d116      	bne.n	8003ea2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <vTaskDelete+0x118>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <vTaskDelete+0xde>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60bb      	str	r3, [r7, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <vTaskDelete+0x11c>)
 8003e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000890 	.word	0x20000890
 8003eb0:	20000894 	.word	0x20000894
 8003eb4:	20000a74 	.word	0x20000a74
 8003eb8:	20000a88 	.word	0x20000a88
 8003ebc:	20000a40 	.word	0x20000a40
 8003ec0:	20000a54 	.word	0x20000a54
 8003ec4:	20000a6c 	.word	0x20000a6c
 8003ec8:	20000a78 	.word	0x20000a78
 8003ecc:	20000a94 	.word	0x20000a94
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ee2:	463a      	mov	r2, r7
 8003ee4:	1d39      	adds	r1, r7, #4
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc fa02 	bl	80002f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	9202      	str	r2, [sp, #8]
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	460a      	mov	r2, r1
 8003f02:	4925      	ldr	r1, [pc, #148]	; (8003f98 <vTaskStartScheduler+0xc4>)
 8003f04:	4825      	ldr	r0, [pc, #148]	; (8003f9c <vTaskStartScheduler+0xc8>)
 8003f06:	f7ff fd9b 	bl	8003a40 <xTaskCreateStatic>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <vTaskStartScheduler+0xcc>)
 8003f0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <vTaskStartScheduler+0xcc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e001      	b.n	8003f22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f28:	f000 fe78 	bl	8004c1c <xTimerCreateTimerTask>
 8003f2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d11d      	bne.n	8003f70 <vTaskStartScheduler+0x9c>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
}
 8003f46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <vTaskStartScheduler+0xd0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3358      	adds	r3, #88	; 0x58
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <vTaskStartScheduler+0xd4>)
 8003f50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <vTaskStartScheduler+0xd8>)
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <vTaskStartScheduler+0xdc>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <vTaskStartScheduler+0xe0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003f66:	f7fc f9ab 	bl	80002c0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f6a:	f001 fa11 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f6e:	e00e      	b.n	8003f8e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d10a      	bne.n	8003f8e <vTaskStartScheduler+0xba>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60fb      	str	r3, [r7, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <vTaskStartScheduler+0xb8>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	080072ac 	.word	0x080072ac
 8003f9c:	08004625 	.word	0x08004625
 8003fa0:	20000a90 	.word	0x20000a90
 8003fa4:	20000890 	.word	0x20000890
 8003fa8:	20000068 	.word	0x20000068
 8003fac:	20000a8c 	.word	0x20000a8c
 8003fb0:	20000a78 	.word	0x20000a78
 8003fb4:	20000a70 	.word	0x20000a70

08003fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <vTaskSuspendAll+0x18>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <vTaskSuspendAll+0x18>)
 8003fc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000a94 	.word	0x20000a94

08003fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fe2:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <xTaskResumeAll+0x114>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004000:	f001 fa68 	bl	80054d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004004:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <xTaskResumeAll+0x114>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <xTaskResumeAll+0x114>)
 800400c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <xTaskResumeAll+0x114>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d161      	bne.n	80040da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004016:	4b35      	ldr	r3, [pc, #212]	; (80040ec <xTaskResumeAll+0x118>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d05d      	beq.n	80040da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800401e:	e02e      	b.n	800407e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <xTaskResumeAll+0x11c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3318      	adds	r3, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fe12 	bl	8002c56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fe0d 	bl	8002c56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <xTaskResumeAll+0x120>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <xTaskResumeAll+0x120>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <xTaskResumeAll+0x124>)
 800405c:	441a      	add	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7fe fd99 	bl	8002b9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <xTaskResumeAll+0x128>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <xTaskResumeAll+0x12c>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800407e:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <xTaskResumeAll+0x11c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1cc      	bne.n	8004020 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800408c:	f000 fb84 	bl	8004798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004090:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <xTaskResumeAll+0x130>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800409c:	f000 f846 	bl	800412c <xTaskIncrementTick>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <xTaskResumeAll+0x12c>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f1      	bne.n	800409c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <xTaskResumeAll+0x130>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <xTaskResumeAll+0x12c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <xTaskResumeAll+0x134>)
 80040cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040da:	f001 fa2b 	bl	8005534 <vPortExitCritical>

	return xAlreadyYielded;
 80040de:	68bb      	ldr	r3, [r7, #8]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000a94 	.word	0x20000a94
 80040ec:	20000a6c 	.word	0x20000a6c
 80040f0:	20000a2c 	.word	0x20000a2c
 80040f4:	20000a74 	.word	0x20000a74
 80040f8:	20000894 	.word	0x20000894
 80040fc:	20000890 	.word	0x20000890
 8004100:	20000a80 	.word	0x20000a80
 8004104:	20000a7c 	.word	0x20000a7c
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <xTaskGetTickCount+0x1c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004118:	687b      	ldr	r3, [r7, #4]
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000a70 	.word	0x20000a70

0800412c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004136:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <xTaskIncrementTick+0x144>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 808e 	bne.w	800425c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004140:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <xTaskIncrementTick+0x148>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004148:	4a4a      	ldr	r2, [pc, #296]	; (8004274 <xTaskIncrementTick+0x148>)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d120      	bne.n	8004196 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004154:	4b48      	ldr	r3, [pc, #288]	; (8004278 <xTaskIncrementTick+0x14c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <xTaskIncrementTick+0x48>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	603b      	str	r3, [r7, #0]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <xTaskIncrementTick+0x46>
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <xTaskIncrementTick+0x14c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	4b40      	ldr	r3, [pc, #256]	; (800427c <xTaskIncrementTick+0x150>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3e      	ldr	r2, [pc, #248]	; (8004278 <xTaskIncrementTick+0x14c>)
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4a3e      	ldr	r2, [pc, #248]	; (800427c <xTaskIncrementTick+0x150>)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	4b3d      	ldr	r3, [pc, #244]	; (8004280 <xTaskIncrementTick+0x154>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	4a3c      	ldr	r2, [pc, #240]	; (8004280 <xTaskIncrementTick+0x154>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	f000 fb01 	bl	8004798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <xTaskIncrementTick+0x158>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d348      	bcc.n	8004232 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a0:	4b35      	ldr	r3, [pc, #212]	; (8004278 <xTaskIncrementTick+0x14c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d104      	bne.n	80041b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <xTaskIncrementTick+0x158>)
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	601a      	str	r2, [r3, #0]
					break;
 80041b2:	e03e      	b.n	8004232 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <xTaskIncrementTick+0x14c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d203      	bcs.n	80041d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <xTaskIncrementTick+0x158>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041d2:	e02e      	b.n	8004232 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fd3c 	bl	8002c56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3318      	adds	r3, #24
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fd33 	bl	8002c56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	2201      	movs	r2, #1
 80041f6:	409a      	lsls	r2, r3
 80041f8:	4b23      	ldr	r3, [pc, #140]	; (8004288 <xTaskIncrementTick+0x15c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	4a22      	ldr	r2, [pc, #136]	; (8004288 <xTaskIncrementTick+0x15c>)
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4a1f      	ldr	r2, [pc, #124]	; (800428c <xTaskIncrementTick+0x160>)
 8004210:	441a      	add	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f7fe fcbf 	bl	8002b9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <xTaskIncrementTick+0x164>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	429a      	cmp	r2, r3
 800422a:	d3b9      	bcc.n	80041a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004230:	e7b6      	b.n	80041a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004232:	4b17      	ldr	r3, [pc, #92]	; (8004290 <xTaskIncrementTick+0x164>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	4914      	ldr	r1, [pc, #80]	; (800428c <xTaskIncrementTick+0x160>)
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d901      	bls.n	800424e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <xTaskIncrementTick+0x168>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e004      	b.n	8004266 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <xTaskIncrementTick+0x16c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <xTaskIncrementTick+0x16c>)
 8004264:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004266:	697b      	ldr	r3, [r7, #20]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000a94 	.word	0x20000a94
 8004274:	20000a70 	.word	0x20000a70
 8004278:	20000a24 	.word	0x20000a24
 800427c:	20000a28 	.word	0x20000a28
 8004280:	20000a84 	.word	0x20000a84
 8004284:	20000a8c 	.word	0x20000a8c
 8004288:	20000a74 	.word	0x20000a74
 800428c:	20000894 	.word	0x20000894
 8004290:	20000890 	.word	0x20000890
 8004294:	20000a80 	.word	0x20000a80
 8004298:	20000a7c 	.word	0x20000a7c

0800429c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <vTaskSwitchContext+0xfc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042aa:	4b3c      	ldr	r3, [pc, #240]	; (800439c <vTaskSwitchContext+0x100>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042b0:	e06e      	b.n	8004390 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 80042b2:	4b3a      	ldr	r3, [pc, #232]	; (800439c <vTaskSwitchContext+0x100>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80042b8:	f7fc f809 	bl	80002ce <getRunTimeCounterValue>
 80042bc:	4603      	mov	r3, r0
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <vTaskSwitchContext+0x104>)
 80042c0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <vTaskSwitchContext+0x104>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <vTaskSwitchContext+0x108>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d909      	bls.n	80042e2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80042ce:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <vTaskSwitchContext+0x10c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042d4:	4a32      	ldr	r2, [pc, #200]	; (80043a0 <vTaskSwitchContext+0x104>)
 80042d6:	6810      	ldr	r0, [r2, #0]
 80042d8:	4a32      	ldr	r2, [pc, #200]	; (80043a4 <vTaskSwitchContext+0x108>)
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	1a82      	subs	r2, r0, r2
 80042de:	440a      	add	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <vTaskSwitchContext+0x104>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <vTaskSwitchContext+0x108>)
 80042e8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80042ea:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <vTaskSwitchContext+0x10c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <vTaskSwitchContext+0x10c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d808      	bhi.n	800430c <vTaskSwitchContext+0x70>
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <vTaskSwitchContext+0x10c>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <vTaskSwitchContext+0x10c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3334      	adds	r3, #52	; 0x34
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fb ffe9 	bl	80002de <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <vTaskSwitchContext+0x110>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	f1c3 031f 	rsb	r3, r3, #31
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	4923      	ldr	r1, [pc, #140]	; (80043b0 <vTaskSwitchContext+0x114>)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <vTaskSwitchContext+0xb0>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	607b      	str	r3, [r7, #4]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <vTaskSwitchContext+0xae>
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <vTaskSwitchContext+0x114>)
 8004358:	4413      	add	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3308      	adds	r3, #8
 800436e:	429a      	cmp	r2, r3
 8004370:	d104      	bne.n	800437c <vTaskSwitchContext+0xe0>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <vTaskSwitchContext+0x10c>)
 8004384:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <vTaskSwitchContext+0x10c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3358      	adds	r3, #88	; 0x58
 800438c:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <vTaskSwitchContext+0x118>)
 800438e:	6013      	str	r3, [r2, #0]
}
 8004390:	bf00      	nop
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000a94 	.word	0x20000a94
 800439c:	20000a80 	.word	0x20000a80
 80043a0:	20000a9c 	.word	0x20000a9c
 80043a4:	20000a98 	.word	0x20000a98
 80043a8:	20000890 	.word	0x20000890
 80043ac:	20000a74 	.word	0x20000a74
 80043b0:	20000894 	.word	0x20000894
 80043b4:	20000068 	.word	0x20000068

080043b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	60fb      	str	r3, [r7, #12]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <vTaskPlaceOnEventList+0x44>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3318      	adds	r3, #24
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fe fbfc 	bl	8002be4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043ec:	2101      	movs	r1, #1
 80043ee:	6838      	ldr	r0, [r7, #0]
 80043f0:	f000 fbae 	bl	8004b50 <prvAddCurrentTaskToDelayedList>
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000890 	.word	0x20000890

08004400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	617b      	str	r3, [r7, #20]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <vTaskPlaceOnEventListRestricted+0x54>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3318      	adds	r3, #24
 800442e:	4619      	mov	r1, r3
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7fe fbb3 	bl	8002b9c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	68b8      	ldr	r0, [r7, #8]
 8004446:	f000 fb83 	bl	8004b50 <prvAddCurrentTaskToDelayedList>
	}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000890 	.word	0x20000890

08004458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	60fb      	str	r3, [r7, #12]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	3318      	adds	r3, #24
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fbe4 	bl	8002c56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <xTaskRemoveFromEventList+0xac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11c      	bne.n	80044d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fbdb 	bl	8002c56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2201      	movs	r2, #1
 80044a6:	409a      	lsls	r2, r3
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <xTaskRemoveFromEventList+0xb0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	4a16      	ldr	r2, [pc, #88]	; (8004508 <xTaskRemoveFromEventList+0xb0>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <xTaskRemoveFromEventList+0xb4>)
 80044c0:	441a      	add	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7fe fb67 	bl	8002b9c <vListInsertEnd>
 80044ce:	e005      	b.n	80044dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	3318      	adds	r3, #24
 80044d4:	4619      	mov	r1, r3
 80044d6:	480e      	ldr	r0, [pc, #56]	; (8004510 <xTaskRemoveFromEventList+0xb8>)
 80044d8:	f7fe fb60 	bl	8002b9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <xTaskRemoveFromEventList+0xbc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d905      	bls.n	80044f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <xTaskRemoveFromEventList+0xc0>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e001      	b.n	80044fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000a94 	.word	0x20000a94
 8004508:	20000a74 	.word	0x20000a74
 800450c:	20000894 	.word	0x20000894
 8004510:	20000a2c 	.word	0x20000a2c
 8004514:	20000890 	.word	0x20000890
 8004518:	20000a80 	.word	0x20000a80

0800451c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <vTaskInternalSetTimeOutState+0x24>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <vTaskInternalSetTimeOutState+0x28>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000a84 	.word	0x20000a84
 8004544:	20000a70 	.word	0x20000a70

08004548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	613b      	str	r3, [r7, #16]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800458a:	f000 ffa3 	bl	80054d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <xTaskCheckForTimeOut+0xbc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d102      	bne.n	80045ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
 80045ac:	e023      	b.n	80045f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <xTaskCheckForTimeOut+0xc0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d007      	beq.n	80045ca <xTaskCheckForTimeOut+0x82>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e015      	b.n	80045f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d20b      	bcs.n	80045ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff9b 	bl	800451c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e004      	b.n	80045f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045f6:	f000 ff9d 	bl	8005534 <vPortExitCritical>

	return xReturn;
 80045fa:	69fb      	ldr	r3, [r7, #28]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000a70 	.word	0x20000a70
 8004608:	20000a84 	.word	0x20000a84

0800460c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <vTaskMissedYield+0x14>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000a80 	.word	0x20000a80

08004624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800462c:	f000 f852 	bl	80046d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <prvIdleTask+0x28>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d9f9      	bls.n	800462c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <prvIdleTask+0x2c>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004648:	e7f0      	b.n	800462c <prvIdleTask+0x8>
 800464a:	bf00      	nop
 800464c:	20000894 	.word	0x20000894
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	e00c      	b.n	800467a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <prvInitialiseTaskLists+0x60>)
 800466c:	4413      	add	r3, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fa67 	bl	8002b42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3301      	adds	r3, #1
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b11      	cmp	r3, #17
 800467e:	d9ef      	bls.n	8004660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004680:	480d      	ldr	r0, [pc, #52]	; (80046b8 <prvInitialiseTaskLists+0x64>)
 8004682:	f7fe fa5e 	bl	8002b42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004686:	480d      	ldr	r0, [pc, #52]	; (80046bc <prvInitialiseTaskLists+0x68>)
 8004688:	f7fe fa5b 	bl	8002b42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800468c:	480c      	ldr	r0, [pc, #48]	; (80046c0 <prvInitialiseTaskLists+0x6c>)
 800468e:	f7fe fa58 	bl	8002b42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004692:	480c      	ldr	r0, [pc, #48]	; (80046c4 <prvInitialiseTaskLists+0x70>)
 8004694:	f7fe fa55 	bl	8002b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004698:	480b      	ldr	r0, [pc, #44]	; (80046c8 <prvInitialiseTaskLists+0x74>)
 800469a:	f7fe fa52 	bl	8002b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <prvInitialiseTaskLists+0x78>)
 80046a0:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <prvInitialiseTaskLists+0x64>)
 80046a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <prvInitialiseTaskLists+0x7c>)
 80046a6:	4a05      	ldr	r2, [pc, #20]	; (80046bc <prvInitialiseTaskLists+0x68>)
 80046a8:	601a      	str	r2, [r3, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000894 	.word	0x20000894
 80046b8:	200009fc 	.word	0x200009fc
 80046bc:	20000a10 	.word	0x20000a10
 80046c0:	20000a2c 	.word	0x20000a2c
 80046c4:	20000a40 	.word	0x20000a40
 80046c8:	20000a58 	.word	0x20000a58
 80046cc:	20000a24 	.word	0x20000a24
 80046d0:	20000a28 	.word	0x20000a28

080046d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046da:	e019      	b.n	8004710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046dc:	f000 fefa 	bl	80054d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e0:	4b10      	ldr	r3, [pc, #64]	; (8004724 <prvCheckTasksWaitingTermination+0x50>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fab2 	bl	8002c56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <prvCheckTasksWaitingTermination+0x54>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <prvCheckTasksWaitingTermination+0x54>)
 80046fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <prvCheckTasksWaitingTermination+0x58>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3b01      	subs	r3, #1
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <prvCheckTasksWaitingTermination+0x58>)
 8004704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004706:	f000 ff15 	bl	8005534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f810 	bl	8004730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <prvCheckTasksWaitingTermination+0x58>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e1      	bne.n	80046dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000a40 	.word	0x20000a40
 8004728:	20000a6c 	.word	0x20000a6c
 800472c:	20000a54 	.word	0x20000a54

08004730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3358      	adds	r3, #88	; 0x58
 800473c:	4618      	mov	r0, r3
 800473e:	f001 ffdd 	bl	80066fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f8ad 	bl	80058b0 <vPortFree>
				vPortFree( pxTCB );
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f001 f8aa 	bl	80058b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800475c:	e018      	b.n	8004790 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004764:	2b01      	cmp	r3, #1
 8004766:	d103      	bne.n	8004770 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 f8a1 	bl	80058b0 <vPortFree>
	}
 800476e:	e00f      	b.n	8004790 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004776:	2b02      	cmp	r3, #2
 8004778:	d00a      	beq.n	8004790 <prvDeleteTCB+0x60>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60fb      	str	r3, [r7, #12]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <prvDeleteTCB+0x5e>
	}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <prvResetNextTaskUnblockTime+0x38>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <prvResetNextTaskUnblockTime+0x3c>)
 80047aa:	f04f 32ff 	mov.w	r2, #4294967295
 80047ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047b0:	e008      	b.n	80047c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <prvResetNextTaskUnblockTime+0x38>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <prvResetNextTaskUnblockTime+0x3c>)
 80047c2:	6013      	str	r3, [r2, #0]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000a24 	.word	0x20000a24
 80047d4:	20000a8c 	.word	0x20000a8c

080047d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <xTaskGetSchedulerState+0x34>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047e6:	2301      	movs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	e008      	b.n	80047fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <xTaskGetSchedulerState+0x38>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047f4:	2302      	movs	r3, #2
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e001      	b.n	80047fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047fe:	687b      	ldr	r3, [r7, #4]
	}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	20000a78 	.word	0x20000a78
 8004810:	20000a94 	.word	0x20000a94

08004814 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d05e      	beq.n	80048e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <xTaskPriorityInherit+0xe0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	429a      	cmp	r2, r3
 8004836:	d24e      	bcs.n	80048d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	db06      	blt.n	800484e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004840:	4b2c      	ldr	r3, [pc, #176]	; (80048f4 <xTaskPriorityInherit+0xe0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	f1c3 0212 	rsb	r2, r3, #18
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6959      	ldr	r1, [r3, #20]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <xTaskPriorityInherit+0xe4>)
 8004860:	4413      	add	r3, r2
 8004862:	4299      	cmp	r1, r3
 8004864:	d12f      	bne.n	80048c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3304      	adds	r3, #4
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe f9f3 	bl	8002c56 <uxListRemove>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	2201      	movs	r2, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43da      	mvns	r2, r3
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <xTaskPriorityInherit+0xe8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4013      	ands	r3, r2
 8004888:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <xTaskPriorityInherit+0xe8>)
 800488a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <xTaskPriorityInherit+0xe0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	2201      	movs	r2, #1
 800489c:	409a      	lsls	r2, r3
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <xTaskPriorityInherit+0xe8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <xTaskPriorityInherit+0xe8>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <xTaskPriorityInherit+0xe4>)
 80048b6:	441a      	add	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe f96c 	bl	8002b9c <vListInsertEnd>
 80048c4:	e004      	b.n	80048d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <xTaskPriorityInherit+0xe0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e008      	b.n	80048e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <xTaskPriorityInherit+0xe0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d201      	bcs.n	80048e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048e8:	68fb      	ldr	r3, [r7, #12]
	}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000890 	.word	0x20000890
 80048f8:	20000894 	.word	0x20000894
 80048fc:	20000a74 	.word	0x20000a74

08004900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d06e      	beq.n	80049f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004916:	4b3a      	ldr	r3, [pc, #232]	; (8004a00 <xTaskPriorityDisinherit+0x100>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d00a      	beq.n	8004936 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60fb      	str	r3, [r7, #12]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60bb      	str	r3, [r7, #8]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	1e5a      	subs	r2, r3, #1
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	429a      	cmp	r2, r3
 8004968:	d044      	beq.n	80049f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496e:	2b00      	cmp	r3, #0
 8004970:	d140      	bne.n	80049f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3304      	adds	r3, #4
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe f96d 	bl	8002c56 <uxListRemove>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d115      	bne.n	80049ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004986:	491f      	ldr	r1, [pc, #124]	; (8004a04 <xTaskPriorityDisinherit+0x104>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xTaskPriorityDisinherit+0xae>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2201      	movs	r2, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43da      	mvns	r2, r3
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <xTaskPriorityDisinherit+0x108>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4013      	ands	r3, r2
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <xTaskPriorityDisinherit+0x108>)
 80049ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	f1c3 0212 	rsb	r2, r3, #18
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	2201      	movs	r2, #1
 80049c8:	409a      	lsls	r2, r3
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <xTaskPriorityDisinherit+0x108>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <xTaskPriorityDisinherit+0x108>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <xTaskPriorityDisinherit+0x104>)
 80049e2:	441a      	add	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fe f8d6 	bl	8002b9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049f0:	2301      	movs	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049f4:	697b      	ldr	r3, [r7, #20]
	}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000890 	.word	0x20000890
 8004a04:	20000894 	.word	0x20000894
 8004a08:	20000a74 	.word	0x20000a74

08004a0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d077      	beq.n	8004b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60fb      	str	r3, [r7, #12]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d902      	bls.n	8004a52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	e002      	b.n	8004a58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d058      	beq.n	8004b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d153      	bne.n	8004b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004a6c:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d10a      	bne.n	8004a8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	60bb      	str	r3, [r7, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	db04      	blt.n	8004aaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f1c3 0212 	rsb	r2, r3, #18
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6959      	ldr	r1, [r3, #20]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004aba:	4413      	add	r3, r2
 8004abc:	4299      	cmp	r1, r3
 8004abe:	d129      	bne.n	8004b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe f8c6 	bl	8002c56 <uxListRemove>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	4a10      	ldr	r2, [pc, #64]	; (8004b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ae4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	2201      	movs	r2, #1
 8004aec:	409a      	lsls	r2, r3
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b06:	441a      	add	r2, r3
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe f844 	bl	8002b9c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b14:	bf00      	nop
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000890 	.word	0x20000890
 8004b20:	20000894 	.word	0x20000894
 8004b24:	20000a74 	.word	0x20000a74

08004b28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b3a:	3201      	adds	r2, #1
 8004b3c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004b3e:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004b40:	681b      	ldr	r3, [r3, #0]
	}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000890 	.word	0x20000890

08004b50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b5a:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe f875 	bl	8002c56 <uxListRemove>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b72:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2201      	movs	r2, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4013      	ands	r3, r2
 8004b86:	4a20      	ldr	r2, [pc, #128]	; (8004c08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d10a      	bne.n	8004ba8 <prvAddCurrentTaskToDelayedList+0x58>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b98:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	481a      	ldr	r0, [pc, #104]	; (8004c0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ba2:	f7fd fffb 	bl	8002b9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ba6:	e026      	b.n	8004bf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d209      	bcs.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f7fe f809 	bl	8002be4 <vListInsert>
}
 8004bd2:	e010      	b.n	8004bf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fd ffff 	bl	8002be4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d202      	bcs.n	8004bf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000a70 	.word	0x20000a70
 8004c04:	20000890 	.word	0x20000890
 8004c08:	20000a74 	.word	0x20000a74
 8004c0c:	20000a58 	.word	0x20000a58
 8004c10:	20000a28 	.word	0x20000a28
 8004c14:	20000a24 	.word	0x20000a24
 8004c18:	20000a8c 	.word	0x20000a8c

08004c1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c26:	f000 faeb 	bl	8005200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <xTimerCreateTimerTask+0x80>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d021      	beq.n	8004c76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c3a:	1d3a      	adds	r2, r7, #4
 8004c3c:	f107 0108 	add.w	r1, r7, #8
 8004c40:	f107 030c 	add.w	r3, r7, #12
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fb fb6f 	bl	8000328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	9202      	str	r2, [sp, #8]
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	2302      	movs	r3, #2
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	4910      	ldr	r1, [pc, #64]	; (8004ca0 <xTimerCreateTimerTask+0x84>)
 8004c5e:	4811      	ldr	r0, [pc, #68]	; (8004ca4 <xTimerCreateTimerTask+0x88>)
 8004c60:	f7fe feee 	bl	8003a40 <xTaskCreateStatic>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <xTimerCreateTimerTask+0x8c>)
 8004c68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <xTimerCreateTimerTask+0x8c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	613b      	str	r3, [r7, #16]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000ad0 	.word	0x20000ad0
 8004ca0:	080072dc 	.word	0x080072dc
 8004ca4:	08004de1 	.word	0x08004de1
 8004ca8:	20000ad4 	.word	0x20000ad4

08004cac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <xTimerGenericCommand+0x2e>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	623b      	str	r3, [r7, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cda:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <xTimerGenericCommand+0x98>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d02a      	beq.n	8004d38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	dc18      	bgt.n	8004d26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cf4:	f7ff fd70 	bl	80047d8 <xTaskGetSchedulerState>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d109      	bne.n	8004d12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <xTimerGenericCommand+0x98>)
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f107 0114 	add.w	r1, r7, #20
 8004d06:	2300      	movs	r3, #0
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	f7fe f93f 	bl	8002f8c <xQueueGenericSend>
 8004d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8004d10:	e012      	b.n	8004d38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <xTimerGenericCommand+0x98>)
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	f107 0114 	add.w	r1, r7, #20
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f7fe f935 	bl	8002f8c <xQueueGenericSend>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24
 8004d24:	e008      	b.n	8004d38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <xTimerGenericCommand+0x98>)
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f107 0114 	add.w	r1, r7, #20
 8004d2e:	2300      	movs	r3, #0
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	f7fe fa29 	bl	8003188 <xQueueGenericSendFromISR>
 8004d36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3728      	adds	r7, #40	; 0x28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000ad0 	.word	0x20000ad0

08004d48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <prvProcessExpiredTimer+0x94>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fd ff78 	bl	8002c56 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d022      	beq.n	8004dba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	18d1      	adds	r1, r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	6978      	ldr	r0, [r7, #20]
 8004d82:	f000 f8d1 	bl	8004f28 <prvInsertTimerInActiveList>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01f      	beq.n	8004dcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	2100      	movs	r1, #0
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7ff ff88 	bl	8004cac <xTimerGenericCommand>
 8004d9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d113      	bne.n	8004dcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	6978      	ldr	r0, [r7, #20]
 8004dd2:	4798      	blx	r3
}
 8004dd4:	bf00      	nop
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000ac8 	.word	0x20000ac8

08004de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f857 	bl	8004ea0 <prvGetNextExpireTime>
 8004df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4619      	mov	r1, r3
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f803 	bl	8004e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dfe:	f000 f8d5 	bl	8004fac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e02:	e7f1      	b.n	8004de8 <prvTimerTask+0x8>

08004e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e0e:	f7ff f8d3 	bl	8003fb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f866 	bl	8004ee8 <prvSampleTimeNow>
 8004e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d130      	bne.n	8004e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <prvProcessTimerOrBlockTask+0x3c>
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d806      	bhi.n	8004e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e32:	f7ff f8cf 	bl	8003fd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff85 	bl	8004d48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e3e:	e024      	b.n	8004e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <prvProcessTimerOrBlockTask+0x90>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <prvProcessTimerOrBlockTask+0x50>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <prvProcessTimerOrBlockTask+0x52>
 8004e54:	2300      	movs	r3, #0
 8004e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <prvProcessTimerOrBlockTask+0x94>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	f7fe fdb7 	bl	80039d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e6a:	f7ff f8b3 	bl	8003fd4 <xTaskResumeAll>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <prvProcessTimerOrBlockTask+0x98>)
 8004e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	f3bf 8f6f 	isb	sy
}
 8004e84:	e001      	b.n	8004e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e86:	f7ff f8a5 	bl	8003fd4 <xTaskResumeAll>
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000acc 	.word	0x20000acc
 8004e98:	20000ad0 	.word	0x20000ad0
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <prvGetNextExpireTime+0x44>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <prvGetNextExpireTime+0x16>
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	e000      	b.n	8004eb8 <prvGetNextExpireTime+0x18>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvGetNextExpireTime+0x44>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e001      	b.n	8004ed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000ac8 	.word	0x20000ac8

08004ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ef0:	f7ff f90c 	bl	800410c <xTaskGetTickCount>
 8004ef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <prvSampleTimeNow+0x3c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d205      	bcs.n	8004f0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f00:	f000 f91a 	bl	8005138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <prvSampleTimeNow+0x3c>)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f18:	68fb      	ldr	r3, [r7, #12]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000ad8 	.word	0x20000ad8

08004f28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d812      	bhi.n	8004f74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e01b      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <prvInsertTimerInActiveList+0x7c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fd fe39 	bl	8002be4 <vListInsert>
 8004f72:	e012      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d206      	bcs.n	8004f8a <prvInsertTimerInActiveList+0x62>
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e007      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <prvInsertTimerInActiveList+0x80>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7fd fe25 	bl	8002be4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f9a:	697b      	ldr	r3, [r7, #20]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000acc 	.word	0x20000acc
 8004fa8:	20000ac8 	.word	0x20000ac8

08004fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08c      	sub	sp, #48	; 0x30
 8004fb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fb2:	e0ae      	b.n	8005112 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f2c0 80ab 	blt.w	8005112 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd fe42 	bl	8002c56 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff87 	bl	8004ee8 <prvSampleTimeNow>
 8004fda:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	f200 8096 	bhi.w	8005110 <prvProcessReceivedCommands+0x164>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <prvProcessReceivedCommands+0x40>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	08005089 	.word	0x08005089
 8004ffc:	0800509d 	.word	0x0800509d
 8005000:	080050e7 	.word	0x080050e7
 8005004:	08005015 	.word	0x08005015
 8005008:	08005015 	.word	0x08005015
 800500c:	08005089 	.word	0x08005089
 8005010:	0800509d 	.word	0x0800509d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	18d1      	adds	r1, r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005034:	f7ff ff78 	bl	8004f28 <prvInsertTimerInActiveList>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d069      	beq.n	8005112 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05e      	beq.n	8005112 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	441a      	add	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	2100      	movs	r1, #0
 8005064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005066:	f7ff fe21 	bl	8004cac <xTimerGenericCommand>
 800506a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d14f      	bne.n	8005112 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61bb      	str	r3, [r7, #24]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800509a:	e03a      	b.n	8005112 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	617b      	str	r3, [r7, #20]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	18d1      	adds	r1, r2, r3
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e0:	f7ff ff22 	bl	8004f28 <prvInsertTimerInActiveList>
					break;
 80050e4:	e015      	b.n	8005112 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80050f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f6:	f000 fbdb 	bl	80058b0 <vPortFree>
 80050fa:	e00a      	b.n	8005112 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800510e:	e000      	b.n	8005112 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8005110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <prvProcessReceivedCommands+0x188>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f107 0108 	add.w	r1, r7, #8
 800511a:	2200      	movs	r2, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe f8cf 	bl	80032c0 <xQueueReceive>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f af45 	bne.w	8004fb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	3728      	adds	r7, #40	; 0x28
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000ad0 	.word	0x20000ad0

08005138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800513e:	e048      	b.n	80051d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514a:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3304      	adds	r3, #4
 8005158:	4618      	mov	r0, r3
 800515a:	f7fd fd7c 	bl	8002c56 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02e      	beq.n	80051d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d90e      	bls.n	80051a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3304      	adds	r3, #4
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f7fd fd21 	bl	8002be4 <vListInsert>
 80051a2:	e016      	b.n	80051d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	2300      	movs	r3, #0
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	2100      	movs	r1, #0
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fd7c 	bl	8004cac <xTimerGenericCommand>
 80051b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	603b      	str	r3, [r7, #0]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1b1      	bne.n	8005140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <prvSwitchTimerLists+0xc4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 80051e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051ea:	4a04      	ldr	r2, [pc, #16]	; (80051fc <prvSwitchTimerLists+0xc4>)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6013      	str	r3, [r2, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000ac8 	.word	0x20000ac8
 80051fc:	20000acc 	.word	0x20000acc

08005200 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005206:	f000 f965 	bl	80054d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d120      	bne.n	8005254 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005212:	4814      	ldr	r0, [pc, #80]	; (8005264 <prvCheckForValidListAndQueue+0x64>)
 8005214:	f7fd fc95 	bl	8002b42 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005218:	4813      	ldr	r0, [pc, #76]	; (8005268 <prvCheckForValidListAndQueue+0x68>)
 800521a:	f7fd fc92 	bl	8002b42 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <prvCheckForValidListAndQueue+0x6c>)
 8005220:	4a10      	ldr	r2, [pc, #64]	; (8005264 <prvCheckForValidListAndQueue+0x64>)
 8005222:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <prvCheckForValidListAndQueue+0x70>)
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <prvCheckForValidListAndQueue+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800522a:	2300      	movs	r3, #0
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <prvCheckForValidListAndQueue+0x74>)
 8005230:	4a11      	ldr	r2, [pc, #68]	; (8005278 <prvCheckForValidListAndQueue+0x78>)
 8005232:	210c      	movs	r1, #12
 8005234:	2064      	movs	r0, #100	; 0x64
 8005236:	f7fd fda1 	bl	8002d7c <xQueueGenericCreateStatic>
 800523a:	4603      	mov	r3, r0
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 800523e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	490b      	ldr	r1, [pc, #44]	; (800527c <prvCheckForValidListAndQueue+0x7c>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fb6e 	bl	8003930 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005254:	f000 f96e 	bl	8005534 <vPortExitCritical>
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000ad0 	.word	0x20000ad0
 8005264:	20000aa0 	.word	0x20000aa0
 8005268:	20000ab4 	.word	0x20000ab4
 800526c:	20000ac8 	.word	0x20000ac8
 8005270:	20000acc 	.word	0x20000acc
 8005274:	20000f8c 	.word	0x20000f8c
 8005278:	20000adc 	.word	0x20000adc
 800527c:	080072e4 	.word	0x080072e4

08005280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3b04      	subs	r3, #4
 8005290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b04      	subs	r3, #4
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052b0:	4a0c      	ldr	r2, [pc, #48]	; (80052e4 <pxPortInitialiseStack+0x64>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b14      	subs	r3, #20
 80052ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f06f 0202 	mvn.w	r2, #2
 80052ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b20      	subs	r3, #32
 80052d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	080052e9 	.word	0x080052e9

080052e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <prvTaskExitError+0x54>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d00a      	beq.n	8005312 <prvTaskExitError+0x2a>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <prvTaskExitError+0x28>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60bb      	str	r3, [r7, #8]
}
 8005324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005326:	bf00      	nop
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0fc      	beq.n	8005328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	2000000c 	.word	0x2000000c

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005396:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <xPortStartScheduler+0x120>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <xPortStartScheduler+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <xPortStartScheduler+0x26>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <xPortStartScheduler+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <xPortStartScheduler+0x128>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10a      	bne.n	80053d6 <xPortStartScheduler+0x46>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <xPortStartScheduler+0x12c>)
 80053d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xPortStartScheduler+0x130>)
 80053fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <xPortStartScheduler+0x134>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005404:	e009      	b.n	800541a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005406:	4b2f      	ldr	r3, [pc, #188]	; (80054c4 <xPortStartScheduler+0x134>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <xPortStartScheduler+0x134>)
 800540e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d0ef      	beq.n	8005406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <xPortStartScheduler+0x134>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00a      	beq.n	8005448 <xPortStartScheduler+0xb8>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <xPortStartScheduler+0x134>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <xPortStartScheduler+0x134>)
 8005450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <xPortStartScheduler+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <xPortStartScheduler+0x134>)
 800545c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <xPortStartScheduler+0x138>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <xPortStartScheduler+0x138>)
 800546c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <xPortStartScheduler+0x138>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <xPortStartScheduler+0x138>)
 8005478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800547c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800547e:	f000 f8dd 	bl	800563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <xPortStartScheduler+0x13c>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005488:	f000 f8fc 	bl	8005684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xPortStartScheduler+0x140>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xPortStartScheduler+0x140>)
 8005492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005498:	f7ff ff66 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800549c:	f7fe fefe 	bl	800429c <vTaskSwitchContext>
	prvTaskExitError();
 80054a0:	f7ff ff22 	bl	80052e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed00 	.word	0xe000ed00
 80054b4:	410fc271 	.word	0x410fc271
 80054b8:	410fc270 	.word	0x410fc270
 80054bc:	e000e400 	.word	0xe000e400
 80054c0:	20000fdc 	.word	0x20000fdc
 80054c4:	20000fe0 	.word	0x20000fe0
 80054c8:	e000ed20 	.word	0xe000ed20
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	e000ef34 	.word	0xe000ef34

080054d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <vPortEnterCritical+0x58>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a0d      	ldr	r2, [pc, #52]	; (800552c <vPortEnterCritical+0x58>)
 80054f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <vPortEnterCritical+0x58>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10f      	bne.n	8005520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortEnterCritical+0x5c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <vPortEnterCritical+0x4c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <vPortEnterCritical+0x4a>
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <vPortExitCritical+0x50>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <vPortExitCritical+0x24>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	607b      	str	r3, [r7, #4]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <vPortExitCritical+0x50>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <vPortExitCritical+0x50>)
 8005560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <vPortExitCritical+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <vPortExitCritical+0x42>
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000000c 	.word	0x2000000c
	...

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f01e 0f10 	tst.w	lr, #16
 80055a0:	bf08      	it	eq
 80055a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f7fe fe6c 	bl	800429c <vTaskSwitchContext>
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f380 8811 	msr	BASEPRI, r0
 80055cc:	bc09      	pop	{r0, r3}
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d6:	f01e 0f10 	tst.w	lr, #16
 80055da:	bf08      	it	eq
 80055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055e0:	f380 8809 	msr	PSP, r0
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005612:	f7fe fd8b 	bl	800412c <xTaskIncrementTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <SysTick_Handler+0x40>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <vPortSetupTimerInterrupt+0x38>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <vPortSetupTimerInterrupt+0x3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <vPortSetupTimerInterrupt+0x40>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <vPortSetupTimerInterrupt+0x44>)
 800565a:	3b01      	subs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e010 	.word	0xe000e010
 8005674:	e000e018 	.word	0xe000e018
 8005678:	20000000 	.word	0x20000000
 800567c:	10624dd3 	.word	0x10624dd3
 8005680:	e000e014 	.word	0xe000e014

08005684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005694 <vPortEnableVFP+0x10>
 8005688:	6801      	ldr	r1, [r0, #0]
 800568a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800568e:	6001      	str	r1, [r0, #0]
 8005690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005692:	bf00      	nop
 8005694:	e000ed88 	.word	0xe000ed88

08005698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800569e:	f3ef 8305 	mrs	r3, IPSR
 80056a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d914      	bls.n	80056d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <vPortValidateInterruptPriority+0x70>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <vPortValidateInterruptPriority+0x74>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	7afa      	ldrb	r2, [r7, #11]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d20a      	bcs.n	80056d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <vPortValidateInterruptPriority+0x78>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <vPortValidateInterruptPriority+0x7c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d90a      	bls.n	80056fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	603b      	str	r3, [r7, #0]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <vPortValidateInterruptPriority+0x60>
	}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	e000e3f0 	.word	0xe000e3f0
 800570c:	20000fdc 	.word	0x20000fdc
 8005710:	e000ed0c 	.word	0xe000ed0c
 8005714:	20000fe0 	.word	0x20000fe0

08005718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005724:	f7fe fc48 	bl	8003fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005728:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <pvPortMalloc+0x180>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005730:	f000 f920 	bl	8005974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <pvPortMalloc+0x184>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8093 	bne.w	8005868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005748:	2208      	movs	r2, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d014      	beq.n	8005784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <pvPortMalloc+0x6c>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d06e      	beq.n	8005868 <pvPortMalloc+0x150>
 800578a:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <pvPortMalloc+0x188>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d869      	bhi.n	8005868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005794:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <pvPortMalloc+0x18c>)
 8005796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005798:	4b42      	ldr	r3, [pc, #264]	; (80058a4 <pvPortMalloc+0x18c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800579e:	e004      	b.n	80057aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d903      	bls.n	80057bc <pvPortMalloc+0xa4>
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f1      	bne.n	80057a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <pvPortMalloc+0x180>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d050      	beq.n	8005868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	4413      	add	r3, r2
 80057ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	2308      	movs	r3, #8
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d91f      	bls.n	8005828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <pvPortMalloc+0xf8>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	613b      	str	r3, [r7, #16]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	f000 f908 	bl	8005a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <pvPortMalloc+0x188>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <pvPortMalloc+0x188>)
 8005834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005836:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <pvPortMalloc+0x188>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <pvPortMalloc+0x190>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d203      	bcs.n	800584a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <pvPortMalloc+0x188>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <pvPortMalloc+0x190>)
 8005848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <pvPortMalloc+0x184>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	431a      	orrs	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <pvPortMalloc+0x194>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3301      	adds	r3, #1
 8005864:	4a11      	ldr	r2, [pc, #68]	; (80058ac <pvPortMalloc+0x194>)
 8005866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005868:	f7fe fbb4 	bl	8003fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <pvPortMalloc+0x174>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <pvPortMalloc+0x172>
	return pvReturn;
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20008fec 	.word	0x20008fec
 800589c:	20009000 	.word	0x20009000
 80058a0:	20008ff0 	.word	0x20008ff0
 80058a4:	20008fe4 	.word	0x20008fe4
 80058a8:	20008ff4 	.word	0x20008ff4
 80058ac:	20008ff8 	.word	0x20008ff8

080058b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04d      	beq.n	800595e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058c2:	2308      	movs	r3, #8
 80058c4:	425b      	negs	r3, r3
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4413      	add	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4b24      	ldr	r3, [pc, #144]	; (8005968 <vPortFree+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <vPortFree+0x44>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60fb      	str	r3, [r7, #12]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <vPortFree+0x62>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <vPortFree+0xb8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01e      	beq.n	800595e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11a      	bne.n	800595e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <vPortFree+0xb8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005938:	f7fe fb3e 	bl	8003fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <vPortFree+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4413      	add	r3, r2
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <vPortFree+0xbc>)
 8005948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f000 f874 	bl	8005a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <vPortFree+0xc0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vPortFree+0xc0>)
 8005958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800595a:	f7fe fb3b 	bl	8003fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20009000 	.word	0x20009000
 800596c:	20008ff0 	.word	0x20008ff0
 8005970:	20008ffc 	.word	0x20008ffc

08005974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800597a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <prvHeapInit+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <prvHeapInit+0xac>)
 80059a4:	4413      	add	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <prvHeapInit+0xb0>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <prvHeapInit+0xb0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059c0:	2208      	movs	r2, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <prvHeapInit+0xb4>)
 80059d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <prvHeapInit+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <prvHeapInit+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvHeapInit+0xb4>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <prvHeapInit+0xb8>)
 8005a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <prvHeapInit+0xbc>)
 8005a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <prvHeapInit+0xc0>)
 8005a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000fe4 	.word	0x20000fe4
 8005a24:	20008fe4 	.word	0x20008fe4
 8005a28:	20008fec 	.word	0x20008fec
 8005a2c:	20008ff4 	.word	0x20008ff4
 8005a30:	20008ff0 	.word	0x20008ff0
 8005a34:	20009000 	.word	0x20009000

08005a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <prvInsertBlockIntoFreeList+0xac>)
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e002      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x14>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d8f7      	bhi.n	8005a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d108      	bne.n	8005a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d118      	bne.n	8005ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00d      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e003      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d002      	beq.n	8005ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20008fe4 	.word	0x20008fe4
 8005ae8:	20008fec 	.word	0x20008fec

08005aec <_ZN12TemplateTaskC1E6TaskIdPKc>:
#include <stdio.h>
#include "TemplateTask.h"

TemplateTask* TemplateTask::mspThis = 0;

TemplateTask::TemplateTask(TaskId id, const char* name): Task(id, name)
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	460b      	mov	r3, r1
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	72fb      	strb	r3, [r7, #11]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	7af9      	ldrb	r1, [r7, #11]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fa49 	bl	8005f98 <_ZN4TaskC1E6TaskIdPKc>
 8005b06:	4a06      	ldr	r2, [pc, #24]	; (8005b20 <_ZN12TemplateTaskC1E6TaskIdPKc+0x34>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]
{
  Message::reserveIsr(MSG_ID_TEMPLATETASK_EVENT, TemplateTaskId, 0);
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2101      	movs	r1, #1
 8005b10:	2003      	movs	r0, #3
 8005b12:	f000 f871 	bl	8005bf8 <_ZN7Message10reserveIsrEhhm>
}
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	0800732c 	.word	0x0800732c

08005b24 <_ZN12TemplateTask8instanceEv>:

TemplateTask* TemplateTask::instance()
{
 8005b24:	b598      	push	{r3, r4, r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  if(TemplateTask::mspThis == 0)
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <_ZN12TemplateTask8instanceEv+0x2c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <_ZN12TemplateTask8instanceEv+0x24>
  {
    mspThis = new TemplateTask(TemplateTaskId, "TemplateTask\0");
 8005b30:	2028      	movs	r0, #40	; 0x28
 8005b32:	f000 fb3d 	bl	80061b0 <_Znwj>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461c      	mov	r4, r3
 8005b3a:	4a06      	ldr	r2, [pc, #24]	; (8005b54 <_ZN12TemplateTask8instanceEv+0x30>)
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f7ff ffd4 	bl	8005aec <_ZN12TemplateTaskC1E6TaskIdPKc>
 8005b44:	4b02      	ldr	r3, [pc, #8]	; (8005b50 <_ZN12TemplateTask8instanceEv+0x2c>)
 8005b46:	601c      	str	r4, [r3, #0]
  }
  return TemplateTask::mspThis;
 8005b48:	4b01      	ldr	r3, [pc, #4]	; (8005b50 <_ZN12TemplateTask8instanceEv+0x2c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd98      	pop	{r3, r4, r7, pc}
 8005b50:	20009004 	.word	0x20009004
 8005b54:	080072ec 	.word	0x080072ec

08005b58 <_ZN12TemplateTask13handleMessageEP7Message>:
  mspThis->mpIsrEventMsg->setValue(123);
  mspThis->mpIsrEventMsg->sendMsg();
}

void TemplateTask::handleMessage(Message* message)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
//       break;
//      }
//      break;
//    }
//  }
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <_ZN12TemplateTaskD1Ev>:
#define TEMPLATETASK_H_

#include "TaskClass.h"


class TemplateTask: public Task
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	4a05      	ldr	r2, [pc, #20]	; (8005b90 <_ZN12TemplateTaskD1Ev+0x20>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fa55 	bl	8006030 <_ZN4TaskD1Ev>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	0800732c 	.word	0x0800732c

08005b94 <_ZN12TemplateTaskD0Ev>:
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ffe7 	bl	8005b70 <_ZN12TemplateTaskD1Ev>
 8005ba2:	2128      	movs	r1, #40	; 0x28
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fb1a 	bl	80061de <_ZdlPvj>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <app_init>:
#include "TemplateTask.h"

int app_init_done = 0;

void app_init()
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /////////////////    create tasks

  TemplateTask::instance();
 8005bb8:	f7ff ffb4 	bl	8005b24 <_ZN12TemplateTask8instanceEv>
//  lpMsg = Message::reserve(MSG_ID_START, LopTaskId);
//  lpMsg->sendMsg();
//
//  SET_BLUE_STATE_LED(LED_OFF);
//  app_init_done = 1;
}
 8005bbc:	bf00      	nop
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_ZN7MessageC1Ev>:
#include <stdio.h>


MsgPool* Message::mspPool = 0;

Message::Message()
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
{

}
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <_ZN7Message4initEP7MsgPool>:

void Message::init(MsgPool* pPool)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  Message::mspPool = pPool;
 8005be0:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <_ZN7Message4initEP7MsgPool+0x1c>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6013      	str	r3, [r2, #0]
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	20009008 	.word	0x20009008

08005bf8 <_ZN7Message10reserveIsrEhhm>:
  configASSERT(pMsg);
  return pMsg;
}

Message* Message::reserveIsr(uint8_t id, uint8_t destination, uint32_t isr_value)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	603a      	str	r2, [r7, #0]
 8005c02:	71fb      	strb	r3, [r7, #7]
 8005c04:	460b      	mov	r3, r1
 8005c06:	71bb      	strb	r3, [r7, #6]
  Message* pMsg = Message::mspPool->resMsg();
 8005c08:	f000 f8f2 	bl	8005df0 <_ZN7MsgPool6resMsgEv>
 8005c0c:	60f8      	str	r0, [r7, #12]
  pMsg->mMsg.IsrMsg.Id = id;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	79fa      	ldrb	r2, [r7, #7]
 8005c12:	701a      	strb	r2, [r3, #0]
  pMsg->mMsg.IsrMsg.Type = MsgIsr;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2203      	movs	r2, #3
 8005c18:	705a      	strb	r2, [r3, #1]
  pMsg->mMsg.IsrMsg.DestAddr = destination;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	79ba      	ldrb	r2, [r7, #6]
 8005c1e:	709a      	strb	r2, [r3, #2]
  pMsg->mMsg.IsrMsg.Value = isr_value;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	f8c3 2003 	str.w	r2, [r3, #3]
  configASSERT(pMsg);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <_ZN7Message10reserveIsrEhhm+0x4c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60bb      	str	r3, [r7, #8]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <_ZN7Message10reserveIsrEhhm+0x4a>
  return pMsg;
 8005c44:	68fb      	ldr	r3, [r7, #12]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_ZN7Message7freeMsgEv>:
  }
}


void Message::freeMsg()
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  switch(type())
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f835 	bl	8005cc6 <_ZN7Message4typeEv>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d01d      	beq.n	8005c9e <_ZN7Message7freeMsgEv+0x50>
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d125      	bne.n	8005cb2 <_ZN7Message7freeMsgEv+0x64>
  {
    case MsgMem:
    {
      if(mMsg.MemMsg.Memory)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d023      	beq.n	8005cb6 <_ZN7Message7freeMsgEv+0x68>
      {
        vPortFree(mMsg.MemMsg.Memory->memory);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fe1b 	bl	80058b0 <vPortFree>
        delete mMsg.MemMsg.Memory;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <_ZN7Message7freeMsgEv+0x3c>
 8005c82:	2108      	movs	r1, #8
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 faaa 	bl	80061de <_ZdlPvj>
        mMsg.MemMsg.Memory = 0;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	711a      	strb	r2, [r3, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	715a      	strb	r2, [r3, #5]
 8005c94:	2200      	movs	r2, #0
 8005c96:	719a      	strb	r2, [r3, #6]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	71da      	strb	r2, [r3, #7]
      }
      break;
 8005c9c:	e00b      	b.n	8005cb6 <_ZN7Message7freeMsgEv+0x68>
    }
    case MsgData:
    {
      mMsg.DataMsg.Data.longword = 0;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	711a      	strb	r2, [r3, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	715a      	strb	r2, [r3, #5]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	719a      	strb	r2, [r3, #6]
 8005cac:	2200      	movs	r2, #0
 8005cae:	71da      	strb	r2, [r3, #7]
      break;
 8005cb0:	e002      	b.n	8005cb8 <_ZN7Message7freeMsgEv+0x6a>
    }
    default:
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <_ZN7Message7freeMsgEv+0x6a>
      break;
 8005cb6:	bf00      	nop
  }

  Message::mspPool->freeMsg(this);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8d3 	bl	8005e64 <_ZN7MsgPool7freeMsgEP7Message>
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <_ZN7Message4typeEv>:
{
  return mMsg.NoneMsg.DestAddr;
}

uint8_t Message::type()
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  return mMsg.NoneMsg.Type;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <MsgPool_init>:
#include "os_init.h"
#include "MsgPool.h"


void MsgPool_init()
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	af00      	add	r7, sp, #0
  Message::init(MsgPool::instance());
 8005ce2:	f000 f86f 	bl	8005dc4 <_ZN7MsgPool8instanceEv>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff ff75 	bl	8005bd8 <_ZN7Message4initEP7MsgPool>
}
 8005cee:	bf00      	nop
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <_ZN7MsgPoolC1Ev>:

MsgPool* MsgPool::mspThis = 0;

MsgPool::MsgPool()
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <_ZN7MsgPoolC1Ev+0x5c>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	33cc      	adds	r3, #204	; 0xcc
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f8e8 	bl	8005edc <_ZN5MutexC1Ev>
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e015      	b.n	8005d3e <_ZN7MsgPoolC1Ev+0x4a>
  {
    mPool[i].mMsg = new Message;
 8005d12:	2008      	movs	r0, #8
 8005d14:	f000 fa4c 	bl	80061b0 <_Znwj>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461c      	mov	r4, r3
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff ff4f 	bl	8005bc0 <_ZN7MessageC1Ev>
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	605c      	str	r4, [r3, #4]
    mPool[i].mUsed = false;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	2200      	movs	r2, #0
 8005d36:	721a      	strb	r2, [r3, #8]
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b18      	cmp	r3, #24
 8005d42:	dde6      	ble.n	8005d12 <_ZN7MsgPoolC1Ev+0x1e>
  }

}
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	08007340 	.word	0x08007340

08005d54 <_ZN7MsgPoolD1Ev>:

MsgPool::~MsgPool()
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <_ZN7MsgPoolD1Ev+0x4c>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
{
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e00d      	b.n	8005d84 <_ZN7MsgPoolD1Ev+0x30>
  {
    delete mPool[i].mMsg;
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4413      	add	r3, r2
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <_ZN7MsgPoolD1Ev+0x2a>
 8005d76:	2108      	movs	r1, #8
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fa30 	bl	80061de <_ZdlPvj>
  for(int i = 0; i < MSG_POOL_SIZE; ++i)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b18      	cmp	r3, #24
 8005d88:	ddee      	ble.n	8005d68 <_ZN7MsgPoolD1Ev+0x14>
MsgPool::~MsgPool()
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	33cc      	adds	r3, #204	; 0xcc
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f8b8 	bl	8005f04 <_ZN5MutexD1Ev>
  }
}
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	08007340 	.word	0x08007340

08005da4 <_ZN7MsgPoolD0Ev>:
MsgPool::~MsgPool()
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
}
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ffd1 	bl	8005d54 <_ZN7MsgPoolD1Ev>
 8005db2:	21d8      	movs	r1, #216	; 0xd8
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fa12 	bl	80061de <_ZdlPvj>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <_ZN7MsgPool8instanceEv>:

MsgPool* MsgPool::instance()
{
 8005dc4:	b598      	push	{r3, r4, r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  if(mspThis == 0)
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <_ZN7MsgPool8instanceEv+0x28>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <_ZN7MsgPool8instanceEv+0x20>
  {
    mspThis = new MsgPool;
 8005dd0:	20d8      	movs	r0, #216	; 0xd8
 8005dd2:	f000 f9ed 	bl	80061b0 <_Znwj>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461c      	mov	r4, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ff8a 	bl	8005cf4 <_ZN7MsgPoolC1Ev>
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <_ZN7MsgPool8instanceEv+0x28>)
 8005de2:	601c      	str	r4, [r3, #0]
  }
  return mspThis;
 8005de4:	4b01      	ldr	r3, [pc, #4]	; (8005dec <_ZN7MsgPool8instanceEv+0x28>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	bd98      	pop	{r3, r4, r7, pc}
 8005dec:	2000900c 	.word	0x2000900c

08005df0 <_ZN7MsgPool6resMsgEv>:

Message* MsgPool::resMsg()
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
  Message* lpRetVal = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	607b      	str	r3, [r7, #4]
  mspThis->mMutex.lock();
 8005dfa:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <_ZN7MsgPool6resMsgEv+0x70>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	33cc      	adds	r3, #204	; 0xcc
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f8a2 	bl	8005f4c <_ZN5Mutex4lockEh>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	e019      	b.n	8005e42 <_ZN7MsgPool6resMsgEv+0x52>
  {
    if(mspThis->mPool[i].mUsed == false)
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <_ZN7MsgPool6resMsgEv+0x70>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	4413      	add	r3, r2
 8005e18:	7a1b      	ldrb	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10e      	bne.n	8005e3c <_ZN7MsgPool6resMsgEv+0x4c>
    {
      mspThis->mPool[i].mUsed = true;
 8005e1e:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <_ZN7MsgPool6resMsgEv+0x70>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	2201      	movs	r2, #1
 8005e2a:	721a      	strb	r2, [r3, #8]
      lpRetVal = mspThis->mPool[i].mMsg;
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <_ZN7MsgPool6resMsgEv+0x70>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4413      	add	r3, r2
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	607b      	str	r3, [r7, #4]
      break;
 8005e3a:	e005      	b.n	8005e48 <_ZN7MsgPool6resMsgEv+0x58>
  for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b18      	cmp	r3, #24
 8005e46:	dde2      	ble.n	8005e0e <_ZN7MsgPool6resMsgEv+0x1e>
    }
  }
  mspThis->mMutex.unlock();
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <_ZN7MsgPool6resMsgEv+0x70>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	33cc      	adds	r3, #204	; 0xcc
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f890 	bl	8005f74 <_ZN5Mutex6unlockEv>
  return lpRetVal;
 8005e54:	687b      	ldr	r3, [r7, #4]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2000900c 	.word	0x2000900c

08005e64 <_ZN7MsgPool7freeMsgEP7Message>:

void MsgPool::freeMsg(Message* p_msg)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  if(p_msg->type() != MsgIsr)
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff2a 	bl	8005cc6 <_ZN7Message4typeEv>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d026      	beq.n	8005ed0 <_ZN7MsgPool7freeMsgEP7Message+0x6c>
  {
    mspThis->mMutex.lock();
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	33cc      	adds	r3, #204	; 0xcc
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f85e 	bl	8005f4c <_ZN5Mutex4lockEh>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e013      	b.n	8005ebe <_ZN7MsgPool7freeMsgEP7Message+0x5a>
    {
      if(mspThis->mPool[i].mMsg == p_msg)
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d107      	bne.n	8005eb8 <_ZN7MsgPool7freeMsgEP7Message+0x54>
      {
        mspThis->mPool[i].mUsed = false;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	721a      	strb	r2, [r3, #8]
        break;
 8005eb6:	e005      	b.n	8005ec4 <_ZN7MsgPool7freeMsgEP7Message+0x60>
    for (int i = 0; i < MSG_POOL_SIZE; ++i)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b18      	cmp	r3, #24
 8005ec2:	dde8      	ble.n	8005e96 <_ZN7MsgPool7freeMsgEP7Message+0x32>
      }
    }
    mspThis->mMutex.unlock();
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <_ZN7MsgPool7freeMsgEP7Message+0x74>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	33cc      	adds	r3, #204	; 0xcc
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f852 	bl	8005f74 <_ZN5Mutex6unlockEv>
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	2000900c 	.word	0x2000900c

08005edc <_ZN5MutexC1Ev>:
 *      Author: axel
 */

#include <Mutex.h>

Mutex::Mutex()
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <_ZN5MutexC1Ev+0x24>)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
{
  mMutex = xSemaphoreCreateMutex();
 8005eea:	2001      	movs	r0, #1
 8005eec:	f7fd f835 	bl	8002f5a <xQueueCreateMutex>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
}
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	08007350 	.word	0x08007350

08005f04 <_ZN5MutexD1Ev>:

Mutex::~Mutex()
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	4a06      	ldr	r2, [pc, #24]	; (8005f28 <_ZN5MutexD1Ev+0x24>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
{
  vSemaphoreDelete(mMutex);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fd fbbe 	bl	8003698 <vQueueDelete>
}
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	08007350 	.word	0x08007350

08005f2c <_ZN5MutexD0Ev>:
Mutex::~Mutex()
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
}
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ffe5 	bl	8005f04 <_ZN5MutexD1Ev>
 8005f3a:	210c      	movs	r1, #12
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f94e 	bl	80061de <_ZdlPvj>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <_ZN5Mutex4lockEh>:

void Mutex::lock(uint8_t causedLockId)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  xSemaphoreTake(mMutex, portMAX_DELAY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fd fa8d 	bl	8003480 <xQueueSemaphoreTake>
  mCausedLockId = causedLockId;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	721a      	strb	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <_ZN5Mutex6unlockEv>:

void Mutex::unlock()
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  xSemaphoreGive(mMutex);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6858      	ldr	r0, [r3, #4]
 8005f80:	2300      	movs	r3, #0
 8005f82:	2200      	movs	r2, #0
 8005f84:	2100      	movs	r1, #0
 8005f86:	f7fd f801 	bl	8002f8c <xQueueGenericSend>
  mCausedLockId = 0;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	721a      	strb	r2, [r3, #8]
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <_ZN4TaskC1E6TaskIdPKc>:
#include <string.h>
#include "TaskClass.h"



Task::Task(TaskId id, const char* name)
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	72fb      	strb	r3, [r7, #11]
 8005fa6:	4a20      	ldr	r2, [pc, #128]	; (8006028 <_ZN4TaskC1E6TaskIdPKc+0x90>)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	601a      	str	r2, [r3, #0]
{
  mId = id;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	7afa      	ldrb	r2, [r7, #11]
 8005fb0:	711a      	strb	r2, [r3, #4]
  strncpy(mName,name, TASK_NAME_LEN);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3305      	adds	r3, #5
 8005fb6:	2214      	movs	r2, #20
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fb7a 	bl	80066b4 <strncpy>
  mQueue = xQueueCreate(MSG_QUEUE_SIZE, sizeof(Message*));
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2104      	movs	r1, #4
 8005fc4:	200a      	movs	r0, #10
 8005fc6:	f7fc ff51 	bl	8002e6c <xQueueGenericCreate>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	621a      	str	r2, [r3, #32]
  xTaskCreate(Task::mainLoop, mName,  TASK_STACK_SIZE , this, tskIDLE_PRIORITY, &mHandle);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	1d59      	adds	r1, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	331c      	adds	r3, #28
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe4:	4811      	ldr	r0, [pc, #68]	; (800602c <_ZN4TaskC1E6TaskIdPKc+0x94>)
 8005fe6:	f7fd fd88 	bl	8003afa <xTaskCreate>
  configASSERT(mHandle != 0);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <_ZN4TaskC1E6TaskIdPKc+0x70>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	617b      	str	r3, [r7, #20]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <_ZN4TaskC1E6TaskIdPKc+0x6e>
  TaskList::createEntry(mId, mName, mHandle, mQueue);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	7918      	ldrb	r0, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	1d59      	adds	r1, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f000 f874 	bl	8006104 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>
}
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	08007360 	.word	0x08007360
 800602c:	08006051 	.word	0x08006051

08006030 <_ZN4TaskD1Ev>:

Task::~Task()
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <_ZN4TaskD1Ev+0x1c>)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	08007360 	.word	0x08007360

08006050 <_ZN4Task8mainLoopEPv>:

void Task::mainLoop(void* args)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  Task* lpThis = (Task*)args;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	617b      	str	r3, [r7, #20]
  Message* lpReceiveMsg = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    BaseType_t lResult = xQueueReceive(lpThis->mQueue, &lpReceiveMsg, portMAX_DELAY);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f107 010c 	add.w	r1, r7, #12
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	4618      	mov	r0, r3
 800606e:	f7fd f927 	bl	80032c0 <xQueueReceive>
 8006072:	6138      	str	r0, [r7, #16]
    if(lResult == true)
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10c      	bne.n	8006094 <_ZN4Task8mainLoopEPv+0x44>
    {
      //printf("queue message received %d\n",lpThis->mId);
      lpThis->handleMessage(lpReceiveMsg);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4611      	mov	r1, r2
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	4798      	blx	r3
      lpReceiveMsg->freeMsg();
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fdde 	bl	8005c4e <_ZN7Message7freeMsgEv>
 8006092:	e7e5      	b.n	8006060 <_ZN4Task8mainLoopEPv+0x10>
    }
    else
    {
    	printf("deqeuing failed");
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <_ZN4Task8mainLoopEPv+0x4c>)
 8006096:	f000 fa1b 	bl	80064d0 <iprintf>
    }
  }
 800609a:	e7e1      	b.n	8006060 <_ZN4Task8mainLoopEPv+0x10>
 800609c:	080072fc 	.word	0x080072fc

080060a0 <TaskList_init>:
#include "os_init.h"
#include "TaskList.h"
#include <string.h>

void TaskList_init()
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  TaskList::instance();
 80060a4:	f000 f802 	bl	80060ac <_ZN8TaskList8instanceEv>
}
 80060a8:	bf00      	nop
 80060aa:	bd80      	pop	{r7, pc}

080060ac <_ZN8TaskList8instanceEv>:
TaskList::table_struct TaskList::mTaskTable[TASK_MAX_COUNT];

TaskList* TaskList::mspThis=0;

TaskList* TaskList::instance()
{
 80060ac:	b598      	push	{r3, r4, r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  if(TaskList::mspThis == 0)
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <_ZN8TaskList8instanceEv+0x28>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d109      	bne.n	80060cc <_ZN8TaskList8instanceEv+0x20>
  {
    TaskList::mspThis = new TaskList;
 80060b8:	200c      	movs	r0, #12
 80060ba:	f000 f879 	bl	80061b0 <_Znwj>
 80060be:	4603      	mov	r3, r0
 80060c0:	461c      	mov	r4, r3
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 f808 	bl	80060d8 <_ZN8TaskListC1Ev>
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <_ZN8TaskList8instanceEv+0x28>)
 80060ca:	601c      	str	r4, [r3, #0]
  }
  return TaskList::mspThis;
 80060cc:	4b01      	ldr	r3, [pc, #4]	; (80060d4 <_ZN8TaskList8instanceEv+0x28>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	bd98      	pop	{r3, r4, r7, pc}
 80060d4:	20009290 	.word	0x20009290

080060d8 <_ZN8TaskListC1Ev>:

TaskList::TaskList()
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fefa 	bl	8005edc <_ZN5MutexC1Ev>
{
  memset(&mTaskTable, 0, sizeof(mTaskTable));
 80060e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80060ec:	2100      	movs	r1, #0
 80060ee:	4804      	ldr	r0, [pc, #16]	; (8006100 <_ZN8TaskListC1Ev+0x28>)
 80060f0:	f000 fad8 	bl	80066a4 <memset>
}
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20009010 	.word	0x20009010

08006104 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition>:

void TaskList::createEntry(TaskId id, char* name, TaskHandle_t task, QueueHandle_t address)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
  TaskList::getMutex()->lock();
 8006114:	f000 f840 	bl	8006198 <_ZN8TaskList8getMutexEv>
 8006118:	4603      	mov	r3, r0
 800611a:	2101      	movs	r1, #1
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff ff15 	bl	8005f4c <_ZN5Mutex4lockEh>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	e028      	b.n	800617a <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x76>
  {
    if(TaskList::mTaskTable[i].id == NoTask)
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	015b      	lsls	r3, r3, #5
 800612e:	4413      	add	r3, r2
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11e      	bne.n	8006174 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x70>
    {
      TaskList::mTaskTable[i].id = id;
 8006136:	4a17      	ldr	r2, [pc, #92]	; (8006194 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	015b      	lsls	r3, r3, #5
 800613c:	4413      	add	r3, r2
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	701a      	strb	r2, [r3, #0]
      strncpy(TaskList::mTaskTable[i].name, name, TASK_NAME_LEN);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	015b      	lsls	r3, r3, #5
 8006146:	4a13      	ldr	r2, [pc, #76]	; (8006194 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8006148:	4413      	add	r3, r2
 800614a:	3301      	adds	r3, #1
 800614c:	2214      	movs	r2, #20
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	4618      	mov	r0, r3
 8006152:	f000 faaf 	bl	80066b4 <strncpy>
      TaskList::mTaskTable[i].hTask = task;
 8006156:	4a0f      	ldr	r2, [pc, #60]	; (8006194 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	015b      	lsls	r3, r3, #5
 800615c:	4413      	add	r3, r2
 800615e:	3318      	adds	r3, #24
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
      TaskList::mTaskTable[i].hQueue = address;
 8006164:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x90>)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	015b      	lsls	r3, r3, #5
 800616a:	4413      	add	r3, r2
 800616c:	331c      	adds	r3, #28
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	601a      	str	r2, [r3, #0]
      break;
 8006172:	e005      	b.n	8006180 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x7c>
  for(int i = 0; i < TASK_MAX_COUNT; ++i)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	3301      	adds	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b13      	cmp	r3, #19
 800617e:	ddd3      	ble.n	8006128 <_ZN8TaskList11createEntryE6TaskIdPcP19tskTaskControlBlockP15QueueDefinition+0x24>
    }
  }
  TaskList::getMutex()->unlock();
 8006180:	f000 f80a 	bl	8006198 <_ZN8TaskList8getMutexEv>
 8006184:	4603      	mov	r3, r0
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fef4 	bl	8005f74 <_ZN5Mutex6unlockEv>
}
 800618c:	bf00      	nop
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20009010 	.word	0x20009010

08006198 <_ZN8TaskList8getMutexEv>:

Mutex* TaskList::getMutex()
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return &TaskList::mspThis->mMutex;
 800619c:	4b03      	ldr	r3, [pc, #12]	; (80061ac <_ZN8TaskList8getMutexEv+0x14>)
 800619e:	681b      	ldr	r3, [r3, #0]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20009290 	.word	0x20009290

080061b0 <_Znwj>:
#include <projdefs.h>
#include <portmacro.h>
#include <portable.h>

void * operator new( size_t size )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff faad 	bl	8005718 <pvPortMalloc>
 80061be:	4603      	mov	r3, r0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_ZdlPv>:
{
    return pvPortMalloc(size);
}

void operator delete( void * ptr )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
    vPortFree ( ptr );
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fb6d 	bl	80058b0 <vPortFree>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <_ZdlPvj>:
 80061de:	f7ff bff3 	b.w	80061c8 <_ZdlPv>
	...

080061e4 <malloc>:
 80061e4:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <malloc+0xc>)
 80061e6:	4601      	mov	r1, r0
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f000 b823 	b.w	8006234 <_malloc_r>
 80061ee:	bf00      	nop
 80061f0:	20000068 	.word	0x20000068

080061f4 <sbrk_aligned>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4e0e      	ldr	r6, [pc, #56]	; (8006230 <sbrk_aligned+0x3c>)
 80061f8:	460c      	mov	r4, r1
 80061fa:	6831      	ldr	r1, [r6, #0]
 80061fc:	4605      	mov	r5, r0
 80061fe:	b911      	cbnz	r1, 8006206 <sbrk_aligned+0x12>
 8006200:	f000 faf6 	bl	80067f0 <_sbrk_r>
 8006204:	6030      	str	r0, [r6, #0]
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f000 faf1 	bl	80067f0 <_sbrk_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d00a      	beq.n	8006228 <sbrk_aligned+0x34>
 8006212:	1cc4      	adds	r4, r0, #3
 8006214:	f024 0403 	bic.w	r4, r4, #3
 8006218:	42a0      	cmp	r0, r4
 800621a:	d007      	beq.n	800622c <sbrk_aligned+0x38>
 800621c:	1a21      	subs	r1, r4, r0
 800621e:	4628      	mov	r0, r5
 8006220:	f000 fae6 	bl	80067f0 <_sbrk_r>
 8006224:	3001      	adds	r0, #1
 8006226:	d101      	bne.n	800622c <sbrk_aligned+0x38>
 8006228:	f04f 34ff 	mov.w	r4, #4294967295
 800622c:	4620      	mov	r0, r4
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	20009298 	.word	0x20009298

08006234 <_malloc_r>:
 8006234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006238:	1ccd      	adds	r5, r1, #3
 800623a:	f025 0503 	bic.w	r5, r5, #3
 800623e:	3508      	adds	r5, #8
 8006240:	2d0c      	cmp	r5, #12
 8006242:	bf38      	it	cc
 8006244:	250c      	movcc	r5, #12
 8006246:	2d00      	cmp	r5, #0
 8006248:	4607      	mov	r7, r0
 800624a:	db01      	blt.n	8006250 <_malloc_r+0x1c>
 800624c:	42a9      	cmp	r1, r5
 800624e:	d905      	bls.n	800625c <_malloc_r+0x28>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	2600      	movs	r6, #0
 8006256:	4630      	mov	r0, r6
 8006258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006330 <_malloc_r+0xfc>
 8006260:	f000 f868 	bl	8006334 <__malloc_lock>
 8006264:	f8d8 3000 	ldr.w	r3, [r8]
 8006268:	461c      	mov	r4, r3
 800626a:	bb5c      	cbnz	r4, 80062c4 <_malloc_r+0x90>
 800626c:	4629      	mov	r1, r5
 800626e:	4638      	mov	r0, r7
 8006270:	f7ff ffc0 	bl	80061f4 <sbrk_aligned>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	4604      	mov	r4, r0
 8006278:	d155      	bne.n	8006326 <_malloc_r+0xf2>
 800627a:	f8d8 4000 	ldr.w	r4, [r8]
 800627e:	4626      	mov	r6, r4
 8006280:	2e00      	cmp	r6, #0
 8006282:	d145      	bne.n	8006310 <_malloc_r+0xdc>
 8006284:	2c00      	cmp	r4, #0
 8006286:	d048      	beq.n	800631a <_malloc_r+0xe6>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	4631      	mov	r1, r6
 800628c:	4638      	mov	r0, r7
 800628e:	eb04 0903 	add.w	r9, r4, r3
 8006292:	f000 faad 	bl	80067f0 <_sbrk_r>
 8006296:	4581      	cmp	r9, r0
 8006298:	d13f      	bne.n	800631a <_malloc_r+0xe6>
 800629a:	6821      	ldr	r1, [r4, #0]
 800629c:	1a6d      	subs	r5, r5, r1
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa7 	bl	80061f4 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d037      	beq.n	800631a <_malloc_r+0xe6>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	f8d8 3000 	ldr.w	r3, [r8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d038      	beq.n	800632a <_malloc_r+0xf6>
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	42a2      	cmp	r2, r4
 80062bc:	d12b      	bne.n	8006316 <_malloc_r+0xe2>
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	e00f      	b.n	80062e4 <_malloc_r+0xb0>
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	1b52      	subs	r2, r2, r5
 80062c8:	d41f      	bmi.n	800630a <_malloc_r+0xd6>
 80062ca:	2a0b      	cmp	r2, #11
 80062cc:	d917      	bls.n	80062fe <_malloc_r+0xca>
 80062ce:	1961      	adds	r1, r4, r5
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	6025      	str	r5, [r4, #0]
 80062d4:	bf18      	it	ne
 80062d6:	6059      	strne	r1, [r3, #4]
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	bf08      	it	eq
 80062dc:	f8c8 1000 	streq.w	r1, [r8]
 80062e0:	5162      	str	r2, [r4, r5]
 80062e2:	604b      	str	r3, [r1, #4]
 80062e4:	4638      	mov	r0, r7
 80062e6:	f104 060b 	add.w	r6, r4, #11
 80062ea:	f000 f829 	bl	8006340 <__malloc_unlock>
 80062ee:	f026 0607 	bic.w	r6, r6, #7
 80062f2:	1d23      	adds	r3, r4, #4
 80062f4:	1af2      	subs	r2, r6, r3
 80062f6:	d0ae      	beq.n	8006256 <_malloc_r+0x22>
 80062f8:	1b9b      	subs	r3, r3, r6
 80062fa:	50a3      	str	r3, [r4, r2]
 80062fc:	e7ab      	b.n	8006256 <_malloc_r+0x22>
 80062fe:	42a3      	cmp	r3, r4
 8006300:	6862      	ldr	r2, [r4, #4]
 8006302:	d1dd      	bne.n	80062c0 <_malloc_r+0x8c>
 8006304:	f8c8 2000 	str.w	r2, [r8]
 8006308:	e7ec      	b.n	80062e4 <_malloc_r+0xb0>
 800630a:	4623      	mov	r3, r4
 800630c:	6864      	ldr	r4, [r4, #4]
 800630e:	e7ac      	b.n	800626a <_malloc_r+0x36>
 8006310:	4634      	mov	r4, r6
 8006312:	6876      	ldr	r6, [r6, #4]
 8006314:	e7b4      	b.n	8006280 <_malloc_r+0x4c>
 8006316:	4613      	mov	r3, r2
 8006318:	e7cc      	b.n	80062b4 <_malloc_r+0x80>
 800631a:	230c      	movs	r3, #12
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4638      	mov	r0, r7
 8006320:	f000 f80e 	bl	8006340 <__malloc_unlock>
 8006324:	e797      	b.n	8006256 <_malloc_r+0x22>
 8006326:	6025      	str	r5, [r4, #0]
 8006328:	e7dc      	b.n	80062e4 <_malloc_r+0xb0>
 800632a:	605b      	str	r3, [r3, #4]
 800632c:	deff      	udf	#255	; 0xff
 800632e:	bf00      	nop
 8006330:	20009294 	.word	0x20009294

08006334 <__malloc_lock>:
 8006334:	4801      	ldr	r0, [pc, #4]	; (800633c <__malloc_lock+0x8>)
 8006336:	f7fa bb73 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 800633a:	bf00      	nop
 800633c:	20000840 	.word	0x20000840

08006340 <__malloc_unlock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_unlock+0x8>)
 8006342:	f7fa bb81 	b.w	8000a48 <__retarget_lock_release_recursive>
 8006346:	bf00      	nop
 8006348:	20000840 	.word	0x20000840

0800634c <std>:
 800634c:	2300      	movs	r3, #0
 800634e:	b510      	push	{r4, lr}
 8006350:	4604      	mov	r4, r0
 8006352:	e9c0 3300 	strd	r3, r3, [r0]
 8006356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800635a:	6083      	str	r3, [r0, #8]
 800635c:	8181      	strh	r1, [r0, #12]
 800635e:	6643      	str	r3, [r0, #100]	; 0x64
 8006360:	81c2      	strh	r2, [r0, #14]
 8006362:	6183      	str	r3, [r0, #24]
 8006364:	4619      	mov	r1, r3
 8006366:	2208      	movs	r2, #8
 8006368:	305c      	adds	r0, #92	; 0x5c
 800636a:	f000 f99b 	bl	80066a4 <memset>
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <std+0x58>)
 8006370:	6263      	str	r3, [r4, #36]	; 0x24
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <std+0x5c>)
 8006374:	62a3      	str	r3, [r4, #40]	; 0x28
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <std+0x60>)
 8006378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <std+0x64>)
 800637c:	6323      	str	r3, [r4, #48]	; 0x30
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <std+0x68>)
 8006380:	6224      	str	r4, [r4, #32]
 8006382:	429c      	cmp	r4, r3
 8006384:	d006      	beq.n	8006394 <std+0x48>
 8006386:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800638a:	4294      	cmp	r4, r2
 800638c:	d002      	beq.n	8006394 <std+0x48>
 800638e:	33d0      	adds	r3, #208	; 0xd0
 8006390:	429c      	cmp	r4, r3
 8006392:	d105      	bne.n	80063a0 <std+0x54>
 8006394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f7fa bb1a 	b.w	80009d4 <__retarget_lock_init_recursive>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	080064f5 	.word	0x080064f5
 80063a8:	08006517 	.word	0x08006517
 80063ac:	0800654f 	.word	0x0800654f
 80063b0:	08006573 	.word	0x08006573
 80063b4:	2000929c 	.word	0x2000929c

080063b8 <stdio_exit_handler>:
 80063b8:	4a02      	ldr	r2, [pc, #8]	; (80063c4 <stdio_exit_handler+0xc>)
 80063ba:	4903      	ldr	r1, [pc, #12]	; (80063c8 <stdio_exit_handler+0x10>)
 80063bc:	4803      	ldr	r0, [pc, #12]	; (80063cc <stdio_exit_handler+0x14>)
 80063be:	f000 b869 	b.w	8006494 <_fwalk_sglue>
 80063c2:	bf00      	nop
 80063c4:	20000010 	.word	0x20000010
 80063c8:	08006ff1 	.word	0x08006ff1
 80063cc:	2000001c 	.word	0x2000001c

080063d0 <cleanup_stdio>:
 80063d0:	6841      	ldr	r1, [r0, #4]
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <cleanup_stdio+0x34>)
 80063d4:	4299      	cmp	r1, r3
 80063d6:	b510      	push	{r4, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	d001      	beq.n	80063e0 <cleanup_stdio+0x10>
 80063dc:	f000 fe08 	bl	8006ff0 <_fflush_r>
 80063e0:	68a1      	ldr	r1, [r4, #8]
 80063e2:	4b09      	ldr	r3, [pc, #36]	; (8006408 <cleanup_stdio+0x38>)
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d002      	beq.n	80063ee <cleanup_stdio+0x1e>
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 fe01 	bl	8006ff0 <_fflush_r>
 80063ee:	68e1      	ldr	r1, [r4, #12]
 80063f0:	4b06      	ldr	r3, [pc, #24]	; (800640c <cleanup_stdio+0x3c>)
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d004      	beq.n	8006400 <cleanup_stdio+0x30>
 80063f6:	4620      	mov	r0, r4
 80063f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063fc:	f000 bdf8 	b.w	8006ff0 <_fflush_r>
 8006400:	bd10      	pop	{r4, pc}
 8006402:	bf00      	nop
 8006404:	2000929c 	.word	0x2000929c
 8006408:	20009304 	.word	0x20009304
 800640c:	2000936c 	.word	0x2000936c

08006410 <global_stdio_init.part.0>:
 8006410:	b510      	push	{r4, lr}
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <global_stdio_init.part.0+0x30>)
 8006414:	4c0b      	ldr	r4, [pc, #44]	; (8006444 <global_stdio_init.part.0+0x34>)
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <global_stdio_init.part.0+0x38>)
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	4620      	mov	r0, r4
 800641c:	2200      	movs	r2, #0
 800641e:	2104      	movs	r1, #4
 8006420:	f7ff ff94 	bl	800634c <std>
 8006424:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006428:	2201      	movs	r2, #1
 800642a:	2109      	movs	r1, #9
 800642c:	f7ff ff8e 	bl	800634c <std>
 8006430:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006434:	2202      	movs	r2, #2
 8006436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643a:	2112      	movs	r1, #18
 800643c:	f7ff bf86 	b.w	800634c <std>
 8006440:	200093d4 	.word	0x200093d4
 8006444:	2000929c 	.word	0x2000929c
 8006448:	080063b9 	.word	0x080063b9

0800644c <__sfp_lock_acquire>:
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <__sfp_lock_acquire+0x8>)
 800644e:	f7fa bae7 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20000834 	.word	0x20000834

08006458 <__sfp_lock_release>:
 8006458:	4801      	ldr	r0, [pc, #4]	; (8006460 <__sfp_lock_release+0x8>)
 800645a:	f7fa baf5 	b.w	8000a48 <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20000834 	.word	0x20000834

08006464 <__sinit>:
 8006464:	b510      	push	{r4, lr}
 8006466:	4604      	mov	r4, r0
 8006468:	f7ff fff0 	bl	800644c <__sfp_lock_acquire>
 800646c:	6a23      	ldr	r3, [r4, #32]
 800646e:	b11b      	cbz	r3, 8006478 <__sinit+0x14>
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f7ff bff0 	b.w	8006458 <__sfp_lock_release>
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <__sinit+0x28>)
 800647a:	6223      	str	r3, [r4, #32]
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <__sinit+0x2c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f5      	bne.n	8006470 <__sinit+0xc>
 8006484:	f7ff ffc4 	bl	8006410 <global_stdio_init.part.0>
 8006488:	e7f2      	b.n	8006470 <__sinit+0xc>
 800648a:	bf00      	nop
 800648c:	080063d1 	.word	0x080063d1
 8006490:	200093d4 	.word	0x200093d4

08006494 <_fwalk_sglue>:
 8006494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006498:	4607      	mov	r7, r0
 800649a:	4688      	mov	r8, r1
 800649c:	4614      	mov	r4, r2
 800649e:	2600      	movs	r6, #0
 80064a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a4:	f1b9 0901 	subs.w	r9, r9, #1
 80064a8:	d505      	bpl.n	80064b6 <_fwalk_sglue+0x22>
 80064aa:	6824      	ldr	r4, [r4, #0]
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	d1f7      	bne.n	80064a0 <_fwalk_sglue+0xc>
 80064b0:	4630      	mov	r0, r6
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d907      	bls.n	80064cc <_fwalk_sglue+0x38>
 80064bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064c0:	3301      	adds	r3, #1
 80064c2:	d003      	beq.n	80064cc <_fwalk_sglue+0x38>
 80064c4:	4629      	mov	r1, r5
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c0      	blx	r8
 80064ca:	4306      	orrs	r6, r0
 80064cc:	3568      	adds	r5, #104	; 0x68
 80064ce:	e7e9      	b.n	80064a4 <_fwalk_sglue+0x10>

080064d0 <iprintf>:
 80064d0:	b40f      	push	{r0, r1, r2, r3}
 80064d2:	b507      	push	{r0, r1, r2, lr}
 80064d4:	4906      	ldr	r1, [pc, #24]	; (80064f0 <iprintf+0x20>)
 80064d6:	ab04      	add	r3, sp, #16
 80064d8:	6808      	ldr	r0, [r1, #0]
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	6881      	ldr	r1, [r0, #8]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f000 fa55 	bl	8006990 <_vfiprintf_r>
 80064e6:	b003      	add	sp, #12
 80064e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ec:	b004      	add	sp, #16
 80064ee:	4770      	bx	lr
 80064f0:	20000068 	.word	0x20000068

080064f4 <__sread>:
 80064f4:	b510      	push	{r4, lr}
 80064f6:	460c      	mov	r4, r1
 80064f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fc:	f000 f966 	bl	80067cc <_read_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	bfab      	itete	ge
 8006504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006506:	89a3      	ldrhlt	r3, [r4, #12]
 8006508:	181b      	addge	r3, r3, r0
 800650a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800650e:	bfac      	ite	ge
 8006510:	6563      	strge	r3, [r4, #84]	; 0x54
 8006512:	81a3      	strhlt	r3, [r4, #12]
 8006514:	bd10      	pop	{r4, pc}

08006516 <__swrite>:
 8006516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651a:	461f      	mov	r7, r3
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	05db      	lsls	r3, r3, #23
 8006520:	4605      	mov	r5, r0
 8006522:	460c      	mov	r4, r1
 8006524:	4616      	mov	r6, r2
 8006526:	d505      	bpl.n	8006534 <__swrite+0x1e>
 8006528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652c:	2302      	movs	r3, #2
 800652e:	2200      	movs	r2, #0
 8006530:	f000 f93a 	bl	80067a8 <_lseek_r>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800653a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	4632      	mov	r2, r6
 8006542:	463b      	mov	r3, r7
 8006544:	4628      	mov	r0, r5
 8006546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800654a:	f000 b961 	b.w	8006810 <_write_r>

0800654e <__sseek>:
 800654e:	b510      	push	{r4, lr}
 8006550:	460c      	mov	r4, r1
 8006552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006556:	f000 f927 	bl	80067a8 <_lseek_r>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	bf15      	itete	ne
 8006560:	6560      	strne	r0, [r4, #84]	; 0x54
 8006562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800656a:	81a3      	strheq	r3, [r4, #12]
 800656c:	bf18      	it	ne
 800656e:	81a3      	strhne	r3, [r4, #12]
 8006570:	bd10      	pop	{r4, pc}

08006572 <__sclose>:
 8006572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006576:	f000 b8b1 	b.w	80066dc <_close_r>

0800657a <__swbuf_r>:
 800657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657c:	460e      	mov	r6, r1
 800657e:	4614      	mov	r4, r2
 8006580:	4605      	mov	r5, r0
 8006582:	b118      	cbz	r0, 800658c <__swbuf_r+0x12>
 8006584:	6a03      	ldr	r3, [r0, #32]
 8006586:	b90b      	cbnz	r3, 800658c <__swbuf_r+0x12>
 8006588:	f7ff ff6c 	bl	8006464 <__sinit>
 800658c:	69a3      	ldr	r3, [r4, #24]
 800658e:	60a3      	str	r3, [r4, #8]
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	071a      	lsls	r2, r3, #28
 8006594:	d525      	bpl.n	80065e2 <__swbuf_r+0x68>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	b31b      	cbz	r3, 80065e2 <__swbuf_r+0x68>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	1a98      	subs	r0, r3, r2
 80065a0:	6963      	ldr	r3, [r4, #20]
 80065a2:	b2f6      	uxtb	r6, r6
 80065a4:	4283      	cmp	r3, r0
 80065a6:	4637      	mov	r7, r6
 80065a8:	dc04      	bgt.n	80065b4 <__swbuf_r+0x3a>
 80065aa:	4621      	mov	r1, r4
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 fd1f 	bl	8006ff0 <_fflush_r>
 80065b2:	b9e0      	cbnz	r0, 80065ee <__swbuf_r+0x74>
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	701e      	strb	r6, [r3, #0]
 80065c2:	6962      	ldr	r2, [r4, #20]
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d004      	beq.n	80065d4 <__swbuf_r+0x5a>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	07db      	lsls	r3, r3, #31
 80065ce:	d506      	bpl.n	80065de <__swbuf_r+0x64>
 80065d0:	2e0a      	cmp	r6, #10
 80065d2:	d104      	bne.n	80065de <__swbuf_r+0x64>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 fd0a 	bl	8006ff0 <_fflush_r>
 80065dc:	b938      	cbnz	r0, 80065ee <__swbuf_r+0x74>
 80065de:	4638      	mov	r0, r7
 80065e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 f805 	bl	80065f4 <__swsetup_r>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d0d5      	beq.n	800659a <__swbuf_r+0x20>
 80065ee:	f04f 37ff 	mov.w	r7, #4294967295
 80065f2:	e7f4      	b.n	80065de <__swbuf_r+0x64>

080065f4 <__swsetup_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <__swsetup_r+0xac>)
 80065f8:	4605      	mov	r5, r0
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	460c      	mov	r4, r1
 80065fe:	b118      	cbz	r0, 8006608 <__swsetup_r+0x14>
 8006600:	6a03      	ldr	r3, [r0, #32]
 8006602:	b90b      	cbnz	r3, 8006608 <__swsetup_r+0x14>
 8006604:	f7ff ff2e 	bl	8006464 <__sinit>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800660e:	0718      	lsls	r0, r3, #28
 8006610:	d422      	bmi.n	8006658 <__swsetup_r+0x64>
 8006612:	06d9      	lsls	r1, r3, #27
 8006614:	d407      	bmi.n	8006626 <__swsetup_r+0x32>
 8006616:	2309      	movs	r3, #9
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	e034      	b.n	8006690 <__swsetup_r+0x9c>
 8006626:	0758      	lsls	r0, r3, #29
 8006628:	d512      	bpl.n	8006650 <__swsetup_r+0x5c>
 800662a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662c:	b141      	cbz	r1, 8006640 <__swsetup_r+0x4c>
 800662e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006632:	4299      	cmp	r1, r3
 8006634:	d002      	beq.n	800663c <__swsetup_r+0x48>
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f934 	bl	80068a4 <_free_r>
 800663c:	2300      	movs	r3, #0
 800663e:	6363      	str	r3, [r4, #52]	; 0x34
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	2300      	movs	r3, #0
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f043 0308 	orr.w	r3, r3, #8
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	b94b      	cbnz	r3, 8006670 <__swsetup_r+0x7c>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006666:	d003      	beq.n	8006670 <__swsetup_r+0x7c>
 8006668:	4621      	mov	r1, r4
 800666a:	4628      	mov	r0, r5
 800666c:	f000 fd0e 	bl	800708c <__smakebuf_r>
 8006670:	89a0      	ldrh	r0, [r4, #12]
 8006672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006676:	f010 0301 	ands.w	r3, r0, #1
 800667a:	d00a      	beq.n	8006692 <__swsetup_r+0x9e>
 800667c:	2300      	movs	r3, #0
 800667e:	60a3      	str	r3, [r4, #8]
 8006680:	6963      	ldr	r3, [r4, #20]
 8006682:	425b      	negs	r3, r3
 8006684:	61a3      	str	r3, [r4, #24]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	b943      	cbnz	r3, 800669c <__swsetup_r+0xa8>
 800668a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800668e:	d1c4      	bne.n	800661a <__swsetup_r+0x26>
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	0781      	lsls	r1, r0, #30
 8006694:	bf58      	it	pl
 8006696:	6963      	ldrpl	r3, [r4, #20]
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	e7f4      	b.n	8006686 <__swsetup_r+0x92>
 800669c:	2000      	movs	r0, #0
 800669e:	e7f7      	b.n	8006690 <__swsetup_r+0x9c>
 80066a0:	20000068 	.word	0x20000068

080066a4 <memset>:
 80066a4:	4402      	add	r2, r0
 80066a6:	4603      	mov	r3, r0
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d100      	bne.n	80066ae <memset+0xa>
 80066ac:	4770      	bx	lr
 80066ae:	f803 1b01 	strb.w	r1, [r3], #1
 80066b2:	e7f9      	b.n	80066a8 <memset+0x4>

080066b4 <strncpy>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	3901      	subs	r1, #1
 80066b8:	4603      	mov	r3, r0
 80066ba:	b132      	cbz	r2, 80066ca <strncpy+0x16>
 80066bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066c0:	f803 4b01 	strb.w	r4, [r3], #1
 80066c4:	3a01      	subs	r2, #1
 80066c6:	2c00      	cmp	r4, #0
 80066c8:	d1f7      	bne.n	80066ba <strncpy+0x6>
 80066ca:	441a      	add	r2, r3
 80066cc:	2100      	movs	r1, #0
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d100      	bne.n	80066d4 <strncpy+0x20>
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	f803 1b01 	strb.w	r1, [r3], #1
 80066d8:	e7f9      	b.n	80066ce <strncpy+0x1a>
	...

080066dc <_close_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_close_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa f853 	bl	8000792 <_close>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_close_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_close_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	200093d8 	.word	0x200093d8

080066fc <_reclaim_reent>:
 80066fc:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <_reclaim_reent+0xa8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4283      	cmp	r3, r0
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	4604      	mov	r4, r0
 8006706:	d04b      	beq.n	80067a0 <_reclaim_reent+0xa4>
 8006708:	69c3      	ldr	r3, [r0, #28]
 800670a:	b143      	cbz	r3, 800671e <_reclaim_reent+0x22>
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d144      	bne.n	800679c <_reclaim_reent+0xa0>
 8006712:	69e3      	ldr	r3, [r4, #28]
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	b111      	cbz	r1, 800671e <_reclaim_reent+0x22>
 8006718:	4620      	mov	r0, r4
 800671a:	f000 f8c3 	bl	80068a4 <_free_r>
 800671e:	6961      	ldr	r1, [r4, #20]
 8006720:	b111      	cbz	r1, 8006728 <_reclaim_reent+0x2c>
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f8be 	bl	80068a4 <_free_r>
 8006728:	69e1      	ldr	r1, [r4, #28]
 800672a:	b111      	cbz	r1, 8006732 <_reclaim_reent+0x36>
 800672c:	4620      	mov	r0, r4
 800672e:	f000 f8b9 	bl	80068a4 <_free_r>
 8006732:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006734:	b111      	cbz	r1, 800673c <_reclaim_reent+0x40>
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f8b4 	bl	80068a4 <_free_r>
 800673c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800673e:	b111      	cbz	r1, 8006746 <_reclaim_reent+0x4a>
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f8af 	bl	80068a4 <_free_r>
 8006746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006748:	b111      	cbz	r1, 8006750 <_reclaim_reent+0x54>
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f8aa 	bl	80068a4 <_free_r>
 8006750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006752:	b111      	cbz	r1, 800675a <_reclaim_reent+0x5e>
 8006754:	4620      	mov	r0, r4
 8006756:	f000 f8a5 	bl	80068a4 <_free_r>
 800675a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800675c:	b111      	cbz	r1, 8006764 <_reclaim_reent+0x68>
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f8a0 	bl	80068a4 <_free_r>
 8006764:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006766:	b111      	cbz	r1, 800676e <_reclaim_reent+0x72>
 8006768:	4620      	mov	r0, r4
 800676a:	f000 f89b 	bl	80068a4 <_free_r>
 800676e:	6a23      	ldr	r3, [r4, #32]
 8006770:	b1b3      	cbz	r3, 80067a0 <_reclaim_reent+0xa4>
 8006772:	4620      	mov	r0, r4
 8006774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006778:	4718      	bx	r3
 800677a:	5949      	ldr	r1, [r1, r5]
 800677c:	b941      	cbnz	r1, 8006790 <_reclaim_reent+0x94>
 800677e:	3504      	adds	r5, #4
 8006780:	69e3      	ldr	r3, [r4, #28]
 8006782:	2d80      	cmp	r5, #128	; 0x80
 8006784:	68d9      	ldr	r1, [r3, #12]
 8006786:	d1f8      	bne.n	800677a <_reclaim_reent+0x7e>
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f88b 	bl	80068a4 <_free_r>
 800678e:	e7c0      	b.n	8006712 <_reclaim_reent+0x16>
 8006790:	680e      	ldr	r6, [r1, #0]
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f886 	bl	80068a4 <_free_r>
 8006798:	4631      	mov	r1, r6
 800679a:	e7ef      	b.n	800677c <_reclaim_reent+0x80>
 800679c:	2500      	movs	r5, #0
 800679e:	e7ef      	b.n	8006780 <_reclaim_reent+0x84>
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
 80067a2:	bf00      	nop
 80067a4:	20000068 	.word	0x20000068

080067a8 <_lseek_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	; (80067c8 <_lseek_r+0x20>)
 80067ac:	4604      	mov	r4, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	602a      	str	r2, [r5, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fa f812 	bl	80007e0 <_lseek>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_lseek_r+0x1e>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_lseek_r+0x1e>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	200093d8 	.word	0x200093d8

080067cc <_read_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d07      	ldr	r5, [pc, #28]	; (80067ec <_read_r+0x20>)
 80067d0:	4604      	mov	r4, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7f9 ffa0 	bl	8000720 <_read>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_read_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_read_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	200093d8 	.word	0x200093d8

080067f0 <_sbrk_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d06      	ldr	r5, [pc, #24]	; (800680c <_sbrk_r+0x1c>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7f9 fffe 	bl	80007fc <_sbrk>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_sbrk_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_sbrk_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	200093d8 	.word	0x200093d8

08006810 <_write_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	; (8006830 <_write_r+0x20>)
 8006814:	4604      	mov	r4, r0
 8006816:	4608      	mov	r0, r1
 8006818:	4611      	mov	r1, r2
 800681a:	2200      	movs	r2, #0
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f7f9 ff9b 	bl	800075a <_write>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_write_r+0x1e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_write_r+0x1e>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200093d8 	.word	0x200093d8

08006834 <__errno>:
 8006834:	4b01      	ldr	r3, [pc, #4]	; (800683c <__errno+0x8>)
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000068 	.word	0x20000068

08006840 <__libc_init_array>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4d0d      	ldr	r5, [pc, #52]	; (8006878 <__libc_init_array+0x38>)
 8006844:	4c0d      	ldr	r4, [pc, #52]	; (800687c <__libc_init_array+0x3c>)
 8006846:	1b64      	subs	r4, r4, r5
 8006848:	10a4      	asrs	r4, r4, #2
 800684a:	2600      	movs	r6, #0
 800684c:	42a6      	cmp	r6, r4
 800684e:	d109      	bne.n	8006864 <__libc_init_array+0x24>
 8006850:	4d0b      	ldr	r5, [pc, #44]	; (8006880 <__libc_init_array+0x40>)
 8006852:	4c0c      	ldr	r4, [pc, #48]	; (8006884 <__libc_init_array+0x44>)
 8006854:	f000 fc78 	bl	8007148 <_init>
 8006858:	1b64      	subs	r4, r4, r5
 800685a:	10a4      	asrs	r4, r4, #2
 800685c:	2600      	movs	r6, #0
 800685e:	42a6      	cmp	r6, r4
 8006860:	d105      	bne.n	800686e <__libc_init_array+0x2e>
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	f855 3b04 	ldr.w	r3, [r5], #4
 8006868:	4798      	blx	r3
 800686a:	3601      	adds	r6, #1
 800686c:	e7ee      	b.n	800684c <__libc_init_array+0xc>
 800686e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006872:	4798      	blx	r3
 8006874:	3601      	adds	r6, #1
 8006876:	e7f2      	b.n	800685e <__libc_init_array+0x1e>
 8006878:	080073a0 	.word	0x080073a0
 800687c:	080073a0 	.word	0x080073a0
 8006880:	080073a0 	.word	0x080073a0
 8006884:	080073a4 	.word	0x080073a4

08006888 <memcpy>:
 8006888:	440a      	add	r2, r1
 800688a:	4291      	cmp	r1, r2
 800688c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006890:	d100      	bne.n	8006894 <memcpy+0xc>
 8006892:	4770      	bx	lr
 8006894:	b510      	push	{r4, lr}
 8006896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800689a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800689e:	4291      	cmp	r1, r2
 80068a0:	d1f9      	bne.n	8006896 <memcpy+0xe>
 80068a2:	bd10      	pop	{r4, pc}

080068a4 <_free_r>:
 80068a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a6:	2900      	cmp	r1, #0
 80068a8:	d044      	beq.n	8006934 <_free_r+0x90>
 80068aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ae:	9001      	str	r0, [sp, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f1a1 0404 	sub.w	r4, r1, #4
 80068b6:	bfb8      	it	lt
 80068b8:	18e4      	addlt	r4, r4, r3
 80068ba:	f7ff fd3b 	bl	8006334 <__malloc_lock>
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <_free_r+0x94>)
 80068c0:	9801      	ldr	r0, [sp, #4]
 80068c2:	6813      	ldr	r3, [r2, #0]
 80068c4:	b933      	cbnz	r3, 80068d4 <_free_r+0x30>
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	6014      	str	r4, [r2, #0]
 80068ca:	b003      	add	sp, #12
 80068cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d0:	f7ff bd36 	b.w	8006340 <__malloc_unlock>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d908      	bls.n	80068ea <_free_r+0x46>
 80068d8:	6825      	ldr	r5, [r4, #0]
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf01      	itttt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	1949      	addeq	r1, r1, r5
 80068e6:	6021      	streq	r1, [r4, #0]
 80068e8:	e7ed      	b.n	80068c6 <_free_r+0x22>
 80068ea:	461a      	mov	r2, r3
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b10b      	cbz	r3, 80068f4 <_free_r+0x50>
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d9fa      	bls.n	80068ea <_free_r+0x46>
 80068f4:	6811      	ldr	r1, [r2, #0]
 80068f6:	1855      	adds	r5, r2, r1
 80068f8:	42a5      	cmp	r5, r4
 80068fa:	d10b      	bne.n	8006914 <_free_r+0x70>
 80068fc:	6824      	ldr	r4, [r4, #0]
 80068fe:	4421      	add	r1, r4
 8006900:	1854      	adds	r4, r2, r1
 8006902:	42a3      	cmp	r3, r4
 8006904:	6011      	str	r1, [r2, #0]
 8006906:	d1e0      	bne.n	80068ca <_free_r+0x26>
 8006908:	681c      	ldr	r4, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	6053      	str	r3, [r2, #4]
 800690e:	440c      	add	r4, r1
 8006910:	6014      	str	r4, [r2, #0]
 8006912:	e7da      	b.n	80068ca <_free_r+0x26>
 8006914:	d902      	bls.n	800691c <_free_r+0x78>
 8006916:	230c      	movs	r3, #12
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	e7d6      	b.n	80068ca <_free_r+0x26>
 800691c:	6825      	ldr	r5, [r4, #0]
 800691e:	1961      	adds	r1, r4, r5
 8006920:	428b      	cmp	r3, r1
 8006922:	bf04      	itt	eq
 8006924:	6819      	ldreq	r1, [r3, #0]
 8006926:	685b      	ldreq	r3, [r3, #4]
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	bf04      	itt	eq
 800692c:	1949      	addeq	r1, r1, r5
 800692e:	6021      	streq	r1, [r4, #0]
 8006930:	6054      	str	r4, [r2, #4]
 8006932:	e7ca      	b.n	80068ca <_free_r+0x26>
 8006934:	b003      	add	sp, #12
 8006936:	bd30      	pop	{r4, r5, pc}
 8006938:	20009294 	.word	0x20009294

0800693c <__sfputc_r>:
 800693c:	6893      	ldr	r3, [r2, #8]
 800693e:	3b01      	subs	r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	b410      	push	{r4}
 8006944:	6093      	str	r3, [r2, #8]
 8006946:	da08      	bge.n	800695a <__sfputc_r+0x1e>
 8006948:	6994      	ldr	r4, [r2, #24]
 800694a:	42a3      	cmp	r3, r4
 800694c:	db01      	blt.n	8006952 <__sfputc_r+0x16>
 800694e:	290a      	cmp	r1, #10
 8006950:	d103      	bne.n	800695a <__sfputc_r+0x1e>
 8006952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006956:	f7ff be10 	b.w	800657a <__swbuf_r>
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	1c58      	adds	r0, r3, #1
 800695e:	6010      	str	r0, [r2, #0]
 8006960:	7019      	strb	r1, [r3, #0]
 8006962:	4608      	mov	r0, r1
 8006964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006968:	4770      	bx	lr

0800696a <__sfputs_r>:
 800696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	4614      	mov	r4, r2
 8006972:	18d5      	adds	r5, r2, r3
 8006974:	42ac      	cmp	r4, r5
 8006976:	d101      	bne.n	800697c <__sfputs_r+0x12>
 8006978:	2000      	movs	r0, #0
 800697a:	e007      	b.n	800698c <__sfputs_r+0x22>
 800697c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006980:	463a      	mov	r2, r7
 8006982:	4630      	mov	r0, r6
 8006984:	f7ff ffda 	bl	800693c <__sfputc_r>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d1f3      	bne.n	8006974 <__sfputs_r+0xa>
 800698c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006990 <_vfiprintf_r>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	460d      	mov	r5, r1
 8006996:	b09d      	sub	sp, #116	; 0x74
 8006998:	4614      	mov	r4, r2
 800699a:	4698      	mov	r8, r3
 800699c:	4606      	mov	r6, r0
 800699e:	b118      	cbz	r0, 80069a8 <_vfiprintf_r+0x18>
 80069a0:	6a03      	ldr	r3, [r0, #32]
 80069a2:	b90b      	cbnz	r3, 80069a8 <_vfiprintf_r+0x18>
 80069a4:	f7ff fd5e 	bl	8006464 <__sinit>
 80069a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	d405      	bmi.n	80069ba <_vfiprintf_r+0x2a>
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	059a      	lsls	r2, r3, #22
 80069b2:	d402      	bmi.n	80069ba <_vfiprintf_r+0x2a>
 80069b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b6:	f7fa f833 	bl	8000a20 <__retarget_lock_acquire_recursive>
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	071b      	lsls	r3, r3, #28
 80069be:	d501      	bpl.n	80069c4 <_vfiprintf_r+0x34>
 80069c0:	692b      	ldr	r3, [r5, #16]
 80069c2:	b99b      	cbnz	r3, 80069ec <_vfiprintf_r+0x5c>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff fe14 	bl	80065f4 <__swsetup_r>
 80069cc:	b170      	cbz	r0, 80069ec <_vfiprintf_r+0x5c>
 80069ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d0:	07dc      	lsls	r4, r3, #31
 80069d2:	d504      	bpl.n	80069de <_vfiprintf_r+0x4e>
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	b01d      	add	sp, #116	; 0x74
 80069da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	0598      	lsls	r0, r3, #22
 80069e2:	d4f7      	bmi.n	80069d4 <_vfiprintf_r+0x44>
 80069e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e6:	f7fa f82f 	bl	8000a48 <__retarget_lock_release_recursive>
 80069ea:	e7f3      	b.n	80069d4 <_vfiprintf_r+0x44>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	2320      	movs	r3, #32
 80069f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fa:	2330      	movs	r3, #48	; 0x30
 80069fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006bb0 <_vfiprintf_r+0x220>
 8006a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a04:	f04f 0901 	mov.w	r9, #1
 8006a08:	4623      	mov	r3, r4
 8006a0a:	469a      	mov	sl, r3
 8006a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a10:	b10a      	cbz	r2, 8006a16 <_vfiprintf_r+0x86>
 8006a12:	2a25      	cmp	r2, #37	; 0x25
 8006a14:	d1f9      	bne.n	8006a0a <_vfiprintf_r+0x7a>
 8006a16:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1a:	d00b      	beq.n	8006a34 <_vfiprintf_r+0xa4>
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ffa1 	bl	800696a <__sfputs_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f000 80a9 	beq.w	8006b80 <_vfiprintf_r+0x1f0>
 8006a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a30:	445a      	add	r2, fp
 8006a32:	9209      	str	r2, [sp, #36]	; 0x24
 8006a34:	f89a 3000 	ldrb.w	r3, [sl]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80a1 	beq.w	8006b80 <_vfiprintf_r+0x1f0>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a48:	f10a 0a01 	add.w	sl, sl, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a54:	931a      	str	r3, [sp, #104]	; 0x68
 8006a56:	4654      	mov	r4, sl
 8006a58:	2205      	movs	r2, #5
 8006a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5e:	4854      	ldr	r0, [pc, #336]	; (8006bb0 <_vfiprintf_r+0x220>)
 8006a60:	f7f9 fbde 	bl	8000220 <memchr>
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	b9d8      	cbnz	r0, 8006aa0 <_vfiprintf_r+0x110>
 8006a68:	06d1      	lsls	r1, r2, #27
 8006a6a:	bf44      	itt	mi
 8006a6c:	2320      	movmi	r3, #32
 8006a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a72:	0713      	lsls	r3, r2, #28
 8006a74:	bf44      	itt	mi
 8006a76:	232b      	movmi	r3, #43	; 0x2b
 8006a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a80:	2b2a      	cmp	r3, #42	; 0x2a
 8006a82:	d015      	beq.n	8006ab0 <_vfiprintf_r+0x120>
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	4654      	mov	r4, sl
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f04f 0c0a 	mov.w	ip, #10
 8006a8e:	4621      	mov	r1, r4
 8006a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a94:	3b30      	subs	r3, #48	; 0x30
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	d94d      	bls.n	8006b36 <_vfiprintf_r+0x1a6>
 8006a9a:	b1b0      	cbz	r0, 8006aca <_vfiprintf_r+0x13a>
 8006a9c:	9207      	str	r2, [sp, #28]
 8006a9e:	e014      	b.n	8006aca <_vfiprintf_r+0x13a>
 8006aa0:	eba0 0308 	sub.w	r3, r0, r8
 8006aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	46a2      	mov	sl, r4
 8006aae:	e7d2      	b.n	8006a56 <_vfiprintf_r+0xc6>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	1d19      	adds	r1, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	9103      	str	r1, [sp, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfbb      	ittet	lt
 8006abc:	425b      	neglt	r3, r3
 8006abe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac2:	9307      	strge	r3, [sp, #28]
 8006ac4:	9307      	strlt	r3, [sp, #28]
 8006ac6:	bfb8      	it	lt
 8006ac8:	9204      	strlt	r2, [sp, #16]
 8006aca:	7823      	ldrb	r3, [r4, #0]
 8006acc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ace:	d10c      	bne.n	8006aea <_vfiprintf_r+0x15a>
 8006ad0:	7863      	ldrb	r3, [r4, #1]
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d134      	bne.n	8006b40 <_vfiprintf_r+0x1b0>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	1d1a      	adds	r2, r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9203      	str	r2, [sp, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfb8      	it	lt
 8006ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae6:	3402      	adds	r4, #2
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006bc0 <_vfiprintf_r+0x230>
 8006aee:	7821      	ldrb	r1, [r4, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	4650      	mov	r0, sl
 8006af4:	f7f9 fb94 	bl	8000220 <memchr>
 8006af8:	b138      	cbz	r0, 8006b0a <_vfiprintf_r+0x17a>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	eba0 000a 	sub.w	r0, r0, sl
 8006b00:	2240      	movs	r2, #64	; 0x40
 8006b02:	4082      	lsls	r2, r0
 8006b04:	4313      	orrs	r3, r2
 8006b06:	3401      	adds	r4, #1
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0e:	4829      	ldr	r0, [pc, #164]	; (8006bb4 <_vfiprintf_r+0x224>)
 8006b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b14:	2206      	movs	r2, #6
 8006b16:	f7f9 fb83 	bl	8000220 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d03f      	beq.n	8006b9e <_vfiprintf_r+0x20e>
 8006b1e:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <_vfiprintf_r+0x228>)
 8006b20:	bb1b      	cbnz	r3, 8006b6a <_vfiprintf_r+0x1da>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	3307      	adds	r3, #7
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	443b      	add	r3, r7
 8006b32:	9309      	str	r3, [sp, #36]	; 0x24
 8006b34:	e768      	b.n	8006a08 <_vfiprintf_r+0x78>
 8006b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e7a6      	b.n	8006a8e <_vfiprintf_r+0xfe>
 8006b40:	2300      	movs	r3, #0
 8006b42:	3401      	adds	r4, #1
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	4619      	mov	r1, r3
 8006b48:	f04f 0c0a 	mov.w	ip, #10
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b52:	3a30      	subs	r2, #48	; 0x30
 8006b54:	2a09      	cmp	r2, #9
 8006b56:	d903      	bls.n	8006b60 <_vfiprintf_r+0x1d0>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0c6      	beq.n	8006aea <_vfiprintf_r+0x15a>
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	e7c4      	b.n	8006aea <_vfiprintf_r+0x15a>
 8006b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b64:	4604      	mov	r4, r0
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7f0      	b.n	8006b4c <_vfiprintf_r+0x1bc>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <_vfiprintf_r+0x22c>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f3af 8000 	nop.w
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	1c78      	adds	r0, r7, #1
 8006b7e:	d1d6      	bne.n	8006b2e <_vfiprintf_r+0x19e>
 8006b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_vfiprintf_r+0x202>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	059a      	lsls	r2, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_vfiprintf_r+0x202>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b8e:	f7f9 ff5b 	bl	8000a48 <__retarget_lock_release_recursive>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	065b      	lsls	r3, r3, #25
 8006b96:	f53f af1d 	bmi.w	80069d4 <_vfiprintf_r+0x44>
 8006b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9c:	e71c      	b.n	80069d8 <_vfiprintf_r+0x48>
 8006b9e:	ab03      	add	r3, sp, #12
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <_vfiprintf_r+0x22c>)
 8006ba6:	a904      	add	r1, sp, #16
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f879 	bl	8006ca0 <_printf_i>
 8006bae:	e7e4      	b.n	8006b7a <_vfiprintf_r+0x1ea>
 8006bb0:	0800736c 	.word	0x0800736c
 8006bb4:	08007376 	.word	0x08007376
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	0800696b 	.word	0x0800696b
 8006bc0:	08007372 	.word	0x08007372

08006bc4 <_printf_common>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	4616      	mov	r6, r2
 8006bca:	4699      	mov	r9, r3
 8006bcc:	688a      	ldr	r2, [r1, #8]
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bfb8      	it	lt
 8006bd8:	4613      	movlt	r3, r2
 8006bda:	6033      	str	r3, [r6, #0]
 8006bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be0:	4607      	mov	r7, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b10a      	cbz	r2, 8006bea <_printf_common+0x26>
 8006be6:	3301      	adds	r3, #1
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	0699      	lsls	r1, r3, #26
 8006bee:	bf42      	ittt	mi
 8006bf0:	6833      	ldrmi	r3, [r6, #0]
 8006bf2:	3302      	addmi	r3, #2
 8006bf4:	6033      	strmi	r3, [r6, #0]
 8006bf6:	6825      	ldr	r5, [r4, #0]
 8006bf8:	f015 0506 	ands.w	r5, r5, #6
 8006bfc:	d106      	bne.n	8006c0c <_printf_common+0x48>
 8006bfe:	f104 0a19 	add.w	sl, r4, #25
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	6832      	ldr	r2, [r6, #0]
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc26      	bgt.n	8006c5a <_printf_common+0x96>
 8006c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c10:	1e13      	subs	r3, r2, #0
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	bf18      	it	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	0692      	lsls	r2, r2, #26
 8006c1a:	d42b      	bmi.n	8006c74 <_printf_common+0xb0>
 8006c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c20:	4649      	mov	r1, r9
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	3001      	adds	r0, #1
 8006c28:	d01e      	beq.n	8006c68 <_printf_common+0xa4>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	6922      	ldr	r2, [r4, #16]
 8006c2e:	f003 0306 	and.w	r3, r3, #6
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	bf02      	ittt	eq
 8006c36:	68e5      	ldreq	r5, [r4, #12]
 8006c38:	6833      	ldreq	r3, [r6, #0]
 8006c3a:	1aed      	subeq	r5, r5, r3
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	bf0c      	ite	eq
 8006c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c44:	2500      	movne	r5, #0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bfc4      	itt	gt
 8006c4a:	1a9b      	subgt	r3, r3, r2
 8006c4c:	18ed      	addgt	r5, r5, r3
 8006c4e:	2600      	movs	r6, #0
 8006c50:	341a      	adds	r4, #26
 8006c52:	42b5      	cmp	r5, r6
 8006c54:	d11a      	bne.n	8006c8c <_printf_common+0xc8>
 8006c56:	2000      	movs	r0, #0
 8006c58:	e008      	b.n	8006c6c <_printf_common+0xa8>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4638      	mov	r0, r7
 8006c62:	47c0      	blx	r8
 8006c64:	3001      	adds	r0, #1
 8006c66:	d103      	bne.n	8006c70 <_printf_common+0xac>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c70:	3501      	adds	r5, #1
 8006c72:	e7c6      	b.n	8006c02 <_printf_common+0x3e>
 8006c74:	18e1      	adds	r1, r4, r3
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	2030      	movs	r0, #48	; 0x30
 8006c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c7e:	4422      	add	r2, r4
 8006c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c88:	3302      	adds	r3, #2
 8006c8a:	e7c7      	b.n	8006c1c <_printf_common+0x58>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4649      	mov	r1, r9
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	3001      	adds	r0, #1
 8006c98:	d0e6      	beq.n	8006c68 <_printf_common+0xa4>
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7d9      	b.n	8006c52 <_printf_common+0x8e>
	...

08006ca0 <_printf_i>:
 8006ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	7e0f      	ldrb	r7, [r1, #24]
 8006ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca8:	2f78      	cmp	r7, #120	; 0x78
 8006caa:	4691      	mov	r9, r2
 8006cac:	4680      	mov	r8, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cb6:	d807      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cb8:	2f62      	cmp	r7, #98	; 0x62
 8006cba:	d80a      	bhi.n	8006cd2 <_printf_i+0x32>
 8006cbc:	2f00      	cmp	r7, #0
 8006cbe:	f000 80d4 	beq.w	8006e6a <_printf_i+0x1ca>
 8006cc2:	2f58      	cmp	r7, #88	; 0x58
 8006cc4:	f000 80c0 	beq.w	8006e48 <_printf_i+0x1a8>
 8006cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cd0:	e03a      	b.n	8006d48 <_printf_i+0xa8>
 8006cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cd6:	2b15      	cmp	r3, #21
 8006cd8:	d8f6      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cda:	a101      	add	r1, pc, #4	; (adr r1, 8006ce0 <_printf_i+0x40>)
 8006cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006cc9 	.word	0x08006cc9
 8006cec:	08006cc9 	.word	0x08006cc9
 8006cf0:	08006cc9 	.word	0x08006cc9
 8006cf4:	08006cc9 	.word	0x08006cc9
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006cc9 	.word	0x08006cc9
 8006d00:	08006cc9 	.word	0x08006cc9
 8006d04:	08006cc9 	.word	0x08006cc9
 8006d08:	08006cc9 	.word	0x08006cc9
 8006d0c:	08006e51 	.word	0x08006e51
 8006d10:	08006d79 	.word	0x08006d79
 8006d14:	08006e0b 	.word	0x08006e0b
 8006d18:	08006cc9 	.word	0x08006cc9
 8006d1c:	08006cc9 	.word	0x08006cc9
 8006d20:	08006e73 	.word	0x08006e73
 8006d24:	08006cc9 	.word	0x08006cc9
 8006d28:	08006d79 	.word	0x08006d79
 8006d2c:	08006cc9 	.word	0x08006cc9
 8006d30:	08006cc9 	.word	0x08006cc9
 8006d34:	08006e13 	.word	0x08006e13
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	1d1a      	adds	r2, r3, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e09f      	b.n	8006e8c <_printf_i+0x1ec>
 8006d4c:	6820      	ldr	r0, [r4, #0]
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	0607      	lsls	r7, r0, #24
 8006d52:	f103 0104 	add.w	r1, r3, #4
 8006d56:	6029      	str	r1, [r5, #0]
 8006d58:	d501      	bpl.n	8006d5e <_printf_i+0xbe>
 8006d5a:	681e      	ldr	r6, [r3, #0]
 8006d5c:	e003      	b.n	8006d66 <_printf_i+0xc6>
 8006d5e:	0646      	lsls	r6, r0, #25
 8006d60:	d5fb      	bpl.n	8006d5a <_printf_i+0xba>
 8006d62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	da03      	bge.n	8006d72 <_printf_i+0xd2>
 8006d6a:	232d      	movs	r3, #45	; 0x2d
 8006d6c:	4276      	negs	r6, r6
 8006d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d72:	485a      	ldr	r0, [pc, #360]	; (8006edc <_printf_i+0x23c>)
 8006d74:	230a      	movs	r3, #10
 8006d76:	e012      	b.n	8006d9e <_printf_i+0xfe>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	6820      	ldr	r0, [r4, #0]
 8006d7c:	1d19      	adds	r1, r3, #4
 8006d7e:	6029      	str	r1, [r5, #0]
 8006d80:	0605      	lsls	r5, r0, #24
 8006d82:	d501      	bpl.n	8006d88 <_printf_i+0xe8>
 8006d84:	681e      	ldr	r6, [r3, #0]
 8006d86:	e002      	b.n	8006d8e <_printf_i+0xee>
 8006d88:	0641      	lsls	r1, r0, #25
 8006d8a:	d5fb      	bpl.n	8006d84 <_printf_i+0xe4>
 8006d8c:	881e      	ldrh	r6, [r3, #0]
 8006d8e:	4853      	ldr	r0, [pc, #332]	; (8006edc <_printf_i+0x23c>)
 8006d90:	2f6f      	cmp	r7, #111	; 0x6f
 8006d92:	bf0c      	ite	eq
 8006d94:	2308      	moveq	r3, #8
 8006d96:	230a      	movne	r3, #10
 8006d98:	2100      	movs	r1, #0
 8006d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9e:	6865      	ldr	r5, [r4, #4]
 8006da0:	60a5      	str	r5, [r4, #8]
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	bfa2      	ittt	ge
 8006da6:	6821      	ldrge	r1, [r4, #0]
 8006da8:	f021 0104 	bicge.w	r1, r1, #4
 8006dac:	6021      	strge	r1, [r4, #0]
 8006dae:	b90e      	cbnz	r6, 8006db4 <_printf_i+0x114>
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d04b      	beq.n	8006e4c <_printf_i+0x1ac>
 8006db4:	4615      	mov	r5, r2
 8006db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dba:	fb03 6711 	mls	r7, r3, r1, r6
 8006dbe:	5dc7      	ldrb	r7, [r0, r7]
 8006dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	42bb      	cmp	r3, r7
 8006dc8:	460e      	mov	r6, r1
 8006dca:	d9f4      	bls.n	8006db6 <_printf_i+0x116>
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d10b      	bne.n	8006de8 <_printf_i+0x148>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	07de      	lsls	r6, r3, #31
 8006dd4:	d508      	bpl.n	8006de8 <_printf_i+0x148>
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	6861      	ldr	r1, [r4, #4]
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	bfde      	ittt	le
 8006dde:	2330      	movle	r3, #48	; 0x30
 8006de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006de8:	1b52      	subs	r2, r2, r5
 8006dea:	6122      	str	r2, [r4, #16]
 8006dec:	f8cd a000 	str.w	sl, [sp]
 8006df0:	464b      	mov	r3, r9
 8006df2:	aa03      	add	r2, sp, #12
 8006df4:	4621      	mov	r1, r4
 8006df6:	4640      	mov	r0, r8
 8006df8:	f7ff fee4 	bl	8006bc4 <_printf_common>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d14a      	bne.n	8006e96 <_printf_i+0x1f6>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	b004      	add	sp, #16
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f043 0320 	orr.w	r3, r3, #32
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	4833      	ldr	r0, [pc, #204]	; (8006ee0 <_printf_i+0x240>)
 8006e14:	2778      	movs	r7, #120	; 0x78
 8006e16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	6829      	ldr	r1, [r5, #0]
 8006e1e:	061f      	lsls	r7, r3, #24
 8006e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e24:	d402      	bmi.n	8006e2c <_printf_i+0x18c>
 8006e26:	065f      	lsls	r7, r3, #25
 8006e28:	bf48      	it	mi
 8006e2a:	b2b6      	uxthmi	r6, r6
 8006e2c:	07df      	lsls	r7, r3, #31
 8006e2e:	bf48      	it	mi
 8006e30:	f043 0320 	orrmi.w	r3, r3, #32
 8006e34:	6029      	str	r1, [r5, #0]
 8006e36:	bf48      	it	mi
 8006e38:	6023      	strmi	r3, [r4, #0]
 8006e3a:	b91e      	cbnz	r6, 8006e44 <_printf_i+0x1a4>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	f023 0320 	bic.w	r3, r3, #32
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	2310      	movs	r3, #16
 8006e46:	e7a7      	b.n	8006d98 <_printf_i+0xf8>
 8006e48:	4824      	ldr	r0, [pc, #144]	; (8006edc <_printf_i+0x23c>)
 8006e4a:	e7e4      	b.n	8006e16 <_printf_i+0x176>
 8006e4c:	4615      	mov	r5, r2
 8006e4e:	e7bd      	b.n	8006dcc <_printf_i+0x12c>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	6826      	ldr	r6, [r4, #0]
 8006e54:	6961      	ldr	r1, [r4, #20]
 8006e56:	1d18      	adds	r0, r3, #4
 8006e58:	6028      	str	r0, [r5, #0]
 8006e5a:	0635      	lsls	r5, r6, #24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	d501      	bpl.n	8006e64 <_printf_i+0x1c4>
 8006e60:	6019      	str	r1, [r3, #0]
 8006e62:	e002      	b.n	8006e6a <_printf_i+0x1ca>
 8006e64:	0670      	lsls	r0, r6, #25
 8006e66:	d5fb      	bpl.n	8006e60 <_printf_i+0x1c0>
 8006e68:	8019      	strh	r1, [r3, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	4615      	mov	r5, r2
 8006e70:	e7bc      	b.n	8006dec <_printf_i+0x14c>
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	1d1a      	adds	r2, r3, #4
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	6862      	ldr	r2, [r4, #4]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7f9 f9ce 	bl	8000220 <memchr>
 8006e84:	b108      	cbz	r0, 8006e8a <_printf_i+0x1ea>
 8006e86:	1b40      	subs	r0, r0, r5
 8006e88:	6060      	str	r0, [r4, #4]
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e94:	e7aa      	b.n	8006dec <_printf_i+0x14c>
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	47d0      	blx	sl
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d0ad      	beq.n	8006e00 <_printf_i+0x160>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	079b      	lsls	r3, r3, #30
 8006ea8:	d413      	bmi.n	8006ed2 <_printf_i+0x232>
 8006eaa:	68e0      	ldr	r0, [r4, #12]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	4298      	cmp	r0, r3
 8006eb0:	bfb8      	it	lt
 8006eb2:	4618      	movlt	r0, r3
 8006eb4:	e7a6      	b.n	8006e04 <_printf_i+0x164>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4632      	mov	r2, r6
 8006eba:	4649      	mov	r1, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	47d0      	blx	sl
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d09d      	beq.n	8006e00 <_printf_i+0x160>
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	9903      	ldr	r1, [sp, #12]
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	42ab      	cmp	r3, r5
 8006ece:	dcf2      	bgt.n	8006eb6 <_printf_i+0x216>
 8006ed0:	e7eb      	b.n	8006eaa <_printf_i+0x20a>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	f104 0619 	add.w	r6, r4, #25
 8006ed8:	e7f5      	b.n	8006ec6 <_printf_i+0x226>
 8006eda:	bf00      	nop
 8006edc:	0800737d 	.word	0x0800737d
 8006ee0:	0800738e 	.word	0x0800738e

08006ee4 <__sflush_r>:
 8006ee4:	898a      	ldrh	r2, [r1, #12]
 8006ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eea:	4605      	mov	r5, r0
 8006eec:	0710      	lsls	r0, r2, #28
 8006eee:	460c      	mov	r4, r1
 8006ef0:	d458      	bmi.n	8006fa4 <__sflush_r+0xc0>
 8006ef2:	684b      	ldr	r3, [r1, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc05      	bgt.n	8006f04 <__sflush_r+0x20>
 8006ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dc02      	bgt.n	8006f04 <__sflush_r+0x20>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d0f9      	beq.n	8006efe <__sflush_r+0x1a>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f10:	682f      	ldr	r7, [r5, #0]
 8006f12:	6a21      	ldr	r1, [r4, #32]
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	d032      	beq.n	8006f7e <__sflush_r+0x9a>
 8006f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	075a      	lsls	r2, r3, #29
 8006f1e:	d505      	bpl.n	8006f2c <__sflush_r+0x48>
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	1ac0      	subs	r0, r0, r3
 8006f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f26:	b10b      	cbz	r3, 8006f2c <__sflush_r+0x48>
 8006f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f2a:	1ac0      	subs	r0, r0, r3
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f32:	6a21      	ldr	r1, [r4, #32]
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b0      	blx	r6
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	d106      	bne.n	8006f4c <__sflush_r+0x68>
 8006f3e:	6829      	ldr	r1, [r5, #0]
 8006f40:	291d      	cmp	r1, #29
 8006f42:	d82b      	bhi.n	8006f9c <__sflush_r+0xb8>
 8006f44:	4a29      	ldr	r2, [pc, #164]	; (8006fec <__sflush_r+0x108>)
 8006f46:	410a      	asrs	r2, r1
 8006f48:	07d6      	lsls	r6, r2, #31
 8006f4a:	d427      	bmi.n	8006f9c <__sflush_r+0xb8>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6062      	str	r2, [r4, #4]
 8006f50:	04d9      	lsls	r1, r3, #19
 8006f52:	6922      	ldr	r2, [r4, #16]
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	d504      	bpl.n	8006f62 <__sflush_r+0x7e>
 8006f58:	1c42      	adds	r2, r0, #1
 8006f5a:	d101      	bne.n	8006f60 <__sflush_r+0x7c>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b903      	cbnz	r3, 8006f62 <__sflush_r+0x7e>
 8006f60:	6560      	str	r0, [r4, #84]	; 0x54
 8006f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f64:	602f      	str	r7, [r5, #0]
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d0c9      	beq.n	8006efe <__sflush_r+0x1a>
 8006f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	d002      	beq.n	8006f78 <__sflush_r+0x94>
 8006f72:	4628      	mov	r0, r5
 8006f74:	f7ff fc96 	bl	80068a4 <_free_r>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8006f7c:	e7c0      	b.n	8006f00 <__sflush_r+0x1c>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b0      	blx	r6
 8006f84:	1c41      	adds	r1, r0, #1
 8006f86:	d1c8      	bne.n	8006f1a <__sflush_r+0x36>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c5      	beq.n	8006f1a <__sflush_r+0x36>
 8006f8e:	2b1d      	cmp	r3, #29
 8006f90:	d001      	beq.n	8006f96 <__sflush_r+0xb2>
 8006f92:	2b16      	cmp	r3, #22
 8006f94:	d101      	bne.n	8006f9a <__sflush_r+0xb6>
 8006f96:	602f      	str	r7, [r5, #0]
 8006f98:	e7b1      	b.n	8006efe <__sflush_r+0x1a>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	e7ad      	b.n	8006f00 <__sflush_r+0x1c>
 8006fa4:	690f      	ldr	r7, [r1, #16]
 8006fa6:	2f00      	cmp	r7, #0
 8006fa8:	d0a9      	beq.n	8006efe <__sflush_r+0x1a>
 8006faa:	0793      	lsls	r3, r2, #30
 8006fac:	680e      	ldr	r6, [r1, #0]
 8006fae:	bf08      	it	eq
 8006fb0:	694b      	ldreq	r3, [r1, #20]
 8006fb2:	600f      	str	r7, [r1, #0]
 8006fb4:	bf18      	it	ne
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	eba6 0807 	sub.w	r8, r6, r7
 8006fbc:	608b      	str	r3, [r1, #8]
 8006fbe:	f1b8 0f00 	cmp.w	r8, #0
 8006fc2:	dd9c      	ble.n	8006efe <__sflush_r+0x1a>
 8006fc4:	6a21      	ldr	r1, [r4, #32]
 8006fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fc8:	4643      	mov	r3, r8
 8006fca:	463a      	mov	r2, r7
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b0      	blx	r6
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dc06      	bgt.n	8006fe2 <__sflush_r+0xfe>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	e78e      	b.n	8006f00 <__sflush_r+0x1c>
 8006fe2:	4407      	add	r7, r0
 8006fe4:	eba8 0800 	sub.w	r8, r8, r0
 8006fe8:	e7e9      	b.n	8006fbe <__sflush_r+0xda>
 8006fea:	bf00      	nop
 8006fec:	dfbffffe 	.word	0xdfbffffe

08006ff0 <_fflush_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	690b      	ldr	r3, [r1, #16]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b913      	cbnz	r3, 8007000 <_fflush_r+0x10>
 8006ffa:	2500      	movs	r5, #0
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	b118      	cbz	r0, 800700a <_fflush_r+0x1a>
 8007002:	6a03      	ldr	r3, [r0, #32]
 8007004:	b90b      	cbnz	r3, 800700a <_fflush_r+0x1a>
 8007006:	f7ff fa2d 	bl	8006464 <__sinit>
 800700a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f3      	beq.n	8006ffa <_fflush_r+0xa>
 8007012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007014:	07d0      	lsls	r0, r2, #31
 8007016:	d404      	bmi.n	8007022 <_fflush_r+0x32>
 8007018:	0599      	lsls	r1, r3, #22
 800701a:	d402      	bmi.n	8007022 <_fflush_r+0x32>
 800701c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800701e:	f7f9 fcff 	bl	8000a20 <__retarget_lock_acquire_recursive>
 8007022:	4628      	mov	r0, r5
 8007024:	4621      	mov	r1, r4
 8007026:	f7ff ff5d 	bl	8006ee4 <__sflush_r>
 800702a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800702c:	07da      	lsls	r2, r3, #31
 800702e:	4605      	mov	r5, r0
 8007030:	d4e4      	bmi.n	8006ffc <_fflush_r+0xc>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	059b      	lsls	r3, r3, #22
 8007036:	d4e1      	bmi.n	8006ffc <_fflush_r+0xc>
 8007038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703a:	f7f9 fd05 	bl	8000a48 <__retarget_lock_release_recursive>
 800703e:	e7dd      	b.n	8006ffc <_fflush_r+0xc>

08007040 <__swhatbuf_r>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	460c      	mov	r4, r1
 8007044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007048:	2900      	cmp	r1, #0
 800704a:	b096      	sub	sp, #88	; 0x58
 800704c:	4615      	mov	r5, r2
 800704e:	461e      	mov	r6, r3
 8007050:	da0d      	bge.n	800706e <__swhatbuf_r+0x2e>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007058:	f04f 0100 	mov.w	r1, #0
 800705c:	bf0c      	ite	eq
 800705e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007062:	2340      	movne	r3, #64	; 0x40
 8007064:	2000      	movs	r0, #0
 8007066:	6031      	str	r1, [r6, #0]
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	b016      	add	sp, #88	; 0x58
 800706c:	bd70      	pop	{r4, r5, r6, pc}
 800706e:	466a      	mov	r2, sp
 8007070:	f000 f848 	bl	8007104 <_fstat_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	dbec      	blt.n	8007052 <__swhatbuf_r+0x12>
 8007078:	9901      	ldr	r1, [sp, #4]
 800707a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800707e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007082:	4259      	negs	r1, r3
 8007084:	4159      	adcs	r1, r3
 8007086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708a:	e7eb      	b.n	8007064 <__swhatbuf_r+0x24>

0800708c <__smakebuf_r>:
 800708c:	898b      	ldrh	r3, [r1, #12]
 800708e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007090:	079d      	lsls	r5, r3, #30
 8007092:	4606      	mov	r6, r0
 8007094:	460c      	mov	r4, r1
 8007096:	d507      	bpl.n	80070a8 <__smakebuf_r+0x1c>
 8007098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	2301      	movs	r3, #1
 80070a2:	6163      	str	r3, [r4, #20]
 80070a4:	b002      	add	sp, #8
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	ab01      	add	r3, sp, #4
 80070aa:	466a      	mov	r2, sp
 80070ac:	f7ff ffc8 	bl	8007040 <__swhatbuf_r>
 80070b0:	9900      	ldr	r1, [sp, #0]
 80070b2:	4605      	mov	r5, r0
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff f8bd 	bl	8006234 <_malloc_r>
 80070ba:	b948      	cbnz	r0, 80070d0 <__smakebuf_r+0x44>
 80070bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c0:	059a      	lsls	r2, r3, #22
 80070c2:	d4ef      	bmi.n	80070a4 <__smakebuf_r+0x18>
 80070c4:	f023 0303 	bic.w	r3, r3, #3
 80070c8:	f043 0302 	orr.w	r3, r3, #2
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	e7e3      	b.n	8007098 <__smakebuf_r+0xc>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	6020      	str	r0, [r4, #0]
 80070d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	6163      	str	r3, [r4, #20]
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	6120      	str	r0, [r4, #16]
 80070e2:	b15b      	cbz	r3, 80070fc <__smakebuf_r+0x70>
 80070e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 f81d 	bl	8007128 <_isatty_r>
 80070ee:	b128      	cbz	r0, 80070fc <__smakebuf_r+0x70>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	81a3      	strh	r3, [r4, #12]
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	431d      	orrs	r5, r3
 8007100:	81a5      	strh	r5, [r4, #12]
 8007102:	e7cf      	b.n	80070a4 <__smakebuf_r+0x18>

08007104 <_fstat_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	; (8007124 <_fstat_r+0x20>)
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	f7f9 fb4a 	bl	80007aa <_fstat>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d102      	bne.n	8007120 <_fstat_r+0x1c>
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	b103      	cbz	r3, 8007120 <_fstat_r+0x1c>
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	bd38      	pop	{r3, r4, r5, pc}
 8007122:	bf00      	nop
 8007124:	200093d8 	.word	0x200093d8

08007128 <_isatty_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	; (8007144 <_isatty_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7f9 fb49 	bl	80007ca <_isatty>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_isatty_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_isatty_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200093d8 	.word	0x200093d8

08007148 <_init>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	bf00      	nop
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr

08007154 <_fini>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr
